language: cs
name: HumanEval_160_do_algebra
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result *= op3;\n                        result
    *= op3;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <943cedb1f6ec45cc961a69639df189ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <943cedb1f6ec45cc961a69639df189ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792884
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0pgcntp9.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792996
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            long
    operand3 = operand[2];\n            long operand4 = operand[3];\n            long
    operand5 = operand[4];\n            long operand6 = operand[5];\n            long
    operand7 = operand[6];\n            long operand8 = operand[7];\n            long
    operand9 = operand[8];\n            long operand10 = operand[9];\n            long
    operand11 = operand[10];\n            long operand12 = operand[11];\n            long
    operand13 = operand[12];\n            long operand14 = operand[13];\n            long
    operand15 = operand[14];\n            long operand16 = operand[15];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand1;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0003d] in <d70bfd4fb0b84ff49b158b70a8e0d7d4>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <d70bfd4fb0b84ff49b158b70a8e0d7d4>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0003d] in <d70bfd4fb0b84ff49b158b70a8e0d7d4>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <d70bfd4fb0b84ff49b158b70a8e0d7d4>:0 \n"
  stdout: ''
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"-\":\n                    result -= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"*\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \               case \"//\":\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7fb51f4528174dffba8f4be3e8ea43c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7fb51f4528174dffba8f4be3e8ea43c5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00ebfe3105e54ca8bbb1060e7ef7c4aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00ebfe3105e54ca8bbb1060e7ef7c4aa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp489jici4.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1))\n                switch (op1) {\n                    case
    \"+\": result += op2; break;\n                    case \"-\": result -= op2; break;\n
    \                   case \"*\": result *= op2; break;\n                    case
    \"//\": result /= op2; break;\n                    case \"**\": result *= op2;
    result *= op2; break;\n                    default: throw new Exception(\"Invalid
    operator\");\n                }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3699cf7b40c4fb58242f04f80af0f06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b3699cf7b40c4fb58242f04f80af0f06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand.FirstOrDefault();\n            long oprValue2 = operand.Skip(1).FirstOrDefault();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += oprValue;\n                    break;\n                case \"-\":\n                    result
    -= oprValue;\n                    break;\n                case \"*\":\n                    result
    *= oprValue;\n                    break;\n                case \"//\":\n                    result
    /= oprValue;\n                    break;\n                case \"**\":\n                    result
    *= oprValue;\n                    break;\n                default:\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f52e7c0399f4d11ab5ed2c251d41497>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f52e7c0399f4d11ab5ed2c251d41497>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            result
    += operand[op.Length - 1];\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkyoq0hru.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae9cddc66089406e833b6d21b9446ef3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae9cddc66089406e833b6d21b9446ef3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a93a7986bfd442b9d0b23f499995cd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a93a7986bfd442b9d0b23f499995cd7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0e858d430934f389dc59bb5b2a73361>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0e858d430934f389dc59bb5b2a73361>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be02cbd1b456411c9d2002f3cca5def9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be02cbd1b456411c9d2002f3cca5def9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b9f32f6549843f0a1fb94d1cb55ab64>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b9f32f6549843f0a1fb94d1cb55ab64>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result **= op3;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsy3s8gt2.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand2 = operand.First();\n            long operand1 = operand.Skip(1).First();\n
    \           long result2 = operand2;\n            long result1 = operand1;\n            switch
    (opr) {\n                case \"+\":\n                    result2 = operand2 +
    operand1;\n                    break;\n                case \"-\":\n                    result2
    = operand2 - operand1;\n                    break;\n                case \"*\":\n
    \                   result2 = operand2 * operand1;\n                    break;\n
    \               case \"//\":\n                    result2 = operand2 // operand1;\n
    \                   break;\n                case \"**\":\n                    result2
    = operand2 **operand1;\n                    break;\n            }\n            result
    = result + result2;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplmb76je7.cs(45,39): error CS1002: ; expected

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"/\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"//\":\n
    \                   result /= operand1;\n                    break;\n                case
    \"**\":\n                    result *= operand1;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8d2139f68f74bf780ecd41902d614ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b8d2139f68f74bf780ecd41902d614ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand2;\n                    break;\n                default:\n                    throw
    new Exception(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzxtdkyx0.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    **= operand[0];\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprhpn1dya.cs(44,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp58kyeclz.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a695a462d604e40aeec47b17ce6e11a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a695a462d604e40aeec47b17ce6e11a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Operator
    not found.\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75b8ef607c82473f9f67e245c9345157>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75b8ef607c82473f9f67e245c9345157>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            long
    operand3 = operand[2];\n            long operand4 = operand[3];\n            long
    operand5 = operand[4];\n            long operand6 = operand[5];\n            long
    operand7 = operand[6];\n            long operand8 = operand[7];\n            long
    operand9 = operand[8];\n            long operand10 = operand[9];\n            long
    operand11 = operand[10];\n            long operand12 = operand[11];\n            long
    operand13 = operand[12];\n            long operand14 = operand[13];\n            long
    operand15 = operand[14];\n            long operand16 = operand[15];\n            long
    operand17 = operand[16];\n            long operand18 = operand[17];\n            long
    operand19 = operand[18];\n            long operand20 = operand[19];\n            long
    operand21 = operand[20];\n            long operand22 = operand[21];\n            long
    operand23 = operand[22];\n            long operand24 = operand[23];\n            long
    operand25 = operand[24];\n            long operand26 = operand[25];\n            long
    operand27 = operand[26];\n            long operand28 = operand[27];\n            long
    operand29 = operand[28];\n            long operand30 = operand[29];\n            long
    operand31 = operand[30];\n            long operand32 = operand[31];\n            long
    operand33 = operand[32];\n            long operand34 = operand[33];\n            long
    operand35 = operand[34];\n            long operand36 = operand[35];\n            long
    operand37 = operand[36];\n            long operand38 = operand[37];\n            long
    operand39 = operand[38];\n            long operand40 = operand[39];\n            long
    operand41 = operand[40];\n            long operand42 = operand[41];\n            long
    operand43 = operand[42];\n            long operand44 = operand[43];\n            long
    operand45 = operand[44];\n            long operand46 = operand[45];\n            long
    operand47 = operand[46];\n            long operand48 = operand[47];\n            long
    operand49 = operand[48];\n            long operand50 = operand[49];\n            long
    operand51 = operand[50];\n            long operand52 = operand[51];\n            long
    operand53 = operand[52];\n            \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk16gbpbd.cs(85,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpk16gbpbd.cs(91,2): error CS1513: } expected

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4d1172e339044a4a480731d8358f1a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4d1172e339044a4a480731d8358f1a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new ArgumentOutOfRangeException(\"Operator
    not found.\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f5d05cb328d4ebda76b5c6addb353f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9f5d05cb328d4ebda76b5c6addb353f3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand[0];\n                    break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ccf6aefbb6e043ab8b9f84c46ad20f9b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ccf6aefbb6e043ab8b9f84c46ad20f9b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            long
    op1 = Convert.ToInt64(operand[0]);\n            long op2 = Convert.ToInt64(operand[1]);\n
    \           switch (s) {\n                case \"+\":\n                    result
    += op1 + op2;\n                    break;\n                case \"-\":\n                    result
    -= op1 - op2;\n                    break;\n                case \"*\":\n                    result
    *= op1 * op2;\n                    break;\n                case \"//\":\n                    result
    /= op1 // op2;\n                    break;\n                case \"**\":\n                    result
    *= op1 ** op2;\n                    break;\n                default:\n                    throw
    new Exception(\"Invalid operator\");\n            }\n            operand.RemoveAt(0);\n
    \           operand.RemoveAt(0);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp76eg9ygq.cs(43,34): error CS1002: ; expected

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentOutOfRangeException();\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0jnko77e.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ktjuqdh.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"/\":\n                        result /= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee58c35891a14072aa78d3bb22bbab20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee58c35891a14072aa78d3bb22bbab20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new ArgumentException(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaf2cyubn.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c8bddce4894d17877357564f1a910a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c8bddce4894d17877357564f1a910a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprkb3yc28.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprkb3yc28.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result **= op3;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsy3s8gt2.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           long operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand1;\n                    break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a16e8b9456794da9a69f1687ab4ba9e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a16e8b9456794da9a69f1687ab4ba9e6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c8bddce4894d17877357564f1a910a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c8bddce4894d17877357564f1a910a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03953f6503f243a4820a44386a499159>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03953f6503f243a4820a44386a499159>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand[0];\n                    break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8256a9011e8f42bfb55f8d52220c91bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8256a9011e8f42bfb55f8d52220c91bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0pgcntp9.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792996
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result *= operand2;\n
    \                   break;\n                default:\n                    throw
    new Exception(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9818dda1bae42a0b8365e6e054302a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9818dda1bae42a0b8365e6e054302a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result *= operand2;\n
    \                   break;\n                default:\n                    throw
    new Exception(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9818dda1bae42a0b8365e6e054302a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9818dda1bae42a0b8365e6e054302a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            result
    += operand.FirstOrDefault(x => x.ToString() == op);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb5rjuzyh.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand.ElementAt(operand.Count - 1);\n            switch (opr) {\n
    \               case \"+\":\n                    result += oprValue;\n                    break;\n
    \               case \"-\":\n                    result -= oprValue;\n                    break;\n
    \               case \"*\":\n                    result *= oprValue;\n                    break;\n
    \               case \"//\":\n                    result /= oprValue;\n                    break;\n
    \               case \"**\":\n                    result *= oprValue;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + opr);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <866a7d1ec0074a37b61364b3fe1e93d6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <866a7d1ec0074a37b61364b3fe1e93d6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            long
    op2Value = operand.FirstOrDefault(x => x.ToString() == op2);\n            if (op2Value
    != 0) {\n                result += op2Value;\n                operand.Remove(op2Value);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cef73d4e9e104bb38e503fea397fd44b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cef73d4e9e104bb38e503fea397fd44b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result **= op3;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdz6xbyuw.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprkb3yc28.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8lq5pe42.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2fcc21ab18054add9c1383ccb985e2ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2fcc21ab18054add9c1383ccb985e2ae>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c8bddce4894d17877357564f1a910a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c8bddce4894d17877357564f1a910a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + s);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a0ce8177fcb425a92fc4f3a5719aa0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a0ce8177fcb425a92fc4f3a5719aa0c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c8bddce4894d17877357564f1a910a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c8bddce4894d17877357564f1a910a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cd70f6744e44971af9759a9ccf8c201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2cd70f6744e44971af9759a9ccf8c201>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + op);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1vt5rlb7.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand.FirstOrDefault(x => x == 0);\n            if (oprValue == 0)\n
    \               throw new ArgumentException(\"Operand list must contain at least
    one non-zero value.\");\n            long oprValueAsLong = Convert.ToInt64(oprValue);\n
    \           long oprValueAsLongAsLong = Convert.ToInt64(oprValueAsLong);\n            long
    oprValueAsLongAsLongAsLong = Convert.ToInt64(oprValueAsLongAsLong);\n            long
    oprValueAsLongAsLongAsLongAsLong = Convert.ToInt64(oprValueAsLongAsLongAsLong);\n
    \           long oprValueAsLongAsLongAsLongAsLongAsLong = Convert.ToInt64(oprValueAsLongAsLongAsLongAsLongAsLong);\n
    \           long oprValueAsLongAsLongAsLongAsLongAsLongAsLong = Convert.ToInt64(oprValueAsLongAsLongAsLongAsLongAsLongAsLong);\n
    \           long oprValueAsLongAsLongAsLongAsLongAsLongAsLongAsLong = Convert.ToInt64(oprValueAsLongAsLongAsLongAsLongAsLongAsLongAsLong);\n
    \           long oprValueAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLong = Convert.ToInt64(oprValueAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLong);\n
    \           long oprValueAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLong
    = Convert.ToInt64(oprValueAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLong);\n
    \           long oprValueAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLong
    = Convert.ToInt64(oprValueAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLong);\n
    \           long oprValueAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLong
    = Convert.ToInt64(oprValueAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLong);\n
    \           long oprValueAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLongAsLong
    = Convert.ToInt64(opr\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1d1n67za.cs(44,114): error CS1026: ) expected

    /tmp/tmp1d1n67za.cs(44,114): error CS1002: ; expected

    /tmp/tmp1d1n67za.cs(46,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp1d1n67za.cs(52,2): error CS1513: } expected

    '
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + op);\n            }\n            operand[0] = operand1;\n            operand[1]
    = operand2;\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpco1ru60r.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           long operand1 = operand[0];\n            long operand2 = operand[1];\n
    \           long operand3 = operand[2];\n            long operand4 = operand[3];\n
    \           long operand5 = operand[4];\n            long operand6 = operand[5];\n
    \           long operand7 = operand[6];\n            long operand8 = operand[7];\n
    \           long operand9 = operand[8];\n            long operand10 = operand[9];\n
    \           long operand11 = operand[10];\n            long operand12 = operand[11];\n
    \           long operand13 = operand[12];\n            long operand14 = operand[13];\n
    \           long operand15 = operand[14];\n            long operand16 = operand[15];\n
    \           long operand17 = operand[16];\n            long operand18 = operand[17];\n
    \           long operand19 = operand[18];\n            long operand20 = operand[19];\n
    \           long operand21 = operand[20];\n            long operand22 = operand[21];\n
    \           long operand23 = operand[22];\n            long operand24 = operand[23];\n
    \           long operand25 = operand[24];\n            long operand26 = operand[25];\n
    \           long operand27 = operand[26];\n            long operand28 = operand[27];\n
    \           long operand29 = operand[28];\n            long operand30 = operand[29];\n
    \           long operand31 = operand[30];\n            long operand32 = operand[31];\n
    \           long operand33 = operand[32];\n            long operand34 = operand[33];\n
    \           long operand35 = operand[34];\n            long operand36 = operand[35];\n
    \           long operand37 = operand[36];\n            long operand38 = operand[37];\n
    \           long operand39 = operand[38];\n            long operand40 = operand[39];\n
    \           long operand41 = operand[40];\n            long operand42 = operand[41];\n
    \           long operand43 = operand[42];\n            long operand44 = operand[43];\n
    \           long operand45 = operand[44];\n            long operand46 = operand[45];\n
    \           long operand47 = operand[46];\n            long operand48 = operand[47];\n
    \           long operand49 = operand[48];\n            long operand50 = operand[49];\n
    \           long operand51 = operand[50];\n            long operand52 = operand[51];\n
    \           long operand53 = operand[52];\n            \n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyoahl7bt.cs(85,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpyoahl7bt.cs(91,2): error CS1513: } expected

    '
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            result
    += operand[op.Length - 1];\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkyoq0hru.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0e858d430934f389dc59bb5b2a73361>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0e858d430934f389dc59bb5b2a73361>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           foreach (long op in operand) {\n                switch (oper) {\n
    \                   case \"+\":\n                        result += op;\n                        break;\n
    \                   case \"-\":\n                        result -= op;\n                        break;\n
    \                   case \"*\":\n                        result *= op;\n                        break;\n
    \                   case \"//\":\n                        result /= op;\n                        break;\n
    \                   case \"**\":\n                        result *= op;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn1yi3cub.cs(30,27): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be02cbd1b456411c9d2002f3cca5def9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be02cbd1b456411c9d2002f3cca5def9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprkb3yc28.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + op);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp0s875js.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand[0];\n                    break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Operator
    not found.\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <001e4990ce3a4b0fa5dab1311a00630a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <001e4990ce3a4b0fa5dab1311a00630a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1;\n
    \                   result += operand2;\n                    break;\n                case
    \"-\":\n                    result -= operand1;\n                    result -=
    operand2;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1;\n                    result
    /= operand2;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a099770311984e13bb218f5beeece96f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a099770311984e13bb218f5beeece96f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprkb3yc28.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c8bddce4894d17877357564f1a910a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c8bddce4894d17877357564f1a910a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cea92763773b49a8bcbf51ad95884a01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cea92763773b49a8bcbf51ad95884a01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ghy6pbw.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long oprInt in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        oprVal += oprInt;\n
    \                       break;\n                    case \"-\":\n                        oprVal
    -= oprInt;\n                        break;\n                    case \"*\":\n
    \                       oprVal *= oprInt;\n                        break;\n                    case
    \"//\":\n                        oprVal /= oprInt;\n                        break;\n
    \                   case \"**\":\n                        oprVal **= oprInt;\n
    \                       break;\n                }\n            }\n            result
    += oprVal;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphf9y5xh5.cs(46,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae9cddc66089406e833b6d21b9446ef3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae9cddc66089406e833b6d21b9446ef3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792997
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result *= operand2;\n
    \                   break;\n                default:\n                    throw
    new Exception(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9818dda1bae42a0b8365e6e054302a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9818dda1bae42a0b8365e6e054302a7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cea92763773b49a8bcbf51ad95884a01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cea92763773b49a8bcbf51ad95884a01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <679a421ab9bb4944b88af8e2a694e1bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <679a421ab9bb4944b88af8e2a694e1bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp58kyeclz.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1))\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxvoaq6lq.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result *= op3;\n                        result
    *= op3;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <936256d2a0ae4bc1881669c9f9825bf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <936256d2a0ae4bc1881669c9f9825bf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ktjuqdh.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1593596bf9a1432b9eb2a4101a2c1613>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1593596bf9a1432b9eb2a4101a2c1613>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + op);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1vt5rlb7.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ktjuqdh.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"/\":\n                    result
    /= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c3653ea411343c4a92e7b2153716871>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c3653ea411343c4a92e7b2153716871>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new ArgumentException(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaf2cyubn.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"-\":\n                    result -= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"*\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \               case \"//\":\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"**\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    result
    /= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d42336fdcb184859923f0568a657266a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d42336fdcb184859923f0568a657266a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"-\":\n                    result -= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"*\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \               case \"//\":\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"**\":\n                    result
    **= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph5t7xuvm.cs(48,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string oper in op) {\n
    \           switch (oper) {\n                case \"+\":\n                    result
    += operand[0];\n                    break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8256a9011e8f42bfb55f8d52220c91bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8256a9011e8f42bfb55f8d52220c91bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long op in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        oprVal += op;\n
    \                       break;\n                    case \"-\":\n                        oprVal
    -= op;\n                        break;\n                    case \"*\":\n                        oprVal
    *= op;\n                        break;\n                    case \"//\":\n                        oprVal
    /= op;\n                        break;\n                    case \"**\":\n                        oprVal
    **= op;\n                        break;\n                }\n            }\n            result
    += oprVal;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsd65ih5v.cs(46,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result /= operand2;\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator:
    \" + op);\n            }\n            operand[0] = result;\n            operand[1]
    = result;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqujmpk3t.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    temp = 0;\n            foreach (long op in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        temp += op;\n
    \                       break;\n                    case \"-\":\n                        temp
    -= op;\n                        break;\n                    case \"*\":\n                        temp
    *= op;\n                        break;\n                    case \"//\":\n                        temp
    /= op;\n                        break;\n                    case \"**\":\n                        temp
    **= op;\n                        break;\n                }\n            }\n            result
    += temp;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa35do2kv.cs(46,31): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            switch
    (op2) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53a83ca642674c958a1e9561c1ae3612>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53a83ca642674c958a1e9561c1ae3612>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + op);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ctbm2ro.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result = operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    = operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result = operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result = operand1 // operand2;\n
    \                   break;\n                case \"**\":\n                    result
    = operand1 ** operand2;\n                    break;\n            }\n            operand[0]
    = result;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpghyybtv6.cs(43,38): error CS1002: ; expected

    '
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c0f8c24f104438bde5c24237575126>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e3c0f8c24f104438bde5c24237575126>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           long operand3 = operand.Skip(2).First();\n            switch (op)
    {\n                case \"+\":\n                    result += operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw41bxo8y.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long op in operand) {\n                oprVal
    += op;\n            }\n            switch (opr) {\n                case \"+\":\n
    \                   result += oprVal;\n                    break;\n                case
    \"-\":\n                    result -= oprVal;\n                    break;\n                case
    \"*\":\n                    result *= oprVal;\n                    break;\n                case
    \"//\":\n                    result /= oprVal;\n                    break;\n                case
    \"**\":\n                    result **= oprVal;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0sk67s1m.cs(48,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentOutOfRangeException(\"Operator
    not found.\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1d6f62d61c7446b977726d6db065eb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b1d6f62d61c7446b977726d6db065eb0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   result += operand2;\n                    break;\n                case
    \"-\":\n                    result -= operand1;\n                    result -=
    operand2;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1;\n                    result
    /= operand2;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr13zjztp.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand.FirstOrDefault(x => x == 0);\n            if (oprValue == 0)
    {\n                throw new Exception(\"Invalid operand\");\n            }\n
    \           long oprValueAsLong = Convert.ToInt64(oprValue);\n            switch
    (opr) {\n                case \"+\":\n                    result += oprValueAsLong;\n
    \                   break;\n                case \"-\":\n                    result
    -= oprValueAsLong;\n                    break;\n                case \"*\":\n
    \                   result *= oprValueAsLong;\n                    break;\n                case
    \"//\":\n                    result /= oprValueAsLong;\n                    break;\n
    \               case \"**\":\n                    result *= oprValueAsLong;\n
    \                   break;\n                default:\n                    throw
    new Exception(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.Exception: Invalid operand\n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0004c] in <743a690665114ce9b5b7dd9a950836a7>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <743a690665114ce9b5b7dd9a950836a7>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.Exception: Invalid operand\n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0004c] in <743a690665114ce9b5b7dd9a950836a7>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <743a690665114ce9b5b7dd9a950836a7>:0 \n"
  stdout: ''
  timestamp: 1659821018
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b9f32f6549843f0a1fb94d1cb55ab64>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b9f32f6549843f0a1fb94d1cb55ab64>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand2 = operand.Last();\n            switch (opr) {\n                case \"+\":\n
    \                   result += operand2;\n                    break;\n                case
    \"-\":\n                    result -= operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand2;\n                    break;\n
    \               case \"**\":\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n            operand.RemoveAt(operand.Count - 1);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2838de54abbb4e12ba338873d5a6d628>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2838de54abbb4e12ba338873d5a6d628>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = Convert.ToInt64(opr);\n            long oprValue2 = Convert.ToInt64(oprValue);\n
    \           foreach (long opr2 in operand.Skip(1)) {\n                long opr2Value
    = Convert.ToInt64(opr2);\n                long opr2Value2 = Convert.ToInt64(opr2Value);\n
    \               switch (opr) {\n                    case \"+\":\n                        result
    += oprValue2 + opr2Value2;\n                        break;\n                    case
    \"-\":\n                        result -= oprValue2 - opr2Value2;\n                        break;\n
    \                   case \"*\":\n                        result *= oprValue2 *
    opr2Value2;\n                        break;\n                    case \"//\":\n
    \                       result /= oprValue2 % opr2Value2;\n                        break;\n
    \                   case \"**\":\n                        result **= oprValue2
    % opr2Value2;\n                        break;\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa4dy8qsn.cs(49,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long op in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        oprVal += op;\n
    \                       break;\n                    case \"-\":\n                        oprVal
    -= op;\n                        break;\n                    case \"*\":\n                        oprVal
    *= op;\n                        break;\n                    case \"//\":\n                        oprVal
    /= op;\n                        break;\n                    case \"**\":\n                        oprVal
    **= op;\n                        break;\n                }\n            }\n            result
    += oprVal;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsd65ih5v.cs(46,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71089a07e42c4a9ebf99051fabd5f757>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71089a07e42c4a9ebf99051fabd5f757>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae9cddc66089406e833b6d21b9446ef3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ae9cddc66089406e833b6d21b9446ef3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792997
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long oprInt in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        oprVal += oprInt;\n
    \                       break;\n                    case \"-\":\n                        oprVal
    -= oprInt;\n                        break;\n                    case \"*\":\n
    \                       oprVal *= oprInt;\n                        break;\n                    case
    \"//\":\n                        oprVal /= oprInt;\n                        break;\n
    \                   case \"**\":\n                        oprVal **= oprInt;\n
    \                       break;\n                }\n            }\n            result
    += oprVal;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphf9y5xh5.cs(46,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eccc7569448e4b9abb43e7c583ff0840>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ktjuqdh.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"/\":\n                    result
    /= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsw7kzz_x.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiz1mif8d.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiz1mif8d.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9rfduyv4.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           long operand3 = operand.Skip(2).First();\n            switch (op)
    {\n                case \"+\":\n                    result += operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"/\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpga6giy7e.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821018
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result *= op3;\n                        result
    *= op3;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <936256d2a0ae4bc1881669c9f9825bf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <936256d2a0ae4bc1881669c9f9825bf6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_z1aiq86.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           long operand3 = operand.Skip(2).First();\n            long operand4
    = operand.Skip(3).First();\n            long operand5 = operand.Skip(4).First();\n
    \           long operand6 = operand.Skip(5).First();\n            long operand7
    = operand.Skip(6).First();\n            long operand8 = operand.Skip(7).First();\n
    \           long operand9 = operand.Skip(8).First();\n            long operand10
    = operand.Skip(9).First();\n            long operand11 = operand.Skip(10).First();\n
    \           long operand12 = operand.Skip(11).First();\n            long operand13
    = operand.Skip(12).First();\n            long operand14 = operand.Skip(13).First();\n
    \           long operand15 = operand.Skip(14).First();\n            long operand16
    = operand.Skip(15).First();\n            long operand17 = operand.Skip(16).First();\n
    \           long operand18 = operand.Skip(17).First();\n            long operand19
    = operand.Skip(18).First();\n            long operand20 = operand.Skip(19).First();\n
    \           long operand21 = operand.Skip(20).First();\n            long operand22
    = operand.Skip(21).First();\n            long operand23 = operand.Skip(22).First();\n
    \           long operand24 = operand.Skip(23).First();\n            long operand25
    = operand.Skip(24).First();\n            long operand26 = operand.Skip(25).First();\n
    \           long operand27 = operand.Skip(26).First();\n            long operand28
    = operand.Skip(27).First();\n            long operand29 = operand.Skip(28).First();\n
    \           long operand30 = operand.Skip(29).First();\n            long operand31
    = operand.Skip(30).First();\n            long operand32 = operand.Skip(31).First();\n
    \           long operand33 = operand.Skip(32).First();\n            long operand34
    = operand.Skip(33).First();\n            long operand35 = operand.Skip(34).First();\n
    \           long operand36 = operand.Skip(35).First();\n            long operand37
    = operand.Skip(36).First();\n            long \n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2rzx_5ch.cs(67,17): error CS1001: Identifier expected

    /tmp/tmp2rzx_5ch.cs(67,17): error CS1002: ; expected

    /tmp/tmp2rzx_5ch.cs(69,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp2rzx_5ch.cs(75,2): error CS1513: } expected

    '
  timestamp: 1659821018
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result *= op3;\n                        result
    *= op3;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <943cedb1f6ec45cc961a69639df189ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <943cedb1f6ec45cc961a69639df189ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792884
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand.ElementAt(operand.Count - 1);\n            long oprValue2 =
    operand.ElementAt(operand.Count - 2);\n            switch (opr) {\n                case
    \"+\":\n                    result += oprValue;\n                    break;\n
    \               case \"-\":\n                    result -= oprValue;\n                    break;\n
    \               case \"*\":\n                    result *= oprValue;\n                    break;\n
    \               case \"//\":\n                    result /= oprValue;\n                    break;\n
    \               case \"**\":\n                    result *= oprValue;\n                    result
    *= oprValue2;\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa6375a8bc794934822fd9a00234749b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fa6375a8bc794934822fd9a00234749b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4d1172e339044a4a480731d8358f1a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4d1172e339044a4a480731d8358f1a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1 +
    operand2;\n                    break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"**\":\n                    result
    *= operand1;\n                    result /= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea53ba1e77d745e9a10d9bdc0c8e35ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea53ba1e77d745e9a10d9bdc0c8e35ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result *= operand2;\n
    \                   break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e993a9f3376541b1b044cda9b11f24cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e993a9f3376541b1b044cda9b11f24cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cea92763773b49a8bcbf51ad95884a01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cea92763773b49a8bcbf51ad95884a01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <679a421ab9bb4944b88af8e2a694e1bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <679a421ab9bb4944b88af8e2a694e1bb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a695a462d604e40aeec47b17ce6e11a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0a695a462d604e40aeec47b17ce6e11a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1548c712b02b401cbe85e45b25ed93ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1548c712b02b401cbe85e45b25ed93ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long op in operand) {\n                oprVal
    += op;\n            }\n            switch (opr) {\n                case \"+\":\n
    \                   result += oprVal;\n                    break;\n                case
    \"-\":\n                    result -= oprVal;\n                    break;\n                case
    \"*\":\n                    result *= oprVal;\n                    break;\n                case
    \"//\":\n                    result /= oprVal;\n                    break;\n                case
    \"**\":\n                    result *= oprVal;\n                    break;\n                default:\n
    \                   throw new Exception(\"Invalid operator\");\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5qo3sa6r.cs(31,27): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n            operand[0] = operand2;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d3734186299402baf6e53f87deb1cbf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d3734186299402baf6e53f87deb1cbf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1))\n                result += op1 == op2 ? 1 : 0;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7r8dekhe.cs(31,27): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''long''

    '
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8lq5pe42.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            result
    += operand[op.Length - 1];\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkyoq0hru.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long oprVal2 in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        oprVal += oprVal2;\n
    \                       break;\n                    case \"-\":\n                        oprVal
    -= oprVal2;\n                        break;\n                    case \"*\":\n
    \                       oprVal *= oprVal2;\n                        break;\n                    case
    \"//\":\n                        oprVal /= oprVal2;\n                        break;\n
    \                   case \"**\":\n                        oprVal **= oprVal2;\n
    \                       break;\n                }\n            }\n            result
    += oprVal;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpksn64zoo.cs(46,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821018
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Operator
    not recognized.\");\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8577388e266d4102b357da9625bec55a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8577388e266d4102b357da9625bec55a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821019
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpggsjxc8j.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821016
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4d1172e339044a4a480731d8358f1a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4d1172e339044a4a480731d8358f1a0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6353c6e3511c4a04965bcf9f382c82dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6353c6e3511c4a04965bcf9f382c82dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821019
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef5bfca3a82c446d9b93ceb1cecdb6c0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792882
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result = operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    = operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result = operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result = operand1 // operand2;\n
    \                   break;\n                case \"**\":\n                    result
    = operand1 ** operand2;\n                    break;\n                default:\n
    \                   throw new ArgumentException(\"Invalid operator\");\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi6vibq7v.cs(43,38): error CS1002: ; expected

    '
  timestamp: 1659821018
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    temp = 0;\n            foreach (long i in operand) {\n                switch (opr)
    {\n                    case \"+\":\n                        temp += i;\n                        break;\n
    \                   case \"-\":\n                        temp -= i;\n                        break;\n
    \                   case \"*\":\n                        temp *= i;\n                        break;\n
    \                   case \"//\":\n                        temp /= i;\n                        break;\n
    \                   case \"**\":\n                        temp **= i;\n                        break;\n
    \               }\n            }\n            result += temp;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxdp76m94.cs(46,31): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821018
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4d259023d124fb09e46271a3f7482c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a4d259023d124fb09e46271a3f7482c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821019
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"/\":\n                        result /= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee58c35891a14072aa78d3bb22bbab20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ee58c35891a14072aa78d3bb22bbab20>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821017
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + op);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ctbm2ro.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659821018
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result *= op3;\n                        result
    *= op3;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <943cedb1f6ec45cc961a69639df189ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <943cedb1f6ec45cc961a69639df189ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792884
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71089a07e42c4a9ebf99051fabd5f757>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71089a07e42c4a9ebf99051fabd5f757>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821018
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1)) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <255bc5d6654a414493fb98d27ab2d019>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <255bc5d6654a414493fb98d27ab2d019>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659821019
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    **= operand[0];\n                    break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ea91spl.cs(44,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659821018
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //
    => result = 9\n    // Note:\n    // The length of operator list is equal to the
    length of operand list minus one.\n    // Operand is a list of of non-negative
    integers.\n    // Operator list has at least one operator, and operand list has
    at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>
    operand) {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ff53d576747b4423a974e15d695fecfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792883
