name: HumanEval_58_common
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique common elements for two lists.\n    //\
  \ >>> Common((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L,\
  \ (long)653L, (long)2L, (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L,\
  \ (long)1L, (long)5L, (long)9L, (long)653L, (long)121L})))\n    // (new List<long>(new\
  \ long[]{(long)1L, (long)5L, (long)653L}))\n    // >>> Common((new List<long>(new\
  \ long[]{(long)5L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L})))\n    // (new List<long>(new long[]{(long)2L, (long)3L}))\n    public\
  \ static List<long> Common(List<long> l1, List<long> l2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Common((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L,\
  \ (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L,\
  \ (long)9L, (long)653L, (long)121L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L,\
  \ (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new\
  \ long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,\
  \ (long)8L})), (new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        foreach (long\
    \ i in l1) {\n            bool found = false;\n            foreach (long j in\
    \ l2) {\n                if (i == j) found = true;\n            }\n          \
    \  if (!found) result.Add(i);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            bool\
    \ found = false;\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    found = true;\n                    break;\n   \
    \             }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long i in l1) {\n\
    \            if (l2.Contains(i)) {\n                max = Math.Max(max, i);\n\
    \            }\n        }\n        foreach (long i in l2) {\n            if (l1.Contains(i))\
    \ {\n                max = Math.Max(max, i);\n            }\n        }\n     \
    \   foreach (long i in l1) {\n            if (l2.Contains(i)) {\n            \
    \    result.Add(i);\n            }\n        }\n        foreach (long i in l2)\
    \ {\n            if (l1.Contains(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result.OrderBy(i => i).ToList();", "    \
    \    List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long max = 0;\n        foreach (long i in l1) {\n            if (l2.Contains(i))\
    \ {\n                result.Add(i);\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        if (l1 == null || l2 == null || l1.Count != l2.Count) return null;\n  \
    \      List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) found = true;\n            }\n            if (!found)\
    \ result.Add(x);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    result.Add(x);\n                \
    \    break;\n                }\n            }\n        }\n        return result;",
  "        if (l1 == null || l2 == null || l1.Count != l2.Count) return null;\n  \
    \      List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long x in l1) {\n            if (l2.Contains(x)) {\n                result.Add(x);\n\
    \                max = Math.Max(max, x);\n            }\n        }\n        foreach\
    \ (long x in l2) {\n            if (!l1.Contains(x)) {\n                result.Add(x);\n\
    \                max = Math.Max(max, x);\n            }\n        }\n        if\
    \ (result.Count == 0) return null;\n        if (result.Count > max) return null;\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in l1) {\n            foreach (long j in l2) {\n       \
    \         if (i == j) result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        foreach (long i in l1) {\n            if (l2.Contains(i)) {\n  \
    \              max = Math.Max(max, i);\n            }\n        }\n        foreach\
    \ (long i in l2) {\n            if (l1.Contains(i)) {\n                max = Math.Max(max,\
    \ i);\n            }\n        }\n        foreach (long i in l1) {\n          \
    \  if (l2.Contains(i)) {\n                result.Add(i);\n            }\n    \
    \    }\n        foreach (long i in l2) {\n            if (l1.Contains(i)) {\n\
    \                result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long minValue = l1.Min();\n\
    \        long maxValue = l1.Max();\n        long minValue2 = l2.Min();\n     \
    \   long maxValue2 = l2.Max();\n        long minValue3 = l1.Min();\n        long\
    \ maxValue3 = l1.Max();\n        long minValue4 = l2.Min();\n        long maxValue4\
    \ = l2.Max();\n        long minValue5 = l1.Min();\n        long maxValue5 = l1.Max();\n\
    \        long minValue6 = l2.Min();\n        long maxValue6 = l2.Max();\n    \
    \    long minValue7 = l1.Min();\n        long maxValue7 = l1.Max();\n        long\
    \ minValue8 = l2.Min();\n        long maxValue8 = l2.Max();\n        long minValue9\
    \ = l1.Min();\n        long maxValue9 = l1.Max();\n        long minValue10 = l2.Min();\n\
    \        long maxValue10 = l2.Max();\n        long minValue11 = l1.Min();\n  \
    \      long maxValue11 = l1.Max();\n        long minValue12 = l2.Min();\n    \
    \    long maxValue12 = l2.Max();\n        long minValue13 = l1.Min();\n      \
    \  long maxValue13 = l1.Max();\n        long minValue14 = l2.Min();\n        long\
    \ maxValue14 = l2.Max();\n        long minValue15 = l1.Min();\n        long maxValue15\
    \ = l1.Max();\n        long minValue16 = l2.Min();\n        long maxValue16 =\
    \ l2.Max();\n        long minValue17 = l1.Min();\n        long maxValue17 = l1.Max();\n\
    \        long minValue18 = l2.Min();\n        long maxValue18 = l2.Max();\n  \
    \      long minValue19 = l1.Min();\n        long maxValue19 = l1.Max();\n    \
    \    long minValue20 = l2.Min();\n        long maxValue20 = l2.Max();\n      \
    \  long minValue21 = l1.Min();\n        long maxValue21 = l1.Max();\n        long\
    \ minValue22 = l2.Min();\n        long maxValue22 = l2.Max();\n        long minValue23\
    \ = l1.Min();\n        long maxValue23 = l1.Max();\n        long minValue24 =\
    \ l2.Min();\n        long maxValue24 = l2.Max();\n", "        var result = new\
    \ List<long>();\n        foreach (var item in l1) {\n            if (l2.Contains(item))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    result.Add(x);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    result.Add(x);\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long x in l1) {\n\
    \            if (l2.Contains(x)) {\n                result.Add(x);\n         \
    \       max = Math.Max(max, x);\n            }\n        }\n        foreach (long\
    \ x in l2) {\n            if (!l1.Contains(x)) {\n                result.Add(x);\n\
    \                max = Math.Max(max, x);\n            }\n        }\n        if\
    \ (result.Count > 0) {\n            long min = result.Min();\n            long\
    \ max = result.Max();\n            while (min < max) {\n                result.Remove(min);\n\
    \                min = result.Min();\n                max = result.Max();\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    result.Add(x);\n                \
    \    break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        foreach (var item in l1) {\n  \
    \          if (l2.Contains(item)) {\n                result.Add(item);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long x in l1) {\n            bool found = false;\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             found = true;\n                    break;\n                }\n \
    \           }\n            if (!found) {\n                result.Add(x);\n   \
    \         }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        foreach (long x in l1) {\n            if (l2.Contains(x))\
    \ {\n                result.Add(x);\n                max = Math.Max(max, x);\n\
    \            }\n        }\n        foreach (long x in l2) {\n            if (!l1.Contains(x))\
    \ {\n                result.Add(x);\n                max = Math.Max(max, x);\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y)\n     \
    \               result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long i in l1) {\n            if (l2.Contains(i)) {\n                result.Add(i);\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n        }\n        return result.OrderBy(x => x).ToList();", "      \
    \  List<long> result = new List<long>();\n        long common = 0;\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    common++;\n                    break;\n       \
    \         }\n            }\n            if (common > 0) {\n                result.Add(x);\n\
    \                common = 0;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        if (l1 == null || l2 == null)\n           \
    \ return null;\n        List<long> result = new List<long>();\n        long max1\
    \ = l1.Max();\n        long min1 = l1.Min();\n        long max2 = l2.Max();\n\
    \        long min2 = l2.Min();\n        long maxDiff = max1 - max2;\n        long\
    \ minDiff = min1 - min2;\n        if (maxDiff == minDiff)\n            return\
    \ result;\n        if (maxDiff > minDiff)\n            result.AddRange(l1.Where(x\
    \ => l2.Contains(x - maxDiff)).OrderBy(x => x).ToList());\n        else\n    \
    \        result.AddRange(l2.Where(x => l1.Contains(x - minDiff)).OrderBy(x =>\
    \ x).ToList());\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        if (l1 == null || l2 == null || l1.Count != l2.Count) return null;\n  \
    \      List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) found = true;\n            }\n            if (!found)\
    \ result.Add(x);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long minL1 = l1.Min();\n        long maxL1 = l1.Max();\n\
    \        long minL2 = l2.Min();\n        long maxL2 = l2.Max();\n        long\
    \ minDiff = maxL1 - minL2;\n        long maxDiff = maxL2 - minL1;\n        long\
    \ minSum = minL1 + minL2;\n        long maxSum = maxL1 + maxL2;\n        long\
    \ sumDiff = maxSum - minSum;\n        long sumDiff2 = maxSum - minDiff;\n    \
    \    long sumDiff3 = maxSum - maxDiff;\n        if (sumDiff == 0) {\n        \
    \    result.AddRange(l1);\n            result.AddRange(l2);\n            return\
    \ result;\n        }\n        if (sumDiff2 == 0) {\n            result.AddRange(l1);\n\
    \            result.AddRange(l2);\n            return result;\n        }\n   \
    \     if (sumDiff3 == 0) {\n            result.AddRange(l1);\n            result.AddRange(l2);\n\
    \            return result;\n        }\n        if (sumDiff == sumDiff2) {\n \
    \           if (sumDiff == sumDiff3) {\n                result.AddRange(l1);\n\
    \                result.AddRange(l2);\n                return result;\n      \
    \      }\n            long mid1 = minL1 + (maxL1 - minL1) >> 1;\n            long\
    \ mid2 = minL2 + (maxL2 - minL2) >> 1;\n            long midSum = mid1 + mid2;\n\
    \            long midDiff = midSum - minSum;\n            long midSum2 = midSum\
    \ - midDiff;\n            long midSum3 = midSum - maxDiff;\n            if (midDiff\
    \ == 0) {\n                result.AddRange(l1);\n                result.AddRange(l2);\n\
    \                return result;\n            }\n            if (midSum2 == 0)\
    \ {\n                result.AddRange(l1);\n                result.AddRange(l2);\n\
    \                return result;\n            }\n            if (midSum3 == 0)\
    \ {\n                result.AddRange(l1);\n                result.AddRange(l2);\n\
    \                return result;\n            }\n            if (midDiff == midSum2)\
    \ {\n                if (midDiff == midSum3) {\n                    result.AddRange(l1);\n\
    \                    result.AddRange(l2);\n                    return result;\n\
    \                }\n                long midSum4 = midSum3 + (maxSum - midSum3)\
    \ >> 1;\n                long midSum5 = midSum2 + (maxSum - midSum2) >> 1;\n \
    \               long midSum6 = midSum4 + (maxSum - midSum4) >> 1;\n          \
    \      long midSum7 = midSum5 + (maxSum - midSum5) >> 1;\n                long\
    \ midSum8 = midSum", "        List<long> result = new List<long>();\n        long\
    \ max1 = l1.Max();\n        long min1 = l1.Min();\n        long max2 = l2.Max();\n\
    \        long min2 = l2.Min();\n        long maxDiff = max1 - max2;\n        long\
    \ minDiff = min1 - min2;\n        if (maxDiff != minDiff) {\n            long\
    \ mid1 = (max1 + min1) / 2;\n            long mid2 = (max2 + min2) / 2;\n    \
    \        long midDiff = mid1 - mid2;\n            if (midDiff > maxDiff) {\n \
    \               result.AddRange(Common(l1, new List<long>() { mid1 }));\n    \
    \            result.AddRange(Common(l2, new List<long>() { mid2 }));\n       \
    \     } else if (midDiff < minDiff) {\n                result.AddRange(Common(new\
    \ List<long>() { mid1 }, l2));\n                result.AddRange(Common(new List<long>()\
    \ { mid2 }, l1));\n            } else {\n                result.AddRange(Common(l1,\
    \ new List<long>() { mid1 }));\n                result.AddRange(Common(l2, new\
    \ List<long>() { mid2 }));\n            }\n        } else {\n            long\
    \ mid1 = (max1 + min1) / 2;\n            long mid2 = max2;\n            long midDiff\
    \ = mid1 - mid2;\n            if (midDiff > maxDiff) {\n                result.AddRange(Common(l1,\
    \ new List<long>() { mid1 }));\n                result.AddRange(Common(l2, new\
    \ List<long>() { mid2 }));\n            } else if (midDiff < minDiff) {\n    \
    \            result.AddRange(Common(new List<long>() { mid1 }, l2));\n       \
    \         result.AddRange(Common(new List<long>() { mid2 }, l1));\n          \
    \  } else {\n                result.AddRange(Common(l1, new List<long>() { mid1\
    \ }));\n                result.AddRange(Common(l2, new List<long>() { mid2 }));\n\
    \            }\n        }\n        return result;", "        if (l1 == null ||\
    \ l2 == null || l1.Count != l2.Count) return null;\n        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ found = true;\n            }\n            if (!found) result.Add(x);\n     \
    \   }\n        return result;", "        if (l1 == null || l2 == null || l1.Count\
    \ != l2.Count) return null;\n        List<long> result = new List<long>();\n \
    \       long max = 0;\n        foreach (long i in l1) {\n            if (l2.Contains(i))\
    \ {\n                result.Add(i);\n                max = Math.Max(max, i);\n\
    \            }\n        }\n        foreach (long i in l2) {\n            if (!l1.Contains(i))\
    \ {\n                result.Add(i);\n                max = Math.Max(max, i);\n\
    \            }\n        }\n        if (result.Count == 0) return null;\n     \
    \   if (result.Count > max) return null;\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            bool\
    \ found = false;\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    found = true;\n                    break;\n   \
    \             }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            bool found\
    \ = false;\n            foreach (long j in l2) {\n                if (i == j)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var item in l1) {\n            if (l2.Contains(item))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l1) {\n            bool found = false;\n            foreach (long j in\
    \ l2) {\n                if (i == j) {\n                    found = true;\n  \
    \                  break;\n                }\n            }\n            if (!found)\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            bool found = false;\n            foreach (long y in\
    \ l2) {\n                if (x == y) {\n                    found = true;\n  \
    \                  break;\n                }\n            }\n            if (!found)\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            bool found = false;\n            foreach (long y in\
    \ l2) {\n                if (x == y) {\n                    found = true;\n  \
    \                  break;\n                }\n            }\n            if (!found)\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    result.Add(x);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long maxValue = l1.Max();\n        long\
    \ minValue = l2.Min();\n        long maxValue2 = l2.Max();\n        long minValue2\
    \ = l1.Min();\n        long maxValue3 = l1.Max();\n        long minValue3 = l2.Min();\n\
    \        long maxValue4 = l1.Max();\n        long minValue4 = l2.Min();\n    \
    \    long maxValue5 = l1.Max();\n        long minValue5 = l2.Min();\n        long\
    \ maxValue6 = l1.Max();\n        long minValue6 = l2.Min();\n        long maxValue7\
    \ = l1.Max();\n        long minValue7 = l2.Min();\n        long maxValue8 = l1.Max();\n\
    \        long minValue8 = l2.Min();\n        long maxValue9 = l1.Max();\n    \
    \    long minValue9 = l2.Min();\n        long maxValue10 = l1.Max();\n       \
    \ long minValue10 = l2.Min();\n        long maxValue11 = l1.Max();\n        long\
    \ minValue11 = l2.Min();\n        long maxValue12 = l1.Max();\n        long minValue12\
    \ = l2.Min();\n        long maxValue13 = l1.Max();\n        long minValue13 =\
    \ l2.Min();\n        long maxValue14 = l1.Max();\n        long minValue14 = l2.Min();\n\
    \        long maxValue15 = l1.Max();\n        long minValue15 = l2.Min();\n  \
    \      long maxValue16 = l1.Max();\n        long minValue16 = l2.Min();\n    \
    \    long maxValue17 = l1.Max();\n        long minValue17 = l2.Min();\n      \
    \  long maxValue18 = l1.Max();\n        long minValue18 = l2.Min();\n        long\
    \ maxValue19 = l1.Max();\n        long minValue19 = l2.Min();\n        long maxValue20\
    \ = l1.Max();\n        long minValue20 = l2.Min();\n        long maxValue21 =\
    \ l1.Max();\n        long minValue21 = l2.Min();\n        long maxValue22 = l1.Max();\n\
    \        long minValue22 = l2.Min();\n        long maxValue23 = l1.Max();\n  \
    \      long minValue23 = l2.Min();\n        long maxValue24 = l1.Max();\n    \
    \    long minValue24 = l2.Min();\n", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        foreach (long x in l1) {\n            if (l2.Contains(x))\
    \ {\n                result.Add(x);\n            }\n            if (x > max) {\n\
    \                max = x;\n            }\n        }\n        foreach (long x in\
    \ l2) {\n            if (!l1.Contains(x)) {\n                result.Add(x);\n\
    \            }\n            if (x > max) {\n                max = x;\n       \
    \     }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l1) {\n            foreach (long j\
    \ in l2) {\n                if (i == j) result.Add(i);\n            }\n      \
    \  }\n        return result;", "        var l3 = new List<long>();\n        foreach\
    \ (var item in l1) {\n            if (l2.Contains(item)) {\n                l3.Add(item);\n\
    \                l2.Remove(item);\n            }\n        }\n        return l3;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long minValue = l1.Min();\n        long maxValue\
    \ = l1.Max();\n        long minValue2 = l2.Min();\n        long maxValue2 = l2.Max();\n\
    \        bool isCommon = true;\n        long minValue3 = minValue;\n        long\
    \ maxValue3 = maxValue;\n        long minValue4 = minValue2;\n        long maxValue4\
    \ = maxValue2;\n        bool isCommon2 = true;\n        long minValue5 = minValue;\n\
    \        long maxValue5 = maxValue;\n        long minValue6 = minValue2;\n   \
    \     long maxValue6 = maxValue2;\n        bool isCommon3 = true;\n        long\
    \ minValue7 = minValue;\n        long maxValue7 = maxValue;\n        long minValue8\
    \ = minValue2;\n        long maxValue8 = maxValue2;\n        bool isCommon4 =\
    \ true;\n        long minValue9 = minValue;\n        long maxValue9 = maxValue;\n\
    \        long minValue10 = minValue2;\n        long maxValue10 = maxValue2;\n\
    \        bool isCommon5 = true;\n        long minValue11 = minValue;\n       \
    \ long maxValue11 = maxValue;\n        long minValue12 = minValue2;\n        long\
    \ maxValue12 = maxValue2;\n        bool isCommon6 = true;\n        long minValue13\
    \ = minValue;\n        long maxValue13 = maxValue;\n        long minValue14 =\
    \ minValue2;\n        long maxValue14 = maxValue2;\n        bool isCommon7 = true;\n\
    \        long minValue15 = minValue;\n        long maxValue15 = maxValue;\n  \
    \      long minValue16 = minValue2;\n        long maxValue16 = maxValue2;\n  \
    \      bool isCommon8 = true;\n        long minValue17 = minValue;\n        long\
    \ maxValue17 = maxValue;\n        long minValue18 = minValue2;\n        long maxValue18\
    \ = maxValue2;\n        bool isCommon9 = true;\n        long minValue19 = minValue;\n\
    \        long maxValue19 = maxValue;\n        long minValue20 = minValue2;\n \
    \       long maxValue20 = maxValue2;\n        bool isCommon10 = true;\n      \
    \  long minValue21 = minValue;\n        long maxValue21 = maxValue;\n        long\
    \ minValue22 = minValue2;\n        long maxValue22 = maxValue2;\n        bool\
    \ isCommon11 = true;\n        long minValue23 = minValue;\n        long maxValue23\
    \ = maxValue;\n        long minValue24 = minValue2;\n", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long x in l1) {\n\
    \            max = Math.Max(max, x);\n        }\n        foreach (long x in l2)\
    \ {\n            max = Math.Max(max, x);\n        }\n        foreach (long x in\
    \ l1) {\n            foreach (long y in l2) {\n                if (x == y) {\n\
    \                    result.Add(x);\n                }\n            }\n      \
    \  }\n        return result.OrderBy(x => x).ToList();", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long i in l1) {\n\
    \            if (l2.Contains(i)) {\n                result.Add(i);\n         \
    \       max = Math.Max(max, i);\n            }\n        }\n        foreach (long\
    \ i in l2) {\n            if (l1.Contains(i)) {\n                result.Add(i);\n\
    \                max = Math.Max(max, i);\n            }\n        }\n        if\
    \ (max != 0) {\n            foreach (long i in result) {\n                i =\
    \ i / max;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        foreach (long i in\
    \ l1) {\n            if (l2.Contains(i)) {\n                result.Add(i);\n \
    \           }\n            if (i > max) {\n                max = i;\n        \
    \    }\n        }\n        if (max > 0) {\n            foreach (long i in l2)\
    \ {\n                if (!l1.Contains(i)) {\n                    result.Add(i);\n\
    \                }\n            }\n        }\n        return result.OrderBy(i\
    \ => i).ToList();", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y)\n                    result.Add(x);\n            }\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            bool found = false;\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                result.Add(x);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    result.Add(x);\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        foreach (long x in l1) {\n  \
    \          foreach (long y in l2) {\n                if (x == y) {\n         \
    \           result.Add(x);\n                    break;\n                }\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        foreach (var item in l1) {\n            if (l2.Contains(item))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        foreach (long x in l1) {\n            if (l2.Contains(x)) {\n  \
    \              result.Add(x);\n                max = Math.Max(max, x);\n     \
    \       }\n        }\n        foreach (long x in l2) {\n            if (!l1.Contains(x))\
    \ {\n                result.Add(x);\n                max = Math.Max(max, x);\n\
    \            }\n        }\n        return result.OrderBy(x => x).ToList();", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            foreach (long y in l2) {\n                if (x == y) {\n   \
    \                 result.Add(x);\n                    break;\n               \
    \ }\n            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y)\n                    result.Add(x);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        if (l1 == null || l2 == null || l1.Count != l2.Count) return null;\n  \
    \      HashSet<long> hs1 = new HashSet<long>(l1);\n        HashSet<long> hs2 =\
    \ new HashSet<long>(l2);\n        List<long> result = new List<long>();\n    \
    \    foreach (long x in hs1.Intersect(hs2)) {\n            if (hs2.Contains(x))\
    \ result.Add(x);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        var result = new List<long>();\n        foreach\
    \ (var item in l1) {\n            if (l2.Contains(item)) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    result.Add(x);\n                \
    \    break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long minValue = l1.Min();\n\
    \        long maxValue = l1.Max();\n        long minValue2 = l2.Min();\n     \
    \   long maxValue2 = l2.Max();\n        long minValue3 = minValue;\n        long\
    \ maxValue3 = maxValue;\n        long minValue4 = minValue2;\n        long maxValue4\
    \ = maxValue2;\n        long minValue5 = minValue3;\n        long maxValue5 =\
    \ maxValue3;\n        long minValue6 = minValue4;\n        long maxValue6 = maxValue4;\n\
    \        long minValue7 = minValue5;\n        long maxValue7 = maxValue5;\n  \
    \      long minValue8 = minValue6;\n        long maxValue8 = maxValue6;\n    \
    \    long minValue9 = minValue7;\n        long maxValue9 = maxValue7;\n      \
    \  long minValue10 = minValue8;\n        long maxValue10 = maxValue8;\n      \
    \  long minValue11 = minValue9;\n        long maxValue11 = maxValue9;\n      \
    \  long minValue12 = minValue10;\n        long maxValue12 = maxValue10;\n    \
    \    long minValue13 = minValue11;\n        long maxValue13 = maxValue11;\n  \
    \      long minValue14 = minValue12;\n        long maxValue14 = maxValue12;\n\
    \        long minValue15 = minValue13;\n        long maxValue15 = maxValue13;\n\
    \        long minValue16 = minValue14;\n        long maxValue16 = maxValue14;\n\
    \        long minValue17 = minValue15;\n        long maxValue17 = maxValue15;\n\
    \        long minValue18 = minValue16;\n        long maxValue18 = maxValue16;\n\
    \        long minValue19 = minValue17;\n        long maxValue19 = maxValue17;\n\
    \        long minValue20 = minValue18;\n        long maxValue20 = maxValue18;\n\
    \        long minValue21 = minValue19;\n        long maxValue21 = maxValue19;\n\
    \        long minValue22 = minValue20;\n        long maxValue22 = maxValue20;\n\
    \        long minValue23 = minValue21;\n        long maxValue23 = maxValue21;\n\
    \        long minValue24 = minValue22;\n        long maxValue24 = maxValue22;\n\
    \        long minValue25 = minValue23;\n        long maxValue25 = maxValue23;\n\
    \        long minValue26 = minValue24;\n        long max", "        List<long>\
    \ result = new List<long>();\n        long max1 = l1.Max();\n        long min2\
    \ = l2.Min();\n        long max2 = l2.Max();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long min1 = l1.Min();\n        long max1 = l1.Max();\n\
    \        long min2 = l2.Min();\n        long max2 = l2.Max();\n        long min1\
    \ = l1.Min();\n        long max1 = l1.Max();\n        long min2 = l2.Min();\n\
    \        long max2 = l2.Max();\n        long min1 = l1.Min();\n        long max1\
    \ = l1.Max();\n        long min2 = l2.Min();\n        long max2 = l2.Max();\n\
    \        long min1 = l1.Min();\n        long max1 = l1.Max();\n        long min2\
    \ = l2.Min();\n        long max2 = l2.Max();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long min1 = l1.Min();\n        long max1 = l1.Max();\n\
    \        long min2 = l2.Min();\n        long max2 = l2.Max();\n        long min1\
    \ = l1.Min();\n        long max1 = l1.Max();\n        long min2 = l2.Min();\n\
    \        long max2 = l2.Max();\n        long min1 = l1.Min();\n        long max1\
    \ = l1.Max();\n        long min2 = l2.Min();\n        long max2 = l2.Max();\n\
    \        long min1 = l1.Min();\n        long max1 = l1.Max();\n        long min2\
    \ = l2.Min();\n        long max2 = l2.Max();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        long min1 = l1.Min();\n        long max1 = l1.Max();\n\
    \        long min2 = l2.Min();\n        long max2 = l2.Max();\n        long min1\
    \ = l1.Min();\n        long max1 = l1.Max();\n        long min2 = l2.Min();\n\
    \        long max2 = l2.Max();\n        long min1 = l1.Min", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y)\n                    result.Add(x);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            bool found = false;\n         \
    \   foreach (long y in l2) {\n                if (x == y) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set1 = new HashSet<long>(l1);\n        HashSet<long> set2\
    \ = new HashSet<long>(l2);\n        foreach (long x in set1) {\n            if\
    \ (set2.Contains(x)) {\n                result.Add(x);\n            }\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            bool found = false;\n         \
    \   foreach (long y in l2) {\n                if (x == y) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max1 = l1.Max();\n        long min1 = l1.Min();\n        long max2\
    \ = l2.Max();\n        long min2 = l2.Min();\n        long maxDiff = max1 - max2;\n\
    \        long minDiff = min1 - min2;\n        if (maxDiff > minDiff) {\n     \
    \       long mid1 = max1;\n            long mid2 = max2;\n            while (mid1\
    \ <= min1) {\n                result.Add(mid1);\n                mid1 += 1;\n\
    \            }\n            while (mid2 <= min2) {\n                result.Add(mid2);\n\
    \                mid2 += 1;\n            }\n            while (mid1 <= min1) {\n\
    \                result.Add(mid1);\n                mid1 += 1;\n            }\n\
    \            while (mid2 <= min2) {\n                result.Add(mid2);\n     \
    \           mid2 += 1;\n            }\n        }\n        else {\n           \
    \ long mid1 = min1;\n            long mid2 = min2;\n            while (mid1 <=\
    \ max1) {\n                result.Add(mid1);\n                mid1 += 1;\n   \
    \         }\n            while (mid2 <= max2) {\n                result.Add(mid2);\n\
    \                mid2 += 1;\n            }\n            while (mid1 <= max1) {\n\
    \                result.Add(mid1);\n                mid1 += 1;\n            }\n\
    \            while (mid2 <= max2) {\n                result.Add(mid2);\n     \
    \           mid2 += 1;\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            bool found = false;\n            foreach (long y in l2) {\n \
    \               if (x == y) {\n                    found = true;\n           \
    \         break;\n                }\n            }\n            if (!found) {\n\
    \                result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max1 = l1.Max();\n\
    \        long min1 = l1.Min();\n        long max2 = l2.Max();\n        long min2\
    \ = l2.Min();\n        long maxDiff = max1 - max2;\n        long minDiff = min1\
    \ - min2;\n        long mid = maxDiff / 2;\n        long mid1 = minDiff / 2;\n\
    \        long mid2 = maxDiff - mid;\n        long mid3 = minDiff - mid1;\n   \
    \     long mid4 = maxDiff + mid;\n        long mid5 = minDiff + mid1;\n      \
    \  long mid6 = maxDiff - mid2;\n        long mid7 = minDiff - mid3;\n        long\
    \ mid8 = maxDiff + mid2;\n        long mid9 = minDiff + mid3;\n        long mid10\
    \ = maxDiff - mid4;\n        long mid11 = minDiff - mid5;\n        long mid12\
    \ = maxDiff + mid4;\n        long mid13 = minDiff + mid5;\n        long mid14\
    \ = maxDiff - mid6;\n        long mid15 = minDiff - mid7;\n        long mid16\
    \ = maxDiff + mid6;\n        long mid17 = minDiff + mid7;\n        long mid18\
    \ = maxDiff - mid8;\n        long mid19 = minDiff - mid9;\n        long mid20\
    \ = maxDiff + mid8;\n        long mid21 = minDiff + mid9;\n        long mid22\
    \ = maxDiff - mid10;\n        long mid23 = minDiff - mid11;\n        long mid24\
    \ = maxDiff + mid10;\n        long mid25 = minDiff + mid11;\n        long mid26\
    \ = maxDiff - mid12;\n        long mid27 = minDiff - mid13;\n        long mid28\
    \ = maxDiff + mid12;\n        long mid29 = minDiff + mid13;\n        long mid30\
    \ = maxDiff - mid14;\n        long mid31 = minDiff - mid15;\n        long mid32\
    \ = maxDiff + mid14;\n        long mid33 = minDiff + mid15;\n        long mid34\
    \ = maxDiff - mid16;\n        long mid35 = minDiff - mid17;\n        long mid36\
    \ = maxDiff + mid16;\n        long mid37 = minDiff + mid17;\n        long mid38\
    \ = ", "        List<long> result = new List<long>();\n        foreach (long x\
    \ in l1) {\n            bool found = false;\n            foreach (long y in l2)\
    \ {\n                if (x == y) {\n                    found = true;\n      \
    \              break;\n                }\n            }\n            if (!found)\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    result.Add(x);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        foreach (long x in\
    \ l1) {\n            max = Math.Max(max, x);\n        }\n        foreach (long\
    \ x in l2) {\n            max = Math.Max(max, x);\n        }\n        long min\
    \ = max;\n        foreach (long x in l1) {\n            min = Math.Min(min, x);\n\
    \        }\n        foreach (long x in l2) {\n            min = Math.Min(min,\
    \ x);\n        }\n        long mid = (min + max) / 2;\n        foreach (long x\
    \ in l1) {\n            if (x == mid) {\n                result.Add(x);\n    \
    \        }\n        }\n        foreach (long x in l2) {\n            if (x ==\
    \ mid) {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            bool found = false;\n            foreach (long y in\
    \ l2) {\n                if (x == y) {\n                    found = true;\n  \
    \                  break;\n                }\n            }\n            if (!found)\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            bool found = false;\n            foreach (long y in\
    \ l2) {\n                if (x == y) {\n                    found = true;\n  \
    \                  break;\n                }\n            }\n            if (!found)\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ i in l1) {\n            foreach (long j in l2) {\n                if (i == j)\
    \ result.Add(i);\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long i in l1) {\n            if (l2.Contains(i)) {\n                max = Math.Max(max,\
    \ i);\n            }\n        }\n        foreach (long i in l2) {\n          \
    \  if (l1.Contains(i)) {\n                max = Math.Max(max, i);\n          \
    \  }\n        }\n        if (max > 0) {\n            foreach (long i in l1) {\n\
    \                if (l2.Contains(i)) {\n                    result.Add(i);\n \
    \               }\n            }\n            foreach (long i in l2) {\n     \
    \           if (l1.Contains(i)) {\n                    result.Add(i);\n      \
    \          }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long minValue = l1.Min();\n        long\
    \ maxValue = l1.Max();\n        long minValue2 = l2.Min();\n        long maxValue2\
    \ = l2.Max();\n        long midValue = minValue + (maxValue - minValue) / 2;\n\
    \        long midValue2 = minValue2 + (maxValue2 - minValue2) / 2;\n        long\
    \ midValue3 = midValue + (maxValue - minValue) / 2;\n        long midValue4 =\
    \ midValue2 + (maxValue2 - minValue2) / 2;\n        long midValue5 = midValue\
    \ + (maxValue - minValue) / 2;\n        long midValue6 = midValue2 + (maxValue2\
    \ - minValue2) / 2;\n        long midValue7 = midValue + (maxValue - minValue)\
    \ / 2;\n        long midValue8 = midValue2 + (maxValue2 - minValue2) / 2;\n  \
    \      long midValue9 = midValue + (maxValue - minValue) / 2;\n        long midValue10\
    \ = midValue2 + (maxValue2 - minValue2) / 2;\n        long midValue11 = midValue\
    \ + (maxValue - minValue) / 2;\n        long midValue12 = midValue2 + (maxValue2\
    \ - minValue2) / 2;\n        long midValue13 = midValue + (maxValue - minValue)\
    \ / 2;\n        long midValue14 = midValue2 + (maxValue2 - minValue2) / 2;\n \
    \       long midValue15 = midValue + (maxValue - minValue) / 2;\n        long\
    \ midValue16 = midValue2 + (maxValue2 - minValue2) / 2;\n        long midValue17\
    \ = midValue + (maxValue - minValue) / 2;\n        long midValue18 = midValue2\
    \ + (maxValue2 - minValue2) / 2;\n        long midValue19 = midValue + (maxValue\
    \ - minValue) / 2;\n        long midValue20 = midValue2 + (maxValue2 - minValue2)\
    \ / 2;\n        long midValue21 = midValue + (maxValue - minValue) / 2;\n    \
    \    long midValue22 = midValue2 + (maxValue2 - minValue2) / 2;\n        long\
    \ midValue23 = midValue + (maxValue - minValue) / 2;\n        long midValue24\
    \ = midValue2 + (maxValue2 - minValue2) / 2;\n        long midValue25 = midValue\
    \ + (maxValue - minValue) / 2;\n        long midValue26 = midValue2 + (maxValue2\
    \ - minValue2) / 2;\n        long midValue27 = midValue + (maxValue - minValue)\
    \ / 2;\n        long midValue28", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long minValue = l1.Min();\n\
    \        long maxValue = l2.Max();\n        long minValue2 = l2.Min();\n     \
    \   long maxValue2 = l1.Max();\n        long minValue3 = l1.Min();\n        long\
    \ maxValue3 = l2.Max();\n        long minValue4 = l2.Min();\n        long maxValue4\
    \ = l1.Max();\n        long minValue5 = l1.Min();\n        long maxValue5 = l2.Max();\n\
    \        long minValue6 = l2.Min();\n        long maxValue6 = l1.Max();\n    \
    \    long minValue7 = l1.Min();\n        long maxValue7 = l2.Max();\n        long\
    \ minValue8 = l2.Min();\n        long maxValue8 = l1.Max();\n        long minValue9\
    \ = l1.Min();\n        long maxValue9 = l2.Max();\n        long minValue10 = l2.Min();\n\
    \        long maxValue10 = l1.Max();\n        long minValue11 = l1.Min();\n  \
    \      long maxValue11 = l2.Max();\n        long minValue12 = l2.Min();\n    \
    \    long maxValue12 = l1.Max();\n        long minValue13 = l1.Min();\n      \
    \  long maxValue13 = l2.Max();\n        long minValue14 = l2.Min();\n        long\
    \ maxValue14 = l1.Max();\n        long minValue15 = l1.Min();\n        long maxValue15\
    \ = l2.Max();\n        long minValue16 = l2.Min();\n        long maxValue16 =\
    \ l1.Max();\n        long minValue17 = l1.Min();\n        long maxValue17 = l2.Max();\n\
    \        long minValue18 = l2.Min();\n        long maxValue18 = l1.Max();\n  \
    \      long minValue19 = l1.Min();\n        long maxValue19 = l2.Max();\n    \
    \    long minValue20 = l2.Min();\n        long maxValue20 = l1.Max();\n      \
    \  long minValue21 = l1.Min();\n        long maxValue21 = l2.Max();\n        long\
    \ minValue22 = l2.Min();\n        long maxValue22 = l1.Max();\n        long minValue23\
    \ = l1.Min();\n        long maxValue23 = l2.Max();\n        long minValue24 =\
    \ l2.Min();\n        long maxValue24 = l1.Max();\n", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    result.Add(x);\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        if (l1 == null || l2 == null)\n            return null;\n        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            bool\
    \ found = false;\n            foreach (long y in l2) {\n                if (x\
    \ == y)\n                    found = true;\n            }\n            if (!found)\n\
    \                result.Add(x);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        HashSet<long> h1 = new HashSet<long>(l1);\n\
    \        HashSet<long> h2 = new HashSet<long>(l2);\n        foreach (long x in\
    \ h1)\n            if (h2.Contains(x))\n                result.Add(x);\n     \
    \   return result;", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            bool found = false;\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                result.Add(x);\n            }\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        foreach\
    \ (long x in l1) {\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    result.Add(x);\n                    break;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        foreach (long x in l1) {\n  \
    \          bool found = false;\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    found = true;\n                 \
    \   break;\n                }\n            }\n            if (!found) {\n    \
    \            result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            bool found\
    \ = false;\n            foreach (long j in l2) {\n                if (i == j)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long x in l1) {\n\
    \            if (l2.Contains(x)) {\n                max = Math.Max(max, x);\n\
    \            }\n        }\n        foreach (long x in l2) {\n            if (l1.Contains(x))\
    \ {\n                max = Math.Max(max, x);\n            }\n        }\n     \
    \   foreach (long x in l1) {\n            if (l2.Contains(x)) {\n            \
    \    result.Add(x);\n            }\n        }\n        foreach (long x in l2)\
    \ {\n            if (l1.Contains(x)) {\n                result.Add(x);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long x in l1) {\n            bool found = false;\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             found = true;\n                    break;\n                }\n \
    \           }\n            if (!found) {\n                result.Add(x);\n   \
    \         }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    result.Add(x);\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y)\n         \
    \           result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    common++;\n                }\n    \
    \        }\n        }\n        result.Add(common);\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long x in l1)\
    \ {\n            bool found = false;\n            foreach (long y in l2) {\n \
    \               if (x == y) {\n                    found = true;\n           \
    \         break;\n                }\n            }\n            if (!found) {\n\
    \                result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        if (l1 == null || l2 == null || l1.Count != l2.Count) {\n            return\
    \ null;\n        }\n        var result = new List<long>();\n        foreach (var\
    \ item in l1) {\n            if (l2.Contains(item)) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        var result = new List<long>();\n        foreach\
    \ (var item in l1) {\n            if (l2.Contains(item)) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in l1) {\n            bool found\
    \ = false;\n            foreach (long j in l2) {\n                if (i == j)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> h1 = new HashSet<long>(l1);\n   \
    \     HashSet<long> h2 = new HashSet<long>(l2);\n        h1.IntersectWith(h2).ToList().ForEach(x\
    \ => result.Add(x));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l1) {\n            bool found = false;\n\
    \            foreach (long j in l2) {\n                if (i == j) {\n       \
    \             found = true;\n                    break;\n                }\n \
    \           }\n            if (!found) {\n                result.Add(i);\n   \
    \         }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long i in l1) {\n\
    \            if (l2.Contains(i)) {\n                result.Add(i);\n         \
    \       max = Math.Max(max, i);\n            }\n        }\n        foreach (long\
    \ i in l2) {\n            if (!l1.Contains(i)) {\n                result.Add(i);\n\
    \                max = Math.Max(max, i);\n            }\n        }\n        return\
    \ result.OrderBy(i => i).ToList();", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max1 = l1.Max();\n\
    \        long min1 = l1.Min();\n        long max2 = l2.Max();\n        long min2\
    \ = l2.Min();\n        long mid1 = (max1 + min1) / 2;\n        long mid2 = (max2\
    \ + min2) / 2;\n        long mid = mid1;\n        while (true) {\n           \
    \ if (mid == mid2) {\n                result.Add(mid);\n                break;\n\
    \            }\n            if (mid > mid2) {\n                mid = mid1;\n \
    \               mid1 = (max1 + min1) / 2;\n                mid2 = (max2 + min2)\
    \ / 2;\n            } else {\n                mid = mid2;\n                mid1\
    \ = (max1 + min1) / 2;\n                mid2 = (max2 + min2) / 2;\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l1) {\n            foreach (long j in l2) {\n    \
    \            if (i == j) result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\n\
    \                    result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ hs1 = new HashSet<long>(l1);\n        HashSet<long> hs2 = new HashSet<long>(l2);\n\
    \        foreach (long x in hs1) {\n            if (hs2.Contains(x)) {\n     \
    \           result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long x in l1) {\n\
    \            if (l2.Contains(x)) {\n                max = Math.Max(max, x);\n\
    \            }\n        }\n        foreach (long x in l2) {\n            if (l1.Contains(x))\
    \ {\n                max = Math.Max(max, x);\n            }\n        }\n     \
    \   if (max > 0) {\n            foreach (long x in l1) {\n                if (l2.Contains(x))\
    \ {\n                    result.Add(x);\n                }\n            }\n  \
    \          foreach (long x in l2) {\n                if (l1.Contains(x)) {\n \
    \                   result.Add(x);\n                }\n            }\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        foreach (long i in l1) {\n            max = Math.Max(max,\
    \ i);\n        }\n        foreach (long i in l2) {\n            max = Math.Max(max,\
    \ i);\n        }\n        long min = 0;\n        foreach (long i in l1) {\n  \
    \          min = Math.Min(min, i);\n        }\n        foreach (long i in l2)\
    \ {\n            min = Math.Min(min, i);\n        }\n        long mid = max /\
    \ 2;\n        long mid2 = min / 2;\n        long mid3 = mid / 2;\n        long\
    \ mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 /\
    \ 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long\
    \ mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10\
    \ / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n   \
    \     long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16\
    \ = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 /\
    \ 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n     \
    \   long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23\
    \ = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 /\
    \ 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n     \
    \   long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30\
    \ = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 /\
    \ 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n     \
    \   long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37\
    \ = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 /\
    \ 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n     \
    \   long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44\
    \ = mid43 ", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    result.Add(x);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y)\n                    result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        var l3 = new List<long>();\n\
    \        foreach (var item in l1) {\n            if (l2.Contains(item)) {\n  \
    \              l3.Add(item);\n            }\n        }\n        return l3;", " \
    \       List<long> result = new List<long>();\n        foreach (long i in l1)\
    \ {\n            bool found = false;\n            foreach (long j in l2) {\n \
    \               if (i == j) {\n                    found = true;\n           \
    \         break;\n                }\n            }\n            if (!found) {\n\
    \                result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long common = 0;\n     \
    \   foreach (long x in l1) {\n            foreach (long y in l2) {\n         \
    \       if (x == y) {\n                    common++;\n                }\n    \
    \        }\n        }\n        if (common > 0) {\n            result.Add(common);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            bool found = false;\n         \
    \   foreach (long y in l2) {\n                if (x == y) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(x);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long i in l1) {\n            foreach (long j in l2) {\n    \
    \            if (i == j) result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long maxValue\
    \ = l1.Max();\n        long minValue = l2.Min();\n        long maxValue2 = l2.Max();\n\
    \        long minValue2 = l1.Min();\n        long maxValue3 = l1.Max();\n    \
    \    long minValue3 = l2.Min();\n        long maxValue4 = l1.Max();\n        long\
    \ minValue4 = l2.Min();\n        long maxValue5 = l1.Max();\n        long minValue5\
    \ = l2.Min();\n        long maxValue6 = l1.Max();\n        long minValue6 = l2.Min();\n\
    \        long maxValue7 = l1.Max();\n        long minValue7 = l2.Min();\n    \
    \    long maxValue8 = l1.Max();\n        long minValue8 = l2.Min();\n        long\
    \ maxValue9 = l1.Max();\n        long minValue9 = l2.Min();\n        long maxValue10\
    \ = l1.Max();\n        long minValue10 = l2.Min();\n        long maxValue11 =\
    \ l1.Max();\n        long minValue11 = l2.Min();\n        long maxValue12 = l1.Max();\n\
    \        long minValue12 = l2.Min();\n        long maxValue13 = l1.Max();\n  \
    \      long minValue13 = l2.Min();\n        long maxValue14 = l1.Max();\n    \
    \    long minValue14 = l2.Min();\n        long maxValue15 = l1.Max();\n      \
    \  long minValue15 = l2.Min();\n        long maxValue16 = l1.Max();\n        long\
    \ minValue16 = l2.Min();\n        long maxValue17 = l1.Max();\n        long minValue17\
    \ = l2.Min();\n        long maxValue18 = l1.Max();\n        long minValue18 =\
    \ l2.Min();\n        long maxValue19 = l1.Max();\n        long minValue19 = l2.Min();\n\
    \        long maxValue20 = l1.Max();\n        long minValue20 = l2.Min();\n  \
    \      long maxValue21 = l1.Max();\n        long minValue21 = l2.Min();\n    \
    \    long maxValue22 = l1.Max();\n        long minValue22 = l2.Min();\n      \
    \  long maxValue23 = l1.Max();\n        long minValue23 = l2.Min();\n        long\
    \ maxValue24 = l1.Max();\n        long minValue24 = l2.Min();\n", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    result.Add(x);\n                \
    \    break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long min1 = l1.Min();\n\
    \        long max1 = l1.Max();\n        long min2 = l2.Min();\n        long max2\
    \ = l2.Max();\n        if (min1 < min2) {\n            min1 = min2;\n        \
    \    max1 = max2;\n        }\n        if (max1 > max2) {\n            max1 = max2;\n\
    \            min1 = min2;\n        }\n        long mid1 = (max1 + min1) / 2;\n\
    \        long mid2 = (max2 + min2) / 2;\n        long mid = (max1 + min2) / 2;\n\
    \        long minDiff = mid2 - mid1;\n        long maxDiff = mid2 - mid;\n   \
    \     if (minDiff > 0) {\n            minDiff = minDiff + 1;\n        }\n    \
    \    if (maxDiff < 0) {\n            maxDiff = maxDiff - 1;\n        }\n     \
    \   long midDiff = maxDiff - minDiff;\n        if (midDiff > 0) {\n          \
    \  midDiff = midDiff + 1;\n        }\n        long mid1 = (max1 + min1) / 2;\n\
    \        long mid2 = (max2 + min2) / 2;\n        long mid = (max1 + min2) / 2;\n\
    \        long minDiff = mid2 - mid1;\n        long maxDiff = mid2 - mid;\n   \
    \     if (minDiff > 0) {\n            minDiff = minDiff + 1;\n        }\n    \
    \    if (maxDiff < 0) {\n            maxDiff = maxDiff - 1;\n        }\n     \
    \   long midDiff = maxDiff - minDiff;\n        if (midDiff > 0) {\n          \
    \  midDiff = midDiff + 1;\n        }\n        long mid1 = (max1 + min1) / 2;\n\
    \        long mid2 = (max2 + min2) / 2;\n        long mid = (max1 + min2) / 2;\n\
    \        long minDiff = mid2 - mid1;\n        long maxDiff = mid2 - mid;\n   \
    \     if (minDiff > 0) {\n            minDiff = minDiff + 1;\n        }\n    \
    \    if (maxDiff < 0) {\n            maxDiff = maxDiff - 1;\n        }\n     \
    \   long midDiff = maxDiff - minDiff;\n        if (midDiff > 0) {\n          \
    \  midDiff = midDiff + 1;\n        }\n        long mid1 = (max1 + min1) / 2;\n\
    \        long mid2 = (max2 + min2) / 2;\n        long mid = (max1 + min2) / 2;\n\
    \        long minDiff = mid2 - mid1;\n        long maxDiff = mid2 - mid;\n   \
    \     if (minDiff > 0) {\n            minDiff = minDiff + ", "        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        foreach (long i in\
    \ l1) {\n            max = Math.Max(max, i);\n        }\n        foreach (long\
    \ i in l2) {\n            max = Math.Max(max, i);\n        }\n        long min\
    \ = max;\n        foreach (long i in l1) {\n            min = Math.Min(min, i);\n\
    \        }\n        foreach (long i in l2) {\n            min = Math.Min(min,\
    \ i);\n        }\n        long mid = min + (max - min) / 2;\n        foreach (long\
    \ i in l1) {\n            if (i < mid) {\n                result.Add(i);\n   \
    \         }\n        }\n        foreach (long i in l2) {\n            if (i <\
    \ mid) {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            bool found = false;\n            foreach (long y in\
    \ l2) {\n                if (x == y) {\n                    found = true;\n  \
    \                  break;\n                }\n            }\n            if (!found)\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    result.Add(x);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in l1) {\n            bool\
    \ found = false;\n            foreach (long j in l2) {\n                if (i\
    \ == j) found = true;\n            }\n            if (!found) result.Add(i);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            bool found = false;\n         \
    \   foreach (long y in l2) {\n                if (x == y) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \  }\n            if (!found) {\n                result.Add(x);\n            }\n\
    \        }\n        return result;", "        if (l1 == null || l2 == null) return\
    \ null;\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in l1) {\n            bool found = false;\n            foreach (long j in\
    \ l2) {\n                if (i == j) found = true;\n            }\n          \
    \  if (!found) result.Add(i);\n        }\n        return result;", "        if\
    \ (l1 == null || l2 == null || l1.Count != l2.Count) return null;\n        var\
    \ result = new List<long>();\n        foreach (var item in l1) {\n           \
    \ if (l2.Contains(item)) {\n                result.Add(item);\n            }\n\
    \        }\n        return result;", "        if (l1 == null || l2 == null ||\
    \ l1.Count != l2.Count) return null;\n        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            bool found = false;\n         \
    \   foreach (long y in l2) {\n                if (x == y) found = true;\n    \
    \        }\n            if (!found) result.Add(x);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            bool found = false;\n            foreach (long y in\
    \ l2) {\n                if (x == y) {\n                    found = true;\n  \
    \                  break;\n                }\n            }\n            if (!found)\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            bool found = false;\n            foreach (long y in\
    \ l2) {\n                if (x == y) {\n                    found = true;\n  \
    \                  break;\n                }\n            }\n            if (!found)\
    \ {\n                result.Add(x);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    result.Add(x);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            foreach (long y in l2) {\n          \
    \      if (x == y) {\n                    result.Add(x);\n                   \
    \ break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max1 = l1.Max();\n        long min1 = l1.Min();\n\
    \        long max2 = l2.Max();\n        long min2 = l2.Min();\n        long maxDiff\
    \ = max1 - max2;\n        long minDiff = min1 - min2;\n        if (maxDiff > minDiff)\
    \ {\n            long mid1 = (max1 + min1) / 2;\n            long mid2 = (max2\
    \ + min2) / 2;\n            long midDiff = mid1 - mid2;\n            if (midDiff\
    \ > maxDiff) {\n                result.AddRange(Common(l1, l2.Where(x => x < mid1)));\n\
    \                result.AddRange(Common(l1.Where(x => x < mid1), l2));\n     \
    \           result.AddRange(Common(l1.Where(x => x < mid1), l2.Where(x => x <\
    \ mid2)));\n                result.AddRange(Common(l1.Where(x => x < mid1), l2.Where(x\
    \ => x < mid2)));\n            } else if (midDiff < minDiff) {\n             \
    \   result.AddRange(Common(l1.Where(x => x > mid1), l2));\n                result.AddRange(Common(l1,\
    \ l2.Where(x => x > mid1)));\n                result.AddRange(Common(l1.Where(x\
    \ => x > mid1), l2.Where(x => x > mid2)));\n                result.AddRange(Common(l1.Where(x\
    \ => x > mid1), l2.Where(x => x > mid2)));\n            } else {\n           \
    \     result.AddRange(Common(l1.Where(x => x > mid1), l2.Where(x => x > mid1)));\n\
    \                result.AddRange(Common(l1.Where(x => x > mid1), l2.Where(x =>\
    \ x > mid2)));\n                result.AddRange(Common(l1.Where(x => x > mid1),\
    \ l2.Where(x => x > mid2)));\n                result.AddRange(Common(l1.Where(x\
    \ => x > mid1), l2.Where(x => x > mid2)));\n            }\n        } else {\n\
    \            long mid1 = (max1 + min1) / 2;\n            long mid2 = (max2 + min2)\
    \ / 2;\n            long midDiff = mid1 - mid2;\n            if (midDiff > maxDiff)\
    \ {\n                result.AddRange(Common(l1, l2.Where(x => x < mid2)));\n \
    \               result.AddRange(Common(l1.Where(x => x < mid2), l2));\n      \
    \          result.AddRange(Common(l1.Where(x => x < mid2), l2.Where(x => x < mid1)));\n\
    \                result.AddRange(Common(l1.Where", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        var result = new List<long>();\n        foreach\
    \ (var item in l1) {\n            bool found = false;\n            foreach (var\
    \ item2 in l2) {\n                if (item == item2) {\n                    found\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (!found) {\n                result.Add(item);\n            }\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long x in l1) {\n            foreach (long y in l2) {\n    \
    \            if (x == y) {\n                    result.Add(x);\n             \
    \       break;\n                }\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long i in l1) {\n\
    \            bool found = false;\n            foreach (long j in l2) {\n     \
    \           if (i == j) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long i in l1) {\n            if (l2.Contains(i)) {\n                result.Add(i);\n\
    \                max = Math.Max(max, i);\n            }\n        }\n        foreach\
    \ (long i in l2) {\n            if (!l1.Contains(i)) {\n                result.Add(i);\n\
    \                max = Math.Max(max, i);\n            }\n        }\n        return\
    \ result.OrderBy(i => i).ToList();"]
stop_tokens:
- "\n    }\n"
