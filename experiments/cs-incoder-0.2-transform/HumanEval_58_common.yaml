name: HumanEval_58_common
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique common elements for two lists.\n    //\
  \ >>> Common((new List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L,\
  \ (long)653L, (long)2L, (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L,\
  \ (long)1L, (long)5L, (long)9L, (long)653L, (long)121L})))\n    // (new List<long>(new\
  \ long[]{(long)1L, (long)5L, (long)653L}))\n    // >>> Common((new List<long>(new\
  \ long[]{(long)5L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L})))\n    // (new List<long>(new long[]{(long)2L, (long)3L}))\n    public\
  \ static List<long> Common(List<long> l1, List<long> l2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Common((new\
  \ List<long>(new long[]{(long)1L, (long)4L, (long)3L, (long)34L, (long)653L, (long)2L,\
  \ (long)5L})), (new List<long>(new long[]{(long)5L, (long)7L, (long)1L, (long)5L,\
  \ (long)9L, (long)653L, (long)121L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)5L, (long)653L}))));\n    Debug.Assert(Common((new List<long>(new long[]{(long)5L,\
  \ (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L}))));\n    Debug.Assert(Common((new List<long>(new\
  \ long[]{(long)4L, (long)3L, (long)2L, (long)8L})), (new List<long>(new long[]{(long)3L,\
  \ (long)2L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)3L, (long)4L}))));\n\
  \    Debug.Assert(Common((new List<long>(new long[]{(long)4L, (long)3L, (long)2L,\
  \ (long)8L})), (new List<long>())).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        foreach (long\
    \ i in l1) {\n            bool found = false;\n            foreach (long j in\
    \ l2) {\n                if (i == j) found = true;\n            }\n          \
    \  if (!found) result.Add(i);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long x in l1) {\n            bool\
    \ found = false;\n            foreach (long y in l2) {\n                if (x\
    \ == y) {\n                    found = true;\n                    break;\n   \
    \             }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long i in l1) {\n\
    \            if (l2.Contains(i)) {\n                max = Math.Max(max, i);\n\
    \            }\n        }\n        foreach (long i in l2) {\n            if (l1.Contains(i))\
    \ {\n                max = Math.Max(max, i);\n            }\n        }\n     \
    \   foreach (long i in l1) {\n            if (l2.Contains(i)) {\n            \
    \    result.Add(i);\n            }\n        }\n        foreach (long i in l2)\
    \ {\n            if (l1.Contains(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result.OrderBy(i => i).ToList();", "    \
    \    List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            foreach (long y in l2) {\n                if (x == y) {\n       \
    \             result.Add(x);\n                    break;\n                }\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            bool found\
    \ = false;\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n            }\n            if (!found) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long max = 0;\n        foreach (long i in l1) {\n            if (l2.Contains(i))\
    \ {\n                result.Add(i);\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) {\n                    found = true;\n               \
    \     break;\n                }\n            }\n            if (!found) {\n  \
    \              result.Add(x);\n            }\n        }\n        return result;",
  "        if (l1 == null || l2 == null || l1.Count != l2.Count) return null;\n  \
    \      List<long> result = new List<long>();\n        foreach (long x in l1) {\n\
    \            bool found = false;\n            foreach (long y in l2) {\n     \
    \           if (x == y) found = true;\n            }\n            if (!found)\
    \ result.Add(x);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long x in l1) {\n            foreach (long\
    \ y in l2) {\n                if (x == y) {\n                    result.Add(x);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  foreach (long x in l1) {\n            bool found = false;\n            foreach\
    \ (long y in l2) {\n                if (x == y) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!found) {\n                result.Add(x);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long x in l1) {\n            foreach (long y in l2) {\n       \
    \         if (x == y) {\n                    result.Add(x);\n                \
    \    break;\n                }\n            }\n        }\n        return result;",
  "        if (l1 == null || l2 == null || l1.Count != l2.Count) return null;\n  \
    \      List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long x in l1) {\n            if (l2.Contains(x)) {\n                result.Add(x);\n\
    \                max = Math.Max(max, x);\n            }\n        }\n        foreach\
    \ (long x in l2) {\n            if (!l1.Contains(x)) {\n                result.Add(x);\n\
    \                max = Math.Max(max, x);\n            }\n        }\n        if\
    \ (result.Count == 0) return null;\n        if (result.Count > max) return null;\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in l1) {\n            foreach (long j in l2) {\n       \
    \         if (i == j) result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long max =\
    \ 0;\n        foreach (long i in l1) {\n            if (l2.Contains(i)) {\n  \
    \              max = Math.Max(max, i);\n            }\n        }\n        foreach\
    \ (long i in l2) {\n            if (l1.Contains(i)) {\n                max = Math.Max(max,\
    \ i);\n            }\n        }\n        foreach (long i in l1) {\n          \
    \  if (l2.Contains(i)) {\n                result.Add(i);\n            }\n    \
    \    }\n        foreach (long i in l2) {\n            if (l1.Contains(i)) {\n\
    \                result.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long minValue = l1.Min();\n\
    \        long maxValue = l1.Max();\n        long minValue2 = l2.Min();\n     \
    \   long maxValue2 = l2.Max();\n        long minValue3 = l1.Min();\n        long\
    \ maxValue3 = l1.Max();\n        long minValue4 = l2.Min();\n        long maxValue4\
    \ = l2.Max();\n        long minValue5 = l1.Min();\n        long maxValue5 = l1.Max();\n\
    \        long minValue6 = l2.Min();\n        long maxValue6 = l2.Max();\n    \
    \    long minValue7 = l1.Min();\n        long maxValue7 = l1.Max();\n        long\
    \ minValue8 = l2.Min();\n        long maxValue8 = l2.Max();\n        long minValue9\
    \ = l1.Min();\n        long maxValue9 = l1.Max();\n        long minValue10 = l2.Min();\n\
    \        long maxValue10 = l2.Max();\n        long minValue11 = l1.Min();\n  \
    \      long maxValue11 = l1.Max();\n        long minValue12 = l2.Min();\n    \
    \    long maxValue12 = l2.Max();\n        long minValue13 = l1.Min();\n      \
    \  long maxValue13 = l1.Max();\n        long minValue14 = l2.Min();\n        long\
    \ maxValue14 = l2.Max();\n        long minValue15 = l1.Min();\n        long maxValue15\
    \ = l1.Max();\n        long minValue16 = l2.Min();\n        long maxValue16 =\
    \ l2.Max();\n        long minValue17 = l1.Min();\n        long maxValue17 = l1.Max();\n\
    \        long minValue18 = l2.Min();\n        long maxValue18 = l2.Max();\n  \
    \      long minValue19 = l1.Min();\n        long maxValue19 = l1.Max();\n    \
    \    long minValue20 = l2.Min();\n        long maxValue20 = l2.Max();\n      \
    \  long minValue21 = l1.Min();\n        long maxValue21 = l1.Max();\n        long\
    \ minValue22 = l2.Min();\n        long maxValue22 = l2.Max();\n        long minValue23\
    \ = l1.Min();\n        long maxValue23 = l1.Max();\n        long minValue24 =\
    \ l2.Min();\n        long maxValue24 = l2.Max();\n", "        var result = new\
    \ List<long>();\n        foreach (var item in l1) {\n            if (l2.Contains(item))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l1) {\n            foreach (long y in l2) {\n                if (x == y)\
    \ {\n                    result.Add(x);\n                    break;\n        \
    \        }\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
