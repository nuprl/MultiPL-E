language: cs
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a\
    \ * a + b * b);\n        long g = (long) Math.Sqrt(a * a + c * c);\n        long\
    \ h = (long) Math.Sqrt(b * b + c * c);\n        long i = Math.Sqrt(a * a + b *\
    \ b + c * c);\n        long j = Math.Sqrt(a * a + c * c + b * b + c * c);\n  \
    \      long k = (long) Math.Sqrt(a * b + c * c + b * b + c * c);\n        long\
    \ l = (long) Math.Sqrt(a * b + c * c + a * a + c * c);\n        long m = Math.Sqrt(a\
    \ * b + c * c + b * b + a * a + c * c);\n        long n = Math.Sqrt(a * b + c\
    \ * c + a * a + b * b + c * c);\n        long o = (long) Math.Sqrt(a * b + c *\
    \ c + b * b + a * a + c * c);\n        long p = (long) Math.Sqrt(a * b + c * c\
    \ + a * a + b * b + c * c);\n        long q = (long) Math.Sqrt(a * b + c * c +\
    \ b * b + a * a + a * a + c * c);\n        long r = (long) Math.Sqrt(a * b + c\
    \ * c + a * a + b * b + a * a + c * c);\n        long s = (long) Math.Sqrt(a *\
    \ b + c * c + b * b + a * a + a * a + b * b);\n        long t = (long) Math.Sqrt(a\
    \ * b + c * c + a * a + b * b + b * a + c * b);\n        long u = (long) Math.Sqrt(a\
    \ * b + c * c + b * b + a * a + b * a + c * b);\n        long v = (long) Math.Sqrt(a\
    \ * b + c * c + a * a + b * b + b * a + a * b);\n        long w = (long) Math.Sqrt(a\
    \ * b + c * c + b * b + a * a + b * a + a * b);\n        long x = (long) Math.Sqrt(a\
    \ * b + c * c + a * a + b * b + b * a + a * b);\n        long y = (long) Math.Sqrt(a\
    \ * b + c * c + b * b + a * a + b * a + a * b);\n\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp730flhjg.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp730flhjg.cs(26,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp730flhjg.cs(27,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp730flhjg.cs(30,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp730flhjg.cs(31,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp730flhjg.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794264
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * b; // acb is ac times b\n        long abc =\
    \ ab * c; // abc is ab times c\n        long acbc = acb * c; // acbc is ac times\
    \ bc times c\n        long abbc = abb * c; // abbc is ab times bc times c\n  \
    \      long acbcab = acbcab * c; // acbcab is ac times bc times cab\n        long\
    \ abcabc = abcabc * c; // abcabc is ab times cab times c\n        long acbcabbc\
    \ = acbcabbc * c; // acbcabbc is ac times bc times cab times bc\n        long\
    \ abcabbc = abcabbc * c; // abcabbc is ab times cab times bc times c\n       \
    \ long acbcabbcbc = acbcabbcbc * c; // acbcabbcbc is ac times bc times cab times\
    \ bc times c\n        long abcabbcbc = abcabbcbc * c; // abcabbcbc is ab times\
    \ cab times bc times c times c\n        long acbcabbcbcba = acbcabbcbcba * c;\
    \ // acbcabbcbcba is ac times bc times cab times bc times c times cab\n      \
    \  long abcabbcbcba = abcabbcbcba * c; // abcabbcbcba is ab times cab times bc\
    \ times c times cab times b\n        long acbcabbcbcbb = acbcabbcbcbb * c; //\
    \ acbcabbcbcbb is ac times bc times cab times bc times c times cab times b\n \
    \       long abcabbcbcbb = abcabbcbcbb * c; // abcabbcbcbb is ab times cab times\
    \ bc times c times cab times b times b\n        long acbcabbcbcbc = acbcabbcbcbc\
    \ * c; // acbcabbcbcbc is ac times bc times cab times bc times c times cab times\
    \ b times c\n        long abcabbcbcbc = abcabbcbcbc\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpru7otenq.cs(37,39): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long g = a + e * Math.Sqrt(b * b - 4 * a * c);\n\
    \        long h = (b + e * Math.Sqrt(b * b - 4 * a * c)) * (b + e * Math.Sqrt(b\
    \ * b - 4 * a * c));\n        long i = g * g - 4 * f * h;\n        if (i < 0)\n\
    \            return false;\n        long j = g + e * Math.Sqrt(g * g - 4 * f *\
    \ h);\n        long k = f + e * Math.Sqrt(g * g - 4 * f * h);\n        long l\
    \ = a + e * Math.Sqrt(g * g - 4 * f * h);\n        long m = Math.Sqrt(a * a *\
    \ a - 4 * f * f * h);\n        long n = Math.Sqrt(a * a * a - 4 * f * f * h);\n\
    \        long o = Math.Sqrt(a * a * a - 4 * f * f * h);\n        long p = Math.Sqrt(a\
    \ * a * a - 4 * f * f * h);\n        long q = Math.Sqrt(a * a * a - 4 * f * f\
    \ * h);\n        long r = Math.Sqrt(a * a * a - 4 * f * f * h);\n        long\
    \ s = Math.Sqrt(a * a * a - 4 * f * f * h);\n        long t = Math.Sqrt(a * a\
    \ * a - 4 * f * f * h);\n        long u = Math.Sqrt(a * a * a - 4 * f * f * h);\n\
    \        long v = Math.Sqrt(a * a * a - 4 * f * f * h);\n        long w = Math.Sqrt(a\
    \ * a * a - 4 * f * f * h);\n        long x = Math.Sqrt(a * a * a - 4 * f * f\
    \ * h);\n        long y = Math.Sqrt(a * a * a - 4 * f * f * h);\n        long\
    \ z = Math.Sqrt(a * a * a - 4 * f * f * h);\n        long a = Math.Sqrt(a * a\
    \ * a - 4 * f * f * h);\n        long b = Math.Sqrt(a * a * a - 4 * f * f * h);\n\
    \        long c = Math.Sqrt(a * a * a - 4 * f * f * h);\n        long d = Math.Sqrt(a\
    \ * a * a - 4 * f * f * h);\n        long e = Math.Sqrt(a * a * a - 4 * f * f\
    \ * h);\n        long f = Math.Sqrt(a\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpabu49jix.cs(51,29): error CS1026: ) expected

    /tmp/tmpabu49jix.cs(51,29): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqsblkj7.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcab = acbc * abc;\n        long acbcabc =\
    \ acbcab * abc;\n        long acbcabcb = acbcabc * abc;\n        long acbcabcbc\
    \ = acbcabcb * abc;\n        long acbcabcbcb = acbcabcbc * abc;\n        long\
    \ acbcabcbcbc = acbcabcbcb * abc;\n        long acbcabcbcbcb = acbcabcbcbc * abc;\n\
    \        long acbcabcbcbcbc = acbcabcbcbcb * abc;\n        long acbcabcbcbcbcb\
    \ = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * abc;\n\
    \        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n  \
    \      long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpme9nofdz.cs(46,24): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root1 = (-b + Math.Sqrt(d)) / (2 * a);\n\
    \        long root2 = (-b - Math.Sqrt(d)) / (2 * a);\n        if (root1 == root2)\
    \ {\n            return true;\n        }\n        if (root1 < 0 || root1 > root2)\
    \ {\n            return false;\n        }\n        long root3 = Math.Sqrt(d);\n\
    \        if (root3 > root1) {\n            return false;\n        }\n        long\
    \ root4 = Math.Sqrt(d);\n        if (root4 > root2) {\n            return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb8_h9lu3.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpb8_h9lu3.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpb8_h9lu3.cs(31,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpb8_h9lu3.cs(35,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794264
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcabc = acbc * abc;\n        long acbcabcb\
    \ = acbcabc * bc;\n        long acbcabcbc = acbcabcb * bc;\n        long acbcabcbcb\
    \ = acbcabcbc * bc;\n        long acbcabcbcbc = acbcabcbcb * bc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * bc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbcbc = acbcabcbcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp04wj38i9.cs(45,52): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ abbc = ab * bc;\n        long abcab = ab * abc;\n        long abcabc = ab *\
    \ abc * abc;\n        long abcabcb = ab * abc * abc * abc;\n        long abcabcbb\
    \ = ab * abc * abc * abc * abc;\n        long abcabcbbc = ab * abc * abc * abc\
    \ * abc * abc;\n        long abcabcbbcd = ab * abc * abc * abc * abc * abc * abc;\n\
    \        long abcabcbbcde = ab * abc * abc * abc * abc * abc * abc * abc * abc;\n\
    \        long abcabcbbcdef = ab * abc * abc * abc * abc * abc * abc * abc * abc\
    \ * abc * abc;\n        long abcabcbbcdefg = ab * abc * abc * abc * abc * abc\
    \ * abc * abc * abc * abc * abc * abc;\n        long abcabcbbcdefgh = ab * abc\
    \ * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n       \
    \ long abcabcbbcdefghi = ab * abc * abc * abc * abc * abc * abc * abc * abc *\
    \ abc * abc * abc * abc * abc * abc;\n        long abcabcbbcdefghij = ab * abc\
    \ * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc\
    \ * abc;\n        long abcabcbbcdefghijk = ab * abc * abc * abc * abc * abc *\
    \ abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n   \
    \     long abcabcbbcdefghijkl = ab * abc * abc * abc * abc * abc * abc * abc *\
    \ abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n   \
    \     long abcabcbbcdefghijkll = ab * abc * abc * abc * abc * abc * abc * abc\
    \ * abc * abc * abc * abc * abc * abc * abc * abc * abc * \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph519x_ua.cs(39,136): error CS1525: Invalid expression term ''}''

    /tmp/tmph519x_ua.cs(39,136): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac + bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbcabc = acbc\
    \ + abc;\n        long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb\
    \ * bc;\n        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc =\
    \ acbcabcbcb * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long\
    \ acbcabcbcbcbc = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbc * bc;\n   \
    \     long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2q9drbsj.cs(46,46): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac + bc;\n        long\
    \ abbc = ab + bc;\n        long acbb = ac + ab;\n        long abbbc = ab + bc;\n\
    \        long acbba = ac + ab;\n        long abbca = ab + ca;\n        long acbca\
    \ = ac + ca;\n        long abcab = ab + ca;\n        long accab = ac + ca;\n \
    \       long abcabc = ab + ca;\n        long accaba = ac + ca;\n        long abcaba\
    \ = ab + ca;\n        long accaba = ac + ca;\n        long abcabac = ab + ca;\n\
    \        long accabac = ac + ca;\n        long abcabacb = ab + ca;\n        long\
    \ accabacb = ac + ca;\n        long abcabacbc = ab + ca;\n        long accabacbc\
    \ = ac + ca;\n        long abcabacbca = ab + ca;\n        long accabacbca = ac\
    \ + ca;\n        long abcabacbcab = ab + ca;\n        long accabacbcab = ac +\
    \ ca;\n        long abcabacbcabc = ab + ca;\n        long accabacbcabc = ac +\
    \ ca;\n        long abcabacbcabca = ab + ca;\n        long accabacbcabca = ac\
    \ + ca;\n        long abcabacbcabcab = ab + ca;\n        long accabacbcabcab =\
    \ ac + ca;\n        long abcabacbcabcabc = ab + ca;\n        long accabacbcabcabc\
    \ = ac + ca;\n        long abcabacbcabcabca = ab + ca;\n        long accabacbcabcabca\
    \ = ac + ca;\n        long abcabacbcabcabcab = ab + ca;\n        long accabacbcabcabcab\
    \ = ac + ca;\n        long abcabacbcabcabcabc = ab + ca;\n        long accabacbcabcabcabc\
    \ = ac + ca;\n        long abcabacbcabcabcabca = ab + ca;\n        long accabacbcabcabcabca\
    \ = ac + \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpto_7av36.cs(61,40): error CS1525: Invalid expression term ''}''

    /tmp/tmpto_7av36.cs(61,40): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a\
    \ * a);\n        long g = (long) Math.Sqrt(b * b);\n        long h = (long) Math.Sqrt(c\
    \ * c);\n        long i = (long) Math.Sqrt(a * a + b * b);\n        long j = (long)\
    \ Math.Sqrt(a * a + c * c);\n        long k = (long) Math.Sqrt(b * b + c * c);\n\
    \        long l = (long) Math.Sqrt(a * a * b + b * b + c * c);\n        long m\
    \ = (long) Math.Sqrt(a * a * b + c * c + b * b + c * c);\n        long n = (long)\
    \ Math.Sqrt(a * a * b + b * b + c * c + c * c);\n        long o = (long) Math.Sqrt(a\
    \ * a * b + c * c + b * b + c * c + c * c);\n        long p = (long) Math.Sqrt(a\
    \ * a * b + b * b + c * c + c * c + a * a + b * b + c * c + c * c + a * a + b\
    \ * b + c * c + c * c + a * a + b * b + c * c + c * c + a * a + b * b + c * c\
    \ + c * c + a * a + b * b + c * c + c * c + a * a + b * b + c * c + c * c + a\
    \ * a + b * b + c * c + c * c + a * a + b * b + c * c + c * c + a * a + b * b\
    \ + c * c + c * c + a * a + b * b + c * c + c * c + a * a + b * b + c * c + c\
    \ * c + a * a + b * b + c * c + c * c + a * a + b * b + c * c + c * c + a * a\
    \ + b * b + c * c + c * c + a * a + b * b + c * c + c * c + a * a + b * b + c\
    \ * c + c * c + a * a + b * b + c * c + c * c + a * a + b * b + c * c + c * c\
    \ + a * a + b * b + c * c + c * c + a * a + b * b + c * c + c * c + a * a + b\
    \ * b + c * c + c * c + a * a + b * b + c * c + c * c + a * a + b * b + c * \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpae88hoe2.cs(33,794): error CS1525: Invalid expression term ''}''

    /tmp/tmpae88hoe2.cs(33,794): error CS1026: ) expected

    /tmp/tmpae88hoe2.cs(33,794): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n   \
    \     long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side3\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side8\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side14 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side20 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side26 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side27 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side28 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side29 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4wsnyt8n.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4wsnyt8n.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4wsnyt8n.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4wsnyt8n.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4wsnyt8n.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4wsnyt8n.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4wsnyt8n.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4wsnyt8n.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4wsnyt8n.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4wsnyt8n.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4wsnyt8n.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4wsnyt8n.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp4wsnyt8n.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794264
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n   \
    \     long abbbbbc = abbbbbc * bc;\n        long acbbbbbc = acbbbbc * bc;\n  \
    \      long abbbbbbc = abbbbbc * bc;\n        long acbbbcbc = acbbbcb * bc;\n\
    \        long abbbbcbc = abbbbcb * bc;\n        long acbbbcbcb = acbbbcbc * bc;\n\
    \        long abbbbcbcb = abbbbcb * bc;\n        long acbbbcbcbb = acbbbcbcb *\
    \ bc;\n        long abbbbcbcbb = abbbbcbcb * bc;\n        long acbbbcbcbcb = acbbbcbcbc\
    \ * bc;\n        long abbbbcbcbcb = abbbbcbcb * bc;\n        long acbbbcbcbcbb\
    \ = acbbbcbcbcb * bc;\n        long abbbbcbcbcbb = abbbbcbcbcb * bc;\n       \
    \ long acbbbcbcbcbcb = acbbbcbcbcbc * bc;\n        long abbbbcbcbcbcb = abbbbcbcbcb\
    \ * bc;\n        long acbbbcbcbcbcbb = acbbbcbcbcbcb * bc;\n        long abbbbcbcbcbcbb\
    \ = abbbbcbcbcbcb * bc;\n        long acbbbcbcbcbcbcb = acbbbcbcbcbcbc * bc;\n\
    \        long abbbbcbcbcbcbcb = abbbbcbcbcbcbcb * bc;\n        long acbbbcbcbcbcbcbb\
    \ = acbbbcbcbcbcbcbb * bc;\n        long abbbbcbcbcbcbcbb = abbbbcbcbcbcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv4903dht.cs(51,48): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abac = ab - ac;\n        long acab = ac - ab;\n        long abcab = ab - bc;\n\
    \        long acbcab = ac - bc;\n        long abcabc = abc - ab;\n        long\
    \ acbcabc = ac - bc;\n        long abcabcb = abc - bc;\n        long acbcabcb\
    \ = ac - bc;\n        long abcabcbc = abc - bc;\n        long acbcabcbc = ac -\
    \ bc;\n        long abcabcbcd = abc - bcd;\n        long acbcabcbcd = ac - bcd;\n\
    \        long abcabcbcde = abc - bcd;\n        long acbcabcbcde = ac - bcd;\n\
    \        long abcabcbcdef = abc - bcd;\n        long acbcabcbcdef = ac - bcd;\n\
    \        long abcabcbcdefg = abc - bcd;\n        long acbcabcbcdefg = ac - bcd;\n\
    \        long abcabcbcdefgh = abc - bcd;\n        long acbcabcbcdefgh = ac - bcd;\n\
    \        long abcabcbcdefghi = abc - bcd;\n        long acbcabcbcdefghi = ac -\
    \ bcd;\n        long abcabcbcdefghij = abc - bcd;\n        long acbcabcbcdefghij\
    \ = ac - bcd;\n        long abcabcbcdefghijk = abc - bcd;\n        long acbcabcbcdefghijk\
    \ = ac - bcd;\n        long abcabcbcdefghijkl = abc - bcd;\n        long acbcabcbcdefghijkl\
    \ = ac - bcd;\n        long abcabcbcdefghijklmn = abc - bcd;\n        long acbcabcbcdefghijklmn\
    \ = ac - bcd;\n        long abcabcbcdefghijklmno = abc - bcd;\n        long acbcabcbcdefghijklmno\
    \ = ac - bcd;\n        long abcabcbcdefghijklm\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq49uj5ai.cs(56,32): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcabc = acbc * abc;\n        long acbcabcb\
    \ = acbcabc * bc;\n        long acbcabcbc = acbcabcb * bc;\n        long acbcabcbcb\
    \ = acbcabcbc * bc;\n        long acbcabcbcbc = acbcabcbcb * bc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * bc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbcbc = acbcabcbcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp04wj38i9.cs(45,52): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rv1i65_.cs(47,24): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e * 0.5);\n        long\
    \ h = a - e * Math.Sqrt(a - e * 0.5);\n        if (f < 0 || g < 0 || h < 0)\n\
    \            return false;\n        if (f >= g) {\n            if (f >= h)\n \
    \               return true;\n            else\n                return false;\n\
    \        }\n        else {\n            if (g >= h)\n                return false;\n\
    \            else\n                return true;\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_tuvfg0v.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_tuvfg0v.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_tuvfg0v.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_tuvfg0v.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794264
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvww66fxq.cs(47,24): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e * 0.5);\n        long\
    \ h = a - e * Math.Sqrt(a - e * 0.5);\n        return ((f - g) * (h - g) == 0);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmtt07702.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtt07702.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtt07702.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmtt07702.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794264
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqsblkj7.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcac = abc * ac;\n        long acbcab = acbc\
    \ * abc;\n        long acbcabc = acbcab * abc;\n        long acbcabcb = acbcabc\
    \ * abc;\n        long acbcabcbc = acbcabcb * abc;\n        long acbcabcbcb =\
    \ acbcabcbc * abc;\n        long acbcabcbcbc = acbcabcbcb * abc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * abc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * abc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * abc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * abc;\n        long acb\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmaesyqvr.cs(47,17): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root1 = (-b + Math.Sqrt(d)) / (2 * a);\n\
    \        long root2 = (-b - Math.Sqrt(d)) / (2 * a);\n        if (root1 == root2)\
    \ {\n            return true;\n        }\n        if (root1 > root2) {\n     \
    \       return false;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1q1ibebm.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1q1ibebm.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * b);\n        long side3 = Math.Sqrt(c * c + b * b);\n        long\
    \ side4 = Math.Sqrt(a * a + c * c);\n        long side5 = Math.Sqrt(b * b + c\
    \ * c);\n        long side6 = Math.Sqrt(a * a + b * b + c * c);\n        long\
    \ side7 = Math.Sqrt(a * a + c * c + b * b);\n        long side8 = Math.Sqrt(a\
    \ * a + b * b + c * c + a * b);\n        long side9 = Math.Sqrt(a * a + c * c\
    \ + b * b + a * b);\n        long side10 = Math.Sqrt(a * a + b * b + c * c + a\
    \ * b + a * c);\n        long side11 = Math.Sqrt(a * a + b * b + c * c + a * b\
    \ + b * c);\n        long side12 = Math.Sqrt(a * a + b * b + c * c + b * b + a\
    \ * c);\n        long side13 = Math.Sqrt(a * a + b * b + c * c + b * b + b * c);\n\
    \        long side14 = Math.Sqrt(a * a + b * b + c * c + c * b + a * b);\n   \
    \     long side15 = Math.Sqrt(a * a + b * b + c * c + c * b + b * b);\n      \
    \  long side16 = Math.Sqrt(a * a + b * b + c * c + c * b + c * b);\n        long\
    \ side17 = Math.Sqrt(a * a + b * b + c * c + c * b + c * c);\n        long side18\
    \ = Math.Sqrt(a * a + b * b + c * c + c * b + c * c + a * b);\n        long side19\
    \ = Math.Sqrt(a * a + b * b + c * c + c * b + c * c + b * b);\n        long side20\
    \ = Math.Sqrt(a * a + b * b + c * c + c * b + c * c + c * b);\n        long side21\
    \ = Math.Sqrt(a * a + b * b + c * c + c * b + c * c + c * c);\n        long side22\
    \ = Math.Sqrt(a * a + b * b + c * c + c * b + c * c + c * c + a * b);\n      \
    \  long side23 = Math.Sqrt(a * a + b * b + \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwj4y2_m6.cs(41,48): error CS1525: Invalid expression term ''}''

    /tmp/tmpwj4y2_m6.cs(41,48): error CS1026: ) expected

    /tmp/tmpwj4y2_m6.cs(41,48): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = c - e * Math.Sqrt(c - e * 0.5);\n        long\
    \ h = a - e * Math.Sqrt(a - e * 0.5);\n        long i = Math.Sqrt(f * f + g *\
    \ g + h * h);\n        return i == 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplilsm32l.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplilsm32l.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplilsm32l.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplilsm32l.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplilsm32l.cs(26,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long) Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03c9bbc03d674d2d869aa205b52e617f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03c9bbc03d674d2d869aa205b52e617f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 == t2) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e112504d1654ec6bcfee7fc96969275>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e112504d1654ec6bcfee7fc96969275>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long abcab = ab * ab;\n\
    \        long acabc = ac * abc;\n        long abcabc = ab * abc;\n        long\
    \ acabbc = ac * abbc;\n        long abcabbc = ab * abbc;\n        long acabcab\
    \ = ac * abcab;\n        long abcabcab = ab * abcab;\n        long acabcabc =\
    \ ac * abcabc;\n        long abcabcabc = ab * abcabc;\n        long acabcabbc\
    \ = ac * abcabbc;\n        long abcabcabbc = ab * abcabbc;\n        long acabcabcab\
    \ = ac * abcabcab;\n        long abcabcabcab = ab * abcabcab;\n        long acabcabcabc\
    \ = ac * abcabcabc;\n        long abcabcabcabc = ab * abcabcabc;\n        long\
    \ acabcabcabbc = ac * abcabcabbc;\n        long abcabcabcabbc = ab * abcabcabbc;\n\
    \        long acabcabcabcab = ac * abcabcabcab;\n        long abcabcabcabcab =\
    \ ab * abcabcabcab;\n        long acabcabcabcabc = ac * abcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab * abcabcabcabc;\n        long acabcabcabcabbc = ac\
    \ * abcabcabcabbc;\n        long abcabcabcabcabbc = ab * abcabcabcabbc;\n    \
    \    long acabcabcabcabcab = ac * abcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab * abcabcabcabcab;\n        long acabcabcabcabcabc = ac * abcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab * abcabcabcabcabc;\n        long acabcabcabcabcabbc\
    \ = ac * abcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n\
    \        long acabcabcabcabcabcab = ac * abcabcabcabcabcab;\n        long \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr1y8iou2.cs(56,13): error CS1001: Identifier expected

    /tmp/tmpr1y8iou2.cs(56,13): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ b + e * Math.Sqrt(b + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e *\
    \ 0.5);\n        long h = a - e * Math.Sqrt(a - e * 0.5);\n        long i = Math.Sqrt(f\
    \ * f + g * g + h * h);\n        return i == 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8rr65f1k.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8rr65f1k.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8rr65f1k.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8rr65f1k.cs(26,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8rr65f1k.cs(27,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac + bc;\n        long\
    \ abbc = ab + bc;\n        long acbb = ac + bb;\n        long abbbc = ab + bbc;\n\
    \        long acbbb = ac + bbb;\n        long abbbbc = ab + bbbc;\n        long\
    \ acbbbc = ac + bbbc;\n        long abbbbcc = ab + bbbcc;\n        long acbbbcc\
    \ = ac + bbbcc;\n        long abbbbccc = ab + bbbccc;\n        long acbbbccc =\
    \ ac + bbbccc;\n        long abbbbcccc = ab + bbbcccc;\n        long acbbbccccc\
    \ = ac + bbbccccc;\n        long abbbbcccccc = ab + bbbcccccc;\n        long acbbbccccccc\
    \ = ac + bbbccccccc;\n        long abbbbcccccccd = ab + bbbcccccccd;\n       \
    \ long acbbbcccccccd = ac + bbbcccccccd;\n        long abbbbcccccccde = ab + bbbcccccccde;\n\
    \        long acbbbcccccccde = ac + bbbcccccccde;\n        long abbbbcccccccdef\
    \ = ab + bbbcccccccdef;\n        long acbbbcccccccdef = ac + bbbcccccccdef;\n\
    \        long abbbbcccccccdefg = ab + bbbcccccccdefg;\n        long acbbbcccccccdefg\
    \ = ac + bbbcccccccdefg;\n        long abbbbcccccccdefgh = ab + bbbcccccccdefgh;\n\
    \        long acbbbcccccccdefgh = ac + bbbcccccccdefgh;\n        long abbbbcccccccdefghi\
    \ = ab + bbbcccccccdefghi;\n        long acbbbcccccccdefghi = ac + bbbcccccccdefghi;\n\
    \        long abbbbcccccccdefghij = ab + bbbcccccccdefghij;\n        long acbbbcccccccdefghij\
    \ = ac + bbbcccccccdefghij\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcgnquppb.cs(51,58): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcc = abc * bc;\n        long acbcc = acbc *\
    \ bc;\n        long abccc = abc * abc;\n        long acbccc = acbcc * abc;\n \
    \       long abcccc = abccc * abc;\n        long acbcccb = acbcc * bc;\n     \
    \   long abccccb = abccc * bc;\n        long acbcccbc = acbccc * bc;\n       \
    \ long abccccbc = abcccc * bc;\n        long acbcccbcb = acbcccb * bc;\n     \
    \   long abccccbcb = abccccb * bc;\n        long acbcccbcbb = acbcccb * bb;\n\
    \        long abccccbcbb = abccccb * bb;\n        long acbcccbcbbc = acbcccbc\
    \ * bb;\n        long abccccbcbbc = abccccbc * bb;\n        long acbcccbcbbcb\
    \ = acbcccbcb * bb;\n        long abccccbcbbcb = abccccbcb * bb;\n        long\
    \ acbcccbcbbcbc = acbcccbcb * bb;\n        long abccccbcbbcbc = abccccbcb * bb;\n\
    \        long acbcccbcbbcbcb = acbcccbcb * bb;\n        long abccccbcbbcbcb =\
    \ abccccbcb * bb;\n        long acbcccbcbbcbcbc = acbcccbcb * bb;\n        long\
    \ abccccbcbbcbcbc = abccccbcb * bb;\n        long acbcccbcbbcbcbcb = acbcccbcb\
    \ * bb;\n        long abccccbcbbcbcbcb = abccccbcb * bb;\n        long acbcccbcbbcbcbcbc\
    \ = acbcccbcb * bb;\n        long abccccbcbbcbcbcbc = abccccbcb * bb;\n      \
    \  long acbcccbcbbcbcbcbcb = acbcccbcb * bb;\n        long abccccbc\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd06i8ooa.cs(53,22): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abbc = ab - bc;\n        long acab = ac - ab;\n        long abcab = ab - ab;\n\
    \        long acabc = ac - abc;\n        long abcabc = ab - abc;\n        long\
    \ acabbc = ac - abbc;\n        long abcabbc = ab - abbc;\n        long acabcab\
    \ = ac - abcab;\n        long abcabcab = ab - abcab;\n        long acabcabc =\
    \ ac - abcabc;\n        long abcabcabc = ab - abcabc;\n        long acabcabbc\
    \ = ac - abcabbc;\n        long abcabcabbc = ab - abcabbc;\n        long acabcabcab\
    \ = ac - abcabcab;\n        long abcabcabcab = ab - abcabcab;\n        long acabcabcabc\
    \ = ac - abcabcabc;\n        long abcabcabcabc = ab - abcabcabc;\n        long\
    \ acabcabcabbc = ac - abcabcabbc;\n        long abcabcabcabbc = ab - abcabcabbc;\n\
    \        long acabcabcabcab = ac - abcabcabcab;\n        long abcabcabcabcab =\
    \ ab - abcabcabcab;\n        long acabcabcabcabc = ac - abcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab - abcabcabcabc;\n        long acabcabcabcabbc = ac\
    \ - abcabcabcabbc;\n        long abcabcabcabcabbc = ab - abcabcabcabbc;\n    \
    \    long acabcabcabcabcab = ac - abcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab - abcabcabcabcab;\n        long acabcabcabcabcabc = ac - abcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab - abcabcabcabcabc;\n        long acabcabcabcabcabbc\
    \ = ac - abcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab - abcabcabcabcabbc;\n\
    \        long acabcabcabcabcabcab = ac - abcabcabcabcabcab;\n        long \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjxyl9l29.cs(56,13): error CS1001: Identifier expected

    /tmp/tmpjxyl9l29.cs(56,13): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long x = (long)((-b\
    \ - root) / 2.0 * a);\n        long y = (long)((-b + root) / 2.0 * a);\n     \
    \   long z = (long)((-b + root) / 2.0 * a);\n        return (x == 0 && y == 0\
    \ && z == 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63f665f82ed746639fc9a09bbb972af3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63f665f82ed746639fc9a09bbb972af3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long) Math.Sqrt(d);\n      \
    \  long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 == t2) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4c5b3f99e1f4bd785ea60fefd5bebb4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4c5b3f99e1f4bd785ea60fefd5bebb4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbcabc = acbc\
    \ * abc;\n        long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb\
    \ * bc;\n        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc =\
    \ acbcabcbcb * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long\
    \ acbcabcbcbcbc = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcbc = acbcabcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiib255az.cs(46,46): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ abbc = ab * bc;\n        long abac = ab * ac;\n        long acab = ac * ab;\n\
    \        long acbc = ac * bc;\n        long acbca = ac * bc * ca;\n        long\
    \ accab = ac * cab;\n        long cabac = cab * ac;\n        long cabbc = cab\
    \ * bc;\n        long cabbca = cab * bc * ca;\n        long cabcab = cab * cab;\n\
    \        long cabcba = cab * cab * ba;\n        long cabcaba = cab * cab * caa;\n\
    \        long cabcabab = cab * cab * caba;\n        long cabcabac = cab * cab\
    \ * caba * ac;\n        long cabcabacb = cab * cab * caba * ac * bc;\n       \
    \ long cabcabacbc = cab * cab * caba * ac * bc * ca;\n        long cabcabacbca\
    \ = cab * cab * caba * ac * bc * ca * ca;\n        long cabcabaccab = cab * cab\
    \ * caba * ac * cab * ca;\n        long cabcabaccabb = cab * cab * caba * ac *\
    \ cab * ca * bc;\n        long cabcabaccabbc = cab * cab * caba * ac * cab * ca\
    \ * bc * ca;\n        long cabcabaccabbca = cab * cab * caba * ac * cab * ca *\
    \ bc * ca * ca;\n        long cabcabaccabcab = cab * cab * caba * ac * cab * cab\
    \ * ca;\n        long cabcabaccabcabb = cab * cab * caba * ac * cab * cab * ca\
    \ * bc;\n        long cabcabaccabcabbc = cab * cab * caba * ac * cab * cab * ca\
    \ * bc * ca;\n        long cabcabaccabcabbca = cab * cab * caba * ac * cab * cab\
    \ * ca * bc * ca * ca;\n        long cabcabaccabcabcab = cab * cab * caba * ac\
    \ * cab * cab * cab * ca;\n        long cabcabaccabcabcabb = cab * cab\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxch6w_wi.cs(50,44): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ b + e * Math.Sqrt(b + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e *\
    \ 0.5);\n        long h = a - e * Math.Sqrt(a - e * 0.5);\n        if (f > g)\
    \ {\n            return false;\n        }\n        if (f < h) {\n            return\
    \ false;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiwb6lycq.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpiwb6lycq.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpiwb6lycq.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpiwb6lycq.cs(26,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ abbc = ab * bc;\n        long abac = ab * ac;\n        long abcab = ab * abc;\n\
    \        long abcabc = ab * abc;\n        long abcabcb = ab * abc * bc;\n    \
    \    long abcabcba = ab * abc * bc * a;\n        long abcabcbac = ab * abc * bc\
    \ * ac;\n        long abcabcbacb = ab * abc * bc * ac * b;\n        long abcabcbacba\
    \ = ab * abc * bc * ac * ba;\n        long abcabcbacbac = ab * abc * bc * ac *\
    \ bac;\n        long abcabcbacbacb = ab * abc * bc * ac * bac * b;\n        long\
    \ abcabcbacbacba = ab * abc * bc * ac * bac * ba;\n        long abcabcbacbacbac\
    \ = ab * abc * bc * ac * bac * bac;\n        long abcabcbacbacbacb = ab * abc\
    \ * bc * ac * bac * bac * b;\n        long abcabcbacbacbacba = ab * abc * bc *\
    \ ac * bac * bac * ba;\n        long abcabcbacbacbacbac = ab * abc * bc * ac *\
    \ bac * bac * bac;\n        long abcabcbacbacbacbacb = ab * abc * bc * ac * bac\
    \ * bac * bac * b;\n        long abcabcbacbacbacbacba = ab * abc * bc * ac * bac\
    \ * bac * bac * ba;\n        long abcabcbacbacbacbacbac = ab * abc * bc * ac *\
    \ bac * bac * bac * bac;\n        long abcabcbacbacbacbacbacb = ab * abc * bc\
    \ * ac * bac * bac * bac * bac * b;\n        long abcabcbacbacbacbacbacba = ab\
    \ * abc * bc * ac * bac * bac * bac * bac * ba;\n        long abcabcbacbacbacbacbacbac\
    \ = ab * abc * bc * ac * bac * bac * bac\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8e5z83v3.cs(45,77): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abbc = ab - bc;\n        long acab = ac - ab;\n        long abcab = ab - ab;\n\
    \        long acabc = ac - abc;\n        long abcabc = ab - abc;\n        long\
    \ acabbc = ac - abbc;\n        long abcabbc = ab - abbc;\n        long acabcab\
    \ = ac - abcab;\n        long abcabcab = ab - abcab;\n        long acabcabc =\
    \ ac - abcabc;\n        long abcabcabc = ab - abcabc;\n        long acabcabbc\
    \ = ac - abcabbc;\n        long abcabcabbc = ab - abcabbc;\n        long acabcabcab\
    \ = ac - abcabcab;\n        long abcabcabcab = ab - abcabcab;\n        long acabcabcabc\
    \ = ac - abcabcabc;\n        long abcabcabcabc = ab - abcabcabc;\n        long\
    \ acabcabcabbc = ac - abcabcabbc;\n        long abcabcabcabbc = ab - abcabcabbc;\n\
    \        long acabcabcabcab = ac - abcabcabcab;\n        long abcabcabcabcab =\
    \ ab - abcabcabcab;\n        long acabcabcabcabc = ac - abcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab - abcabcabcabc;\n        long acabcabcabcabbc = ac\
    \ - abcabcabcabbc;\n        long abcabcabcabcabbc = ab - abcabcabcabbc;\n    \
    \    long acabcabcabcabcab = ac - abcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab - abcabcabcabcab;\n        long acabcabcabcabcabc = ac - abcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab - abcabcabcabcabc;\n        long acabcabcabcabcabbc\
    \ = ac - abcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab - abcabcabcabcabbc;\n\
    \        long acabcabcabcabcabcab = ac - abcabcabcabcabcab;\n        long \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjxyl9l29.cs(56,13): error CS1001: Identifier expected

    /tmp/tmpjxyl9l29.cs(56,13): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqsblkj7.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = Math.Sqrt(a + b + c);\n\
    \        long g = Math.Sqrt(a + b - c);\n        long h = Math.Sqrt(a + b + c\
    \ - e);\n        long i = Math.Sqrt(a + b - e + f);\n        long j = Math.Sqrt(a\
    \ + b + e - f);\n        long k = Math.Sqrt(a + b + e + g);\n        long l =\
    \ Math.Sqrt(a + b - e - g);\n        long m = Math.Sqrt(a + b - e + h - i);\n\
    \        long n = Math.Sqrt(a + b + e - h - i);\n        long o = Math.Sqrt(a\
    \ + b + e + h - j);\n        long p = Math.Sqrt(a + b - e - h - j);\n        long\
    \ q = Math.Sqrt(a + b + e + h - k);\n        long r = Math.Sqrt(a + b - e - h\
    \ - k);\n        long s = Math.Sqrt(a + b + e + h - l);\n        long t = Math.Sqrt(a\
    \ + b - e - h - l);\n        long u = Math.Sqrt(a + b + e + h - m - n);\n    \
    \    long v = Math.Sqrt(a + b - e - h - m - n);\n        long w = Math.Sqrt(a\
    \ + b + e + h - m - o);\n        long x = Math.Sqrt(a + b - e - h - m - o);\n\
    \        long y = Math.Sqrt(a + b + e + h - n - p);\n        long z = Math.Sqrt(a\
    \ + b - e - h - n - p);\n        long A = (f * f * f + g * g * g + h * h * h +\
    \ i * i * i + j * j * j + k * k * k + l * l * l + m * m * m + n * n * n + o *\
    \ o * o + p * p * p + q * q * q + r * r * r + s * s * s + t * t * t + u * u *\
    \ u + v * v * v + w * w * w + x * x * x + y * y * y + z * z * z) / 24;\n     \
    \   long B = (f * f * f + g * g * g + h * h * h + i * i * i + j * j * j + k *\
    \ k * k + l * l * l + m * m * m + n * n * n + o * o * o + p * p * p + q * q *\
    \ q + r * r\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr36d8vnc.cs(45,168): error CS1026: ) expected

    /tmp/tmpr36d8vnc.cs(45,168): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / 2;\n        long t2 = (-b - root) / 2;\n        long t3 = (-b + root) / 2;\n\
    \        long t4 = (-b - root) / 2;\n        if (t1 == t2 && t1 == t3 && t1 ==\
    \ t4)\n            return true;\n        if (t2 == t3 && t2 == t4 && t2 == t1)\n\
    \            return true;\n        if (t3 == t4 && t3 == t1 && t3 == t2)\n   \
    \         return true;\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1afbe972940348a08bc663e5641e90be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1afbe972940348a08bc663e5641e90be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n   \
    \     long abbbbbc = abbbbbc * bc;\n        long acbbbcbc = acbbbbc * bc;\n  \
    \      long abbbbcbc = abbbbcb * bc;\n        long acbbbcbcb = acbbbcb * bc;\n\
    \        long abbbbcbcb = abbbbcb * bc;\n        long acbbbcbcbc = acbbbcbc *\
    \ bc;\n        long abbbbcbcbc = abbbbcbc * bc;\n        long acbbbcbcbcb = acbbbcbcb\
    \ * bc;\n        long abbbbcbcbcb = abbbbcbcb * bc;\n        long acbbbcbcbcbc\
    \ = acbbbcbcbc * bc;\n        long abbbbcbcbcbc = abbbbcbcbc * bc;\n        long\
    \ acbbbcbcbcbcb = acbbbcbcbcb * bc;\n        long abbbbcbcbcbcb = abbbbcbcbcb\
    \ * bc;\n        long acbbbcbcbcbcbc = acbbbcbcbcbc * bc;\n        long abbbbcbcbcbcbc\
    \ = abbbbcbcbcbc * bc;\n        long acbbbcbcbcbcbcb = acbbbcbcbcbcb * bc;\n \
    \       long abbbbcbcbcbcbcb = abbbbcbcbcbcb * bc;\n        long acbbbcbcbcbcbcbc\
    \ = acbbbcbcbcbcbc * bc;\n        long abbbbcbcbcbcbcbc = abbbbcbcbcbcbc * bc;\n\
    \        long acbbbcbcbcbcbcbcb = acbbbcbcbcbcbcb * bc;\n        long abbbbcbcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz6pwzqxg.cs(51,25): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n\
    \            return true;\n        if (t1 > t2)\n            return false;\n \
    \       long t3 = t1 - t2;\n        if (t3 > 0)\n            return false;\n \
    \       long t4 = t1 + t2;\n        if (t4 > 0)\n            return false;\n \
    \       long t5 = t1 + t3;\n        if (t5 > 0)\n            return false;\n \
    \       long t6 = t1 + t4;\n        if (t6 > 0)\n            return false;\n \
    \       long t7 = t1 + t5;\n        if (t7 > 0)\n            return false;\n \
    \       long t8 = t1 + t6;\n        if (t8 > 0)\n            return false;\n \
    \       long t9 = t1 + t7;\n        if (t9 > 0)\n            return false;\n \
    \       long t10 = t1 + t8;\n        if (t10 > 0)\n            return false;\n\
    \        long t11 = t1 + t9;\n        if (t11 > 0)\n            return false;\n\
    \        long t12 = t1 + t10;\n        if (t12 > 0)\n            return false;\n\
    \        long t13 = t1 + t11;\n        if (t13 > 0)\n            return false;\n\
    \        long t14 = t1 + t12;\n        if (t14 > 0)\n            return false;\n\
    \        long t15 = t1 + t13;\n        if (t15 > 0)\n            return false;\n\
    \        long t16 = t1 + t14;\n        if (t16 > 0)\n            return false;\n\
    \        long t17 = t1 + t15;\n        if (t17 > 0)\n            return false;\n\
    \        long t18 = t1 + t16;\n        if (t18 > 0)\n            return false;\n\
    \        long t19 = t1 + t17;\n        if (t19 > 0)\n            return false;\n\
    \        long t20 = t1 + t18;\n        if (t20 > 0)\n            return false;\n\
    \        long t21 = t1 + t19;\n        if (t21 > 0)\n            return false;\n\
    \        long t22 = t1 + t20;\n        if (t22 > 0)\n            return false;\n\
    \        long t23 = t1 + t21;\n        if (t23 > 0)\n            return false;\n\
    \        long t24 = t1 + t22;\n        if (t24 > 0)\n            return false;\n\
    \        long t25 = t1 + t23;\n        if (t25 > 0)\n            return false;\n\
    \        long t26 = t1 + t24;\n        if (t26 > 0)\n            return false;\n\
    \        long t\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyy6slsk_.cs(101,15): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long e = Math.Sqrt(d);\n            long f = b + e * (b - a);\n           \
    \ long g = c - e * (a - c);\n            if (f > g) {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp45yh9_ix.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqsblkj7.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long x = (long)((-b\
    \ - root) / 2.0 * a);\n        long y = (long)((-b + root) / 2.0 * a);\n     \
    \   long z = (long)((-b + root) / 2.0 * a);\n        return (x == 0 && y == 0\
    \ && z == 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63f665f82ed746639fc9a09bbb972af3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63f665f82ed746639fc9a09bbb972af3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcabc = acbc * abc;\n        long acbcabcb\
    \ = acbcabc * bc;\n        long acbcabcbc = acbcabcb * bc;\n        long acbcabcbcb\
    \ = acbcabcbc * bc;\n        long acbcabcbcbc = acbcabcbcb * bc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * bc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbcbc = acbcabcbcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo8nrlu_h.cs(45,52): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqsblkj7.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long abcab = ab * ab;\n\
    \        long acabc = ac * abc;\n        long abcabc = ab * abc;\n        long\
    \ acabbc = ac * abbc;\n        long abcabbc = ab * abbc;\n        long acabcab\
    \ = ac * abcab;\n        long abcabcab = ab * abcab;\n        long acabcabc =\
    \ ac * abcabc;\n        long abcabcabc = ab * abcabc;\n        long acabcabbc\
    \ = ac * abcabbc;\n        long abcabcabbc = ab * abcabbc;\n        long acabcabcab\
    \ = ac * abcabcab;\n        long abcabcabcab = ab * abcabcab;\n        long acabcabcabc\
    \ = ac * abcabcabc;\n        long abcabcabcabc = ab * abcabcabc;\n        long\
    \ acabcabcabbc = ac * abcabcabbc;\n        long abcabcabcabbc = ab * abcabcabbc;\n\
    \        long acabcabcabcab = ac * abcabcabcab;\n        long abcabcabcabcab =\
    \ ab * abcabcabcab;\n        long acabcabcabcabc = ac * abcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab * abcabcabcabc;\n        long acabcabcabcabbc = ac\
    \ * abcabcabcabbc;\n        long abcabcabcabcabbc = ab * abcabcabcabbc;\n    \
    \    long acabcabcabcabcab = ac * abcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab * abcabcabcabcab;\n        long acabcabcabcabcabc = ac * abcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab * abcabcabcabcabc;\n        long acabcabcabcabcabbc\
    \ = ac * abcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n\
    \        long acabcabcabcabcabcab = ac * abcabcabcabcabcab;\n        long \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr1y8iou2.cs(56,13): error CS1001: Identifier expected

    /tmp/tmpr1y8iou2.cs(56,13): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e * 0.5);\n        long\
    \ h = (b + e * 0.5) * Math.Sqrt(b + e * 0.5);\n        long i = a + e * Math.Sqrt(a\
    \ + e * 0.5);\n        long j = (a + e * 0.5) * Math.Sqrt(a + e * 0.5);\n    \
    \    long k = Math.Sqrt(a * a + b * b - 4 * a * c);\n        long l = Math.Sqrt(a\
    \ * a + b * b + 4 * a * c);\n        long m = Math.Sqrt(a * a + b * b + 4 * a\
    \ * c);\n        long n = Math.Sqrt(a * a + b * b - 4 * a * c);\n        long\
    \ o = Math.Sqrt(a * a + b * b + 4 * a * c);\n        long p = Math.Sqrt(a * a\
    \ + b * b - 4 * a * c);\n        long q = Math.Sqrt(a * a + b * b + 4 * a * c);\n\
    \        long r = Math.Sqrt(a * a + b * b - 4 * a * c);\n        long s = Math.Sqrt(a\
    \ * a + b * b + 4 * a * c);\n        long t = Math.Sqrt(a * a + b * b + 4 * a\
    \ * c);\n        long u = Math.Sqrt(a * a + b * b - 4 * a * c);\n        long\
    \ v = Math.Sqrt(a * a + b * b + 4 * a * c);\n        long w = Math.Sqrt(a * a\
    \ + b * b + 4 * a * c);\n        long x = Math.Sqrt(a * a + b * b - 4 * a * c);\n\
    \        long y = Math.Sqrt(a * a + b * b + 4 * a * c);\n        long z = Math.Sqrt(a\
    \ * a + b * b + 4 * a * c);\n        long a = Math.Sqrt(a * a + b * b + 4 * a\
    \ * c);\n        long b = Math.Sqrt(a * a + b * b + 4 * a * c);\n        long\
    \ c = Math.Sqrt(a * a + b * b - 4 * a * c);\n        long d = Math.Sqrt(a * a\
    \ + b * b + 4 * a * c);\n        long e = Math.Sqrt(a * a + b * b + 4 * a * c);\n\
    \        long f = Math.Sqrt(a * a + b * b - 4 * a * c);\n        long g = \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5_arg8c3.cs(50,17): error CS1525: Invalid expression term ''}''

    /tmp/tmp5_arg8c3.cs(50,17): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbcc * bc;\n   \
    \     long abbbbcc = abbbbcc * bc;\n        long acbbbcbc = acbbbcc * bc;\n  \
    \      long abbbbcbc = abbbbcc * bc;\n        long acbbbcbcd = acbbbcc * bc;\n\
    \        long abbbbcbcd = abbbbcc * bc;\n        long acbbbcbcde = acbbbcc * bc;\n\
    \        long abbbbcbcde = abbbbcc * bc;\n        long acbbbcbcdef = acbbbcc *\
    \ bc;\n        long abbbbcbcdef = abbbbcc * bc;\n        long acbbbcbcdefg = acbbbcc\
    \ * bc;\n        long abbbbcbcdefg = abbbbcc * bc;\n        long acbbbcbcdefgh\
    \ = acbbbcc * bc;\n        long abbbbcbcdefgh = abbbbcc * bc;\n        long acbbbcbcdefghi\
    \ = acbbbcc * bc;\n        long abbbbcbcdefghi = abbbbcc * bc;\n        long acbbbcbcdefghij\
    \ = acbbbcc * bc;\n        long abbbbcbcdefghij = abbbbcc * bc;\n        long\
    \ acbbbcbcdefghijk = acbbbcc * bc;\n        long abbbbcbcdefghijk = abbbbcc *\
    \ bc;\n        long acbbbcbcdefghijkl = acbbbcc * bc;\n        long abbbbcbcdefghijkl\
    \ = abbbbcc * bc;\n        long acbbbcbcdefghijkll = acbbbcc * bc;\n\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp60k0tf1v.cs(25,21): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmp60k0tf1v.cs(26,22): error CS0103: The name ''acbb'' does not exist in
    the current context

    /tmp/tmp60k0tf1v.cs(27,22): error CS0103: The name ''abbb'' does not exist in
    the current context

    /tmp/tmp60k0tf1v.cs(30,24): error CS0103: The name ''acbbbcc'' does not exist
    in the current context

    /tmp/tmp60k0tf1v.cs(32,25): error CS0103: The name ''acbbbcc'' does not exist
    in the current context

    /tmp/tmp60k0tf1v.cs(34,26): error CS0103: The name ''acbbbcc'' does not exist
    in the current context

    /tmp/tmp60k0tf1v.cs(36,27): error CS0103: The name ''acbbbcc'' does not exist
    in the current context

    /tmp/tmp60k0tf1v.cs(38,28): error CS0103: The name ''acbbbcc'' does not exist
    in the current context

    /tmp/tmp60k0tf1v.cs(40,29): error CS0103: The name ''acbbbcc'' does not exist
    in the current context

    /tmp/tmp60k0tf1v.cs(42,30): error CS0103: The name ''acbbbcc'' does not exist
    in the current context

    /tmp/tmp60k0tf1v.cs(44,31): error CS0103: The name ''acbbbcc'' does not exist
    in the current context

    /tmp/tmp60k0tf1v.cs(46,32): error CS0103: The name ''acbbbcc'' does not exist
    in the current context

    /tmp/tmp60k0tf1v.cs(48,33): error CS0103: The name ''acbbbcc'' does not exist
    in the current context

    /tmp/tmp60k0tf1v.cs(50,34): error CS0103: The name ''acbbbcc'' does not exist
    in the current context

    /tmp/tmp60k0tf1v.cs(52,35): error CS0103: The name ''acbbbcc'' does not exist
    in the current context

    /tmp/tmp60k0tf1v.cs(28,23): error CS0165: Use of unassigned local variable ''acbbbc''

    /tmp/tmp60k0tf1v.cs(29,23): error CS0165: Use of unassigned local variable ''abbbbc''

    /tmp/tmp60k0tf1v.cs(31,24): error CS0165: Use of unassigned local variable ''abbbbcc''

    /tmp/tmp60k0tf1v.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long root = (long)Math.Sqrt(d);\n            long t1 = (-b + root) / (2 * a);\n\
    \            long t2 = (-b - root) / (2 * a);\n            if (t1 >= 0 && t1 <=\
    \ 1 && t2 >= 0 && t2 <= 1) {\n                return true;\n            }\n  \
    \      }\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13d1e5f4fd3744248a140f6263ee101d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13d1e5f4fd3744248a140f6263ee101d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = c - e * Math.Sqrt(c - e * 0.5);\n        long\
    \ h = a + e * Math.Sqrt(a + e * 0.5);\n        return ((f < g) && (f < h));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmxr9bvmu.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmxr9bvmu.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmxr9bvmu.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmxr9bvmu.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbca = acbc *\
    \ abc;\n        long acbcab = acbca * abc;\n        long acbcabc = acbcab * abc;\n\
    \        long acbcabcb = acbcabc * abc;\n        long acbcabcbc = acbcabcb * abc;\n\
    \        long acbcabcbcb = acbcabcbc * abc;\n        long acbcabcbcbc = acbcabcbcb\
    \ * abc;\n        long acbcabcbcbcb = acbcabcbcbc * abc;\n        long acbcabcbcbcbc\
    \ = acbcabcbcbcb * abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbc = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * abc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * abc;\n       \
    \ long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprr1akbdm.cs(37,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbc''
    is already defined in this scope

    /tmp/tmprr1akbdm.cs(40,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmprr1akbdm.cs(42,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmprr1akbdm.cs(43,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmprr1akbdm.cs(45,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmprr1akbdm.cs(46,37): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbcbcbcb''

    /tmp/tmprr1akbdm.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long acbc = ac * bc;\n\
    \        long acbb = ac * bb;\n        long abcab = ab * cab;\n        long abcbc\
    \ = ab * bc;\n        long abcbb = ab * cb;\n        long abcabc = ab * cab;\n\
    \        long abcbcb = ab * cb;\n        long abcbab = ab * cba;\n        long\
    \ abcabb = ab * cab;\n        long abcabcb = ab * cab;\n        long abcabcba\
    \ = ab * cab;\n        long abcabcbc = ab * cab;\n        long abcabcbcb = ab\
    \ * cab;\n        long abcabcbcba = ab * cab;\n        long abcabcbcbc = ab *\
    \ cab;\n        long abcabcbcbcb = ab * cab;\n        long abcabcbcbcba = ab *\
    \ cab;\n        long abcabcbcbcbc = ab * cab;\n        long abcabcbcbcbcb = ab\
    \ * cab;\n        long abcabcbcbcbcba = ab * cab;\n        long abcabcbcbcbcbc\
    \ = ab * cab;\n        long abcabcbcbcbcbcb = ab * cab;\n        long abcabcbcbcbcbcba\
    \ = ab * cab;\n        long abcabcbcbcbcbcbc = ab * cab;\n        long abcabcbcbcbcbcbcb\
    \ = ab * cab;\n        long abcabcbcbcbcbcbcba = ab * cab;\n        long abcabcbcbcbcbcbcbc\
    \ = ab * cab;\n        long abcabcbcbcbcbcbcbcb = ab * cab;\n        long abcabcbcbcbcbcbcbcba\
    \ = ab * cab;\n        long abcabcbcbcbcbcbcbcbc = ab * cab;\n        long abcabcbcbcbcbcbcbcbcba\
    \ = ab * cab;\n        long abcabcbcbcbcbcbcbcbcbc = ab * cab;\n        long abcabcbcbcbcbcbcbcbcbcb\
    \ = ab * cab;\n        long \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwa6t1iz0.cs(59,13): error CS1001: Identifier expected

    /tmp/tmpwa6t1iz0.cs(59,13): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long abcbcb = abcbcb * bc;\n        long abcbcbc = abcbcbc * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long abcbcbcbc = abcbcbcbc *\
    \ bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long abcbcbcbcbc =\
    \ abcbcbcbcbc * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb *\
    \ bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi2kku8hm.cs(47,58): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abc * bc;\n        long abbbc = abbc *\
    \ bc;\n        long abbbbc = abbbc * bc;\n        long abbbbbc = abbbbbc * bc;\n\
    \        long abbbbbbc = abbbbbbc * bc;\n        long abbbbbbbc = abbbbbbbc *\
    \ bc;\n        long abbbbbbbbc = abbbbbbbbc * bc;\n        long abbbbbbbbbc =\
    \ abbbbbbbbbc * bc;\n        long abbbbbbbbbbc = abbbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbbbc = abbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbc = abbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbc = abbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbc * bc;\n\
    \        long abbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbc * bc;\n      \
    \  long abbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbb\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpit4bs5gi.cs(51,32): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acab = ac * abc;\n        long acbc = ac * bc;\n        long abbc = ab * bc;\n\
    \        long abcab = ab * abc;\n        long abcabc = ab * abc;\n        long\
    \ abcabcb = ab * abcb;\n        long abcabcbc = ab * abcbc;\n        long abcabcbcd\
    \ = ab * abcbcd;\n        long abcabcbcde = ab * abcbcde;\n        long abcabcbcdef\
    \ = ab * abcbcdef;\n        long abcabcbcdefg = ab * abcbcdefg;\n        long\
    \ abcabcbcdefgh = ab * abcbcdefgh;\n        long abcabcbcdefghi = ab * abcbcdefghi;\n\
    \        long abcabcbcdefghij = ab * abcbcdefghij;\n        long abcabcbcdefghijk\
    \ = ab * abcbcdefghijk;\n        long abcabcbcdefghijkl = ab * abcbcdefghijkl;\n\
    \        long abcabcbcdefghijklm = ab * abcbcdefghijklm;\n        long abcabcbcdefghijklmn\
    \ = ab * abcbcdefghijkln;\n        long abcabcbcdefghijklmnx = ab * abcbcdefghijklnx;\n\
    \        long abcabcbcdefghijklmnxy = ab * abcbcdefghijklnxy;\n        long abcabcbcdefghijklmnxz\
    \ = ab * abcbcdefghijklnxz;\n        long abcabcbcdefghijklmnyz = ab * abcbcdefghijklnyz;\n\
    \        long abcabcbcdefghijklmnyzx = ab * abcbcdefghijklnyzx;\n        long\
    \ abcabcbcdefghijklmnyzxy = ab * abcbcdefghijklnyzxy;\n        long abcabcbcdefghijklmnyzxz\
    \ = ab * abcbcdefghijklnyzxz;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvk4hge7d.cs(29,29): error CS0103: The name ''abcb'' does not exist in
    the current context

    /tmp/tmpvk4hge7d.cs(30,30): error CS0103: The name ''abcbc'' does not exist in
    the current context

    /tmp/tmpvk4hge7d.cs(31,31): error CS0103: The name ''abcbcd'' does not exist in
    the current context

    /tmp/tmpvk4hge7d.cs(32,32): error CS0103: The name ''abcbcde'' does not exist
    in the current context

    /tmp/tmpvk4hge7d.cs(33,33): error CS0103: The name ''abcbcdef'' does not exist
    in the current context

    /tmp/tmpvk4hge7d.cs(34,34): error CS0103: The name ''abcbcdefg'' does not exist
    in the current context

    /tmp/tmpvk4hge7d.cs(35,35): error CS0103: The name ''abcbcdefgh'' does not exist
    in the current context

    /tmp/tmpvk4hge7d.cs(36,36): error CS0103: The name ''abcbcdefghi'' does not exist
    in the current context

    /tmp/tmpvk4hge7d.cs(37,37): error CS0103: The name ''abcbcdefghij'' does not exist
    in the current context

    /tmp/tmpvk4hge7d.cs(38,38): error CS0103: The name ''abcbcdefghijk'' does not
    exist in the current context

    /tmp/tmpvk4hge7d.cs(39,39): error CS0103: The name ''abcbcdefghijkl'' does not
    exist in the current context

    /tmp/tmpvk4hge7d.cs(40,40): error CS0103: The name ''abcbcdefghijklm'' does not
    exist in the current context

    /tmp/tmpvk4hge7d.cs(41,41): error CS0103: The name ''abcbcdefghijkln'' does not
    exist in the current context

    /tmp/tmpvk4hge7d.cs(42,42): error CS0103: The name ''abcbcdefghijklnx'' does not
    exist in the current context

    /tmp/tmpvk4hge7d.cs(43,43): error CS0103: The name ''abcbcdefghijklnxy'' does
    not exist in the current context

    /tmp/tmpvk4hge7d.cs(44,43): error CS0103: The name ''abcbcdefghijklnxz'' does
    not exist in the current context

    /tmp/tmpvk4hge7d.cs(45,43): error CS0103: The name ''abcbcdefghijklnyz'' does
    not exist in the current context

    /tmp/tmpvk4hge7d.cs(46,44): error CS0103: The name ''abcbcdefghijklnyzx'' does
    not exist in the current context

    /tmp/tmpvk4hge7d.cs(47,45): error CS0103: The name '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac + bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long abcc = abc * c;\n\
    \        long acbcc = acbc * c;\n        long abccc = abcc * c;\n        long\
    \ acbccc = acbcc * c;\n        long abcccb = abccc * bc;\n        long acbcccb\
    \ = acbccc * bc;\n        long abcccbc = abcccb * bc;\n        long acbcccbc =\
    \ acbcccb * bc;\n        long abcccbcb = abcccbc * bc;\n        long acbcccbcb\
    \ = acbcccbc * bc;\n        long abcccbcbc = abcccbcb * bc;\n        long acbcccbcbc\
    \ = acbcccbcb * bc;\n        long abcccbcbcb = abcccbcbc * bc;\n        long acbcccbcbcb\
    \ = acbcccbcbc * bc;\n        long abcccbcbcbc = abcccbcbcb * bc;\n        long\
    \ acbcccbcbcb = acbcccbcbc * bc;\n        long abcccbcbcbc = abcccbcbcb * bc;\n\
    \        long acbcccbcbcb = acbcccbcbc * bc;\n        long abcccbcbcbc = abcccbcbcb\
    \ * bc;\n        long acbcccbcbcb = acbcccbcbc * bc;\n        long abcccbcbcbc\
    \ = abcccbcbcb * bc;\n        long acbcccbcbcb = acbcccbcbc * bc;\n        long\
    \ abcccbcbcbc = abcccbcbcb * bc;\n        long acbcccbcbcb = acbcccbcbc * bc;\n\
    \        long abcccbcbcbc = abcccbcbcb * bc;\n        long acbcccbcbcb = acbcccbcbc\
    \ * bc;\n        long abcccbcbcbc = abcccbcbcb * bc;\n        long acbcccbcbcb\
    \ = acbcccbcbc * bc;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmponeridc5.cs(54,13): error CS1001: Identifier expected

    /tmp/tmponeridc5.cs(54,13): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcc = abc * abc;\n        long acbc = acb * acb;\n        long acbcc = acbc\
    \ * acbc;\n        long acbccc = acbcc * acbcc;\n        long acbcccb = acbccc\
    \ * acbcc;\n        long acbcccbc = acbcccb * acbcc;\n        long acbcccbcb =\
    \ acbcccbc * acbcc;\n        long acbcccbcbb = acbcccbcb * acbcc;\n        long\
    \ acbcccbcbcbb = acbcccbcb * acbcc;\n        long acbcccbcbcbbb = acbcccbcb *\
    \ acbcc;\n        long acbcccbcbcbbbc = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcc\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbbbccc = acbcccbcb * acbcc;\n \
    \       long acbcccbcbcbbbcccb = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcccbc\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcccbcb = acbcccbcb * acbcc;\n\
    \        long acbcccbcbcbbbcccbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcccbcbc\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcccbcbcb = acbcccbcb * acbcc;\n\
    \        long acbcccbcbcbbbcccbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcccbcbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcccbcbcbbb = acbcccbcb * acbcc;\n\
    \        long acbcccbcbcbbbcccb\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8t8tyrfa.cs(46,31): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbcabc = acbc\
    \ * abc;\n        long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb\
    \ * bc;\n        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc =\
    \ acbcabcbcb * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long\
    \ acbcabcbcbcbc = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbc * bc;\n   \
    \     long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6bf0k40v.cs(46,46): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long t1 = (-b + Math.Sqrt(d)) / (2 * a);\n            long t2 = (-b - Math.Sqrt(d))\
    \ / (2 * a);\n            if (t1 == t2) {\n                return true;\n    \
    \        }\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkzeghnz.cs(21,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnkzeghnz.cs(22,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcab = acbc * abc;\n        long acbcabc =\
    \ acbcab * abc;\n        long acbcabcb = acbcabc * abc;\n        long acbcabcbc\
    \ = acbcabcb * abc;\n        long acbcabcbcb = acbcabcbc * abc;\n        long\
    \ acbcabcbcbc = acbcabcbcb * abc;\n        long acbcabcbcbcb = acbcabcbcbc * abc;\n\
    \        long acbcabcbcbcbc = acbcabcbcbcb * abc;\n        long acbcabcbcbcbcb\
    \ = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * abc;\n\
    \        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n  \
    \      long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwtg7uap5.cs(46,24): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ abbc = ab * bc;\n        long abcc = ab * cc;\n        long acbc = ac * bc;\n\
    \        long accc = ac * cc;\n        long abcc = ab * cc;\n        long abbcc\
    \ = ab * b * c;\n        long abbcc = ab * b * c;\n        long acbcc = ac * b\
    \ * c;\n        long acccc = ac * c * c;\n        long abccc = ab * c * c;\n \
    \       long abbccc = ab * b * c * c;\n        long abbccc = (ab * b * c * c);\n\
    \        long acbccc = (ac * b * c * c);\n        long acccc = (ac * c * c * c);\n\
    \        long abccc = (ab * c * c * c);\n        long abbccc = (ab * b * c * c\
    \ * c);\n        long abbccc = (ab * b * c * c * c);\n        long acbccc = (ac\
    \ * b * c * c * c);\n        long acccc = (ac * c * c * c * c);\n        long\
    \ abccc = (ab * c * c * c * c);\n        long abbccc = (ab * b * c * c * c * c);\n\
    \        long abbccc = (ab * b * c * c * c * c);\n        long acbccc = (ac *\
    \ b * c * c * c * c);\n        long acccc = (ac * c * c * c * c * c);\n      \
    \  long abccc = (ab * c * c * c * c * c);\n        long abbccc = (ab * b * c *\
    \ c * c * c * c);\n        long abbccc = (ab * b * c * c * c * c * c);\n     \
    \   long acbccc = (ac * b * c * c * c * c * c);\n        long acccc = (ac * c\
    \ * c * c * c * c * c);\n        long abccc = (ab * c * c * c * c * c * c);\n\
    \        long abbccc = (ab * b * c * c * c * c * c * c);\n        long abbccc\
    \ = (ab\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_xu0hsne.cs(55,26): error CS1026: ) expected

    /tmp/tmp_xu0hsne.cs(55,26): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acab = ac * abc;\n        long abcab = ab * abc;\n        long acabc = ac *\
    \ abc;\n        long abcabc = ab * abc;\n        long acabcb = ac * abc;\n   \
    \     long abcabcb = ab * abc;\n        long acabcbc = ac * abc;\n        long\
    \ abcabcbc = ab * abc;\n        long acabcbcb = ac * abc;\n        long abcabcbcb\
    \ = ab * abc;\n        long acabcbcbc = ac * abc;\n        long abcabcbcbc = ab\
    \ * abc;\n        long acabcbcbcb = ac * abc;\n        long abcabcbcbcb = ab *\
    \ abc;\n        long acabcbcbcbc = ac * abc;\n        long abcabcbcbcbc = ab *\
    \ abc;\n        long acabcbcbcbcb = ac * abc;\n        long abcabcbcbcbcb = ab\
    \ * abc;\n        long acabcbcbcbcbc = ac * abc;\n        long abcabcbcbcbcbc\
    \ = ab * abc;\n        long acabcbcbcbcbcb = ac * abc;\n        long abcabcbcbcbcbcb\
    \ = ab * abc;\n        long acabcbcbcbcbcbc = ac * abc;\n        long abcabcbcbcbcbcbc\
    \ = ab * abc;\n        long acabcbcbcbcbcbcb = ac * abc;\n        long abcabcbcbcbcbcbcb\
    \ = ab * abc;\n        long acabcbcbcbcbcbcbc = ac * abc;\n        long abcabcbcbcbcbcbcb\
    \ = ab * abc;\n        long acabcbcbcbcbcbcbcb = ac * abc;\n        long abcabcbcbcbcbcbcbc\
    \ = ab * abc;\n        long acabcbcbcbcbcbcbcb = ac * abc;\n        long abcabcbcbcbcbcbcbcbc\
    \ = ab * abc;\n        long acabcbcbcbcbcbcbcbcb = ac * abc;\n        long abcabcbcbcbcbcbcbcbcbc\
    \ = ab * abc;\n        long acabcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd7p4zenp.cs(58,22): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcab = acbc * ab;\n        long acbcabc = acbcab\
    \ * bc;\n        long acbcabcb = acbcabcb * bc;\n        long acbcabcbc = acbcabcbc\
    \ * bc;\n        long acbcabcbcb = acbcabcbcb * bc;\n        long acbcabcbcbc\
    \ = acbcabcbcbc * bc;\n        long acbcabcbcbcb = acbcabcbcbcb * bc;\n      \
    \  long acbcabcbcbcbc = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n  \
    \      long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj99l6ol6.cs(46,13): error CS1001: Identifier expected

    /tmp/tmpj99l6ol6.cs(46,13): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b - c * c);\n        long side2\
    \ = Math.Sqrt(a * a - b * b + c * c);\n        long side3 = Math.Sqrt(a * a -\
    \ b * b - c * c);\n        long side4 = Math.Sqrt(a * a + b * b + c * c);\n  \
    \      long side5 = Math.Sqrt(a * a + b * b - c * c);\n        long side6 = Math.Sqrt(a\
    \ * a - b * b + c * c);\n        long side7 = Math.Sqrt(a * a - b * b - c * c);\n\
    \        long side8 = Math.Sqrt(a * a + b * b + c * c);\n        long side9 =\
    \ Math.Sqrt(a * a + b * b - c * c);\n        long side10 = Math.Sqrt(a * a - b\
    \ * b + c * c);\n        long side11 = Math.Sqrt(a * a - b * b - c * c);\n   \
    \     long side12 = Math.Sqrt(a * a + b * b + c * c);\n        long side13 = Math.Sqrt(a\
    \ * a + b * b - c * c);\n        long side14 = Math.Sqrt(a * a - b * b + c * c);\n\
    \        long side15 = Math.Sqrt(a * a - b * b - c * c);\n        long side16\
    \ = Math.Sqrt(a * a + b * b + c * c);\n        long side17 = Math.Sqrt(a * a +\
    \ b * b - c * c);\n        long side18 = Math.Sqrt(a * a - b * b + c * c);\n \
    \       long side19 = Math.Sqrt(a * a - b * b - c * c);\n        long side20 =\
    \ Math.Sqrt(a * a + b * b + c * c);\n        long side21 = Math.Sqrt(a * a + b\
    \ * b - c * c);\n        long side22 = Math.Sqrt(a * a - b * b + c * c);\n   \
    \     long side23 = Math.Sqrt(a * a - b * b - c * c);\n        long side24 = Math.Sqrt(a\
    \ * a + b * b + c * c);\n        long side25 = Math.Sqrt(a * a + b * b - c * c);\n\
    \        long side26 = Math.Sqrt(a * a - b * b + c * c);\n        long side27\
    \ = Math.Sqrt(a * a - b * b - c * c);\n        long side28 = Math.Sqrt(a * a +\
    \ b * b + c * c);\n        long side29 = Math.Sqr\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3riqat2i.cs(47,31): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcc = abc * bc;\n        long acbcc = acbc *\
    \ bc;\n        long abccc = abcc * bc;\n        long acbccc = acbcc * bc;\n  \
    \      long abcccb = abccc * bc;\n        long acbcccb = acbccc * bc;\n      \
    \  long abcccbc = abcccb * bc;\n        long acbcccbc = acbcccb * bc;\n      \
    \  long abcccbcd = abcccbc * bc;\n        long acbcccbcd = acbcccbc * bc;\n  \
    \      long abcccbcde = abcccbcd * bc;\n        long acbcccbcde = acbcccbcd *\
    \ bc;\n        long abcccbcdef = abcccbcde * bc;\n        long acbcccbcdef = acbcccbcd\
    \ * bc;\n        long abcccbcdefg = abcccbcdef * bc;\n        long acbcccbcdefg\
    \ = acbcccbcd * bc;\n        long abcccbcdefgh = abcccbcdefg * bc;\n        long\
    \ acbcccbcdefgh = acbcccbcdefg * bc;\n        long abcccbcdefghi = abcccbcdefgh\
    \ * bc;\n        long acbcccbcdefghi = acbcccbcdefgh * bc;\n        long abcccbcdefghij\
    \ = abcccbcdefghi * bc;\n        long acbcccbcdefghij = acbcccbcdefghi * bc;\n\
    \        long abcccbcdefghijk = abcccbcdefghij * bc;\n        long acbcccbcdefghijk\
    \ = acbcccbcdefghij * bc;\n        long abcccbcdefghijkl = abcccbcdefghijk * bc;\n\
    \        long acbcccbcdefghijkl = acbcccbcdefghijk * bc;\n        long abcccbcdefghijk\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_uu1dun9.cs(51,29): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 == t2) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e112504d1654ec6bcfee7fc96969275>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e112504d1654ec6bcfee7fc96969275>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxwy3hfil.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e * 0.5);\n        return\
    \ ((f - g) == 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbav0eezh.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbav0eezh.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpbav0eezh.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvww66fxq.cs(47,24): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcb = acbcbcbcb *\
    \ bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long acbcbcbcbcb\
    \ = acbcbcbcbcb * bc;\n        long abcbcbcbcbc = abcbcbcbcbc * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb\
    \ * bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc\
    \ = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n\
    \        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc *\
    \ bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk2moa6zy.cs(25,21): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmpk2moa6zy.cs(26,23): error CS0103: The name ''acbcb'' does not exist in
    the current context

    /tmp/tmpk2moa6zy.cs(27,22): error CS0103: The name ''abcb'' does not exist in
    the current context

    /tmp/tmpk2moa6zy.cs(29,24): error CS0103: The name ''abcbcb'' does not exist in
    the current context

    /tmp/tmpk2moa6zy.cs(44,14): error CS0128: A local variable or function named ''acbcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmpk2moa6zy.cs(48,14): error CS0128: A local variable or function named ''acbcbcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmpk2moa6zy.cs(28,24): error CS0165: Use of unassigned local variable ''acbcbcb''

    /tmp/tmpk2moa6zy.cs(30,25): error CS0165: Use of unassigned local variable ''acbcbcbc''

    /tmp/tmpk2moa6zy.cs(31,25): error CS0165: Use of unassigned local variable ''abcbcbcb''

    /tmp/tmpk2moa6zy.cs(32,26): error CS0165: Use of unassigned local variable ''acbcbcbcb''

    /tmp/tmpk2moa6zy.cs(33,26): error CS0165: Use of unassigned local variable ''abcbcbcbc''

    /tmp/tmpk2moa6zy.cs(34,27): error CS0165: Use of unassigned local variable ''acbcbcbcbc''

    /tmp/tmpk2moa6zy.cs(35,27): error CS0165: Use of unassigned local variable ''abcbcbcbcb''

    /tmp/tmpk2moa6zy.cs(36,28): error CS0165: Use of unassigned local variable ''acbcbcbcbcb''

    /tmp/tmpk2moa6zy.cs(37,28): error CS0165: Use of unassigned local variable ''abcbcbcbcbc''

    /tmp/tmpk2moa6zy.cs(38,29): error CS0165: Use of unassigned local variable ''acbcbcbcbcbc''

    /tmp/tmpk2moa6zy.cs(39,29): error CS0165: Use of unassigned local variable ''abcbcbcbcbcb''

    /tmp/tmpk2moa6zy.cs(40,30): error CS0165: Use of unassigned local variable ''acbcbcbcbcbcb''

    /tmp/tmpk2moa6zy.cs(41,30): error CS0165: Use of unassigned local variable ''abcbcbcbcbcbc''

    /tmp/tmpk2moa6zy.cs(42,31): error CS0165: Use of unassigned local variable ''acbcbcbcbcbcbc''

    /tmp/tmpk2moa6zy.cs(43,31): error CS0165'
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rv1i65_.cs(47,24): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abbcd = abbc *\
    \ bc;\n        long abbcde = abbcd * bc;\n        long abbcdef = abbcde * bc;\n\
    \        long abbcdefg = abbcdef * bc;\n        long abbcdefgh = abbcdefg * bc;\n\
    \        long abbcdefghi = abbcdefgh * bc;\n        long abbcdefghij = abbcdefghi\
    \ * bc;\n        long abbcdefghijk = abbcdefghij * bc;\n        long abbcdefghijkl\
    \ = abbcdefghijk * bc;\n        long abbcdefghijklmn = abbcdefghijkl * bc;\n \
    \       long abbcdefghijklmnx = abbcdefghijklmn * bc;\n        long abbcdefghijklmno\
    \ = abbcdefghijklmnx * bc;\n        long abbcdefghijklmnop = abbcdefghijklmno\
    \ * bc;\n        long abbcdefghijklmnopq = abbcdefghijklmnop * bc;\n        long\
    \ abbcdefghijklmnopr = abbcdefghijklmnopq * bc;\n        long abbcdefghijklmnoprs\
    \ = abbcdefghijklmnopr * bc;\n        long abbcdefghijklmnoprst = abbcdefghijklmnoprs\
    \ * bc;\n        long abbcdefghijklmnoprstu = abbcdefghijklmnoprst * bc;\n   \
    \     long abbcdefghijklmnoprstv = abbcdefghijklmnoprstu * bc;\n        long abbcdefghijklmnoprstuv\
    \ = abbcdefghijklmnoprstv * bc;\n        long abbcdefghijklmnoprstuvw = abbcdefghijklmnoprstuv\
    \ * bc;\n        long abbcdefghijklmnoprstuvx = abbcdefghijklmno\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphdipmw_3.cs(47,56): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcab = acbc * abc;\n        long acbcabc =\
    \ acbcab * abc;\n        long acbcabcb = acbcabc * abc;\n        long acbcabcbc\
    \ = acbcabcb * abc;\n        long acbcabcbcb = acbcabcbc * abc;\n        long\
    \ acbcabcbcbc = acbcabcbcb * abc;\n        long acbcabcbcbcb = acbcabcbcbc * abc;\n\
    \        long acbcabcbcbcbc = acbcabcbcbcb * abc;\n        long acbcabcbcbcbcb\
    \ = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * abc;\n\
    \        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n  \
    \      long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpme9nofdz.cs(46,24): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcc = abc * bc;\n        long acbcc = acbc *\
    \ bc;\n        long abccc = abcc * bc;\n        long acbccc = acbcc * bc;\n  \
    \      long abcccc = abccc * bc;\n        long acbcccb = acbcc * bc;\n       \
    \ long abccccb = abccc * bc;\n        long acbcccbc = acbccc * bc;\n        long\
    \ abccccbc = abcccc * bc;\n        long acbcccbcb = acbcccb * bc;\n        long\
    \ abccccbcb = abccccb * bc;\n        long acbcccbcba = acbcccb * bc;\n       \
    \ long abccccbcba = abccccb * bc;\n        long acbcccbcbaa = acbcccb * bc;\n\
    \        long abccccbcbaa = abccccb * bc;\n        long acbcccbcbaaa = acbcccb\
    \ * bc;\n        long abccccbcbaaa = abccccb * bc;\n        long acbcccbcbaaaa\
    \ = acbcccb * bc;\n        long abccccbcbaaaa = abccccb * bc;\n        long acbcccbcbaaaaa\
    \ = acbcccb * bc;\n        long abccccbcbaaaaa = abccccb * bc;\n        long acbcccbcbaaaaa\
    \ = acbcccb * bc;\n        long abccccbcbaaaaa = abccccb * bc;\n        long acbcccbcbaaaaaa\
    \ = acbcccb * bc;\n        long abccccbcbaaaaaa = abccccb * bc;\n        long\
    \ acbcccbcbaaaaaaa = acbcccb * bc;\n        long abccccbcbaaaaaaa = abccccb *\
    \ bc;\n        long acbcccbcbaaaaaaa = acbcccb * bc;\n        long abccccbcbaaaaaaa\
    \ = abccccb * bc;\n        long acbcc\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1ivnu4zl.cs(54,19): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n   \
    \     long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side3\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6glytrll.cs(44,13): error CS1001: Identifier expected

    /tmp/tmp6glytrll.cs(44,13): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long abcab = abc * abc;\n        long acbcab = acb\
    \ * abc;\n        long acbcabc = acb * acb * abc;\n        long acbcabcb = acb\
    \ * acb * acb * abc;\n        long acbcabcbc = acb * acb * acb * acb * abc;\n\
    \        long acbcabcbcb = acb * acb * acb * acb * acb * abc;\n        long acbcabcbcbc\
    \ = acb * acb * acb * acb * acb * acb * abc;\n        long acbcabcbcbcb = acb\
    \ * acb * acb * acb * acb * acb * acb * abc;\n        long acbcabcbcbcbc = acb\
    \ * acb * acb * acb * acb * acb * acb * acb * abc;\n        long acbcabcbcbcbcb\
    \ = acb * acb * acb * acb * acb * acb * acb * acb * acb * abc;\n        long acbcabcbcbcbcbc\
    \ = acb * acb * acb * acb * acb * acb * acb * acb * acb * acb * abc;\n       \
    \ long acbcabcbcbcbcbcb = acb * acb * acb * acb * acb * acb * acb * acb * acb\
    \ * acb * acb * abc;\n        long acbcabcbcbcbcbcbc = acb * acb * acb * acb *\
    \ acb * acb * acb * acb * acb * acb * acb * acb * abc;\n        long acbcabcbcbcbcbcbcb\
    \ = acb * acb * acb * acb * acb * acb * acb * acb * acb * acb * acb * acb * acb\
    \ * abc;\n        long acbcabcbcbcbcbcbcbc = acb * acb * acb * acb * acb * \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphk20i13d.cs(39,65): error CS1525: Invalid expression term ''}''

    /tmp/tmphk20i13d.cs(39,65): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * b);\n        long side3 = Math.Sqrt(c * c + b * b);\n        long\
    \ side4 = Math.Sqrt(a * a + c * c);\n        long side5 = Math.Sqrt(b * b + c\
    \ * c);\n        long side6 = Math.Sqrt(a * a + b * b);\n        long side7 =\
    \ Math.Sqrt(c * c + a * a);\n        long side8 = Math.Sqrt(c * c + b * b);\n\
    \        long side9 = Math.Sqrt(a * a + c * c);\n        long side10 = Math.Sqrt(b\
    \ * b + c * c);\n        long side11 = Math.Sqrt(a * a + b * b);\n        long\
    \ side12 = Math.Sqrt(c * c + a * a);\n        long side13 = Math.Sqrt(c * c +\
    \ b * b);\n        long side14 = Math.Sqrt(a * a + c * c);\n        long side15\
    \ = Math.Sqrt(b * b + c * c);\n        long side16 = Math.Sqrt(a * a + b * b);\n\
    \        long side17 = Math.Sqrt(c * c + a * a);\n        long side18 = Math.Sqrt(c\
    \ * c + b * b);\n        long side19 = Math.Sqrt(a * a + c * c);\n        long\
    \ side20 = Math.Sqrt(b * b + c * c);\n        long side21 = Math.Sqrt(a * a +\
    \ b * b);\n        long side22 = Math.Sqrt(c * c + a * a);\n        long side23\
    \ = Math.Sqrt(c * c + b * b);\n        long side24 = Math.Sqrt(a * a + c * c);\n\
    \        long side25 = Math.Sqrt(b * b + c * c);\n        long side26 = Math.Sqrt(a\
    \ * a + b * b);\n        long side27 = Math.Sqrt(c * c + a * a);\n        long\
    \ side28 = Math.Sqrt(c * c + b * b);\n        long side29 = Math.Sqrt(a * a +\
    \ c * c);\n        long side30 = Math.Sqrt(b * b + c * c);\n        long side31\
    \ = Math.Sqrt(a * a + b * b);\n        long side32 = Math.Sqrt(c * c + a * a);\n\
    \        long side33 = Math.Sqrt(c * c + b * b);\n        long side34 = Math.Sqrt(a\
    \ * a + c * c);\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv6tiljfo.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv6tiljfo.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv6tiljfo.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv6tiljfo.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv6tiljfo.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv6tiljfo.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv6tiljfo.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv6tiljfo.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv6tiljfo.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv6tiljfo.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv6tiljfo.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv6tiljfo.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv6tiljfo.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        d = Math.Sqrt(d);\n        long x = (-b + d) / (2 * a);\n  \
    \      long y = (-b - d) / (2 * a);\n        return (x * x + y * y) <= 1;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnhssn_k3.cs(22,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        return t1 == t2;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8e785516489470db2b3d62d18cd6a28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8e785516489470db2b3d62d18cd6a28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n\
    \            return true;\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20c82e7df5d741a596e1c2db167d69b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20c82e7df5d741a596e1c2db167d69b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e * 0.5);\n        long\
    \ h = a - e * Math.Sqrt(a - e * 0.5);\n        long i = Math.Sqrt(f * f + g *\
    \ g + h * h);\n        long j = Math.Sqrt(f * f + g * g + h * h);\n        long\
    \ k = Math.Sqrt(f * f + g * g + h * h);\n        long l = Math.Sqrt(f * f + g\
    \ * g + h * h);\n        long m = Math.Sqrt(f * f + g * g + h * h);\n        long\
    \ n = Math.Sqrt(f * f + g * g + h * h);\n        long o = Math.Sqrt(f * f + g\
    \ * g + h * h);\n        long p = Math.Sqrt(f * f + g * g + h * h);\n        long\
    \ q = Math.Sqrt(f * f + g * g + h * h);\n        long r = Math.Sqrt(f * f + g\
    \ * g + h * h);\n        long s = Math.Sqrt(f * f + g * g + h * h);\n        long\
    \ t = Math.Sqrt(f * f + g * g + h * h);\n        long u = Math.Sqrt(f * f + g\
    \ * g + h * h);\n        long v = Math.Sqrt(f * f + g * g + h * h);\n        long\
    \ w = Math.Sqrt(f * f + g * g + h * h);\n        long x = Math.Sqrt(f * f + g\
    \ * g + h * h);\n        long y = Math.Sqrt(f * f + g * g + h * h);\n        long\
    \ z = Math.Sqrt(f * f + g * g + h * h);\n        long A = (f * f + g * g + h *\
    \ h);\n        long B = (f * f + g * g + h * h);\n        long C = (f * f + g\
    \ * g + h * h);\n        long D = (f * f + g * g + h * h);\n        long E = (f\
    \ * f + g * g + h * h);\n        long F = (f * f + g * g + h * h);\n        long\
    \ G = (f * f + g * g + h * h);\n        long H = (f * f + g\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzda2emun.cs(51,28): error CS1026: ) expected

    /tmp/tmpzda2emun.cs(51,28): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac + bc;\n        long\
    \ abcc = acb + abc;\n        long abcc = abc + abc;\n        long abcca = abcc\
    \ + abc;\n        long abccb = abcca + abcc;\n        long abccc = abccb + abcc;\n\
    \        long abccca = abccc + abcc;\n        long abcccb = abccca + abcc;\n \
    \       long abcccc = abcccb + abcc;\n        long abcccaa = abcccc + abcc;\n\
    \        long abcccab = abccca + abcc;\n        long abcccac = abccca + abcc;\n\
    \        long abcccba = abccca + abcc;\n        long abcccbb = abcccb + abcc;\n\
    \        long abcccbc = abcccba + abcc;\n        long abcccaa = abcccba + abcc;\n\
    \        long abcccab = abcccaa + abcc;\n        long abcccac = abcccaa + abcc;\n\
    \        long abcccba = abcccaa + abcc;\n        long abcccbb = abcccba + abcc;\n\
    \        long abcccbc = abcccba + abcc;\n        long abcccaa = abcccba + abcc;\n\
    \        long abcccab = abcccaa + abcc;\n        long abcccac = abcccaa + abcc;\n\
    \        long abcccba = abcccaa + abcc;\n        long abcccbb = abcccba + abcc;\n\
    \        long abcccbc = abcccba + abcc;\n        long abcccaa = abcccba + abcc;\n\
    \        long abcccab = abcccaa + abcc;\n        long abcccac = abcccaa + abcc;\n\
    \        long abcccba = abcccaa + abcc;\n        long abcccbb = abcccba + abcc;\n\
    \        long abcccbc = abcccba + abcc;\n        long abcccaa = abcccba + abcc;\n\
    \        long abcccab = abcccaa + abcc;\n        long abcccac = abcccaa + abcc\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps0w_gclh.cs(58,38): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * a);\n        long side3 = Math.Sqrt(c * c + b * b);\n        long\
    \ side4 = Math.Sqrt(a * a + c * c);\n        long side5 = Math.Sqrt(b * b + c\
    \ * c);\n        long side6 = Math.Sqrt(a * a + b * b + c * c);\n        long\
    \ side7 = Math.Sqrt(a * a + c * c + b * b);\n        long side8 = Math.Sqrt(b\
    \ * b + c * c + a * a);\n        long side9 = Math.Sqrt(a * a + b * b + c * c\
    \ + a * a);\n        long side10 = Math.Sqrt(b * b + c * c + a * a + c * c);\n\
    \        long side11 = Math.Sqrt(a * a + c * c + b * b + c * c);\n        long\
    \ side12 = Math.Sqrt(a * a + b * b + c * c + a * a + c * c);\n        long side13\
    \ = Math.Sqrt(b * b + c * c + a * a + c * c + a * a);\n        long side14 = Math.Sqrt(a\
    \ * a + c * c + b * b + c * c + a * a + c * c);\n        long side15 = Math.Sqrt(a\
    \ * a + b * b + c * c + a * a + c * c + a * a);\n        long side16 = Math.Sqrt(b\
    \ * b + c * c + a * a + c * c + a * a + c * c);\n        long side17 = Math.Sqrt(a\
    \ * a + c * c + b * b + c * c + a * a + c * c + a * a);\n        long side18 =\
    \ Math.Sqrt(b * b + c * c + a * a + c * c + a * a + c * c + a * a);\n        long\
    \ side19 = Math.Sqrt(a * a + c * c + b * b + c * c + a * a + c * c + a * a + c\
    \ * c);\n        long side20 = Math.Sqrt(a * a + b * b + c * c + a * a + c * c\
    \ + a * a + c * c + a * a + c * c);\n        long side21 = Math.Sqrt(b * b + c\
    \ * c + a * a + c * c + a * a + c * c + a * a + c * c + a * a + c * c);\n    \
    \    long side22 = Math.Sqrt(a * a + c * c + b * b + c * c + a * \n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzjvptk50.cs(40,68): error CS1525: Invalid expression term ''}''

    /tmp/tmpzjvptk50.cs(40,68): error CS1026: ) expected

    /tmp/tmpzjvptk50.cs(40,68): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a\
    \ + b + c);\n        long g = (long) Math.Sqrt(a + b - c);\n        long h = (long)\
    \ Math.Sqrt(a + b + c - e);\n        return ((f < g) && (f < h));\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7527bck7.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * b);\n        long side3 = Math.Sqrt(a * a + c * c);\n        long\
    \ side4 = Math.Sqrt(b * b + c * c);\n        long side5 = Math.Sqrt(a * a + b\
    \ * b);\n        long side6 = Math.Sqrt(c * c + a * a);\n        long side7 =\
    \ Math.Sqrt(a * a + c * c);\n        long side8 = Math.Sqrt(b * b + c * c);\n\
    \        long side9 = Math.Sqrt(a * a + b * b);\n        long side10 = Math.Sqrt(c\
    \ * c + a * a);\n        long side11 = Math.Sqrt(a * a + c * c);\n        long\
    \ side12 = Math.Sqrt(b * b + c * c);\n        long side13 = Math.Sqrt(a * a +\
    \ b * b);\n        long side14 = Math.Sqrt(c * c + a * a);\n        long side15\
    \ = Math.Sqrt(a * a + c * c);\n        long side16 = Math.Sqrt(b * b + c * c);\n\
    \        long side17 = Math.Sqrt(a * a + b * b);\n        long side18 = Math.Sqrt(c\
    \ * c + a * a);\n        long side19 = Math.Sqrt(a * a + c * c);\n        long\
    \ side20 = Math.Sqrt(b * b + c * c);\n        long side21 = Math.Sqrt(a * a +\
    \ b * b);\n        long side22 = Math.Sqrt(c * c + a * a);\n        long side23\
    \ = Math.Sqrt(a * a + c * c);\n        long side24 = Math.Sqrt(b * b + c * c);\n\
    \        long side25 = Math.Sqrt(a * a + b * b);\n        long side26 = Math.Sqrt(c\
    \ * c + a * a);\n        long side27 = Math.Sqrt(a * a + c * c);\n        long\
    \ side28 = Math.Sqrt(b * b + c * c);\n        long side29 = Math.Sqrt(a * a +\
    \ b * b);\n        long side30 = Math.Sqrt(c * c + a * a);\n        long side31\
    \ = Math.Sqrt(a * a + c * c);\n        long side32 = Math.Sqrt(b * b + c * c);\n\
    \        long side33 = Math.Sqrt(a * a + b * b);\n        long side34 = Math.Sqrt(c\
    \ * c + a * a);\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq5r3soig.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcabc = acbc * abc;\n        long acbcabcb\
    \ = acbcabc * bc;\n        long acbcabcbc = acbcabcb * bc;\n        long acbcabcbcb\
    \ = acbcabcbc * bc;\n        long acbcabcbcbc = acbcabcbcb * bc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * bc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbcbc = acbcabcbcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp04wj38i9.cs(45,52): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqsblkj7.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rv1i65_.cs(47,24): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcc = abc;\n        long acbc = acb + abc;\n        long acbcc = acbc + abc;\n\
    \        long acbccc = acbcc;\n        long acbcccb = acbccc + abc;\n        long\
    \ acbcccbc = acbcccb + abc;\n        long acbcccbcb = acbcccbc + abc;\n      \
    \  long acbcccbcbb = acbcccbcb + abc;\n        long acbcccbcbc = acbcccbcbc +\
    \ abc;\n        long acbcccbcbcb = acbcccbcbc + abc;\n        long acbcccbcbcb\
    \ = acbcccbcbc + abc;\n        long acbcccbcbcbc = acbcccbcbc + abc;\n       \
    \ long acbcccbcbcbc = acbcccbcbc + abc;\n        long acbcccbcbcbc = acbcccbcbc\
    \ + abc;\n        long acbcccbcbcbcb = acbcccbcbc + abc;\n        long acbcccbcbcbcb\
    \ = acbcccbcbc + abc;\n        long acbcccbcbcbcb = acbcccbcbc + abc;\n      \
    \  long acbcccbcbcbcb = acbcccbcbc + abc;\n        long acbcccbcbcbcb = acbcccbcbc\
    \ + abc;\n        long acbcccbcbcbcb = acbcccbcbc + abc;\n        long acbcccbcbcbcb\
    \ = acbcccbcbc + abc;\n        long acbcccbcbcbcb = acbcccbcbc + abc;\n      \
    \  long acbcccbcbcbcb = acbcccbcbc + abc;\n        long acbcccbcbcbcb = acbcccbcbc\
    \ + abc;\n        long acbcccbcbcbcb = acbcccbcbc + abc;\n        long acbcccbcbcbcb\
    \ = acbcccbcbc + abc;\n        long acbcccbcbcbcb = acbcccbcbc + abc;\n      \
    \  long acbcccbcbcbcb = acbcccb\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm4sqxzum.cs(51,37): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long) Math.Sqrt(d);\n        long t1 = (long) (-b\
    \ + root) / a;\n        long t2 = (long) (-b - root) / a;\n        if (t1 == t2)\n\
    \            return true;\n        if (t1 > t2)\n            return false;\n \
    \       long t = (long) Math.Sqrt(t1 * t1 + t2 * t2);\n        if (t < 0)\n  \
    \          return false;\n        long u = (long) Math.Sqrt(t1 * t1 - t * t);\n\
    \        if (u < 0)\n            return false;\n        long v = (long) Math.Sqrt(t2\
    \ * t2 - t * t);\n        if (v < 0)\n            return false;\n        long\
    \ w = (long) Math.Sqrt(t * t - u * u);\n        if (w < 0)\n            return\
    \ false;\n        long x1 = (long) (-b + u) / a;\n        long y1 = (long) (-b\
    \ - u) / a;\n        long x2 = (long) (-b + v) / a;\n        long y2 = (long)\
    \ (-b - v) / a;\n        long x3 = (long) (-b + w) / a;\n        long y3 = (long)\
    \ (-b - w) / a;\n        if (Math.Abs(x1 * y2 - y1 * x2) > Math.Abs(x1 * y3 -\
    \ y1 * x3)) {\n            return false;\n        }\n        if (Math.Abs(x2 *\
    \ y3 - y2 * x3) > Math.Abs(x1 * y3 - y1 * x3)) {\n            return false;\n\
    \        }\n        if (Math.Abs(x1 * y3 - y1 * x3) > Math.Abs(x2 * y3 - y2 *\
    \ x3)) {\n            return false;\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3ec261b1ed848b5a9931a98599eac4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3ec261b1ed848b5a9931a98599eac4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n   \
    \     long abbbbbc = abbbbbc * bc;\n        long acbbbcc = acbbbcc * bc;\n   \
    \     long abbbbcc = abbbbcc * bc;\n        long acbbbcbc = acbbbcc * bc;\n  \
    \      long abbbbcbc = abbbbcc * bc;\n        long acbbbcbb = acbbbcc * bc;\n\
    \        long abbbbcbb = abbbbcc * bc;\n        long acbbbcbbc = acbbbcc * bc;\n\
    \        long abbbbcbbc = abbbbcc * bc;\n        long acbbbcbbb = acbbbcc * bc;\n\
    \        long abbbbcbbb = abbbbcc * bc;\n        long acbbbcbbbc = acbbbcc * bc;\n\
    \        long abbbbcbbbc = abbbbcc * bc;\n        long acbbbcbbbb = acbbbcc *\
    \ bc;\n        long abbbbcbbbb = abbbbcc * bc;\n        long acbbbcbbbc = acbbbcc\
    \ * bc;\n        long abbbbcbbbc = abbbbcc * bc;\n        long acbbbcbbbb = acbbbcc\
    \ * bc;\n        long abbbbcbbbb = abbbbcc * bc;\n        long acbbbcbbbc = acbbbcc\
    \ * bc;\n        long abbbbcbbbc = abbbbcc * bc;\n        long acbbbcbbbb = acbbbcc\
    \ * bc;\n        long abbbbcbbbb = abbbbcc * bc;\n        long acbbbcbbbc = acbbbcc\
    \ * bc;\n        long abbbbcbbbc = abbbbcc * bc;\n\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxo34lxft.cs(25,21): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmpxo34lxft.cs(26,22): error CS0103: The name ''acbb'' does not exist in
    the current context

    /tmp/tmpxo34lxft.cs(27,22): error CS0103: The name ''abbb'' does not exist in
    the current context

    /tmp/tmpxo34lxft.cs(46,14): error CS0128: A local variable or function named ''acbbbcbbbc''
    is already defined in this scope

    /tmp/tmpxo34lxft.cs(47,14): error CS0128: A local variable or function named ''abbbbcbbbc''
    is already defined in this scope

    /tmp/tmpxo34lxft.cs(48,14): error CS0128: A local variable or function named ''acbbbcbbbb''
    is already defined in this scope

    /tmp/tmpxo34lxft.cs(49,14): error CS0128: A local variable or function named ''abbbbcbbbb''
    is already defined in this scope

    /tmp/tmpxo34lxft.cs(50,14): error CS0128: A local variable or function named ''acbbbcbbbc''
    is already defined in this scope

    /tmp/tmpxo34lxft.cs(51,14): error CS0128: A local variable or function named ''abbbbcbbbc''
    is already defined in this scope

    /tmp/tmpxo34lxft.cs(52,14): error CS0128: A local variable or function named ''acbbbcbbbb''
    is already defined in this scope

    /tmp/tmpxo34lxft.cs(53,14): error CS0128: A local variable or function named ''abbbbcbbbb''
    is already defined in this scope

    /tmp/tmpxo34lxft.cs(54,14): error CS0128: A local variable or function named ''acbbbcbbbc''
    is already defined in this scope

    /tmp/tmpxo34lxft.cs(55,14): error CS0128: A local variable or function named ''abbbbcbbbc''
    is already defined in this scope

    /tmp/tmpxo34lxft.cs(28,23): error CS0165: Use of unassigned local variable ''acbbbc''

    /tmp/tmpxo34lxft.cs(29,23): error CS0165: Use of unassigned local variable ''abbbbc''

    /tmp/tmpxo34lxft.cs(30,24): error CS0165: Use of unassigned local variable ''acbbbbc''

    /tmp/tmpxo34lxft.cs(31,24): error CS0165: Use of unassigned local variable ''abbbbbc''

    /tmp/tmpxo34lxft.cs(32,24): error CS0165: Use of unassigned local '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * b);\n        long side3 = Math.Sqrt(a * a + c * c);\n        long\
    \ side4 = Math.Sqrt(b * b + c * c);\n        long side5 = Math.Sqrt(a * a + b\
    \ * b);\n        long side6 = Math.Sqrt(c * c + a * a);\n        long side7 =\
    \ Math.Sqrt(a * a + c * c);\n        long side8 = Math.Sqrt(b * b + c * c);\n\
    \        long side9 = Math.Sqrt(a * a + b * b);\n        long side10 = Math.Sqrt(c\
    \ * c + a * a);\n        long side11 = Math.Sqrt(a * a + c * c);\n        long\
    \ side12 = Math.Sqrt(b * b + c * c);\n        long side13 = Math.Sqrt(a * a +\
    \ b * b);\n        long side14 = Math.Sqrt(c * c + a * a);\n        long side15\
    \ = Math.Sqrt(a * a + c * c);\n        long side16 = Math.Sqrt(b * b + c * c);\n\
    \        long side17 = Math.Sqrt(a * a + b * b);\n        long side18 = Math.Sqrt(c\
    \ * c + a * a);\n        long side19 = Math.Sqrt(a * a + c * c);\n        long\
    \ side20 = Math.Sqrt(b * b + c * c);\n        long side21 = Math.Sqrt(a * a +\
    \ b * b);\n        long side22 = Math.Sqrt(c * c + a * a);\n        long side23\
    \ = Math.Sqrt(a * a + c * c);\n        long side24 = Math.Sqrt(b * b + c * c);\n\
    \        long side25 = Math.Sqrt(a * a + b * b);\n        long side26 = Math.Sqrt(c\
    \ * c + a * a);\n        long side27 = Math.Sqrt(a * a + c * c);\n        long\
    \ side28 = Math.Sqrt(b * b + c * c);\n        long side29 = Math.Sqrt(a * a +\
    \ b * b);\n        long side30 = Math.Sqrt(c * c + a * a);\n        long side31\
    \ = Math.Sqrt(a * a + c * c);\n        long side32 = Math.Sqrt(b * b + c * c);\n\
    \        long side33 = Math.Sqrt(a * a + b * b);\n        long side34 = Math.Sqrt(c\
    \ * c + a * a);\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq5r3soig.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcac = abc * ac;\n        long abcacb = abcac\
    \ * bc;\n        long abcacbc = abcacb * bc;\n        long abcacbcabc = abcacb\
    \ * abcac * bc;\n        long abcacbcabcd = abcacbcabc * bc;\n        long abcacbcabcde\
    \ = abcacbcabc * abcac * bc * bc;\n        long abcacbcabcdef = abcacbcabc * abcac\
    \ * bc * bc * bc;\n        long abcacbcabcdefg = abcacbcabc * abcac * bc * bc\
    \ * bc * bc;\n        long abcacbcabcdefgh = abcacbcabc * abcac * bc * bc * bc\
    \ * bc * bc;\n        long abcacbcabcdefghi = abcacbcabc * abcac * bc * bc * bc\
    \ * bc * bc * bc;\n        long abcacbcabcdefghij = abcacbcabc * abcac * bc *\
    \ bc * bc * bc * bc * bc * bc;\n        long abcacbcabcdefghijk = abcacbcabc *\
    \ abcac * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcacbcabcdefghijkl\
    \ = abcacbcabc * abcac * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n       \
    \ long abcacbcabcdefghijkll = abcacbcabc * abcac * bc * bc * bc * bc * bc * bc\
    \ * bc * bc * bc * bc;\n        long abcacbcabcdefghijkllm = abcacbcabc * abcac\
    \ * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcacbcabcdefghijkllmm\
    \ = abcacbcabc * abcac * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n\
    \        long abcacbcabcdefghij\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp03ylycpm.cs(41,31): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a\
    \ * a + b * b);\n        long g = (long) Math.Sqrt(a * a + c * c);\n        long\
    \ h = (long) Math.Sqrt(b * b + c * c);\n        long i = (long) Math.Sqrt(a *\
    \ a + b * b + c * c);\n        long j = (long) Math.Sqrt(a * a + c * c + b * b\
    \ + c * c);\n        long k = (long) Math.Sqrt(a * a + b * b + c * c + d * d);\n\
    \        long l = (long) Math.Sqrt(a * a + c * c + b * c + d * d);\n        long\
    \ m = (long) Math.Sqrt(a * a + b * b + c * c + d * d + e * e);\n        long n\
    \ = (long) Math.Sqrt(a * a + b * b + c * c + d * d + e * e + f * f);\n       \
    \ long o = (long) Math.Sqrt(a * a + b * b + c * c + d * d + e * e + f * f + g\
    \ * g);\n        long p = (long) Math.Sqrt(a * a + b * b + c * c + d * d + e *\
    \ e + f * f + g * g + h * h);\n        long q = (long) Math.Sqrt(a * a + b * b\
    \ + c * c + d * d + e * e + f * f + g * g + h * h + i * i);\n        long r =\
    \ (long) Math.Sqrt(a * a + b * b + c * c + d * d + e * e + f * f + g * g + h *\
    \ h + i * i + j * j);\n        long s = (long) Math.Sqrt(a * a + b * b + c * c\
    \ + d * d + e * e + f * f + g * g + h * h + i * i + j * j + k * k);\n        long\
    \ t = (long) Math.Sqrt(a * a + b * b + c * c + d * d + e * e + f * f + g * g +\
    \ h * h + i * i + j * j + k * k + l * l);\n        long u = (long) Math.Sqrt(a\
    \ * a + b * b + c * c + d * d + e * e + f * f + g * g + h * h + i * i + j * j\
    \ + k * k + l * l + m * m);\n        long v = (\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy_w4mxar.cs(39,19): error CS1525: Invalid expression term ''}''

    /tmp/tmpy_w4mxar.cs(39,19): error CS1026: ) expected

    /tmp/tmpy_w4mxar.cs(39,19): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqsblkj7.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long) Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n\
    \            return true;\n        if (t1 < 0)\n            return false;\n  \
    \      if (t2 < 0)\n            return false;\n        long t3 = t1 + t2;\n  \
    \      if (t3 > 1)\n            return false;\n        long t4 = t1 - t2;\n  \
    \      if (t4 > 1)\n            return false;\n        long t5 = t1 + t3;\n  \
    \      if (t5 > 1)\n            return false;\n        long t6 = t1 - t3;\n  \
    \      if (t6 > 1)\n            return false;\n        return true;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84335e13148b443286c50f51f692e7f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84335e13148b443286c50f51f692e7f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a\
    \ * a);\n        long g = (long) Math.Sqrt(b * b);\n        long h = (long) Math.Sqrt(c\
    \ * c);\n        long i = f + g + h;\n        long j = (long) Math.Sqrt(i);\n\
    \        long k = (long) Math.Sqrt(a * a + b * b);\n        long l = (long) Math.Sqrt(a\
    \ * a + c * c);\n        long m = (long) Math.Sqrt(b * b + c * c);\n        long\
    \ n = (long) Math.Sqrt(a * a + b * b + c * c);\n        long o = (long) Math.Sqrt(a\
    \ * a + c * c + b * b + c * c);\n        long p = (long) Math.Sqrt(a * a + b *\
    \ b + c * c + a * a + b * b + c * c + a * a + c * c + b * b + c * c);\n      \
    \  long q = (long) Math.Sqrt(a * a + b * b + c * c + a * a + c * c + b * b + c\
    \ * c + a * a + c * c + b * c + a * a + b * c + a * b);\n        long r = (long)\
    \ Math.Sqrt(a * a + b * b + c * c + a * a + c * c + b * b + c * c + a * a + c\
    \ * c + b * c + a * a + b * c + a * b + a * c);\n        long s = (long) Math.Sqrt(a\
    \ * a + b * b + c * c + a * a + c * c + b * b + c * c + a * a + c * c + b * c\
    \ + a * a + b * c + a * b + a * c + a * b);\n        long t = (long) Math.Sqrt(a\
    \ * a + b * b + c * c + a * a + c * c + b * b + c * c + a * a + c * c + b * c\
    \ + a * a + b * c + a * b + a * c + a * b);\n        long u = (long) Math.Sqrt(a\
    \ * a + b * b + c * c + a * a + c * c + b * b + c * c + a * a + c * c + b * c\
    \ + a * a + b * c + a * b + a * c + a * b);\n        long v = (long) Math.Sqrt(a\
    \ * \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmply3t_4fj.cs(39,38): error CS1525: Invalid expression term ''}''

    /tmp/tmply3t_4fj.cs(39,38): error CS1026: ) expected

    /tmp/tmply3t_4fj.cs(39,38): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbb * bc;\n     \
    \   long abbbbbc = abbbbc * bc;\n        long acbbbcc = acbbbc * bc;\n       \
    \ long abbbbcc = abbbbc * bc;\n        long acbbbcbc = acbbb * bc;\n        long\
    \ abbbbcbc = abbbbc * bc;\n        long acbbbcbcb = acbbb * bc;\n        long\
    \ abbbbcbcb = abbbbc * bc;\n        long acbbbcbcbc = acbbb * bc;\n        long\
    \ abbbbcbcbc = abbbbc * bc;\n        long acbbbcbcbcb = acbbb * bc;\n        long\
    \ abbbbcbcbcb = abbbbc * bc;\n        long acbbbcbcbcbc = acbbb * bc;\n      \
    \  long abbbbcbcbcbc = abbbbc * bc;\n        long acbbbcbcbcbcb = acbbb * bc;\n\
    \        long abbbbcbcbcbcb = abbbbc * bc;\n        long acbbbcbcbcbcbc = acbbb\
    \ * bc;\n        long abbbbcbcbcbcbc = abbbbc * bc;\n        long acbbbcbcbcbcbcb\
    \ = acbbb * bc;\n        long abbbbcbcbcbcbcb = abbbbc * bc;\n        long acbbbcbcbcbcbcbc\
    \ = acbbb * bc;\n        long abbbbcbcbcbcbcbc = abbbbc * bc;\n        long acbbbcbcbcbcbcbcbc\
    \ = acbbb * bc;\n        long abbbbcbcbcbcbcbcbc = abbbbc * bc;\n        long\
    \ acbbbcbcbcbcbcbcbcb = acbbb * bc\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbf1zjm67.cs(54,46): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbca = acbc *\
    \ abc;\n        long acbcab = acbca * abc;\n        long acbcabc = acbcab * abc;\n\
    \        long acbcabcb = acbcabc * abc;\n        long acbcabcbc = acbcabcb * abc;\n\
    \        long acbcabcbcb = acbcabcbc * abc;\n        long acbcabcbcbc = acbcabcbcb\
    \ * abc;\n        long acbcabcbcbcb = acbcabcbcbc * abc;\n        long acbcabcbcbcbc\
    \ = acbcabcbcbcb * abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbc = acbcabcbcbcbcb * abc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc *\
    \ abc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * abc;\n        long\
    \ acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppto69tu5.cs(47,57): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long abcbcb = abcbc * bc;\n  \
    \      long abbbcb = abbbc * bc;\n        long abcbcbc = abcbcb * bc;\n      \
    \  long abbbcbc = abbbcb * bc;\n        long abcbcbcb = abcbcbc * bc;\n      \
    \  long abbbcbcb = abbbcbc * bc;\n        long abcbcbcbc = abcbcbcb * bc;\n  \
    \      long abbbcbcbc = abbbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbc *\
    \ bc;\n        long abbbcbcbcb = abbbcbcbc * bc;\n        long abcbcbcbcb = abcbcbcbcb\
    \ * bc;\n        long abbbcbcbcb = abbbcbcbcb * bc;\n        long abcbcbcbcb =\
    \ abcbcbcbcb * bc;\n        long abbbcbcbcb = abbbcbcbcb * bc;\n        long abcbcbcbcb\
    \ = abcbcbcbcb * bc;\n        long abbbcbcbcb = abbbcbcbcb * bc;\n        long\
    \ abcbcbcbcb = abcbcbcbcb * bc;\n        long abbbcbcbcb = abbbcbcbcb * bc;\n\
    \        long abcbcbcbcb = abcbcbcbcb * bc;\n        long abbbcbcbcb = abbbcbcbcb\
    \ * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long abbbcbcbcb =\
    \ abbbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long abbbcbcbcb\
    \ = abbbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ abbbcbcbcb = abbbcbcbcb * bc;\n        long abcbcbcbcb = abcb\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm6ylafr1.cs(54,31): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n   \
    \     long abbbbbc = abbbbbc * bc;\n        long acbbbcbc = acbbbcbc * bc;\n \
    \       long abbbbcbc = abbbbcbc * bc;\n        long acbbbcbcb = acbbbcbcb * bc;\n\
    \        long abbbbcbcb = abbbbcbcb * bc;\n        long acbbbcbcbc = acbbbcbcbc\
    \ * bc;\n        long abbbbcbcbc = abbbbcbcbc * bc;\n        long acbbbcbcbcb\
    \ = acbbbcbcbcb * bc;\n        long abbbbcbcbcb = abbbbcbcbcb * bc;\n        long\
    \ acbbbcbcbcbc = acbbbcbcbcbc * bc;\n        long abbbbcbcbcbc = abbbbcbcbcbc\
    \ * bc;\n        long acbbbcbcbcbcb = acbbbcbcbcbcb * bc;\n        long abbbbcbcbcbcb\
    \ = abbbbcbcbcbcb * bc;\n        long acbbbcbcbcbcbc = acbbbcbcbcbcbc * bc;\n\
    \        long abbbbcbcbcbcbc = abbbbcbcbcbcbc * bc;\n        long acbbbcbcbcbcbcb\
    \ = acbbbcbcbcbcbcb * bc;\n        long abbbbcbcbcbcbcb = abbbbcbcbcbcbcb * bc;\n\
    \        long acbbbcbcbcbcbcbc = acbbbcbcbcbcbcbc * bc;\n        long abbbbcbcbcbcbcbc\
    \ = abbbbcbcbcbcbcbc * bc;\n        long acbbbcbcbcbcbcbcb = acbb\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0zlugbx4.cs(50,38): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbcabc = acbc\
    \ + abc;\n        long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb\
    \ * bc;\n        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc =\
    \ acbcabcbcb * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long\
    \ acbcabcbcbcbc = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcbc = acbcabcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpofwf159o.cs(46,46): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n\
    \            return true;\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20c82e7df5d741a596e1c2db167d69b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20c82e7df5d741a596e1c2db167d69b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long abcbcd = abcbc * bc;\n        long abcbcde = abcbcd * bc;\n\
    \        long abcbcdef = abcbcde * bc;\n        long abcbcdefg = abcbcdef * bc;\n\
    \        long abcbcdefgh = abcbcdefg * bc;\n        long abcbcdefghi = abcbcdefgh\
    \ * bc;\n        long abcbcdefghij = abcbcdefghi * bc;\n        long abcbcdefghijk\
    \ = abcbcdefghij * bc;\n        long abcbcdefghijkl = abcbcdefghijk * bc;\n  \
    \      long abcbcdefghijklm = abcbcdefghijkl * bc;\n        long abcbcdefghijklmn\
    \ = abcbcdefghijklm * bc;\n        long abcbcdefghijklmno = abcbcdefghijklmn *\
    \ bc;\n        long abcbcdefghijklmno = abcbcdefghijklmno * bc;\n        long\
    \ abcbcdefghijklmnop = abcbcdefghijklmno * bc;\n        long abcbcdefghijklmnopq\
    \ = abcbcdefghijklmno * bc;\n        long abcbcdefghijklmnopr = abcbcdefghijklmno\
    \ * bc;\n        long abcbcdefghijklmnoprs = abcbcdefghijklmno * bc;\n       \
    \ long abcbcdefghijklmnoprst = abcbcdefghijklmno * bc;\n        long abcbcdefghijklmnoprstu\
    \ = abcbcdefghijklmno * bc;\n        long abcbcdefghijklmnoprstv = abcbcdefghijklmno\
    \ * bc;\n        long abcbcdefghijklmnoprstvy = \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2_ndpqvi.cs(47,39): error CS1525: Invalid expression term ''}''

    /tmp/tmp2_ndpqvi.cs(47,39): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcc = acb + abc;\n        long abcc = abc - abc;\n        long abccc = abcc\
    \ * abcc;\n        long abcccb = abccc * abcc;\n        long abcccbc = abcccb\
    \ * abcc;\n        long abcccbcb = abcccbc * abcc;\n        long abcccbcc = abcccbc\
    \ * abcc;\n        long abcccbccb = abcccbcc * abcc;\n        long abcccbccbc\
    \ = abcccbccb * abcc;\n        long abcccbccbcc = abcccbccb * abcc;\n        long\
    \ abcccbccbccb = abcccbccbcc * abcc;\n        long abcccbccbccbc = abcccbccbccb\
    \ * abcc;\n        long abcccbccbccbcc = abcccbccbccb * abcc;\n        long abcccbccbccbccb\
    \ = abcccbccbccb * abcc;\n        long abcccbccbccbccbc = abcccbccbccbcc * abcc;\n\
    \        long abcccbccbccbccbcc = abcccbccbccbccb * abcc;\n        long abcccbccbccbccbccb\
    \ = abcccbccbccbccb * abcc;\n        long abcccbccbccbccbccbc = abcccbccbccbccbcc\
    \ * abcc;\n        long abcccbccbccbccbccbc = abcccbccbccbccbcc * abcc;\n    \
    \    long abcccbccbccbccbccbcc = abcccbccbccbccbccb * abcc;\n        long abcccbccbccbccbccbcc\
    \ = abcccbccbccbccbccb * abcc;\n        long abcccbccbccbccbccbccb = abcccbccbccbccbccb\
    \ * abcc;\n        long abcccbccbccb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa9nhqhy8.cs(46,26): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = c - e * Math.Sqrt(c - e * 0.5);\n        long\
    \ h = a + e * Math.Sqrt(a + e * 0.5);\n        return ((f - g) * (f - g) + (h\
    \ - g) * (h - g) == 0);\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8jy3s5qq.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8jy3s5qq.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8jy3s5qq.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8jy3s5qq.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / a;\n        long t2 = (-b - root) / a;\n        if (t1 == t2)\n          \
    \  return true;\n        long t3 = Math.Sqrt(t1 * t1 + t2 * t2);\n        if (t3\
    \ > 0)\n            return t1 == t3 || t2 == t3;\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3l6ycnb6.cs(27,19): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcabc = acbcab\
    \ * bc;\n        long abcabc = abcab * bc;\n        long acbcabbc = acbcabbc *\
    \ bc;\n        long abcabbc = abcabbc * bc;\n        long acbcabcbc = acbcabcbc\
    \ * bc;\n        long abcabcbc = abcabcbc * bc;\n        long acbcabcbcb = acbcabcbcb\
    \ * bc;\n        long abcabcbcb = abcabcbcb * bc;\n        long acbcabcbcbc =\
    \ acbcabcbcbc * bc;\n        long abcabcbcbc = abcabcbcbc * bc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbcb * bc;\n        long abcabcbcbcb = abcabcbcbcb *\
    \ bc;\n        long acbcabcbcbcbc = acbcabcbcbcbc * bc;\n        long abcabcbcbcbc\
    \ = abcabcbcbcbc * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbcb * bc;\n \
    \       long abcabcbcbcbcb = abcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcbc * bc;\n        long abcabcbcbcbcbc = abcabcbcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb * bc;\n        long abcabcbcbcbcbcb\
    \ = abcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * bc;\n        long abcabcbcbcbcbcbc = abcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n        long abcabcbcbcbcbcbcb\
    \ = abcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcb\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphykxsu7k.cs(50,26): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abac = ab - ac;\n        long acab = ac - ab;\n        long abcab = ab - bc;\n\
    \        long acbcab = ac - bc;\n        long abcabc = abc - ab;\n        long\
    \ acbcabc = ac - bc;\n        long abcabcd = abc - ab;\n        long acbcabcd\
    \ = ac - bc;\n        long abcabcde = abc - ab;\n        long acbcabcde = ac -\
    \ bc;\n        long abcabcdef = abc - ab;\n        long acbcabcdef = ac - bc;\n\
    \        long abcabcdefg = abc - ab;\n        long acbcabcdefg = ac - bc;\n  \
    \      long abcabcdefgh = abc - ab;\n        long acbcabcdefgh = ac - bc;\n  \
    \      long abcabcdefghi = abc - ab;\n        long acbcabcdefghi = ac - bc;\n\
    \        long abcabcdefghij = abc - ab;\n        long acbcabcdefghij = ac - bc;\n\
    \        long abcabcdefghijk = abc - ab;\n        long acbcabcdefghijk = ac -\
    \ bc;\n        long abcabcdefghijkl = abc - ab;\n        long acbcabcdefghijkl\
    \ = ac - bc;\n        long abcabcdefghijklmno = abc - ab;\n        long acbcabcdefghijklmno\
    \ = ac - bc;\n        long abcabcdefghijklmnop = abc - ab;\n        long acbcabcdefghijklmnop\
    \ = ac - bc;\n        long abcabcdefghijklmnopq = abc - ab;\n        long acbcabcdefghijklmnopq\
    \ = ac - bc;\n        long abcabcdefghijklmnopqr = abc - ab;\n        long acbcabcdefghijklmnopqr\
    \ = ac - bc;\n        long abcabcdefghijklmnopqrst = abc - ab;\n        long acbcabc\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7wl00xgh.cs(57,21): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 == t2) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e112504d1654ec6bcfee7fc96969275>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e112504d1654ec6bcfee7fc96969275>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbcabc = acbc\
    \ + abc;\n        long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb\
    \ * bc;\n        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc =\
    \ acbcabcbcb * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long\
    \ acbcabcbcbcbc = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcbc = acbcabcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpofwf159o.cs(46,46): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * a);\n        long side3 = Math.Sqrt(c * c + b * b);\n        long\
    \ side4 = Math.Sqrt(a * a + c * c);\n        long side5 = Math.Sqrt(b * b + c\
    \ * c);\n        long side6 = Math.Sqrt(a * a + b * b);\n        long side7 =\
    \ Math.Sqrt(c * c + a * a);\n        long side8 = Math.Sqrt(c * c + b * b);\n\
    \        long side9 = Math.Sqrt(a * a + c * c);\n        long side10 = Math.Sqrt(b\
    \ * b + c * c);\n        long side11 = Math.Sqrt(a * a + b * b);\n        long\
    \ side12 = Math.Sqrt(c * c + a * a);\n        long side13 = Math.Sqrt(c * c +\
    \ b * b);\n        long side14 = Math.Sqrt(a * a + c * c);\n        long side15\
    \ = Math.Sqrt(b * b + c * c);\n        long side16 = Math.Sqrt(a * a + b * b);\n\
    \        long side17 = Math.Sqrt(c * c + a * a);\n        long side18 = Math.Sqrt(c\
    \ * c + b * b);\n        long side19 = Math.Sqrt(a * a + c * c);\n        long\
    \ side20 = Math.Sqrt(b * b + c * c);\n        long side21 = Math.Sqrt(a * a +\
    \ b * b);\n        long side22 = Math.Sqrt(c * c + a * a);\n        long side23\
    \ = Math.Sqrt(c * c + b * b);\n        long side24 = Math.Sqrt(a * a + c * c);\n\
    \        long side25 = Math.Sqrt(b * b + c * c);\n        long side26 = Math.Sqrt(a\
    \ * a + b * b);\n        long side27 = Math.Sqrt(c * c + a * a);\n        long\
    \ side28 = Math.Sqrt(c * c + b * b);\n        long side29 = Math.Sqrt(a * a +\
    \ c * c);\n        long side30 = Math.Sqrt(b * b + c * c);\n        long side31\
    \ = Math.Sqrt(a * a + b * b);\n        long side32 = Math.Sqrt(c * c + a * a);\n\
    \        long side33 = Math.Sqrt(c * c + b * b);\n        long side34 = Math.Sqrt(a\
    \ * a + c * c);\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm2qu2nsy.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpm2qu2nsy.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpm2qu2nsy.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpm2qu2nsy.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpm2qu2nsy.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpm2qu2nsy.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpm2qu2nsy.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpm2qu2nsy.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpm2qu2nsy.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpm2qu2nsy.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpm2qu2nsy.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpm2qu2nsy.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpm2qu2nsy.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbca = acbc *\
    \ abc;\n        long acbcab = acbca * abc;\n        long acbcabc = acbcab * abc;\n\
    \        long acbcabcb = acbcabc * abc;\n        long acbcabcbc = acbcabcb * abc;\n\
    \        long acbcabcbcb = acbcabcbc * abc;\n        long acbcabcbcbc = acbcabcbcb\
    \ * abc;\n        long acbcabcbcbcb = acbcabcbcbc * abc;\n        long acbcabcbcbcbc\
    \ = acbcabcbcbcb * abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbc = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * abc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * abc;\n       \
    \ long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprr1akbdm.cs(37,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbc''
    is already defined in this scope

    /tmp/tmprr1akbdm.cs(40,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmprr1akbdm.cs(42,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmprr1akbdm.cs(43,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmprr1akbdm.cs(45,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmprr1akbdm.cs(46,37): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbcbcbcb''

    /tmp/tmprr1akbdm.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long) Math.Sqrt(d);\n        long t1 = (long) (-b\
    \ + root) / (2 * a);\n        long t2 = (long) (-b - root) / (2 * a);\n      \
    \  return t1 == t2;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c816a3560c044a9cbb281eb80bd7cea2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c816a3560c044a9cbb281eb80bd7cea2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abbbc = abbb *\
    \ bc;\n        long abbbcd = abbbc * bc;\n        long abbbcde = abbbcd * bc;\n\
    \        long abbbcdef = abbbcde * bc;\n        long abbbcdefg = abbbcdef * bc;\n\
    \        long abbbcdefgh = abbbcdefg * bc;\n        long abbbcdefghi = abbbcdefgh\
    \ * bc;\n        long abbbcdefghij = abbbcdefghi * bc;\n        long abbbcdefghijk\
    \ = abbbcdefghij * bc;\n        long abbbcdefghijkl = abbbcdefghijk * bc;\n  \
    \      long abbbcdefghijklm = abbbcdefghijkl * bc;\n        long abbbcdefghijklmn\
    \ = abbbcdefghijklm * bc;\n        long abbbcdefghijklmn1 = abbbcdefghijklmn *\
    \ bc;\n        long abbbcdefghijklmn2 = abbbcdefghijklmn1 * bc;\n        long\
    \ abbbcdefghijklmn3 = abbbcdefghijklmn2 * bc;\n        long abbbcdefghijklmn4\
    \ = abbbcdefghijklmn3 * bc;\n        long abbbcdefghijklmn5 = abbbcdefghijklmn4\
    \ * bc;\n        long abbbcdefghijklmn6 = abbbcdefghijklmn5 * bc;\n        long\
    \ abbbcdefghijklmn7 = abbbcdefghijklmn6 * bc;\n        long abbbcdefghijklmn8\
    \ = abbbcdefghijklmn7 * bc;\n        long abbbcdefghijklmn9 = abbbcdefghijklmn8\
    \ * bc;\n        long abbbcdefghijklmn10 = abbbcdefghijklmn9 * bc;\n        long\
    \ abbbcdefghijklmn11 = abbbc\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoai_96l4.cs(48,40): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long rootD = Math.Sqrt(d);\n        long\
    \ rootA = -b / rootD;\n        long rootB = (-b + rootD) / rootD;\n        long\
    \ rootC = (-b - rootD) / rootD;\n        if (rootA * rootA + rootB * rootB ==\
    \ rootC * rootC) {\n            return true;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps81ciqmn.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = c - e * Math.Sqrt(c - e * 0.5);\n        long\
    \ h = a + e * Math.Sqrt(a + e * 0.5);\n        long i = Math.Sqrt(a * a * 0.5\
    \ + b * b * 0.5 + c * c * 0.5);\n        return ((f - g) * (f - g) + (h - i) *\
    \ (h - i) <= 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgwtpaw17.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpgwtpaw17.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpgwtpaw17.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpgwtpaw17.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpgwtpaw17.cs(26,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d == 0) {\n         \
    \   return false;\n        }\n        long rootD = Math.Sqrt(d);\n        long\
    \ rootA = -b / rootD;\n        long rootB = (-b + rootD) / rootD;\n        long\
    \ rootC = (-b - rootD) / rootD;\n        if (rootA * rootA + rootB * rootB ==\
    \ rootC * rootC) {\n            return true;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbf72z7sd.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n\
    \            return true;\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20c82e7df5d741a596e1c2db167d69b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20c82e7df5d741a596e1c2db167d69b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqsblkj7.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long abcac = abc *\
    \ ac;\n        long acbca = acb * ca;\n        long abcca = abc * ca;\n      \
    \  long acbcaa = acb * caa;\n        long abccaa = abc * caa;\n        long acbcaab\
    \ = acb * caab;\n        long abccaab = abc * caab;\n        long acbcaabc = acb\
    \ * caabc;\n        long abccaabc = abc * caabc;\n        long acbcaabcc = acb\
    \ * caabcc;\n        long abccaabcc = abc * caabcc;\n        long acbcaabccc =\
    \ acb * caabcccc;\n        long abccaabcccc = abc * caabcccc;\n        long acbcaabccccc\
    \ = acb * caabccccc;\n        long abccaabccccc = abc * caabccccc;\n        long\
    \ acbcaabcccccc = acb * caabcccccc;\n        long abccaabcccccc = abc * caabcccccc;\n\
    \        long acbcaabccccccc = acb * caabccccccc;\n        long abccaabccccccc\
    \ = abc * caabccccccc;\n        long acbcaabcccccccb = acb * caabcccccccb;\n \
    \       long abccaabcccccccb = abc * caabcccccccb;\n        long acbcaabcccccccbc\
    \ = acb * caabcccccccbc;\n        long abccaabcccccccbc = abc * caabcccccccbc;\n\
    \        long acbcaabcccccccbcb = acb * caabcccccccbcb;\n        long abccaabcccccccbcb\
    \ = abc * caabcccccccbcb;\n        long acbcaabcccccccbcbc = acb * caabcccccccbcbc;\n\
    \        long abccaabcccccccbcbc = abc * caabcccccccbcbc;\n        long acbcaabcccccccbcbcb\
    \ = acb * caabcccccccbcbcb;\n        long abcca\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu7gvcxc6.cs(54,19): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n\
    \            return true;\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20c82e7df5d741a596e1c2db167d69b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20c82e7df5d741a596e1c2db167d69b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ abbc = ab * bc;\n        long abcab = ab * abc;\n        long abcabc = ab *\
    \ abc * abc;\n        long abcabbc = ab * abc * abc * abc;\n        long abcabbcbc\
    \ = ab * abc * abc * abc * abc;\n        long abcabbcbcbc = ab * abc * abc * abc\
    \ * abc * abc;\n        long abcabbcbcbcbc = ab * abc * abc * abc * abc * abc\
    \ * abc;\n        long abcabbcbcbcbcbc = ab * abc * abc * abc * abc * abc * abc\
    \ * abc;\n        long abcabbcbcbcbcbcbc = ab * abc * abc * abc * abc * abc *\
    \ abc * abc * abc;\n        long abcabbcbcbcbcbcbcbc = ab * abc * abc * abc *\
    \ abc * abc * abc * abc * abc;\n        long abcabbcbcbcbcbcbcbcbc = ab * abc\
    \ * abc * abc * abc * abc * abc * abc * abc * abc;\n        long abcabbcbcbcbcbcbcbcbcbc\
    \ = ab * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n        long\
    \ abcabbcbcbcbcbcbcbcbcbcbc = ab * abc * abc * abc * abc * abc * abc * abc * abc\
    \ * abc * abc * abc;\n        long abcabbcbcbcbcbcbcbcbcbcbcbc = ab * abc * abc\
    \ * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n        long abcabbcbcbcbcbcbcbcbcbcbcbc\
    \ = ab * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc\
    \ * abc;\n        long abcabbcbcbcbcbcbcbcbcbcbcbc = ab * abc * abc * abc * abc\
    \ * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n        long abcabbcbcbcbcbcbcbcbcbcbcbcbc\
    \ = ab * abc * abc * abc * abc * abc\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2a99b1ai.cs(40,78): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 < 0 || t2 < 0 || t1 > t2) {\n            return false;\n     \
    \   }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce04ff1e625b45d48356ad5709e6a5a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce04ff1e625b45d48356ad5709e6a5a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long abcbcb = abcbcb * bc;\n        long abcbcbc = abcbcbc * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long abcbcbcbc = abcbcbcbc *\
    \ bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long abcbcbcbcbc =\
    \ abcbcbcbcbc * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb *\
    \ bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi2kku8hm.cs(47,58): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * b);\n        long side3 = Math.Sqrt(c * c + b * b);\n        long\
    \ side4 = Math.Sqrt(a * a + c * c);\n        long side5 = Math.Sqrt(b * b + c\
    \ * c);\n        long side6 = Math.Sqrt(a * a + b * b + c * c);\n        long\
    \ side7 = Math.Sqrt(a * a + c * c + b * b);\n        long side8 = Math.Sqrt(a\
    \ * a + b * b + c * c + a * b);\n        long side9 = Math.Sqrt(a * a + c * c\
    \ + b * b + a * c);\n        long side10 = Math.Sqrt(a * a + b * b + c * c + a\
    \ * b + a * c);\n        long side11 = Math.Sqrt(a * a + b * b + c * c + a * b\
    \ + b * c);\n        long side12 = Math.Sqrt(a * a + b * b + c * c + b * b + a\
    \ * c);\n        long side13 = Math.Sqrt(a * a + b * b + c * c + b * b + c * c);\n\
    \        long side14 = Math.Sqrt(a * a + b * b + c * c + c * b + a * c);\n   \
    \     long side15 = Math.Sqrt(a * a + b * b + c * c + c * b + b * c);\n      \
    \  long side16 = Math.Sqrt(a * a + b * b + c * c + c * b + c * c);\n        long\
    \ side17 = Math.Sqrt(a * a + b * b + c * c + c * b + b * c + a * c);\n       \
    \ long side18 = Math.Sqrt(a * a + b * b + c * c + c * b + c * c + a * c);\n  \
    \      long side19 = Math.Sqrt(a * a + b * b + c * c + c * b + c * c + b * c);\n\
    \        long side20 = Math.Sqrt(a * a + b * b + c * c + c * b + c * c + c * c);\n\
    \        long side21 = Math.Sqrt(a * a + b * b + c * c + c * b + c * c + b * c\
    \ + a * c);\n        long side22 = Math.Sqrt(a * a + b * b + c * c + c * b + c\
    \ * c + c * c + a * c);\n        long side23 = Math.Sqrt(a * a + b * b + c * c\
    \ + c * b + c\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9s6mdv3z.cs(41,66): error CS1026: ) expected

    /tmp/tmp9s6mdv3z.cs(41,66): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * b; // acb = ac * bc\n        long abc = ab *\
    \ c; // abc = ab * c\n        long acbc = acb * c; // acbc = acb * c\n       \
    \ long abcb = abc * b; // abcb = abc * bc\n        long acbcab = acb * abc; //\
    \ acbcab = acb * abc\n        long acbcabc = acbcab * c; // acbcabc = acbcab *\
    \ c\n        long acbcabcb = acbcabcb * c; // acbcabcb = acbcabcb * c\n      \
    \  long acbcabcbc = acbcabcbc * c; // acbcabcbc = acbcabcbc * c\n        long\
    \ acbcabcbcb = acbcabcbcb * c; // acbcabcbcb = acbcabcbcb * c\n        long acbcabcbcbc\
    \ = acbcabcbcbc * c; // acbcabcbcbc = acbcabcbcbc * c\n        long acbcabcbcbcb\
    \ = acbcabcbcbcb * c; // acbcabcbcbcb = acbcabcbcbcb * c\n        long acbcabcbcbcbc\
    \ = acbcabcbcbcbc * c; // acbcabcbcbcbc = acbcabcbcbcbc * c\n        long acbcabcbcbcbcb\
    \ = acbcabcbcbcbcb * c; // acbcabcbcbcbcb = acbcabcbcbcbcb * c\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcbc * c; // acbcabcbcbcbcbc = acbcabcbcbcbcbc * c\n        long\
    \ acbcabcbcbcbcbcb = acbcabcbcbcbcbcb * c; // acbcabcbcbcbcbcb = acbcabcbcbcbcbcb\
    \ * c\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * c; // acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcb * c\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * c; // acbcabcbcbcbcbcbcbc = acbcabcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq69bygxo.cs(28,25): error CS0165: Use of unassigned local variable ''acbcabcb''

    /tmp/tmpq69bygxo.cs(29,26): error CS0165: Use of unassigned local variable ''acbcabcbc''

    /tmp/tmpq69bygxo.cs(30,27): error CS0165: Use of unassigned local variable ''acbcabcbcb''

    /tmp/tmpq69bygxo.cs(31,28): error CS0165: Use of unassigned local variable ''acbcabcbcbc''

    /tmp/tmpq69bygxo.cs(32,29): error CS0165: Use of unassigned local variable ''acbcabcbcbcb''

    /tmp/tmpq69bygxo.cs(33,30): error CS0165: Use of unassigned local variable ''acbcabcbcbcbc''

    /tmp/tmpq69bygxo.cs(34,31): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcb''

    /tmp/tmpq69bygxo.cs(35,32): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbc''

    /tmp/tmpq69bygxo.cs(36,33): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbcb''

    /tmp/tmpq69bygxo.cs(37,34): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbcbc''

    /tmp/tmpq69bygxo.cs(38,36): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbcbcbc''

    /tmp/tmpq69bygxo.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abbc = ab - bc;\n        long acab = ac - ab;\n        long abcab = ab - ab;\n\
    \        long acabc = ac - abc;\n        long abcabc = ab - abc;\n        long\
    \ acabbc = ac - abbc;\n        long abcabbc = ab - abbc;\n        long acabcab\
    \ = ac - abcab;\n        long abcabcab = ab - abcab;\n        long acabcabc =\
    \ ac - abcabc;\n        long abcabcabc = ab - abcabc;\n        long acabcabbc\
    \ = ac - abcabbc;\n        long abcabcabbc = ab - abcabbc;\n        long acabcabcab\
    \ = ac - abcabcab;\n        long abcabcabcab = ab - abcabcab;\n        long acabcabcabc\
    \ = ac - abcabcabc;\n        long abcabcabcabc = ab - abcabcabc;\n        long\
    \ acabcabcabbc = ac - abcabcabbc;\n        long abcabcabcabbc = ab - abcabcabbc;\n\
    \        long acabcabcabcab = ac - abcabcabcab;\n        long abcabcabcabcab =\
    \ ab - abcabcabcab;\n        long acabcabcabcabc = ac - abcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab - abcabcabcabc;\n        long acabcabcabcabbc = ac\
    \ - abcabcabcabbc;\n        long abcabcabcabcabbc = ab - abcabcabcabbc;\n    \
    \    long acabcabcabcabcab = ac - abcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab - abcabcabcabcab;\n        long acabcabcabcabcabc = ac - abcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab - abcabcabcabcabc;\n        long acabcabcabcabcabbc\
    \ = ac - abcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab - abcabcabcabcabbc;\n\
    \        long acabcabcabcabcabcab = ac - abcabcabcabcabcab;\n        long \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjxyl9l29.cs(56,13): error CS1001: Identifier expected

    /tmp/tmpjxyl9l29.cs(56,13): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n   \
    \     long abbbbbc = abbbbbc * bc;\n        long acbbbbbc = acbbbbbc * bc;\n \
    \       long abbbbbbc = abbbbbbc * bc;\n        long acbbbbbbc = acbbbbbbc * bc;\n\
    \        long abbbbbbbc = abbbbbbbc * bc;\n        long acbbbbbbbc = acbbbbbbbc\
    \ * bc;\n        long abbbbbbbbc = abbbbbbbbc * bc;\n        long acbbbbbbbbc\
    \ = acbbbbbbbbc * bc;\n        long abbbbbbbbbc = abbbbbbbbbc * bc;\n        long\
    \ acbbbbbbbbbc = acbbbbbbbbbc * bc;\n        long abbbbbbbbbbc = abbbbbbbbbbc\
    \ * bc;\n        long acbbbbbbbbbbc = acbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbc\
    \ = abbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbc = acbbbbbbbbbbbc * bc;\n\
    \        long abbbbbbbbbbbbc = abbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbc\
    \ = acbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbc = abbbbbbbbbbbbc * bc;\n\
    \        long acbbbbbbbbbbbbbc = acbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbbc = acbbbbbbbbbbbbbc *\
    \ bc;\n        long abbbbbbbbbbbbbbc = \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4pweljik.cs(51,32): error CS1525: Invalid expression term ''}''

    /tmp/tmp4pweljik.cs(51,32): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / a;\n        long t2 = (-b - root) / a;\n        return\
    \ t1 == t2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <736c916e0fb34344a3be2bb880bd3591>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <736c916e0fb34344a3be2bb880bd3591>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ abbc = ab * bc;\n        long abcab = ab * abc;\n        long abcabc = ab *\
    \ abc * bc;\n        long abcabcb = ab * abc * bc * bc;\n        long abcabcbc\
    \ = ab * abc * bc * bc * bc;\n        long abcabcbcb = ab * abc * bc * bc * bc\
    \ * bc;\n        long abcabcbcbc = ab * abc * bc * bc * bc * bc * bc;\n      \
    \  long abcabcbcbcb = ab * abc * bc * bc * bc * bc * bc * bc;\n        long abcabcbcbcbc\
    \ = ab * abc * bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbcbcbcb =\
    \ ab * abc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbcbcbcbc\
    \ = ab * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbcbcbcbcb\
    \ = ab * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long\
    \ abcabcbcbcbcbcbc = ab * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc\
    \ * bc;\n        long abcabcbcbcbcbcbcb = ab * abc * bc * bc * bc * bc * bc *\
    \ bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbcbcbcbcbcb = ab * abc\
    \ * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long\
    \ abcabcbcbcbcbcbcbc = ab * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc *\
    \ bc * bc * bc * bc * bc;\n        long abcabcbcbcbcbcbcbcb = ab * abc * bc *\
    \ bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long\
    \ abcabcbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0aupral.cs(41,29): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e * 0.5);\n        long\
    \ h = a + e * Math.Sqrt(a + e * 0.5);\n        if (f < 0 || g < 0 || h < 0)\n\
    \            return false;\n        long x = Math.Sqrt(f * f + g * g + h * h);\n\
    \        long y = (f * g - g * h) / x;\n        long z = (f * h - h * g) / x;\n\
    \        return ((Math.Abs(x) < Math.Abs(y)) && Math.Abs(x) < Math.Abs(z));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_2ynmojk.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_2ynmojk.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_2ynmojk.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_2ynmojk.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_2ynmojk.cs(28,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ Math.Sqrt(a * a);\n        long g = Math.Sqrt(b * b);\n        long h = Math.Sqrt(c\
    \ * c);\n        long root1 = (e + f) / g;\n        long root2 = (e - f) / g;\n\
    \        long root3 = (e + h) / g;\n        long root4 = (e - h) / g;\n      \
    \  long root5 = Math.Sqrt(root1 * root1 + root2 * root2 + root3 * root3 + root4\
    \ * root4);\n        long root6 = Math.Sqrt(root1 * root1 + root2 * root2 + root3\
    \ * root3 + root4 * root4);\n        return root5 * root5 == root6;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmxg_jwxi.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmxg_jwxi.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmxg_jwxi.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmxg_jwxi.cs(26,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmxg_jwxi.cs(31,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpmxg_jwxi.cs(32,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823423
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvww66fxq.cs(47,24): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqsblkj7.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abbc = abc - acb;\n        long acab = acb - abbc;\n        long abcab = abbc\
    \ - acab;\n        long acabc = acab - abcab;\n        long abcabc = abcab - acabc;\n\
    \        long acabcd = acabc - abcabc;\n        long abcabcd = abcabc - acabcd;\n\
    \        long acabcde = acabcd - abcabcd;\n        long abcabcde = abcabcd - acabcde;\n\
    \        long acabcdef = acabcde - abcabcde;\n        long abcabcdef = abcabcdef\
    \ - acabcdef;\n        long acabcdefg = acabcdef - abcabcdef;\n        long abcabcdefg\
    \ = abcabcdef - acabcdefg;\n        long acabcdefgh = acabcdefg - abcabcdefg;\n\
    \        long abcabcdefgh = abcabcdefg - acabcdefgh;\n        long acabcdefghi\
    \ = acabcdefgh - abcabcdefgh;\n        long abcabcdefghi = abcabcdefgh - acabcdefghi;\n\
    \        long acabcdefghij = acabcdefghi - abcabcdefghi;\n        long abcabcdefghij\
    \ = abcabcdefghi - acabcdefghij;\n        long acabcdefghijk = acabcdefghij -\
    \ abcabcdefghij;\n        long abcabcdefghijk = abcabcdefghij - acabcdefghijk;\n\
    \        long acabcdefghijkl = acabcdefghijk - abcabcdefghijk;\n        long abcabcdefghijkl\
    \ = abcabcdefghijk - acabcdefghijkl;\n        long acabcdefghijklmn = acabcdefghijkl\
    \ - abcabcdefghijkl;\n        long abcabcdefghijklmn = abcabcdefghijkl - acabcdefghijkln;\n\
    \        long acabcdefghijklmnn = acabcdefghijkln\n            - abcabcdefghijkln;\n\
    \        long abcabcdefghijklmnn = abcabcdefgh\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw58r5fgp.cs(51,46): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * (b - c);\n\
    \        long g = a + e * (a - c);\n        return ((f < g) && (f < b));\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpebhqdknc.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long abcab = abc * abc;\n        long acbc = ac *\
    \ bc;\n        long acbcab = acbc * abc;\n        long acbcabc = acbcab * abc;\n\
    \        long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb * bc;\n\
    \        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc = acbcabcbcb\
    \ * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long acbcabcbcbcbc\
    \ = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * bc;\n  \
    \      long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbb = acbcabcbcbcbcbcbcbcbcb * bc;\n \
    \       long acbcabcbcbcbcbcbcbcbb = acbcabcbcbcbcbcbcbcb\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnu6ng6gy.cs(47,58): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ b + e * Math.Sqrt(b + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e *\
    \ 0.5);\n        return ((f - g) == 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyo987dbm.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpyo987dbm.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpyo987dbm.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ (long) Math.Sqrt(a * a + b * b);\n        long g = (long) Math.Sqrt(a * a +\
    \ e * e);\n        long h = (long) Math.Sqrt(b * b + e * e);\n        long i =\
    \ (long) Math.Sqrt(b * b + f * f);\n        long j = (long) Math.Sqrt(a * a +\
    \ f * f);\n        long k = (long) Math.Sqrt(a * a + g * g);\n        long l =\
    \ (long) Math.Sqrt(b * b + g * g);\n        long m = (long) Math.Sqrt(b * b +\
    \ h * h);\n        long n = (long) Math.Sqrt(a * a + h * h);\n        long o =\
    \ (long) Math.Sqrt(a * a + i * i);\n        long p = (long) Math.Sqrt(b * b +\
    \ i * i);\n        long q = (long) Math.Sqrt(b * b + j * j);\n        long r =\
    \ (long) Math.Sqrt(a * a + j * j);\n        long s = (long) Math.Sqrt(a * a +\
    \ k * k);\n        long t = (long) Math.Sqrt(b * b + k * k);\n        long u =\
    \ (long) Math.Sqrt(b * b + l * l);\n        long v = (long) Math.Sqrt(a * a +\
    \ l * l);\n        long w = (long) Math.Sqrt(a * a + m * m);\n        long x =\
    \ (long) Math.Sqrt(b * b + m * m);\n        long y = (long) Math.Sqrt(b * b +\
    \ n * n);\n        long z = (long) Math.Sqrt(a * a + n * n);\n        long aa\
    \ = (long) Math.Sqrt(a * a + o * o);\n        long ab = (long) Math.Sqrt(b * b\
    \ + o * o);\n        long ac = (long) Math.Sqrt(a * a + p * p);\n        long\
    \ ad = (long) Math.Sqrt(b * b + p * p);\n        long ae = (long) Math.Sqrt(a\
    \ * a + q * q);\n        long af = (long) Math.Sqrt(b * b + q * q);\n        long\
    \ ag = (long) Math.Sqrt(a * a + r * r);\n        long ah = (long) Math.S\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxwd5lsjc.cs(52,32): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long abcab = ab * ab;\n\
    \        long acabc = ac * abc;\n        long abcabc = ab * abc;\n        long\
    \ acabbc = ac * abbc;\n        long abcabbc = ab * abbc;\n        long acabcab\
    \ = ac * abcab;\n        long abcabcab = ab * abcab;\n        long acabcabc =\
    \ ac * abcabc;\n        long abcabcabc = ab * abcabc;\n        long acabcabbc\
    \ = ac * abcabbc;\n        long abcabcabbc = ab * abcabbc;\n        long acabcabcab\
    \ = ac * abcabcab;\n        long abcabcabcab = ab * abcabcab;\n        long acabcabcabc\
    \ = ac * abcabcabc;\n        long abcabcabcabc = ab * abcabcabc;\n        long\
    \ acabcabcabbc = ac * abcabcabbc;\n        long abcabcabcabbc = ab * abcabcabbc;\n\
    \        long acabcabcabcab = ac * abcabcabcab;\n        long abcabcabcabcab =\
    \ ab * abcabcabcab;\n        long acabcabcabcabc = ac * abcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab * abcabcabcabc;\n        long acabcabcabcabbc = ac\
    \ * abcabcabcabbc;\n        long abcabcabcabcabbc = ab * abcabcabcabbc;\n    \
    \    long acabcabcabcabcab = ac * abcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab * abcabcabcabcab;\n        long acabcabcabcabcabc = ac * abcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab * abcabcabcabcabc;\n        long acabcabcabcabcabbc\
    \ = ac * abcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n\
    \        long acabcabcabcabcabcab = ac * abcabcabcabcabcab;\n        long \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr1y8iou2.cs(56,13): error CS1001: Identifier expected

    /tmp/tmpr1y8iou2.cs(56,13): error CS1002: ; expected

    '
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long acbc = ac * bc;\n\
    \        long acabc = ac * abc;\n        long abcab = ab * abc;\n        long\
    \ abcbc = ab * bc;\n        long abcabc = ab * abc;\n        long abcbcd = ab\
    \ * bc;\n        long abcabcd = ab * abc;\n        long abcbcde = ab * bc;\n \
    \       long abcabcde = ab * abc;\n        long abcbcdef = ab * bc;\n        long\
    \ abcabcdef = ab * abc;\n        long abcbcdefg = ab * bc;\n        long abcabcdefg\
    \ = ab * abc;\n        long abcbcdefgh = ab * bc;\n        long abcabcdefgh =\
    \ ab * abc;\n        long abcbcdefghi = ab * bc;\n        long abcabcdefghi =\
    \ ab * abc;\n        long abcbcdefghij = ab * bc;\n        long abcabcdefghij\
    \ = ab * abc;\n        long abcbcdefghijk = ab * bc;\n        long abcabcdefghijk\
    \ = ab * abc;\n        long abcbcdefghijkl = ab * bc;\n        long abcabcdefghijkl\
    \ = ab * abc;\n        long abcbcdefghijklmn = ab * bc;\n        long abcabcdefghijklmn\
    \ = ab * abc;\n        long abcbcdefghijklmn1 = ab * bc;\n        long abcabcdefghijklmn1\
    \ = ab * abc;\n        long abcbcdefghijklmn2 = ab * bc;\n        long abcabcdefghijklmn2\
    \ = ab * abc;\n        long abcbcdefghijklmn3 = ab * bc;\n        long abcabcdefghijklmn3\
    \ = ab * abc;\n        long abcbcdefghijklmn4 = ab * bc;\n        long abcabcdefghijklmn4\
    \ = ab * abc;\n        long abcbcdefghijklmn\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7xhpztzq.cs(59,30): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbcb = acbbc * bc;\n  \
    \      long abbbcb = abbbc * bc;\n        long acbbcbc = acbbcb * bc;\n      \
    \  long abbbcbc = abbbcb * bc;\n        long acbbcbcb = acbbcbc * bc;\n      \
    \  long abbbcbcb = abbbcbc * bc;\n        long acbbcbcbc = acbbcbcb * bc;\n  \
    \      long abbbcbcbc = abbbcbcb * bc;\n        long acbbcbcbcb = acbbcbcbc *\
    \ bc;\n        long abbbcbcbcb = abbbcbcbc * bc;\n        long acbbcbcbcbc = acbbcbcbcb\
    \ * bc;\n        long abbbcbcbcbc = abbbcbcbcb * bc;\n        long acbbcbcbcbcb\
    \ = acbbcbcbcbc * bc;\n        long abbbcbcbcbcb = abbbcbcbcbc * bc;\n       \
    \ long acbbcbcbcbcbc = acbbcbcbcbcb * bc;\n        long abbbcbcbcbcbc = abbbcbcbcbcb\
    \ * bc;\n        long acbbcbcbcbcbcb = acbbcbcbcbcbc * bc;\n        long abbbcbcbcbcbcb\
    \ = abbbcbcbcbcbc * bc;\n        long acbbcbcbcbcbcbc = acbbcbcbcbcbcb * bc;\n\
    \        long abbbcbcbcbcbcbc = abbbcbcbcbcbcb * bc;\n        long acbbcbcbcbcbcbcb\
    \ = acbbcbcbcbcbcbc * bc;\n        long abbbcbcbcbcbcbcb = abbbcbcbcbcbcbcb *\
    \ bc;\n        long acbbcbcbcbcbcbcbc = acbbcbcbcbcbcbcbc * bc;\n        long\
    \ abbbcbcbcbcbcbcbc = abbbcbcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwjh4phjv.cs(51,48): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n   \
    \     long abbbbbc = abbbbbc * bc;\n        long acbbbcc = acbbbcc * bc;\n   \
    \     long abbbbcc = abbbbcc * bc;\n        long acbbbccc = acbbbccc * bc;\n \
    \       long abbbbccc = abbbbccc * bc;\n        long acbbbcccb = acbbbcccb * bc;\n\
    \        long abbbbcccb = abbbbcccb * bc;\n        long acbbbcccbc = acbbbcccbc\
    \ * bc;\n        long abbbbcccbc = abbbbcccbc * bc;\n        long acbbbcccbcb\
    \ = acbbbcccbcb * bc;\n        long abbbbcccbcb = abbbbcccbcb * bc;\n        long\
    \ acbbbcccbcbc = acbbbcccbcbc * bc;\n        long abbbbcccbcbc = abbbbcccbcbc\
    \ * bc;\n        long acbbbcccbcbcb = acbbbcccbcbcb * bc;\n        long abbbbcccbcbcb\
    \ = abbbbcccbcbcb * bc;\n        long acbbbcccbcbcbc = acbbbcccbcbcbc * bc;\n\
    \        long abbbbcccbcbcbc = abbbbcccbcbcbc * bc;\n        long acbbbcccbcbcbcb\
    \ = acbbbcccbcbcbcb * bc;\n        long abbbbcccbcbcbcb = abbbbcccbcbcbcb * bc;\n\
    \        long acbbbcccbcbcbcbc = acbbbcccbcbcbcbc * bc;\n        long abbbbcccbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3d7x1_nv.cs(51,25): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long e = Math.Sqrt(d);\n            long f = -b + e;\n            long g =\
    \ -b - e;\n            if (f < 0)\n                return false;\n           \
    \ if (g < 0)\n                return true;\n            if (f == g)\n        \
    \        return true;\n            return false;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwas45jn6.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcb = abc * bc;\n        long abcab = abcb *\
    \ abc;\n        long abcabc = abcab * abc;\n        long abcabcb = abcabc * abc;\n\
    \        long abcabcba = abcabcb * abc;\n        long abcabcbac = abcabcba * abc;\n\
    \        long abcabcbaca = abcabcbac * abc;\n        long abcabcbacab = abcabcbaca\
    \ * abc;\n        long abcabcbacabc = abcabcbacab * abc;\n        long abcabcbacabcb\
    \ = abcabcbacabcb * abc;\n        long abcabcbacabcba = abcabcbacabcba * abc;\n\
    \        long abcabcbacabcbac = abcabcbacabcbac * abc;\n        long abcabcbacabcbaca\
    \ = abcabcbacabcbaca * abc;\n        long abcabcbacabcbacab = abcabcbacabcbacab\
    \ * abc;\n        long abcabcbacabcbacabc = abcabcbacabcbacabc * abc;\n      \
    \  long abcabcbacabcbacabcb = abcabcbacabcbacabcb * abc;\n        long abcabcbacabcbacabcba\
    \ = abcabcbacabcbacabcba * abc;\n        long abcabcbacabcbacabcbac = abcabcbacabcbacabcbac\
    \ * abc;\n        long abcabcbacabcbacabcbaca = abcabcbacabcbacabcbaca * abc;\n\
    \        long abcabcbacabcbacabcbacab = abcabcbacabcbacabcbacab * abc;\n     \
    \   long abcabcbacabcbacabcbacabc = abcabcbacabcbacabcbacabc * abc;\n        long\
    \ abcabcbacabcbacabcbacabcb = abcabcbacabcbacabcbacabcb * abc;\n        long abcabcbacabcba\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphl6hwu9z.cs(47,28): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abbc = ab - bc;\n        long abcab = ab + acb;\n        long abcabc = abc -\
    \ acb;\n        long abcabbc = abc - abbc;\n        long abcabbcabc = abcabbc\
    \ + abcab;\n        long abcabbcabbc = abcabbc - abcab;\n        long abcabbcabbcabc\
    \ = abcabbcabbc + abcabc;\n        long abcabbcabbcabbc = abcabbcabbc - abcabc;\n\
    \        long abcabbcabbcabbcabc = abcabbcabbcabbc + abcab;\n        long abcabbcabbcabbcabbc\
    \ = abcabbcabbcabbc - abcab;\n        long abcabbcabbcabbcabbcabc = abcabbcabbcabbcabc\
    \ + abcabc;\n        long abcabbcabbcabbcabbcabbc = abcabbcabbcabbcabbc + abcab;\n\
    \        long abcabbcabbcabbcabbcabbc = abcabbcabbcabbcabbc - abcab;\n       \
    \ long abcabbcabbcabbcabbcabbcabc = abcabbcabbcabbcabbcabc + abcabc;\n       \
    \ long abcabbcabbcabbcabbcabbcabbc = abcabbcabbcabbcabbcabbc + abcab;\n      \
    \  long abcabbcabbcabbcabbcabbcabbc = abcabbcabbcabbcabbcabbc - abcab;\n     \
    \   long abcabbcabbcabbcabbcabbcabbc = abcabbcabbcabbcabbcabbc + abcabc;\n   \
    \     long abcabbcabbcabbcabbcabbcabbcabc = abcabbcabbcabbcabbcabbcabc + abcab;\n\
    \        long abcabbcabbcabbcabbcabbcabbcabbc = abcabbcabbcabbcabbcabbcabc + abcabc;\n\
    \        long abcabbcabbcabbcabbcabbcabbcabbc = abcabbcabbcabbcabbcabbcabc + abcab;\n\
    \        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq83qf3js.cs(36,14): error CS0128: A local variable or function named ''abcabbcabbcabbcabbcabbc''
    is already defined in this scope

    /tmp/tmpq83qf3js.cs(39,14): error CS0128: A local variable or function named ''abcabbcabbcabbcabbcabbcabbc''
    is already defined in this scope

    /tmp/tmpq83qf3js.cs(40,14): error CS0128: A local variable or function named ''abcabbcabbcabbcabbcabbcabbc''
    is already defined in this scope

    /tmp/tmpq83qf3js.cs(43,14): error CS0128: A local variable or function named ''abcabbcabbcabbcabbcabbcabbcabbc''
    is already defined in this scope

    /tmp/tmpq83qf3js.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root1 = (-b + Math.Sqrt(d)) / (2 * a);\n        long root2\
    \ = (-b - Math.Sqrt(d)) / (2 * a);\n        if (root1 == root2)\n            return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp21jwkd83.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp21jwkd83.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / 2;\n        long t2 = (-b - root) / 2;\n        long t3 = t1 * t1 + t2 * t2;\n\
    \        if (t3 >= 0)\n            return true;\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c5ab948e56c4ed4a5516f9c1930a66f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c5ab948e56c4ed4a5516f9c1930a66f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcc = abc * bc;\n        long acbcc = acbc *\
    \ bc;\n        long abccc = abcc * bc;\n        long acbccc = acbcc * bc;\n  \
    \      long abcccc = abccc * bc;\n        long acbcccb = acbcc * bc;\n       \
    \ long abccccb = abccc * bc;\n        long acbcccbb = acbcc * bc;\n        long\
    \ abccccbb = abccc * bc;\n        long acbcccbbb = acbcc * bc;\n        long abccccbbb\
    \ = abccc * bc;\n        long acbcccbbbc = acbcc * bc;\n        long abccccbbbc\
    \ = abccc * bc;\n        long acbcccbbbcc = acbcc * bc;\n        long abccccbbbcc\
    \ = abccc * bc;\n        long acbcccbbbccc = acbcc * bc;\n        long abccccbbbccc\
    \ = abccc * bc;\n        long acbcccbbbcccd = acbcc * bc;\n        long abccccbbbcccd\
    \ = abccc * bc;\n        long acbcccbbbcccde = acbcc * bc;\n        long abccccbbbcccde\
    \ = abccc * bc;\n        long acbcccbbbcccdef = acbcc * bc;\n        long abccccbbbcccdef\
    \ = abccc * bc;\n        long acbcccbbbcccdefg = acbcc * bc;\n        long abccccbbbcccdefg\
    \ = abccc * bc;\n        long acbcccbbbcccdefgh = acbcc * bc;\n        long abccccbbbcccdefgh\
    \ = abccc * bc;\n        long acbcccbbbcccdefghi = acbcc * bc;\n        long abccccbbbcccdefghi\
    \ = abccc * bc;\n        long acbcccbbbcccdef\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi3dmoae0.cs(54,29): error CS1002: ; expected

    '
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * b; // acb is ac times b\n        long abc =\
    \ ab * c; // abc is ab times c\n        long acbc = acb * c; // acbc is ac times\
    \ bc times c\n        long acbcab = acbc * ab; // acbcab is ac times bc times\
    \ c * ab\n        long acbcabc = acbcab * c; // acbcabc is ac times bc times c\
    \ * ab times c\n        long acbcabcb = acbcabc * b; // acbcabcb is ac times bc\
    \ times c * ab times c * b\n        long acbcabcbc = acbcabcb * c; // acbcabcbc\
    \ is ac times bc times c * ab times c * b times c\n        long acbcabcbcb = acbcabcbc\
    \ * b; // acbcabcbcb is ac times bc times c * ab times c * b times c * b\n   \
    \     long acbcabcbcbc = acbcabcbcb * c; // acbcabcbcbc is ac times bc times c\
    \ * ab times c * b times c * b times c\n        long acbcabcbcbcb = acbcabcbcbc\
    \ * b; // acbcabcbcbcb is ac times bc times c * ab times c * b times c * b times\
    \ c * b\n        long acbcabcbcbcbc = acbcabcbcbcb * c; // acbcabcbcbcbc is ac\
    \ times bc times c * ab times c * b times c * b times c * b times c\n        long\
    \ acbcabcbcbcbcb = acbcabcbcbcbc * b; // acbcabcbcbcbcb is ac times bc times c\
    \ * ab times c * b times c * b times c * b times c * b\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * c; // acbcabcbcbcbcbcbc is ac times bc times c * ab times\
    \ c * b times c * b times c * b times c * b times c\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9fapi1sp.cs(35,44): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / a;\n        long t2 = (-b - root) / a;\n        if (t1\
    \ >= 0 && t1 <= 1) {\n            return true;\n        }\n        if (t2 >= 0\
    \ && t2 <= 1) {\n            return true;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8caa607b692447af904b160d31513cb9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8caa607b692447af904b160d31513cb9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n   \
    \     long abbbbbc = abbbbbc * bc;\n        long acbbbcc = acbbbbc * bc;\n   \
    \     long abbbbcc = abbbbcc * bc;\n        long acbbbcbc = acbbbcc * bc;\n  \
    \      long abbbbcbc = abbbbcc * bc;\n        long acbbbcbcb = acbbbcb * bc;\n\
    \        long abbbbcbcb = abbbbcc * bc;\n        long acbbbcbcbc = acbbbcbc *\
    \ bc;\n        long abbbbcbcbc = abbbbcbc * bc;\n        long acbbbcbcbcb = acbbbcbcb\
    \ * bc;\n        long abbbbcbcbcb = abbbbcbcb * bc;\n        long acbbbcbcbcbc\
    \ = acbbbcbcbc * bc;\n        long abbbbcbcbcbc = abbbbcbcbc * bc;\n        long\
    \ acbbbcbcbcbcb = acbbbcbcbcb * bc;\n        long abbbbcbcbcbcb = abbbbcbcbcb\
    \ * bc;\n        long acbbbcbcbcbcbc = acbbbcbcbcbc * bc;\n        long abbbbcbcbcbcbc\
    \ = abbbbcbcbcbc * bc;\n        long acbbbcbcbcbcbcb = acbbbcbcbcbcb * bc;\n \
    \       long abbbbcbcbcbcbcb = abbbbcbcbcbcb * bc;\n        long acbbbcbcbcbcbcbc\
    \ = acbbbcbcbcbcbc * bc;\n        long abbbbcbcbcbcbcbc = abbbbcbcbcbcbc * bc;\n\
    \        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu_429uww.cs(52,13): error CS1001: Identifier expected

    /tmp/tmpu_429uww.cs(52,13): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long x = (long)(-b\
    \ + root) / (2 * a);\n        long y = (long)(-b - root) / (2 * a);\n        return\
    \ (x * x + y * y) == 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <163a3cdd9e9f4a7a98189c5e4807cdd8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <163a3cdd9e9f4a7a98189c5e4807cdd8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long g = a + e * Math.Sqrt(b * b - 4 * a * c);\n\
    \        return ((f < g) && (f < b));\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplp5qsbox.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplp5qsbox.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplp5qsbox.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = d; //Math.Sqrt(d);\n        long\
    \ t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n    \
    \    if (t1 == t2) {\n            return true;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1dcddadb13c4eb7a858e4d1376e5995>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e1dcddadb13c4eb7a858e4d1376e5995>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbcabc = acbc\
    \ * abc;\n        long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb\
    \ * bc;\n        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc =\
    \ acbcabcbcb * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long\
    \ acbcabcbcbcbc = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcbc = acbcabcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwjcd4ktr.cs(46,46): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e * 0.5);\n        long\
    \ h = (b + g) / 2;\n        long i = (a + h) / 2;\n        long j = (a + i) /\
    \ 2;\n        long k = (b + j) / 2;\n        long l = (c + k) / 2;\n        long\
    \ m = (c + l) / 2;\n        long n = (a + m) / 2;\n        long o = (b + n) /\
    \ 2;\n        long p = (c + o) / 2;\n        long q = (c + p) / 2;\n        long\
    \ r = (a + q) / 2;\n        long s = (a + r) / 2;\n        long t = (b + s) /\
    \ 2;\n        long u = (c + t) / 2;\n        long v = (c + u) / 2;\n        long\
    \ w = (a + v) / 2;\n        long x = (b + w) / 2;\n        long y = (a + x) /\
    \ 2;\n        long z = (c + y) / 2;\n        long A = (a + z) / 2;\n        long\
    \ B = (b + y) / 2;\n        long C = (c + x) / 2;\n        long D = (c + z) /\
    \ 2;\n        long E = (a + y) / 2;\n        long F = (b + x) / 2;\n        long\
    \ G = (c + y) / 2;\n        long H = (c + x) / 2;\n        long I = (a + z) /\
    \ 2;\n        long J = (b + y) / 2;\n        long K = (c + x) / 2;\n        long\
    \ L = (c + z) / 2;\n        long M = (a + y) / 2;\n        long N = (b + x) /\
    \ 2;\n        long O = (c + y) / 2;\n        long P = (c + x) / 2;\n        long\
    \ Q = (a + z) / 2;\n        long R = (b + y) / 2;\n        long S = (c + x) /\
    \ 2;\n        long T = (c + z) / 2;\n        long U = (a + y) / 2;\n        long\
    \ V = (b + x) / 2;\n        long W = (c + y) / 2;\n        long X = (c + x) /\
    \ 2;\n        long Y = (a + z) / 2;\n        long Z = (b + y) / 2;\n        long\
    \ AA = (a + z) / 2;\n        long AB = (b + y) / 2;\n        long AC = (c + x)\
    \ / 2;\n        long AD = (c + z) / 2;\n        long \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbf3ba3je.cs(74,13): error CS1001: Identifier expected

    /tmp/tmpbf3ba3je.cs(74,13): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcc = abc * abc;\n        long acbc = acb * acb;\n        long abccc = abcc\
    \ * abcc;\n        long acbcc = acbcc * acbcc;\n        long abcccb = abccc *\
    \ abcccb;\n        long acbccb = acbcc * acbccb;\n        long abcccbc = abcccb\
    \ * abcccbc;\n        long acbccbc = acbccb * acbccbc;\n        long abcccbcb\
    \ = abcccbc * abcccbcb;\n        long acbccbc = acbccbc * acbccbc / 2;\n     \
    \   long abcccbcb = abcccbcb * abcccbcb;\n        long acbccbc = acbccbc * acbccbc\
    \ / 2;\n        long abcccbcb = abcccbcb * abcccbcb;\n        long acbccbc = acbccbc\
    \ * acbccbc / 2;\n        long abcccbcb = abcccbcb * abcccbcb;\n        long acbccbc\
    \ = acbccbc * acbccbc / 2;\n        long abcccbcb = abcccbcb * abcccbcb;\n   \
    \     long acbccbc = acbccbc * acbccbc / 2;\n        long abcccbcb = abcccbcb\
    \ * abcccbcb;\n        long acbccbc = acbccbc * acbccbc / 2;\n        long abcccbcb\
    \ = abcccbcb * abcccbcb;\n        long acbccbc = acbccbc * acbccbc / 2;\n    \
    \    long abcccbcb = abcccbcb * abcccbcb;\n        long acbccbc = acbccbc * acbccbc\
    \ / 2;\n        long abcccbcb = abcccbcb * abcccbcb;\n        long acbccbc = acbccbc\
    \ * acbccbc / 2;\n        long abcccbcb = abcccbcb * abcccbcb;\n        long \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwa60i8fd.cs(51,13): error CS1001: Identifier expected

    /tmp/tmpwa60i8fd.cs(51,13): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <585b4b85aef34cd7a44a353f9c272394>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <585b4b85aef34cd7a44a353f9c272394>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * b);\n        long side3 = Math.Sqrt(a * a + c * c);\n        long\
    \ side4 = Math.Sqrt(b * b + c * c);\n        long side5 = Math.Sqrt(a * a + b\
    \ * b);\n        long side6 = Math.Sqrt(c * c + a * a);\n        long side7 =\
    \ Math.Sqrt(a * a + c * c);\n        long side8 = Math.Sqrt(b * b + c * c);\n\
    \        long side9 = Math.Sqrt(a * a + b * b);\n        long side10 = Math.Sqrt(c\
    \ * c + a * a);\n        long side11 = Math.Sqrt(a * a + c * c);\n        long\
    \ side12 = Math.Sqrt(b * b + c * c);\n        long side13 = Math.Sqrt(a * a +\
    \ b * b);\n        long side14 = Math.Sqrt(c * c + a * a);\n        long side15\
    \ = Math.Sqrt(a * a + c * c);\n        long side16 = Math.Sqrt(b * b + c * c);\n\
    \        long side17 = Math.Sqrt(a * a + b * b);\n        long side18 = Math.Sqrt(c\
    \ * c + a * a);\n        long side19 = Math.Sqrt(a * a + c * c);\n        long\
    \ side20 = Math.Sqrt(b * b + c * c);\n        long side21 = Math.Sqrt(a * a +\
    \ b * b);\n        long side22 = Math.Sqrt(c * c + a * a);\n        long side23\
    \ = Math.Sqrt(a * a + c * c);\n        long side24 = Math.Sqrt(b * b + c * c);\n\
    \        long side25 = Math.Sqrt(a * a + b * b);\n        long side26 = Math.Sqrt(c\
    \ * c + a * a);\n        long side27 = Math.Sqrt(a * a + c * c);\n        long\
    \ side28 = Math.Sqrt(b * b + c * c);\n        long side29 = Math.Sqrt(a * a +\
    \ b * b);\n        long side30 = Math.Sqrt(c * c + a * a);\n        long side31\
    \ = Math.Sqrt(a * a + c * c);\n        long side32 = Math.Sqrt(b * b + c * c);\n\
    \        long side33 = Math.Sqrt(a * a + b * b);\n        long side34 = Math.Sqrt(c\
    \ * c + a * a);\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq5r3soig.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq5r3soig.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d == 0) {\n         \
    \   return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ b + e * Math.Sqrt(b + e * 0.5);\n        long g = c - e * Math.Sqrt(c - e *\
    \ 0.5);\n        long h = a - e * Math.Sqrt(a - e * 0.5);\n        long i = Math.Sqrt(a\
    \ * a + b * b - 4 * a * c);\n        long j = Math.Sqrt(a * a + c * c - 4 * a\
    \ * b);\n        long k = Math.Sqrt(c * c + d * d - 4 * a * c);\n        long\
    \ l = Math.Sqrt(c * c + d * d - 4 * a * b);\n        long m = Math.Sqrt(a * a\
    \ + b * b + c * c - d * d);\n        long n = Math.Sqrt(a * a + c * c + d * d\
    \ - b * b);\n        long o = Math.Sqrt(a * a + b * b + c * c + d * d - a * a);\n\
    \        long p = Math.Sqrt(a * a + c * c + d * d + b * b);\n        long q =\
    \ Math.Sqrt(a * a + b * b + c * c + d * d + a * a);\n        long r = Math.Sqrt(a\
    \ * a + c * c + d * d - b * b);\n        long s = Math.Sqrt(a * a + b * b + c\
    \ * c + d * d - a * a);\n        long t = Math.Sqrt(a * a + b * b + c * c + d\
    \ * d + b * b);\n        long u = Math.Sqrt(a * a + c * c + d * d - c * c);\n\
    \        long v = Math.Sqrt(a * a + b * b + c * c + d * d - b * b);\n        long\
    \ w = Math.Sqrt(a * a + b * b + c * c + d * d + a * a);\n        long x = Math.Sqrt(a\
    \ * a + b * b + c * c + d * d + b * b);\n        long y = Math.Sqrt(a * a + c\
    \ * c + d * d - c * c);\n        long z = Math.Sqrt(a * a + b * b + c * c + d\
    \ * d + a * a);\n        long A = a * a + b * b + c * c + d * d;\n        long\
    \ B = b * b;\n        long C = c * c;\n        long D = a * a + c * c + b * b;\n\
    \        long E = b * b;\n        long F = c * c;\n        long G = a * a + b\
    \ * b;\n        long H = c * c;\n        long I\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpenb_of5j.cs(53,15): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * b; // acb is ac times b\n        long abc =\
    \ ab * c; // abc is ab times c\n        long acbc = acb * c; // acbc is acb times\
    \ c\n        long abcb = abc * b; // abcb is abc times b\n        long acbcb =\
    \ (acb * c) * b; // acbcb is acb times c times b\n        long abcac = abc * b\
    \ * c; // abcac is abc times b times c\n        long acbcab = acb * c * ab; //\
    \ acbcab is acb times c times ab\n        long acbcabc = acb * c * ab * c; //\
    \ acbcabc is acb times c times ab times c\n        long acbcabcb = acb * c * ab\
    \ * c * b; // acbcabcb is acb times c times ab times c times b\n        long acbcabcbc\
    \ = acb * c * ab * c * b * c; // acbcabcbc is acb times c times ab times c times\
    \ b times c\n        long acbcabcbcb = acb * c * ab * c * b * c * c; // acbcabcbcb\
    \ is acb times c times ab times c times b times c times b\n        long acbcabcbcbc\
    \ = acb * c * ab * c * b * c * c * c; // acbcabcbcbc is acb times c times ab times\
    \ c times b times c times b times c\n        long acbcabcbcbcb = acb * c * ab\
    \ * c * b * c * c * c * c; // acbcabcbcbcb is acb times c times ab times c times\
    \ b times c times b times c times b\n        long acbcabcbcbcbc = acb * c * ab\
    \ * c * b * c * c * c * c * c; // acbcabcbcbcbc is acb times c times ab times\
    \ c times b times c times b times c times b times c\n        long acbcabcbcbcbcb\
    \ = acb * c * ab * c * b * c * c * c * c * c * c; // acbcabcbcbcbcbc is acb times\
    \ c times ab\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplyno219c.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n\
    \            return true;\n        if (t1 > t2)\n            return false;\n \
    \       long t3 = t1 - t2;\n        long t4 = t3 - t1;\n        return t4 < 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67d5458fa6c442afb985995059d70efe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67d5458fa6c442afb985995059d70efe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f090618c6254b7f886f92f494aa1c03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 == t2) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e112504d1654ec6bcfee7fc96969275>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e112504d1654ec6bcfee7fc96969275>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823422
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvww66fxq.cs(47,24): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rv1i65_.cs(47,24): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long) Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / a;\n        long t2 = (-b - root) / a;\n        return t1 == t2;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b34a24830e354013926de44b098bf96f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b34a24830e354013926de44b098bf96f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcb = abc * bc;\n        long acbcb = (acb *\
    \ abc) - (abc * acb);\n        long acbcbc = (acbcb * abc) - (abc * acbcb);\n\
    \        long acbcbcb = acbcbc * abc;\n        long acbcbcb = (acbcbcb * abc)\
    \ - (abc * acbcbcb);\n        long acbcbcbc = acbcbcb * abc;\n        long acbcbcbc\
    \ = (acbcbcbc * abc) - (abc * acbcbcbc);\n        long acbcbcbcb = acbcbcbc *\
    \ abc;\n        long acbcbcbcb = acbcbcbcb * abc;\n        long acbcbcbcb = (acbcbcbcb\
    \ * abc) - (abc * acbcbcbcb);\n        long acbcbcbcbc = acbcbcbcb * abc;\n  \
    \      long acbcbcbcbc = acbcbcbcbc * abc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * abc;\n        long acbcbcbcbc = acbcbcbcbc * abc;\n        long acbcbcbcbc\
    \ = acbcbcbcbc * abc;\n        long acbcbcbcbc = acbcbcbcbc * abc;\n        long\
    \ acbcbcbcbc = acbcbcbcbc * abc;\n        long acbcbcbcbc = acbcbcbcbc * abc;\n\
    \        long acbcbcbcbc = acbcbcbcbc * abc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * abc;\n        long acbcbcbcbc = acbcbcbcbc * abc;\n        long acbcbcbcbc\
    \ = acbcbcbcbc * abc;\n        long acbcbcbcbc = acbcbcbcbc * abc;\n        long\
    \ acbcbcbcbc = acbcbcbcbc * abc;\n        long acbcbcbcbc = acbcbcbcbc * abc;\n\
    \        long acbcbcbcbc = acbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvav7dtai.cs(50,34): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbc\
    \ = acbcbcbcbcbc * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n    \
    \    long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n\
    \        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc\
    \ = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n    \
    \    long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc\
    \ = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc * bc;\n\
    \        long abcbcbcbcbcbcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3gd8feur.cs(47,34): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abac = ab * ac;\n        long acab = ac * ab;\n        long acbc = ac * bc;\n\
    \        long abcab = ab * acb;\n        long abcbc = ab * bc;\n        long abcabc\
    \ = ab * acbc;\n        long acbcab = ac * abcb;\n        long acbcbc = ac * bc;\n\
    \        long acbcabc = ac * abcbc;\n        long abcbcab = ab * acbcb;\n    \
    \    long abcbcbc = ab * bc;\n        long abcbcabc = ab * acbcbc;\n        long\
    \ acbcbcab = ac * abcbc;\n        long acbcbcbc = ac * bc;\n        long acbcbcabc\
    \ = ac * abcbcba;\n        long abcbcabca = ab * acbcbca;\n        long abcbcbcab\
    \ = ab * acbcbca;\n        long abcbcbcbc = ab * acbcbca;\n        long abcbcbcabc\
    \ = ab * acbcbcba;\n        long acbcbcabca = ac * abcbcba;\n        long acbcbcbcab\
    \ = ac * abcbcba;\n        long acbcbcbcbc = ac * abcbcba;\n        long acbcbcbcabc\
    \ = ac * abcbcba;\n        long abcbcabcaa = ab * acbcbcaa;\n        long abcbcbcabaa\
    \ = ab * acbcbcaa;\n        long abcbcbcbcaa = ab * acbcbcaa;\n        long abcbcbcabaa\
    \ = ab * acbcbcaa;\n        long acbcbcabcaa = ac * abcbcbaa;\n        long acbcbcbcabaa\
    \ = ac * abcbcbaa;\n        long acbcbcbcbcaa = ac * abcbcbaa;\n        long acbcbcbcabaa\
    \ = ac * abcbcbaa;\n        long abcbcabcaaa = ab * acbcbcaaa;\n        long abcbcbcabaaa\
    \ = ab * acbcbcaaa;\n        long abcbcbcbcaaa = ab\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd5210juh.cs(57,31): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = d; //Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20773ad0652e405e87e9ba82424d0981>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20773ad0652e405e87e9ba82424d0981>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n   \
    \     long abbbbbc = abbbbbc * bc;\n        long acbbbcbc = acbbbbc * bc;\n  \
    \      long abbbbcbc = abbbbbc * bc;\n        long acbbbcbcb = acbbbcb * bc;\n\
    \        long abbbbcbcb = abbbbcb * bc;\n        long acbbbcbcbc = acbbbcbc *\
    \ bc;\n        long abbbbcbcbc = abbbbcbc * bc;\n        long acbbbcbcbcb = acbbbcbcb\
    \ * bc;\n        long abbbbcbcbcb = abbbbcbcb * bc;\n        long acbbbcbcbcbc\
    \ = acbbbcbcbc * bc;\n        long abbbbcbcbcbc = abbbbcbcbc * bc;\n        long\
    \ acbbbcbcbcbcb = acbbbcbcbcb * bc;\n        long abbbbcbcbcbcb = abbbbcbcbcb\
    \ * bc;\n        long acbbbcbcbcbcbc = acbbbcbcbcbc * bc;\n        long abbbbcbcbcbcbc\
    \ = abbbbcbcbcbc * bc;\n        long acbbbcbcbcbcbcb = acbbbcbcbcbcb * bc;\n \
    \       long abbbbcbcbcbcbcb = abbbbcbcbcbcb * bc;\n        long acbbbcbcbcbcbcbc\
    \ = acbbbcbcbcbcbc * bc;\n        long abbbbcbcbcbcbcbc = abbbbcbcbcbcbc * bc;\n\
    \        long acbbbcbcbcbcbcbcb = acbbbcbcbcbcbcb * bc;\n        long abbbbcbcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpacjktd3x.cs(51,25): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ b + e * Math.Sqrt(b + e * 0.5);\n        long g = c - e * Math.Sqrt(c - e *\
    \ 0.5);\n        long h = a - e * Math.Sqrt(a - e * 0.5);\n        long i = Math.Sqrt(a\
    \ * a + b * b - 4 * a * c);\n        long j = Math.Sqrt(a * a + c * c - 4 * a\
    \ * b);\n        long k = Math.Sqrt(c * c + d * d - 4 * a * c);\n        long\
    \ l = Math.Sqrt(c * c + d * d - 4 * a * b);\n        long m = Math.Sqrt(a * a\
    \ + b * b + c * c - d * d);\n        long n = Math.Sqrt(a * a + c * c + d * d\
    \ - b * b);\n        long o = Math.Sqrt(a * a + b * b + c * c + d * d - a * a);\n\
    \        long p = Math.Sqrt(a * a + c * c + d * d + b * b);\n        long q =\
    \ Math.Sqrt(a * a + b * b + c * c + d * d + a * a);\n        long r = Math.Sqrt(a\
    \ * a + b * b + c * c + d * d + b * b);\n        long s = Math.Sqrt(a * a + c\
    \ * c + d * d + c * c + d * d);\n        long t = Math.Sqrt(a * a + b * b + c\
    \ * c + d * d + c * c + d * d);\n        long u = Math.Sqrt(a * a + b * b + c\
    \ * c + d * d + c * c + d * d);\n        long v = Math.Sqrt(a * a + b * b + c\
    \ * c + d * d + c * c + d * d);\n        long w = Math.Sqrt(a * a + b * b + c\
    \ * c + d * d + c * c + d * d);\n        long x = Math.Sqrt(a * a + b * b + c\
    \ * c + d * d + c * c + d * d);\n        long y = Math.Sqrt(a * a + b * b + c\
    \ * c + d * d + c * c + d * d);\n        long z = Math.Sqrt(a * a + b * b + c\
    \ * c + d * d + c * c + d * d);\n        long A = a * a + b * b + c * c + d *\
    \ d + c * c + d * d;\n        long B = b * b;\n        long C = c * c;\n     \
    \   long D = d * d;\n        long E = a * a + c * c + d * d + b * \n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt3w8ev49.cs(49,45): error CS1525: Invalid expression term ''}''

    /tmp/tmpt3w8ev49.cs(49,45): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long sqrtD = Math.Sqrt(d);\n        long root1 = (-b + sqrtD)\
    \ / (2 * a);\n        long root2 = (-b - sqrtD) / (2 * a);\n        return (root1\
    \ == root2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprse_hpvk.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqsblkj7.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = Math.Sqrt(a * a);\n\
    \        long g = Math.Sqrt(b * b);\n        long h = Math.Sqrt(c * c);\n    \
    \    long p = a * e + b * f + c * g;\n        long q = a * f - b * e + c * g;\n\
    \        long r = a * g + b * f - c * e;\n        long s = a * e - b * g + c *\
    \ f;\n        long t = a * f + b * g - c * e;\n        long u = a * g - b * f\
    \ + c * e;\n        long v = a * e + b * f - c * g;\n        long w = a * f -\
    \ b * g + c * e;\n        long x = a * g + b * e - c * f;\n        long y = a\
    \ * e - b * g - c * f;\n        long z = a * f + b * g + c * e;\n        long\
    \ a = Math.Sqrt(p);\n        long b = Math.Sqrt(q);\n        long c = Math.Sqrt(r);\n\
    \        long d = Math.Sqrt(s);\n        long e = Math.Sqrt(t);\n        long\
    \ f = Math.Sqrt(u);\n        long g = Math.Sqrt(v);\n        long h = Math.Sqrt(w);\n\
    \        long i = Math.Sqrt(x);\n        long j = Math.Sqrt(y);\n        long\
    \ k = Math.Sqrt(z);\n        long l = Math.Sqrt(a * a);\n        long m = Math.Sqrt(b\
    \ * b);\n        long n = Math.Sqrt(c * c);\n        long o = Math.Sqrt(d * d);\n\
    \        long p = Math.Sqrt(e * e);\n        long q = Math.Sqrt(f * f);\n    \
    \    long r = Math.Sqrt(g * g);\n        long s = Math.Sqrt(h * h);\n        long\
    \ t = Math.Sqrt(i * i);\n        long u = Math.Sqrt(j * j);\n        long v =\
    \ Math.Sqrt(k * k);\n        long w = Math.Sqrt(l * l);\n        long x = Math.Sqrt(m\
    \ * m);\n        long y = Math.Sqrt(n * n);\n        long z = Math.Sqrt(o * o);\n\
    \        long a = Math.Sqrt(p * p + q * q\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8y8w2m47.cs(63,41): error CS1026: ) expected

    /tmp/tmp8y8w2m47.cs(63,41): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acbc = ac * bc;\n        long abcabc = ab * ac\
    \ * bc;\n        long acbcabc = ac * bc * abc;\n        long abcabbc = ab * ac\
    \ * b * bc;\n        long acbcabbc = ac * bc * abc * b;\n        long abcabcbc\
    \ = ab * ac * b * c * bc;\n        long acbcabcbc = ac * bc * abc * b * c;\n \
    \       long abcabcbbc = ab * ac * b * c * bc * b;\n        long acbcabcbbc =\
    \ ac * bc * abc * b * c * b;\n        long abcabcbabc = ab * ac * b * c * bc *\
    \ b * c;\n        long acbcabcbabc = ac * bc * abc * b * c * b * c;\n        long\
    \ abcabcbbabc = ab * ac * b * c * bc * b * c * b;\n        long acbcabcbbabc =\
    \ ac * bc * abc * b * c * b * c * b;\n        long abcabcbabcabc = ab * ac * b\
    \ * c * bc * b * c * b * c;\n        long acbcabcbabcabc = ac * bc * abc * b *\
    \ c * b * c * b * c;\n        long abcabcbbabcabc = ab * ac * b * c * bc * b *\
    \ c * b * c * b;\n        long acbcabcbbabcabc = ac * bc * abc * b * c * b * c\
    \ * b * c * b;\n        long abcabcbabcabcbbc = ab * ac * b * c * bc * b * c *\
    \ b * c * b * c;\n        long acbcabcbabcabcbbc = ac * bc * abc * b * c * b *\
    \ c * b * c * b * c;\n        long abcabcbbabcabcbbc = ab * ac * b * c * bc *\
    \ b * c * b * c * b * c * b;\n        long acbcabcbbabcabcbbc = ac * bc * abc\
    \ * b * c * b * c * b * c\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7mw4j0dv.cs(45,72): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = Math.Sqrt(a * a + b\
    \ * b);\n        long g = Math.Sqrt(a * a - b * b + c * c);\n        long h =\
    \ (b * b + c * c - a * a) / 2;\n        long i = Math.Sqrt(h);\n        long j\
    \ = (f * f + g * g - e) / 2;\n        long k = Math.Sqrt(j);\n        long l =\
    \ Math.Sqrt(k);\n        long m = Math.Sqrt(l);\n        long n = Math.Sqrt(m);\n\
    \        long o = Math.Sqrt(n);\n        long p = Math.Sqrt(o);\n        long\
    \ q = Math.Sqrt(p);\n        long r = Math.Sqrt(q);\n        long s = Math.Sqrt(r);\n\
    \        long t = Math.Sqrt(s);\n        long u = Math.Sqrt(t);\n        long\
    \ v = Math.Sqrt(u);\n        long w = Math.Sqrt(v);\n        long x = Math.Sqrt(w);\n\
    \        long y = Math.Sqrt(x);\n        long z = Math.Sqrt(y);\n        long\
    \ a = Math.Sqrt(z);\n        long b = Math.Sqrt(a);\n        long c = Math.Sqrt(b);\n\
    \        long d = Math.Sqrt(c);\n        long e = Math.Sqrt(d);\n        long\
    \ f = Math.Sqrt(e);\n        long g = Math.Sqrt(f);\n        long h = Math.Sqrt(g);\n\
    \        long i = Math.Sqrt(h);\n        long j = Math.Sqrt(i);\n        long\
    \ k = Math.Sqrt(j);\n        long l = Math.Sqrt(k);\n        long m = Math.Sqrt(l);\n\
    \        long n = Math.Sqrt(m);\n        long o = Math.Sqrt(n);\n        long\
    \ p = Math.Sqrt(o);\n        long q = Math.Sqrt(p);\n        long r = Math.Sqrt(q);\n\
    \        long s = Math.Sqrt(r);\n        long t = Math.Sqrt(s);\n        long\
    \ u = Math.Sqrt(t);\n        long v = Math.Sqrt(u);\n        long w = Math.Sqrt(v);\n\
    \        long x = Math.Sqrt(w);\n        long y = Math.Sqrt(x);\n        long\
    \ z = Math.Sqrt(y);\n        long a = Math.Sqrt(z);\n        long b = Math.S\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6txpa5rd.cs(71,24): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        return t1 == t2;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8e785516489470db2b3d62d18cd6a28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8e785516489470db2b3d62d18cd6a28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823423
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abbbc = abbb *\
    \ bc;\n        long abbbcd = abbbc * bc;\n        long abbbcde = abbbcd * bc;\n\
    \        long abbbcdef = abbbcde * bc;\n        long abbbcdefg = abbbcdef * bc;\n\
    \        long abbbcdefgh = abbbcdefg * bc;\n        long abbbcdefghi = abbbcdefgh\
    \ * bc;\n        long abbbcdefghij = abbbcdefghi * bc;\n        long abbbcdefghijk\
    \ = abbbcdefghij * bc;\n        long abbbcdefghijkl = abbbcdefghijk * bc;\n  \
    \      long abbbcdefghijklmn = abbbcdefghijklm * bc;\n        long abbbcdefghijklmn1\
    \ = abbbcdefghijklmn * bc;\n        long abbbcdefghijklmno = abbbcdefghijklmn1\
    \ * bc;\n        long abbbcdefghijklmnop = abbbcdefghijklmno * bc;\n        long\
    \ abbbcdefghijklmnopq = abbbcdefghijklmnop * bc;\n        long abbbcdefghijklmnopr\
    \ = abbbcdefghijklmnopq * bc;\n        long abbbcdefghijklmnoprs = abbbcdefghijklmnopr\
    \ * bc;\n        long abbbcdefghijklmnoprst = abbbcdefghijklmnoprs * bc;\n   \
    \     long abbbcdefghijklmnoprstu = abbbcdefghijklmnoprst * bc;\n        long\
    \ abbbcdefghijklmnoprstv = abbbcdefghijklmnoprstu * bc;\n        long abbbcdefghijklmnoprstuv\
    \ = abbbcdefghijklmnoprstv * bc;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphgcdb1kb.cs(25,21): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmphgcdb1kb.cs(26,22): error CS0103: The name ''abbb'' does not exist in
    the current context

    /tmp/tmphgcdb1kb.cs(36,33): error CS0103: The name ''abbbcdefghijklm'' does not
    exist in the current context

    /tmp/tmphgcdb1kb.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbcb = acbbc * bc;\n  \
    \      long abbbcb = abbbcb * bc;\n        long acbbcbc = acbbcb * bc;\n     \
    \   long abbbcbc = abbbcbc * bc;\n        long acbbcbcb = acbbcbcb * bc;\n   \
    \     long abbbcbcb = abbbcbcb * bc;\n        long acbbcbcbc = acbbcbcbc * bc;\n\
    \        long abbbcbcbc = abbbcbcbc * bc;\n        long acbbcbcbcb = acbbcbcbcb\
    \ * bc;\n        long abbbcbcbcb = abbbcbcbcb * bc;\n        long acbbcbcbcbc\
    \ = acbbcbcbcbc * bc;\n        long abbbcbcbcbc = abbbcbcbcbc * bc;\n        long\
    \ acbbcbcbcbcb = acbbcbcbcbcb * bc;\n        long abbbcbcbcbcb = abbbcbcbcbcb\
    \ * bc;\n        long acbbcbcbcbcbc = acbbcbcbcbcbc * bc;\n        long abbbcbcbcbcbc\
    \ = abbbcbcbcbcbc * bc;\n        long acbbcbcbcbcbcb = acbbcbcbcbcbcb * bc;\n\
    \        long abbbcbcbcbcbcb = abbbcbcbcbcbcb * bc;\n        long acbbcbcbcbcbcbc\
    \ = acbbcbcbcbcbcbc * bc;\n        long abbbcbcbcbcbcbc = abbbcbcbcbcbcbc * bc;\n\
    \        long acbbcbcbcbcbcbcb = acbbcbcbcbcbcbcb * bc;\n        long abbbcbcbcbcbcbcb\
    \ = abbbcbcbcbcbcbcb * bc;\n        long acbbcbcbcbcbcbcbc = acbbcbcbcbcbcbcbc\
    \ * bc;\n        long abbbcbcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1znfk03e.cs(51,28): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rv1i65_.cs(47,24): error CS1002: ; expected

    '
  timestamp: 1659794263
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 >= 0 && t1 <= 1) {\n            return true;\n        }\n    \
    \    if (t2 >= 0 && t2 <= 1) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ee5be383b194d63bb7c4e45be5dfb26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ee5be383b194d63bb7c4e45be5dfb26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823425
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcc = abc * bc;\n        long acbcc = acbc *\
    \ bc;\n        long abccc = abcc * bc;\n        long acbccc = acbcc * bc;\n  \
    \      long abcccc = abccc * bc;\n        long acbcccb = acbcc * bc;\n       \
    \ long abccccb = abccc * bc;\n        long acbcccba = acbcc * bc;\n        long\
    \ abccccba = abccc * bc;\n        long acbcccbac = acbcc * bc;\n        long abccccbac\
    \ = abccc * bc;\n        long acbcccbacb = acbcc * bc;\n        long abccccbacb\
    \ = abccc * bc;\n        long acbcccbacbc = acbcc * bc;\n        long abccccbacbc\
    \ = abccc * bc;\n        long acbcccbacbcb = acbcc * bc;\n        long abccccbacbcb\
    \ = abccc * bc;\n        long acbcccbacbcbc = acbcc * bc;\n        long abccccbacbcbc\
    \ = abccc * bc;\n        long acbcccbacbcbcb = acbcc * bc;\n        long abccccbacbcbcb\
    \ = abccc * bc;\n        long acbcccbacbcbcbc = acbcc * bc;\n        long abccccbacbcbcbc\
    \ = abccc * bc;\n        long acbcccbacbcbcbcb = acbcc * bc;\n        long abccccbacbcbcbcb\
    \ = abccc * bc;\n        long acbcccbacbcbcbcbc = acbcc * bc;\n        long abccccbacbcbcbcbc\
    \ = abccc * bc;\n        long acbcccbacbcbcbcbcb = acbcc * bc;\n        long abccccbacbcbcbcbcb\
    \ = abccc * bc;\n        long acbcccbacbcbcbcbcbc = acbcc * bc;\n        long\
    \ abc\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqhfvnv_x.cs(55,17): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * b; // acb is ac times b\n        long abc =\
    \ ab * c; // abc is ab times c\n        long acbc = acb * c; // acbc is acb times\
    \ c\n        long acbcab = acbc * ab; // acbcab is acbc times ab\n        long\
    \ acbcabc = acbcab * c; // acbcabc is acbcab times c\n        long acbcabcb =\
    \ acbcabc * b; // acbcabcb is acbcabc times b\n        long acbcabcbc = acbcabcb\
    \ * c; // acbcabcbc is acbcabcb times c\n        long acbcabcbcb = acbcabcbc *\
    \ b; // acbcabcbcb is acbcabcbc times b\n        long acbcabcbcbc = acbcabcbcb\
    \ * c; // acbcabcbcbc is acbcabcbcb times c\n        long acbcabcbcbcb = acbcabcbcbc\
    \ * b; // acbcabcbcbcb is acbcabcbcbc times b\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * c; // acbcabcbcbcbc is acbcabcbcbcb times c\n        long acbcabcbcbcbcb =\
    \ acbcabcbcbcbc * b; // acbcabcbcbcbcb is acbcabcbcbcbc times b\n        long\
    \ acbcabcbcbcbcbc = acbcabcbcbcbcb * c; // acbcabcbcbcbcbc is acbcabcbcbcbcb times\
    \ c\n        long acbcabcbcbcbcbc = acbcabcbcbcbcbc * b; // acbcabcbcbcbcbcb is\
    \ acbcabcbcbcbcbc times b\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * c; // acbcabcbcbcbcbcbcbc is acbcabcbcbcbcbcbc times c\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * b; // acbcabcbcbcbcbcbcbcb is acbcabcbcbcbcbcb\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoepaz27l.cs(35,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbc''
    is already defined in this scope

    /tmp/tmpoepaz27l.cs(36,34): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbcbc''

    /tmp/tmpoepaz27l.cs(37,36): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbcbcbc''

    /tmp/tmpoepaz27l.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcc = abc * abc;\n        long acbc = acb * acb;\n        long acbcc = acbc\
    \ * acbc;\n        long acbccc = acbcc * acbcc;\n        long acbcccb = acbccc\
    \ * acbcc;\n        long acbcccbc = acbcccb * acbcc;\n        long acbcccbcb =\
    \ acbcccbc * acbcc;\n        long acbcccbcbb = acbcccbcb * acbcc;\n        long\
    \ acbcccbcbcbb = acbcccbcb * acbcc;\n        long acbcccbcbcbbb = acbcccbcb *\
    \ acbcc;\n        long acbcccbcbcbbbc = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcc\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbbbccc = acbcccbcb * acbcc;\n \
    \       long acbcccbcbcbbbcccb = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcccbc\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcccbcb = acbcccbcb * acbcc;\n\
    \        long acbcccbcbcbbbcccbcbc = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcccbcbc\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcccbcbcb = acbcccbcb * acbcc;\n\
    \        long acbcccbcbcbbbcccbcbcb = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcccbcbcbb\
    \ = acbcccbcb * acbcc;\n        long acbcccbcbcbbbcccbcbcbbb = acbcccbcb * acbcc;\n\
    \        long acbcccbcbcbbbcccb\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp176nfytp.cs(46,31): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long abcab = ab * ab;\n\
    \        long acabc = ac * abc;\n        long abcabc = ab * abc;\n        long\
    \ acabbc = ac * abbc;\n        long abcabbc = ab * abbc;\n        long acabcab\
    \ = ac * abcab;\n        long abcabcab = ab * abcab;\n        long acabcabc =\
    \ ac * abcabc;\n        long abcabcabc = ab * abcabc;\n        long acabcabbc\
    \ = ac * abcabbc;\n        long abcabcabbc = ab * abcabbc;\n        long acabcabcab\
    \ = ac * abcabcab;\n        long abcabcabcab = ab * abcabcab;\n        long acabcabcabc\
    \ = ac * abcabcabc;\n        long abcabcabcabc = ab * abcabcabc;\n        long\
    \ acabcabcabbc = ac * abcabcabbc;\n        long abcabcabcabbc = ab * abcabcabbc;\n\
    \        long acabcabcabcab = ac * abcabcabcab;\n        long abcabcabcabcab =\
    \ ab * abcabcabcab;\n        long acabcabcabcabc = ac * abcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab * abcabcabcabc;\n        long acabcabcabcabbc = ac\
    \ * abcabcabcabbc;\n        long abcabcabcabcabbc = ab * abcabcabcabbc;\n    \
    \    long acabcabcabcabcab = ac * abcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab * abcabcabcabcab;\n        long acabcabcabcabcabc = ac * abcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab * abcabcabcabcabc;\n        long acabcabcabcabcabbc\
    \ = ac * abcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n\
    \        long acabcabcabcabcabcab = ac * abcabcabcabcabcab;\n        long \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa6b83xa9.cs(56,13): error CS1001: Identifier expected

    /tmp/tmpa6b83xa9.cs(56,13): error CS1002: ; expected

    '
  timestamp: 1659823424
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ True if the three\n    // sides form a right-angled triangle, False otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d == 0) {\n         \
    \   return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ b + e * Math.Sqrt(b + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e *\
    \ 0.5);\n        long h = a - e * Math.Sqrt(a - e * 0.5);\n        if (f < 0 ||\
    \ g < 0 || h < 0) {\n            return false;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpglg_3bfz.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpglg_3bfz.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpglg_3bfz.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpglg_3bfz.cs(26,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823425
