name: HumanEval_128_prod_signs
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given an array arr of integers and you need to return\n\
  \    // sum of magnitudes of integers multiplied by product of all signs\n    //\
  \ of each number in the array, represented by 1, -1 or 0.\n    // Note: return None\
  \ for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new List<long>(new\
  \ long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new List<long>()))\n\
  \    // null\n    public static Nullable<long> ProdSigns(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
  \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
  \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
  \    }\n\n}\n"
completions: ["        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sum += Math.Abs(i);\n        \
    \    product *= i;\n            sign = sign && i > 0;\n        }\n        if (sign)\
    \ {\n            return sum;\n        }\n        return product;", "        if\
    \ (arr.Count == 0) return null;\n        long sign = 1;\n        long product\
    \ = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n           \
    \ sign *= i;\n            product *= i;\n            sum += sign;\n        }\n\
    \        if (sum == 0) return null;\n        return sum * product;", "       \
    \ if (arr.Count == 0) {\n            return null;\n        }\n        long product\
    \ = 1;\n        long sign = 1;\n        long sum = 0;\n        foreach (long i\
    \ in arr) {\n            product *= i;\n            sign *= i;\n            sum\
    \ += sign;\n        }\n        if (sum == 0) {\n            return null;\n   \
    \     }\n        return sum;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var n in arr) {\n            signs.Add(n * product);\n\
    \            product *= n;\n        }\n        return signs.Sum();", "       \
    \ if (arr.Count == 0) return null;\n        var signs = new List<long>();\n  \
    \      foreach (var v in arr) {\n            signs.Add(v >= 0 ? 1 : -1);\n   \
    \     }\n        var product = signs.Aggregate((x, y) => x * y);\n        var\
    \ magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n        return magnitudes.Aggregate((x,\
    \ y) => x * product);", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long sum = 0;\n        long product = 1;\n        bool sign\
    \ = true;\n        foreach (long i in arr) {\n            sign = sign && (i ==\
    \ 1);\n            sum += Math.Abs(i);\n            product *= i;\n        }\n\
    \        if (sign) {\n            return sum;\n        }\n        return product;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => Math.Sign(x)).ToArray();\n        var product = signs.Aggregate((x, y) =>\
    \ x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        var sum = magnitudes.Aggregate((x, y) => x + y);\n        return product\
    \ * sum;", "        if (arr.Count == 0)\n            return null;\n        long\
    \ sum = 0;\n        long product = 1;\n        bool sign = true;\n        foreach\
    \ (long i in arr) {\n            sign = sign && i >= 0;\n            sum += Math.Abs(i)\
    \ * sign;\n            product *= sign;\n        }\n        return sum > 0 ? sum\
    \ : product;", "        if (arr.Count == 0) {\n            return null;\n    \
    \    }\n        var signs = new List<long>();\n        var product = 1;\n    \
    \    foreach (var num in arr) {\n            signs.Add(num < 0 ? -1 : 1);\n  \
    \          product *= num;\n        }\n        var result = signs.Sum();\n   \
    \     if (product != 0) {\n            result *= product;\n        }\n       \
    \ return result;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = arr.Select(x => Math.Sign(x)).ToArray();\n        var mags\
    \ = arr.Select(x => Math.Abs(x)).ToArray();\n        var prod = signs.Aggregate((x,\
    \ y) => x * y);\n        var result = mags.Aggregate((x, y) => x * y);\n     \
    \   if (prod != 0)\n            return result / prod;\n        return null;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => x < 0 ? -1 : (x > 0 ? 1 : 0)).ToArray();\n        var magnitudes = arr.Select(x\
    \ => Math.Abs(x)).ToArray();\n        var product = signs.Aggregate((x, y) =>\
    \ x * y);\n        return magnitudes.Aggregate((x, y) => x * product);", "   \
    \     if (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var sum = 0;\n        foreach\
    \ (var sign in signs)\n            sum += sign * product;\n        return sum;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = 1;\n        foreach (var item in arr) {\n\
    \            signs.Add(Math.Sign(item));\n            product *= item;\n     \
    \   }\n        var result = signs.Aggregate((a, b) => a * b);\n        return\
    \ product > 0 ? result : -result;", "        if (arr.Count == 0)\n           \
    \ return null;\n        long product = 1;\n        long sign = 1;\n        long\
    \ sum = 0;\n        foreach (long i in arr) {\n            sign = sign * i;\n\
    \            sum += sign;\n            product *= i;\n        }\n        if (sum\
    \ == 0)\n            return null;\n        return sum * product;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = arr.Sum();\n        foreach (var item in arr) {\n     \
    \       signs.Add(Math.Sign(item) * Math.Sign(product));\n            product\
    \ *= Math.Sign(item);\n        }\n        return signs.Sum();", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long sum = 0;\n      \
    \  long product = 1;\n        bool sign = true;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            product *= i;\n            sign\
    \ = sign && i > 0;\n        }\n        if (sign) {\n            return sum;\n\
    \        }\n        return product;", "        if (arr.Count == 0) {\n       \
    \     return null;\n        }\n        var signs = new List<long>();\n       \
    \ var product = 1;\n        foreach (var num in arr) {\n            signs.Add(num\
    \ >= 0 ? 1 : -1);\n            product *= num;\n        }\n        var result\
    \ = signs.Aggregate(product, (current, sign) => current * sign);\n        return\
    \ result >= 0 ? result : -result;", "        if (arr.Count == 0) {\n         \
    \   return null;\n        }\n        long product = 1;\n        long sum = 0;\n\
    \        bool sign = true;\n        foreach (long i in arr) {\n            sign\
    \ = sign && i > 0;\n            product *= i;\n            sum += sign * i;\n\
    \        }\n        return sum > 0 ? sum : -sum;", "        if (arr.Count == 0)\n\
    \            return null;\n        long product = 1;\n        long sign = 1;\n\
    \        long sum = 0;\n        foreach (long i in arr) {\n            sign *=\
    \ i;\n            sum += sign;\n            product *= sign;\n        }\n    \
    \    return sum;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var item in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n           \
    \ product *= item;\n        }\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var result = signs.Aggregate(product, (current, sign) => current * sign\
    \ * magnitudes[magnitudes.IndexOf(Math.Abs(x))]);\n        return result < 0 ?\
    \ null : result;"]
stop_tokens:
- "\n    }\n"
