name: HumanEval_128_prod_signs
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given an array arr of integers and you need to return\n\
  \    // sum of magnitudes of integers multiplied by product of all signs\n    //\
  \ of each number in the array, represented by 1, -1 or 0.\n    // Note: return None\
  \ for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new List<long>(new\
  \ long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new List<long>()))\n\
  \    // null\n    public static Nullable<long> ProdSigns(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
  \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
  \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
  \    }\n\n}\n"
completions: ["        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sum += Math.Abs(i);\n        \
    \    product *= i;\n            sign = sign && i > 0;\n        }\n        if (sign)\
    \ {\n            return sum;\n        }\n        return product;", "        if\
    \ (arr.Count == 0) return null;\n        long sign = 1;\n        long product\
    \ = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n           \
    \ sign *= i;\n            product *= i;\n            sum += sign;\n        }\n\
    \        if (sum == 0) return null;\n        return sum * product;", "       \
    \ if (arr.Count == 0) {\n            return null;\n        }\n        long product\
    \ = 1;\n        long sign = 1;\n        long sum = 0;\n        foreach (long i\
    \ in arr) {\n            product *= i;\n            sign *= i;\n            sum\
    \ += sign;\n        }\n        if (sum == 0) {\n            return null;\n   \
    \     }\n        return sum;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var n in arr) {\n            signs.Add(n * product);\n\
    \            product *= n;\n        }\n        return signs.Sum();", "       \
    \ if (arr.Count == 0) return null;\n        var signs = new List<long>();\n  \
    \      foreach (var v in arr) {\n            signs.Add(v >= 0 ? 1 : -1);\n   \
    \     }\n        var product = signs.Aggregate((x, y) => x * y);\n        var\
    \ magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n        return magnitudes.Aggregate((x,\
    \ y) => x * product);", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long sum = 0;\n        long product = 1;\n        bool sign\
    \ = true;\n        foreach (long i in arr) {\n            sign = sign && (i ==\
    \ 1);\n            sum += Math.Abs(i);\n            product *= i;\n        }\n\
    \        if (sign) {\n            return sum;\n        }\n        return product;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => Math.Sign(x)).ToArray();\n        var product = signs.Aggregate((x, y) =>\
    \ x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        var sum = magnitudes.Aggregate((x, y) => x + y);\n        return product\
    \ * sum;", "        if (arr.Count == 0)\n            return null;\n        long\
    \ sum = 0;\n        long product = 1;\n        bool sign = true;\n        foreach\
    \ (long i in arr) {\n            sign = sign && i >= 0;\n            sum += Math.Abs(i)\
    \ * sign;\n            product *= sign;\n        }\n        return sum > 0 ? sum\
    \ : product;", "        if (arr.Count == 0) {\n            return null;\n    \
    \    }\n        var signs = new List<long>();\n        var product = 1;\n    \
    \    foreach (var num in arr) {\n            signs.Add(num < 0 ? -1 : 1);\n  \
    \          product *= num;\n        }\n        var result = signs.Sum();\n   \
    \     if (product != 0) {\n            result *= product;\n        }\n       \
    \ return result;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = arr.Select(x => Math.Sign(x)).ToArray();\n        var mags\
    \ = arr.Select(x => Math.Abs(x)).ToArray();\n        var prod = signs.Aggregate((x,\
    \ y) => x * y);\n        var result = mags.Aggregate((x, y) => x * y);\n     \
    \   if (prod != 0)\n            return result / prod;\n        return null;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => x < 0 ? -1 : (x > 0 ? 1 : 0)).ToArray();\n        var magnitudes = arr.Select(x\
    \ => Math.Abs(x)).ToArray();\n        var product = signs.Aggregate((x, y) =>\
    \ x * y);\n        return magnitudes.Aggregate((x, y) => x * product);", "   \
    \     if (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var sum = 0;\n        foreach\
    \ (var sign in signs)\n            sum += sign * product;\n        return sum;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = 1;\n        foreach (var item in arr) {\n\
    \            signs.Add(Math.Sign(item));\n            product *= item;\n     \
    \   }\n        var result = signs.Aggregate((a, b) => a * b);\n        return\
    \ product > 0 ? result : -result;", "        if (arr.Count == 0)\n           \
    \ return null;\n        long product = 1;\n        long sign = 1;\n        long\
    \ sum = 0;\n        foreach (long i in arr) {\n            sign = sign * i;\n\
    \            sum += sign;\n            product *= i;\n        }\n        if (sum\
    \ == 0)\n            return null;\n        return sum * product;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = arr.Sum();\n        foreach (var item in arr) {\n     \
    \       signs.Add(Math.Sign(item) * Math.Sign(product));\n            product\
    \ *= Math.Sign(item);\n        }\n        return signs.Sum();", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long sum = 0;\n      \
    \  long product = 1;\n        bool sign = true;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            product *= i;\n            sign\
    \ = sign && i > 0;\n        }\n        if (sign) {\n            return sum;\n\
    \        }\n        return product;", "        if (arr.Count == 0) {\n       \
    \     return null;\n        }\n        var signs = new List<long>();\n       \
    \ var product = 1;\n        foreach (var num in arr) {\n            signs.Add(num\
    \ >= 0 ? 1 : -1);\n            product *= num;\n        }\n        var result\
    \ = signs.Aggregate(product, (current, sign) => current * sign);\n        return\
    \ result >= 0 ? result : -result;", "        if (arr.Count == 0) {\n         \
    \   return null;\n        }\n        long product = 1;\n        long sum = 0;\n\
    \        bool sign = true;\n        foreach (long i in arr) {\n            sign\
    \ = sign && i > 0;\n            product *= i;\n            sum += sign * i;\n\
    \        }\n        return sum > 0 ? sum : -sum;", "        if (arr.Count == 0)\n\
    \            return null;\n        long product = 1;\n        long sign = 1;\n\
    \        long sum = 0;\n        foreach (long i in arr) {\n            sign *=\
    \ i;\n            sum += sign;\n            product *= sign;\n        }\n    \
    \    return sum;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var item in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n           \
    \ product *= item;\n        }\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var result = signs.Aggregate(product, (current, sign) => current * sign\
    \ * magnitudes[magnitudes.IndexOf(Math.Abs(x))]);\n        return result < 0 ?\
    \ null : result;", "        if (arr.Count == 0)\n            return null;\n  \
    \      long sum = 0;\n        long product = 1;\n        bool sign = true;\n \
    \       foreach (long i in arr) {\n            sign = sign && (i < 0);\n     \
    \       sum += Math.Abs(i);\n            product *= i;\n        }\n        if\
    \ (sign)\n            return sum;\n        else\n            return -sum;", " \
    \       if (arr.Count == 0)\n            return null;\n        long product =\
    \ 1;\n        long sum = 0;\n        bool sign = true;\n        foreach (long\
    \ i in arr) {\n            sign = sign && (i == 1);\n            product *= i;\n\
    \            sum += sign * Math.Abs(i);\n        }\n        return sum * product;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        foreach (var i in arr)\n            signs.Add(Sign(i));\n\
    \        var product = signs.Aggregate((a, b) => a * b); // product of all signs\n\
    \        var magnitudes = arr.Select(i => Math.Abs(i)).ToList(); // magnitudes\
    \ of numbers\n        var result = magnitudes.Aggregate((a, b) => a * b * product);\
    \ // sum of magnitudes times product of all signs\n        return result.IsNull\
    \ ? null : result;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        var signs = new List<long>();\n        var product = 1;\n\
    \        foreach (var item in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n\
    \            product *= item;\n        }\n        var result = signs.Aggregate(product,\
    \ (current, sign) => current * sign);\n        return result < 0 ? null : result;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => Math.Sign(x)).ToList();\n        var product = signs.Aggregate((x, y) =>\
    \ x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n \
    \       var result = magnitudes.Aggregate((x, y) => x * y);\n        return result.Equals(product)\
    \ ? result : null;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var i in arr)\n        {\n            signs.Add(i);\n            product *=\
    \ i;\n        }\n        var sum = 0;\n        foreach (var i in signs)\n    \
    \    {\n            sum += Math.Sign(i) * Math.Abs(i);\n        }\n        return\
    \ sum * product;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = new List<long>();\n        foreach (var item in arr)\n    \
    \        signs.Add(Sign(item));\n        var product = signs.Aggregate((a, b)\
    \ => a * b); // product of all signs\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToList(); // magnitudes of numbers\n        var result = magnitudes.Aggregate((a,\
    \ b) => a * b * product); // sum of magnitudes\n        return result.IsNull ?\
    \ null : result;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = new List<long>();\n        foreach (var item in arr)\n    \
    \        signs.Add(Sign(item));\n        var product = signs.Aggregate((x, y)\
    \ => x * y);\n        var magnitude = arr.Aggregate((x, y) => Math.Abs(x - y));\n\
    \        return product * magnitude;", "        if (arr.Count == 0)\n        \
    \    return null;\n        long product = 1;\n        long sign = 1;\n       \
    \ foreach (long num in arr)\n            product *= num;\n        foreach (long\
    \ num in arr)\n            sign *= num;\n        long result = sign * product;\n\
    \        return result < 0 ? null : result;", "        if (arr.Count == 0)\n \
    \           return null;\n        var signs = new List<long>();\n        var product\
    \ = arr.Aggregate((x, y) => x * y);\n        foreach (var x in arr)\n        \
    \    signs.Add(x * Math.Sign(x));\n        var sum = signs.Aggregate((x, y) =>\
    \ x + y);\n        return product * sum;", "        if (arr.Count == 0)\n    \
    \        return null;\n        var signs = new List<long>();\n        foreach\
    \ (var i in arr)\n            signs.Add(Sign(i));\n        var product = signs.Aggregate((a,\
    \ b) => a * b);\n        var magnitudes = arr.Select(i => Math.Abs(i)).ToList();\n\
    \        return magnitudes.Aggregate((a, b) => a * b);", "        if (arr.Count\
    \ == 0)\n            return null;\n        var signs = new List<long>();\n   \
    \     var product = 1;\n        foreach (var item in arr)\n            signs.Add(Math.Sign(item));\n\
    \        foreach (var item in signs)\n            product *= item;\n        var\
    \ sum = 0;\n        foreach (var item in arr)\n            sum += Math.Abs(item)\
    \ * product;\n        return sum;", "        if (arr.Count == 0) return null;\n\
    \        long product = 1;\n        long sum = 0;\n        foreach (long n in\
    \ arr) {\n            int sign = n < 0 ? -1 : 1;\n            sum += sign * Math.Abs(n);\n\
    \            product *= sign;\n        }\n        return sum == 0 ? null : sum\
    \ * product;", "        if (arr.Count == 0)\n            return null;\n      \
    \  var signs = new List<long>();\n        foreach (var item in arr)\n        \
    \    signs.Add(Sign(item));\n        var result = new long[arr.Count];\n     \
    \   for (int i = 0; i < arr.Count; i++)\n            result[i] = signs[i] * arr[i];\n\
    \        return result.Sum();", "        if (arr.Count == 0)\n            return\
    \ null;\n        long product = 1;\n        long sign = 1;\n        long sum =\
    \ 0;\n        foreach (long i in arr) {\n            sign *= i;\n            sum\
    \ += sign;\n            product *= sign;\n        }\n        if (sum == 0)\n \
    \           return null;\n        return sum;", "        if (arr.Count == 0) {\n\
    \            return null;\n        }\n        long product = 1;\n        long\
    \ sum = 0;\n        bool sign = true;\n        foreach (long i in arr) {\n   \
    \         sign = sign ? i : -i;\n            product *= sign;\n            sum\
    \ += sign * i;\n        }\n        return sum == 0 ? null : sum;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var i in arr)\n            signs.Add(Sign(i));\n\
    \        foreach (var i in signs)\n            product *= i;\n        var sum\
    \ = 0;\n        foreach (var i in arr)\n            sum += Sign(i) * Math.Abs(i);\n\
    \        return product * sum;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long product = 1;\n        long sign = 1;\n      \
    \  long sum = 0;\n        foreach (long i in arr) {\n            product *= i;\n\
    \            sign *= i;\n            sum += sign;\n        }\n        return sum;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = 1;\n        foreach (var item in arr) {\n\
    \            var sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n   \
    \         product *= sign;\n        }\n        var result = signs.Aggregate((x,\
    \ y) => x * y);\n        if (result != product)\n            return null;\n  \
    \      return result;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        var signs = new List<long>();\n        var product = 1;\n\
    \        foreach (var item in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n\
    \            product *= item;\n        }\n        var magnitudes = arr.Select(x\
    \ => Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate(product,\
    \ (current, magnitude) => current * magnitude);\n        return signs.Aggregate(result,\
    \ (current, sign) => current * sign);", "        if (arr.Count == 0) {\n     \
    \       return null;\n        }\n        long product = 1;\n        long sum =\
    \ 0;\n        bool sign = true;\n        foreach (long num in arr) {\n       \
    \     sign = sign && num > 0;\n            product *= num;\n            sum +=\
    \ sign * Math.Abs(num);\n        }\n        return sum * product;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var num in arr)\n        {\n     \
    \       var sign = num >= 0 ? 1 : -1;\n            signs.Add(sign);\n        \
    \    product *= sign;\n        }\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var sum = magnitudes.Sum();\n        var result = product * sum;\n  \
    \      return result < 0 ? null : result;", "        if (arr.Count == 0)\n   \
    \         return null;\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var i in arr)\n        {\n            signs.Add(Math.Sign(i));\n\
    \            product *= i;\n        }\n        var result = signs.Sum();\n   \
    \     if (signs.Count > 0)\n            result *= product;\n        return result;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = arr.First();\n        signs.Add(product);\n\
    \        foreach (var item in arr.Skip(1))\n            signs.Add(item * product);\n\
    \        var sum = signs.Sum();\n        if (sum == 0)\n            return null;\n\
    \        if (sum < 0)\n            return -sum;\n        return sum;", "     \
    \   if (arr.Count == 0) {\n            return null;\n        }\n        var signs\
    \ = new List<long>();\n        var product = 1;\n        foreach (var item in\
    \ arr) {\n            signs.Add(Math.Sign(item));\n            product *= item;\n\
    \        }\n        if (signs.Count == 0) {\n            return null;\n      \
    \  }\n        var result = signs.Sum();\n        foreach (var sign in signs) {\n\
    \            result *= sign;\n        }\n        return result;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var item in arr) {\n            var\
    \ sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n            product\
    \ *= sign;\n        }\n        var result = signs.Aggregate(product, (current,\
    \ sign) => current * sign);\n        return result < 0 ? null : result;", "  \
    \      if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = 1;\n        foreach (var num in arr) {\n\
    \            signs.Add(num < 0 ? -1 : 1);\n            product *= num;\n     \
    \   }\n        var result = signs.Aggregate((a, b) => a * b) * product;\n    \
    \    return result < 0 ? null : result;", "        if (arr.Count == 0)\n     \
    \       return null;\n        var signs = arr.Select(x => x < 0 ? -1 : (x > 0\
    \ ? 1 : 0));\n        var product = signs.Aggregate((x, y) => x * y);\n      \
    \  var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n        return magnitudes.Aggregate((x,\
    \ y) => x * product);", "        if (arr.Count == 0)\n            return null;\n\
    \        long prod = 1;\n        long sign = 1;\n        foreach (long i in arr)\n\
    \            prod *= i;\n        foreach (long i in arr)\n            sign *=\
    \ i;\n        long res = sign * prod;\n        if (res == 0)\n            return\
    \ null;\n        return res;", "        if (arr.Count == 0) return null;\n   \
    \     var signs = new List<long>();\n        foreach (var item in arr) {\n   \
    \         signs.Add(Math.Sign(item));\n        }\n        var product = signs.Aggregate((a,\
    \ b) => a * b); // product of all signs\n        var magnitudes = arr.Select(x\
    \ => Math.Abs(x)).ToList(); // magnitudes of numbers\n        var result = magnitudes.Aggregate((a,\
    \ b) => a * b * product); // sum of magnitudes\n        return result != 0L ?\
    \ result : null;", "        if (arr.Count == 0)\n            return null;\n  \
    \      long product = 1;\n        long sign = 1;\n        long sum = 0;\n    \
    \    foreach (long i in arr) {\n            sign *= i;\n            sum += sign;\n\
    \            product *= sign;\n        }\n        if (sum == 0)\n            return\
    \ null;\n        return sum;", "        if (arr.Count == 0) return null;\n   \
    \     var signs = arr.Select(x => Math.Sign(x)).ToList();\n        var magnitudes\
    \ = arr.Select(x => Math.Abs(x)).ToList();\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var result = magnitudes.Aggregate((x, y) => x * y * product);\n\
    \        return result.IsNull ? null : result;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        foreach\
    \ (var item in arr)\n            signs.Add(item < 0 ? -1 : 1);\n        var product\
    \ = signs.Aggregate((a, b) => a * b); // product of all signs\n        var magnitudes\
    \ = arr.Select(x => Math.Abs(x)).ToList(); // magnitudes of numbers\n        var\
    \ result = magnitudes.Aggregate((a, b) => a * b * product); // sum of magnitudes\n\
    \        return result < 0 ? null : result;", "        if (arr.Count == 0) {\n\
    \            return null;\n        }\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        if (signs.Count == 0) {\n  \
    \          return null;\n        }\n        var result = signs.Aggregate((a, b)\
    \ => a * b);\n        return result * product;", "        if (arr.Count == 0)\
    \ {\n            return null;\n        }\n        long product = 1;\n        long\
    \ sign = 1;\n        long sum = 0;\n        foreach (long i in arr) {\n      \
    \      sign = sign * i;\n            sum += sign * Math.Abs(i);\n            product\
    \ *= i;\n        }\n        if (sum == 0) {\n            return null;\n      \
    \  }\n        return sum * product;", "        if (arr.Count == 0)\n         \
    \   return null;\n        var signs = new List<long>();\n        var product =\
    \ 1;\n        foreach (var item in arr)\n        {\n            signs.Add(item\
    \ < 0 ? -1 : 1);\n            product *= item;\n        }\n        var result\
    \ = signs.Aggregate((x, y) => x * y);\n        if (result < 0)\n            return\
    \ null;\n        return product;", "        if (arr.Count == 0) return null;\n\
    \        var signs = arr.Select(x => x < 0 ? -1 : 1).ToArray();\n        var product\
    \ = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToArray();\n        return magnitudes.Aggregate((x, y) => x * y\
    \ * product);", "        if (arr.Count == 0)\n            return null;\n     \
    \   var signs = new List<long>();\n        var product = 1;\n        foreach (var\
    \ item in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n            product\
    \ *= item;\n        }\n        var result = signs.Aggregate((x, y) => x * y);\n\
    \        return product < 0 ? result * -1 : result;", "        if (arr.Count ==\
    \ 0) {\n            return null;\n        }\n        long sum = 0;\n        long\
    \ product = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n\
    \            sign = sign && i > 0;\n            sum += sign * i;\n           \
    \ product *= sign;\n        }\n        return sum * product;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long sum = 0;\n      \
    \  long prod = 1;\n        bool sign = true;\n        foreach (long i in arr)\
    \ {\n            sum += Math.Abs(i);\n            prod *= i;\n            sign\
    \ = sign && i > 0;\n        }\n        if (sign) {\n            return sum;\n\
    \        } else {\n            return prod;\n        }", "        if (arr.Count\
    \ == 0) return null;\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        if (signs.Count == 0) return\
    \ null;\n        var result = signs.Aggregate((a, b) => a * b);\n        return\
    \ result * product;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = arr.Select(x => x < 0 ? -1 : (x > 0 ? 1 : 0));\n        var\
    \ product = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x\
    \ => Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate((x, y)\
    \ => x * y);\n        return result.Equals(product) ? result : null;", "     \
    \   if (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var item in arr) {\n            var\
    \ sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n            product\
    \ *= sign;\n        }\n        var result = signs.Aggregate((x, y) => x * y);\n\
    \        return result * product;", "        if (arr.Count == 0)\n           \
    \ return null;\n        var signs = new List<long>();\n        var product = 1;\n\
    \        foreach (var item in arr)\n        {\n            signs.Add(item < 0\
    \ ? -1 : 1);\n            product *= item;\n        }\n        var result = signs.Aggregate((a,\
    \ b) => a * b) * product;\n        return result < 0 ? null : result;", "    \
    \    if (arr.Count == 0)\n            return null;\n        long sum = 0;\n  \
    \      long product = 1;\n        bool sign = true;\n        foreach (long i in\
    \ arr) {\n            sum += Math.Abs(i);\n            product *= i;\n       \
    \     sign = sign && i < 0;\n        }\n        if (sign)\n            return\
    \ sum;\n        else\n            return -sum;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        var\
    \ product = arr.Aggregate((a, b) => a * b).Abs();\n        foreach (var x in arr)\
    \ {\n            if (x < 0)\n                signs.Add(-1);\n            else\
    \ if (x == 0)\n                signs.Add(0);\n            else\n             \
    \   signs.Add(1);\n        }\n        var result = signs.Aggregate((a, b) => a\
    \ * b) * product;\n        return result.IsNegative() ? null : result;", "   \
    \     if (arr.Count == 0)\n            return null;\n        long sum = 0;\n \
    \       long prod = 1;\n        foreach (long i in arr)\n            sum += Math.Abs(i);\n\
    \        foreach (long i in arr)\n            prod *= i;\n        if (sum == 0)\n\
    \            return null;\n        long sign = 1;\n        foreach (long i in\
    \ arr)\n            sign *= i;\n        return sign * Math.Abs(sum) * prod;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = arr.Aggregate((x, y) => x * y);\n     \
    \   foreach (var x in arr)\n            signs.Add(x < 0 ? -1 : 1);\n        var\
    \ result = signs.Aggregate((x, y) => x * product);\n        return result.Equals(product)\
    \ ? result : null;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long product = 1;\n        long sign = 1;\n        long sum\
    \ = 0;\n        foreach (long i in arr) {\n            sign *= i;\n          \
    \  sum += sign;\n            product *= sign;\n        }\n        if (sum == 0)\
    \ {\n            return null;\n        }\n        return sum;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long product = 1;\n  \
    \      long sign = 1;\n        long sum = 0;\n        foreach (long num in arr)\
    \ {\n            product *= num;\n            sign *= num;\n            sum +=\
    \ sign;\n        }\n        if (sum == 0) {\n            return null;\n      \
    \  }\n        return sum;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = arr.First();\n \
    \       signs.Add(product);\n        foreach (var num in arr.Skip(1))\n      \
    \      signs.Add(num * product);\n        foreach (var sign in signs)\n      \
    \      if (sign == 0)\n                return null;\n        return signs.Sum();",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = 1;\n        foreach (var item in arr)\n\
    \            signs.Add(Math.Sign(item));\n        foreach (var item in signs)\n\
    \            product *= item;\n        var result = signs.Sum();\n        foreach\
    \ (var item in signs)\n            result *= item;\n        return result;", " \
    \       if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => Math.Sign(x)).ToArray();\n        var product = signs.Aggregate((x, y) =>\
    \ x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        return magnitudes.Aggregate((x, y) => x * y * product);", "        if\
    \ (arr.Count == 0) return null;\n        long sum = 0;\n        long prod = 1;\n\
    \        bool sign = true;\n        foreach (long i in arr) {\n            sum\
    \ += Math.Abs(i);\n            prod *= i;\n            sign = sign && i < 0;\n\
    \        }\n        if (sign) return sum;\n        return prod;", "        if\
    \ (arr.Count == 0)\n            return null;\n        long prod = 1;\n       \
    \ long sign = 1;\n        foreach (long i in arr)\n            prod *= i;\n  \
    \      foreach (long i in arr)\n            sign *= i;\n        if (prod == 0)\n\
    \            return null;\n        if (sign == 0)\n            return prod;\n\
    \        long res = prod;\n        foreach (long i in arr)\n            res *=\
    \ i;\n        return res;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var item in arr) {\n            signs.Add(Math.Sign(item));\n            product\
    \ *= item;\n        }\n        var result = signs.Sum();\n        if (signs.Count\
    \ > 0)\n            result *= product;\n        return result;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long product = 1;\n        long sum\
    \ = 0;\n        bool sign = true;\n        foreach (long i in arr) {\n       \
    \     sign = sign && i > 0;\n            sum += sign * i;\n            product\
    \ *= sign;\n        }\n        return sum > 0 ? sum : product < 0 ? -product :\
    \ null;", "        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = new List<long>();\n        var product = 1;\n        foreach (var item\
    \ in arr)\n        {\n            signs.Add(item < 0 ? -1 : 1);\n            product\
    \ *= item;\n        }\n        var result = signs.Sum();\n        if (signs.Count\
    \ > 0)\n            result *= product;\n        return result;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long product = 1;\n  \
    \      long sum = 0;\n        long sign = 1;\n        foreach (long i in arr)\
    \ {\n            sign *= i;\n            sum += sign;\n            product *=\
    \ sign;\n        }\n        if (sum < 0) {\n            sum *= -1;\n        }\n\
    \        return sum;", "        if (arr.Count == 0)\n            return null;\n\
    \        long product = 1, sign = 1;\n        foreach (long i in arr) {\n    \
    \        product *= i;\n            sign *= (i < 0) ? -1 : 1;\n        }\n   \
    \     return sign * Math.Abs(product);", "        if (arr.Count == 0) {\n    \
    \        return null;\n        }\n        var signs = new List<long>();\n    \
    \    var product = 1;\n        foreach (var num in arr) {\n            signs.Add(num\
    \ > 0 ? 1 : -1);\n            product *= num;\n        }\n        var result =\
    \ signs.Aggregate((a, b) => a * b) * product;\n        return result < 0 ? null\
    \ : result;", "        if (arr.Count == 0)\n            return null;\n       \
    \ long product = 1;\n        long sum = 0;\n        bool sign = true;\n      \
    \  foreach (long i in arr) {\n            sign = sign && i < 0;\n            sum\
    \ += sign * i;\n            product *= sign;\n        }\n        return sum ==\
    \ 0 ? null : sum;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ num in arr) {\n            sum += Math.Abs(num);\n            prod *= num;\n\
    \        }\n        if (sum == 0) {\n            return null;\n        }\n   \
    \     long sign = 1;\n        long signProd = 1;\n        foreach (long num in\
    \ arr) {\n            sign *= num;\n            signProd *= num;\n        }\n\
    \        if (signProd == 0) {\n            return null;\n        }\n        long\
    \ result = sign * Math.Abs(sum);\n        if (signProd != 0) {\n            result\
    \ *= signProd;\n        }\n        return result;", "        if (arr.Count ==\
    \ 0) {\n            return null;\n        }\n        var signs = arr.Select(x\
    \ => Math.Sign(x)).ToArray();\n        var product = signs.Aggregate((x, y) =>\
    \ x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        return magnitudes.Aggregate((x, y) => x * y * signs[x]);", "        if\
    \ (arr.Count == 0) return null;\n        long product = 1;\n        long sum =\
    \ 0;\n        bool sign = true;\n        foreach (long i in arr) {\n         \
    \   sign = sign && i > 0;\n            sum += sign * i;\n            product *=\
    \ sign;\n        }\n        return sum == 0 ? null : sum;", "        if (arr.Count\
    \ == 0) return null;\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var item in arr) {\n            signs.Add(item < 0 ?\
    \ -1 : 1);\n            product *= item;\n        }\n        var result = signs.Aggregate((x,\
    \ y) => x * y);\n        if (result > 0) return result;\n        if (signs.Count\
    \ == 1) return signs[0];\n        return null;", "        if (arr.Count == 0)\n\
    \            return null;\n        long product = 1;\n        long sign = 1;\n\
    \        long sum = 0;\n        foreach (long i in arr) {\n            sum +=\
    \ Math.Abs(i);\n            product *= i;\n            sign *= i;\n        }\n\
    \        if (sum == 0)\n            return null;\n        return sign * Math.Abs(sum)\
    \ * product;", "        if (arr.Count == 0)\n            return null;\n      \
    \  var signs = new List<long>();\n        var product = 1;\n        foreach (var\
    \ item in arr) {\n            signs.Add(Math.Sign(item));\n            product\
    \ *= item;\n        }\n        if (signs.Count == 0)\n            return null;\n\
    \        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n        var\
    \ result = magnitudes.Aggregate(product, (x, y) => x * y);\n        if (signs.Count\
    \ == 1)\n            return result;\n        var product = signs.Aggregate(product,\
    \ (x, y) => x * y);\n        return result * product;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long prod =\
    \ 1;\n        bool sign = true;\n        foreach (long n in arr) {\n         \
    \   sum += Math.Abs(n);\n            prod *= n;\n            sign = sign && (n\
    \ < 0);\n        }\n        if (sign)\n            return sum;\n        else\n\
    \            return prod;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long product = 1;\n        long sum = 0;\n       \
    \ bool sign = true;\n        foreach (long i in arr) {\n            sign = sign\
    \ && i > 0;\n            product *= i;\n            sum += sign * Math.Abs(i);\n\
    \        }\n        return sum > 0 ? sum : null;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        var\
    \ product = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var result = signs.Sum();\n\
    \        if (signs.Count > 0)\n            result *= product;\n        return\
    \ result;", "        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = new List<long>();\n        foreach (var item in arr)\n            signs.Add(item\
    \ < 0 ? -1 : 1);\n        var product = signs.Aggregate((x, y) => x * y);\n  \
    \      var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n        var result\
    \ = magnitudes.Aggregate((x, y) => x * y);\n        return product * result;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        var\
    \ signs = new List<long>();\n        foreach (var item in arr) {\n           \
    \ signs.Add(Sign(item));\n        }\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var magnitude = arr.Sum(x => Math.Abs(x));\n        return\
    \ product * magnitude;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long product = 1;\n        long sign = 1;\n        long sum\
    \ = 0;\n        foreach (long i in arr) {\n            product *= i;\n       \
    \     sign *= i;\n            sum += sign;\n        }\n        return sum;", " \
    \       if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ product = 1;\n        long sign = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            sign = sign * i;\n            sum += sign * Math.Abs(i);\n\
    \            product *= i;\n        }\n        if (sum == 0) {\n            return\
    \ null;\n        }\n        return sum * product;", "        if (arr.Count ==\
    \ 0)\n            return null;\n        var signs = new List<long>();\n      \
    \  var product = arr.Sum();\n        foreach (var num in arr) {\n            var\
    \ sign = num < 0 ? -1 : 1;\n            signs.Add(sign * Math.Sign(num));\n  \
    \          product *= sign;\n        }\n        if (product == 0)\n          \
    \  return null;\n        return signs.Sum();", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        var\
    \ product = 1;\n        foreach (var num in arr) {\n            signs.Add(Math.Sign(num));\n\
    \            product *= num;\n        }\n        var sum = 0;\n        foreach\
    \ (var sign in signs)\n            sum += sign * product;\n        return sum;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => Math.Sign(x)).ToList();\n        var product = signs.Aggregate((x, y) =>\
    \ x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n \
    \       var result = magnitudes.Aggregate((x, y) => x * y);\n        return result.Equals(product)\
    \ ? result : null;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long product = 1;\n        long sum = 0;\n        bool sign\
    \ = true;\n        foreach (long i in arr) {\n            sign = sign && i > 0;\n\
    \            sum += sign * i;\n            product *= sign;\n        }\n     \
    \   return sum == 0 ? null : sum;", "        if (arr.Count == 0)\n           \
    \ return null;\n        long product = 1;\n        long sign = 1;\n        long\
    \ sum = 0;\n        foreach (long i in arr) {\n            product *= i;\n   \
    \         sign *= i;\n            sum += sign;\n        }\n        if (sum > 0)\n\
    \            return sum;\n        return null;", "        if (arr.Count == 0)\
    \ {\n            return null;\n        }\n        long sum = 0;\n        long\
    \ product = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n\
    \            sum += Math.Abs(i);\n            product *= i;\n            if (sign)\
    \ {\n                sign = i == 0;\n            } else {\n                sign\
    \ = i == -1;\n            }\n        }\n        return sum * product;", "    \
    \    if (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var item in arr)\n        {\n    \
    \        var sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n       \
    \     product *= sign;\n        }\n        var result = signs.Aggregate((x, y)\
    \ => x * y);\n        return result * product;", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        var\
    \ product = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var result = signs.Sum();\n\
    \        if (result != 0)\n            result *= product;\n        return result;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => Math.Sign(x)).ToList();\n        var product = signs.Aggregate((x, y) =>\
    \ x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n \
    \       return magnitudes.Aggregate((x, y) => x * y * product);", "        if\
    \ (arr.Count == 0)\n            return null;\n        long product = 1;\n    \
    \    long sign = 1;\n        long sum = 0;\n        foreach (var item in arr)\
    \ {\n            sign = sign * item;\n            sum += sign;\n            product\
    \ *= item;\n        }\n        if (sum == 0)\n            return null;\n     \
    \   return sum;", "        if (arr.Count == 0)\n            return null;\n   \
    \     var signs = arr.Select(x => Math.Sign(x)).ToArray();\n        var product\
    \ = signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToArray();\n        var result = magnitudes.Aggregate((x, y) =>\
    \ x * y);\n        return result.Equals(product) ? result : (long?)null;", " \
    \       if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ sum = 0;\n        long product = 1;\n        bool sign = true;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n\
    \            if (sign) {\n                sign = !sign;\n            } else {\n\
    \                sign = true;\n            }\n        }\n        if (sign) {\n\
    \            return sum;\n        } else {\n            return -sum;\n       \
    \ }", "        if (arr.Count == 0)\n            return null;\n        var signs\
    \ = new List<long>();\n        foreach (var item in arr)\n            signs.Add(Sign(item));\n\
    \        var product = signs.Aggregate((a, b) => a * b); // product of all signs\n\
    \        var magnitudes = arr.Select(x => Math.Abs(x)).ToList(); // magnitudes\n\
    \        var result = magnitudes.Aggregate((a, b) => a * b); // sum of magnitudes\n\
    \        return product * result;", "        if (arr.Count == 0)\n           \
    \ return null;\n        var signs = new List<long>();\n        foreach (var x\
    \ in arr)\n            signs.Add(Sign(x));\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var result = magnitudes.Aggregate((x, y) => x * y);\n        return product\
    \ * result;", "        if (arr.Count == 0)\n            return null;\n       \
    \ long sum = 0;\n        long product = 1;\n        bool sign = true;\n      \
    \  foreach (long n in arr) {\n            sign = sign && n < 0;\n            sum\
    \ += sign * n;\n            product *= sign;\n        }\n        return sum *\
    \ product;", "        if (arr.Count == 0)\n            return null;\n        var\
    \ signs = new List<long>();\n        var product = arr.Sum();\n        foreach\
    \ (var item in arr) {\n            var sign = item < 0 ? -1 : 1;\n           \
    \ signs.Add(sign * Math.Sign(item));\n            product *= sign;\n        }\n\
    \        return product;", "        if (arr.Count == 0)\n            return null;\n\
    \        long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sum += Math.Abs(i);\n        \
    \    product *= i;\n            if (sign)\n                sign = i >= 0;\n  \
    \          else\n                sign = i < 0;\n        }\n        if (sign)\n\
    \            return sum;\n        else\n            return -sum;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var item in arr) {\n            signs.Add(item\
    \ < 0 ? -1 : 1);\n            product *= item;\n        }\n        var result\
    \ = signs.Aggregate((a, b) => a * b) * product;\n        return result < 0 ? null\
    \ : result;", "        if (arr.Count == 0)\n            return null;\n       \
    \ var signs = arr.Select(x => Math.Sign(x)).ToList();\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var result = magnitudes.Aggregate((x, y) => x * y);\n        return result.Equals(product)\
    \ ? result : null;", "        if (arr.Count == 0) return null;\n        long sum\
    \ = 0;\n        long product = 1;\n        bool sign = true;\n        foreach\
    \ (long num in arr) {\n            sign = sign && num > 0;\n            sum +=\
    \ sign * num;\n            product *= sign;\n        }\n        return sum * product;",
  "        if (arr.Count == 0)\n            return null;\n        long product = 1;\n\
    \        long sign = 1;\n        foreach (long num in arr) {\n            product\
    \ *= num;\n            sign *= num < 0 ? -1 : 1;\n        }\n        return sign\
    \ * product;", "        if (arr.Count == 0) return null;\n        long prod =\
    \ 1;\n        long sign = 1;\n        long sum = 0;\n        foreach (long i in\
    \ arr) {\n            prod *= i;\n            sign *= i;\n            sum += sign;\n\
    \        }\n        if (sum == 0) return null;\n        return sum;", "      \
    \  if (arr.Count == 0)\n            return null;\n        long product = 1;\n\
    \        long sign = 1;\n        long sum = 0;\n        foreach (long i in arr)\
    \ {\n            product *= i;\n            sign *= i;\n            sum += sign;\n\
    \        }\n        if (sum == 0)\n            return null;\n        return sum;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ sum = 0;\n        long product = 1;\n        bool sign = true;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n\
    \            sign = sign && i < 0;\n        }\n        if (sign) {\n         \
    \   return sum;\n        }\n        return product;", "        if (arr.Count ==\
    \ 0) {\n            return null;\n        }\n        long product = 1;\n     \
    \   long sum = 0;\n        bool sign = true;\n        foreach (long num in arr)\
    \ {\n            sign = sign && (num > 0);\n            sum += sign * (num * product);\n\
    \            product *= num;\n        }\n        return sum;", "        if (arr.Count\
    \ == 0)\n            return null;\n        long sum = 0;\n        long product\
    \ = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n       \
    \     sum += Math.Abs(i);\n            product *= i;\n            if (sign)\n\
    \                sign = i < 0;\n            else\n                sign = i > 0;\n\
    \        }\n        if (sign)\n            return sum;\n        else\n       \
    \     return -sum;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var item in arr)\n        {\n            signs.Add(item < 0 ? -1 : 1);\n  \
    \          product *= item;\n        }\n        var result = signs.Aggregate(product,\
    \ (current, sign) => current * sign);\n        return result < 0 ? null : result;",
  "        if (arr.Count == 0)\n            return null;\n        long product = 1;\n\
    \        long sign = 1;\n        long sum = 0;\n        foreach (long i in arr)\
    \ {\n            sign *= i;\n            sum += sign * Math.Abs(i);\n        \
    \    product *= sign;\n        }\n        if (sum == 0)\n            return null;\n\
    \        return sum;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var item in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n           \
    \ product *= item;\n        }\n        var result = signs.Aggregate((a, b) =>\
    \ a * b) * product;\n        return result < 0 ? null : result;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long sum =\
    \ 0;\n        long prod = 1;\n        bool sign = true;\n        foreach (long\
    \ num in arr) {\n            sum += num;\n            prod *= num;\n         \
    \   sign = sign && num > 0;\n        }\n        if (sign) {\n            return\
    \ sum;\n        }\n        return prod;", "        if (arr.Count == 0) {\n   \
    \         return null;\n        }\n        var signs = new List<long>();\n   \
    \     var product = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var result = signs.Sum();\n\
    \        if (signs.Count > 0) {\n            result *= product;\n        }\n \
    \       return result;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        foreach (var num in arr)\n   \
    \         signs.Add(num < 0 ? 1 : num > 0 ? -1 : 0);\n        var product = signs.Aggregate((a,\
    \ b) => a * b);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        return magnitudes.Aggregate((a, b) => a * product * b);", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var item in arr) {\n            signs.Add(item\
    \ < 0 ? -1 : 1);\n            product *= item;\n        }\n        var magnitudes\
    \ = arr.Select(x => Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate((x,\
    \ y) => x * y);\n        return signs.Aggregate((x, y) => x * y * result);", " \
    \       if (arr.Count == 0)\n            return null;\n        long sum = 0;\n\
    \        long product = 1;\n        bool sign = true;\n        foreach (long i\
    \ in arr) {\n            if (sign)\n                sum += i;\n            else\n\
    \                sum -= i;\n            product *= i;\n            sign = !sign;\n\
    \        }\n        if (sign)\n            return sum;\n        else\n       \
    \     return -sum;", "        if (arr.Count == 0)\n            return null;\n\
    \        long product = 1, sign = 1;\n        foreach (var item in arr)\n    \
    \        product *= item;\n        foreach (var item in arr)\n            sign\
    \ *= item;\n        long result = sign * product;\n        return result < 0 ?\
    \ null : result;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var v in arr)\n        {\n            var sign = v.Sign;\n            if (sign\
    \ == 0)\n                signs.Add(0);\n            else\n            {\n    \
    \            signs.Add(sign);\n                product *= sign;\n            }\n\
    \        }\n        var result = signs.Aggregate((a, b) => a * b);\n        return\
    \ result * product;", "        if (arr.Count == 0) return null;\n        long\
    \ sum = 0;\n        long product = 1;\n        bool sign = true;\n        foreach\
    \ (long i in arr) {\n            sign = sign ? i : -i;\n            sum += sign\
    \ * Math.Abs(i);\n            product *= sign;\n        }\n        return sum\
    \ * product;", "        if (arr.Count == 0)\n            return null;\n      \
    \  var signs = arr.Select(x => Math.Sign(x)).ToArray();\n        var product =\
    \ signs.Aggregate((x, y) => x * y);\n        var magnitudes = arr.Select(x =>\
    \ Math.Abs(x)).ToArray();\n        return magnitudes.Aggregate((x, y) => x * y\
    \ * product);", "        if (arr.Count == 0) return null;\n        var signs =\
    \ arr.Select(x => Math.Sign(x)).ToArray();\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        return magnitudes.Aggregate((x, y) => x * y * signs[x]);", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => x < 0 ? -1 : (x > 0 ? 1 : 0));\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        var result = magnitudes.Aggregate((x, y) => x * y);\n        return result.Equals(product)\
    \ ? result : null;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long product = 1;\n        long sum = 0;\n        bool sign\
    \ = true;\n        foreach (long i in arr) {\n            sign = sign && i > 0;\n\
    \            product *= i;\n            sum += sign * Math.Abs(i);\n        }\n\
    \        return sum * product;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        var signs = new List<long>();\n        foreach (var\
    \ item in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n        }\n     \
    \   var product = signs.Aggregate((a, b) => a * b); // product of all signs\n\
    \        var magnitudes = arr.Select(x => Math.Abs(x)).ToList(); // magnitudes\
    \ of numbers\n        var magnitude = magnitudes.Aggregate((a, b) => a * b); //\
    \ magnitude of numbers\n        var result = product * magnitude;\n        return\
    \ result < 0 ? null : result;", "        if (arr.Count == 0)\n            return\
    \ null;\n        long prod = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr)\n            prod *= i;\n        foreach (long i in arr)\n       \
    \     sum += Math.Abs(i);\n        if (sum == 0)\n            return null;\n \
    \       return prod * sum;", "        if (arr.Count == 0)\n            return\
    \ null;\n        var signs = new List<long>();\n        var product = 1;\n   \
    \     foreach (var v in arr)\n            signs.Add(v < 0 ? -1 : 1);\n       \
    \ foreach (var v in signs)\n            product *= v;\n        var sum = 0;\n\
    \        foreach (var v in arr)\n            sum += Math.Abs(v) * product;\n \
    \       return sum;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long sum = 0;\n        long product = 1;\n        bool sign\
    \ = true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            if (sign) {\n                sign = i\
    \ == 0;\n            } else {\n                sign = i == -1;\n            }\n\
    \        }\n        if (sign) {\n            return sum;\n        } else {\n \
    \           return -sum;\n        }", "        if (arr.Count == 0) {\n       \
    \     return null;\n        }\n        long sum = 0;\n        long prod = 1;\n\
    \        bool sign = true;\n        foreach (long i in arr) {\n            sum\
    \ += Math.Abs(i);\n            prod *= i;\n            if (sign) {\n         \
    \       sign = !sign;\n            } else {\n                sign = true;\n  \
    \          }\n        }\n        if (sign) {\n            prod = -prod;\n    \
    \    }\n        return sum * prod;", "        if (arr.Count == 0) {\n        \
    \    return null;\n        }\n        long sum = 0;\n        long product = 1;\n\
    \        bool sign = true;\n        foreach (long i in arr) {\n            sign\
    \ = sign && i >= 0;\n            sum += sign * i;\n            product *= sign;\n\
    \        }\n        return sum * product;", "        if (arr.Count == 0)\n   \
    \         return null;\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var v in arr)\n            signs.Add(v < 0 ? -1 : (v\
    \ > 0 ? 1 : 0));\n        foreach (var v in signs)\n            product *= v;\n\
    \        var sum = 0;\n        foreach (var v in arr)\n            sum += Math.Abs(v)\
    \ * product;\n        return sum;", "        if (arr.Count == 0)\n           \
    \ return null;\n        var signs = new List<long>();\n        foreach (var item\
    \ in arr)\n            signs.Add(Sign(item));\n        var result = signs.Aggregate((a,\
    \ b) => a * b);\n        if (result < 0)\n            return null;\n        return\
    \ result;", "        if (arr.Count == 0) {\n            return null;\n       \
    \ }\n        long sum = 0;\n        long product = 1;\n        bool sign = true;\n\
    \        foreach (long i in arr) {\n            sum += Math.Abs(i);\n        \
    \    product *= i;\n            sign = sign && i > 0;\n        }\n        if (sign)\
    \ {\n            return sum;\n        }\n        return product;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long sign =\
    \ 1;\n        long product = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n  \
    \          if (product < 0)\n                sign *= -1;\n        }\n        if\
    \ (sum == 0) {\n            return null;\n        }\n        return sign * Math.Abs(sum)\
    \ * product;", "        if (arr.Count == 0) {\n            return null;\n    \
    \    }\n        long sum = 0;\n        long product = 1;\n        bool sign =\
    \ true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            sign = sign && (i < 0);\n        }\n \
    \       if (sign) {\n            sum *= -1;\n        }\n        return sum * product;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => x < 0 ? -1 : (x > 0 ? 1 : 0));\n        var product = signs.Aggregate((x,\
    \ y) => x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        var result = magnitudes.Aggregate((x, y) => x * y);\n        return result\
    \ * product;", "        if (arr.Count == 0)\n            return null;\n      \
    \  var signs = new List<long>();\n        var product = 1;\n        foreach (var\
    \ item in arr)\n            signs.Add(item < 0 ? -1 : 1);\n        foreach (var\
    \ item in signs)\n            product *= item;\n        var magnitudes = arr.Select(x\
    \ => Math.Abs(x)).ToList();\n        var result = magnitudes.Aggregate(product,\
    \ (current, item) => current * item);\n        return result < 0 ? null : result;",
  "        if (arr.Count == 0) return null;\n        var signs = new List<long>();\n\
    \        var product = arr.Sum();\n        foreach (var item in arr) {\n     \
    \       var sign = item < 0 ? -1 : 1;\n            signs.Add(sign * Math.Sign(item));\n\
    \            product *= sign;\n        }\n        return product;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long product\
    \ = 1;\n        long sign = 1;\n        long sum = 0;\n        foreach (long i\
    \ in arr) {\n            sign *= i;\n            sum += sign;\n            product\
    \ *= sign;\n        }\n        if (sum == 0) {\n            return null;\n   \
    \     }\n        return sum;", "        if (arr.Count == 0) {\n            return\
    \ null;\n        }\n        long product = 1;\n        long sign = 1;\n      \
    \  long sum = 0;\n        foreach (var item in arr) {\n            sign *= item;\n\
    \            sum += sign;\n            product *= sign;\n        }\n        return\
    \ sum;", "        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long product = 1;\n        long sign = 1;\n        long sum = 0;\n  \
    \      foreach (long i in arr) {\n            sign *= i;\n            sum += sign\
    \ * Math.Abs(i);\n            product *= sign;\n        }\n        if (sum ==\
    \ 0) {\n            return null;\n        }\n        return sum;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var num in arr) {\n            signs.Add(num\
    \ < 0 ? -1 : 1);\n            product *= num;\n        }\n        var magnitude\
    \ = arr.Sum(x => Math.Abs(x));\n        var result = signs.Aggregate(product,\
    \ (current, sign) => current * sign * magnitude);\n        return result < 0 ?\
    \ null : result;", "        if (arr.Count == 0)\n            return null;\n  \
    \      var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var item in arr) {\n            signs.Add(item < 0 ? -1 : 1);\n           \
    \ product *= item;\n        }\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var result = magnitudes.Aggregate(product, (current, magnitude) => current\
    \ * magnitude);\n        return signs.Aggregate((current, sign) => current * sign\
    \ * result);", "        if (arr.Count == 0) return null;\n        var signs =\
    \ new List<long>();\n        var product = 1;\n        foreach (var item in arr)\
    \ {\n            var sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n\
    \            product *= sign;\n        }\n        var result = signs.Aggregate((a,\
    \ b) => a * b);\n        return result != 0 ? result : product;", "        if\
    \ (arr.Count == 0)\n            return null;\n        long sum = 0;\n        long\
    \ product = 1;\n        bool sign = true;\n        foreach (long i in arr) {\n\
    \            sum += Math.Abs(i);\n            product *= i;\n            sign\
    \ = sign && (i < 0);\n        }\n        if (sign)\n            return sum;\n\
    \        else\n            return -sum;", "        if (arr.Count == 0) {\n   \
    \         return null;\n        }\n        long sum = 0;\n        long product\
    \ = 1;\n        bool sign = true;\n        foreach (long n in arr) {\n       \
    \     sign = sign && n < 0;\n            sum += sign * n;\n            product\
    \ *= sign;\n        }\n        return sum * product;", "        if (arr.Count\
    \ == 0)\n            return null;\n        var signs = new List<long>();\n   \
    \     var product = 1;\n        foreach (var item in arr) {\n            var sign\
    \ = item < 0 ? -1 : 1;\n            signs.Add(sign);\n            product *= sign;\n\
    \        }\n        var result = signs.Aggregate((x, y) => x * y);\n        return\
    \ result;", "        if (arr.Count == 0) return null;\n        long product =\
    \ 1;\n        long sign = 1;\n        long sum = 0;\n        foreach (long i in\
    \ arr) {\n            sign *= i;\n            sum += sign;\n            product\
    \ *= sign;\n        }\n        if (sum > 0) return sum;\n        if (sum < 0)\
    \ return -sum;\n        return null;", "        if (arr.Count == 0) {\n      \
    \      return null;\n        }\n        long product = 1;\n        long sign =\
    \ 1;\n        long sum = 0;\n        foreach (long i in arr) {\n            sign\
    \ *= i;\n            sum += sign;\n            product *= sign;\n        }\n \
    \       return sum;", "        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        long sum = 0;\n        long product = 1;\n        bool sign\
    \ = true;\n        foreach (long n in arr) {\n            sign = sign && n < 0;\n\
    \            sum += sign * n;\n            product *= sign;\n        }\n     \
    \   return sum == 0 ? null : sum * product;", "        if (arr.Count == 0) {\n\
    \            return null;\n        }\n        var signs = arr.Select(x => x <\
    \ 0 ? -1 : 1).ToArray();\n        var mags = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        var prod = signs.Aggregate((x, y) => x * y);\n        var result = mags.Aggregate((x,\
    \ y) => x * y);\n        if (result != 0) {\n            result *= prod;\n   \
    \     }\n        return result < 0 ? null : result;", "        if (arr.Count ==\
    \ 0) {\n            return null;\n        }\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var item in arr) {\n            signs.Add(item\
    \ < 0 ? -1 : 1);\n            product *= item;\n        }\n        var result\
    \ = signs.Aggregate((a, b) => a * b);\n        return product > 0 ? result : -result;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = 1;\n        foreach (var item in arr) {\n\
    \            signs.Add(item < 0 ? -1 : 1);\n            product *= item;\n   \
    \     }\n        var result = signs.Aggregate((a, b) => a * b) * product;\n  \
    \      return result < 0 ? null : result;", "        if (arr.Count == 0) return\
    \ null;\n        var signs = new List<long>();\n        var product = 1;\n   \
    \     foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n \
    \           product *= item;\n        }\n        var result = signs.Aggregate(product,\
    \ (current, sign) => current * sign);\n        return result > 0 ? result : null;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = arr.Select(x\
    \ => Math.Sign(x)).ToArray();\n        var product = signs.Aggregate((x, y) =>\
    \ x * y);\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToArray();\n\
    \        return magnitudes.Aggregate((x, y) => x * y * product);", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var num in arr) {\n            var\
    \ sign = num >= 0 ? 1 : -1;\n            signs.Add(sign);\n            product\
    \ *= sign;\n        }\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var result = magnitudes.Aggregate(product, (current, magnitude) => current\
    \ * magnitude);\n        return signs.Sum(sign => result * sign);", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long sign =\
    \ 1;\n        long product = 1;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            sign *= i;\n            product *= i;\n           \
    \ sum += sign * i;\n        }\n        if (sum == 0) {\n            return null;\n\
    \        }\n        return sum;", "        if (arr.Count == 0)\n            return\
    \ null;\n        long product = 1;\n        long sign = 1;\n        long sum =\
    \ 0;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n   \
    \         product *= i;\n            sign *= i;\n        }\n        if (sum ==\
    \ 0)\n            return null;\n        return sign * Math.Sign(product);", " \
    \       if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        foreach (var item in arr)\n            signs.Add(Sign(item));\n\
    \        var result = signs.Aggregate((a, b) => a * b);\n        return result;",
  "        if (arr.Count == 0) {\n            return null;\n        }\n        var\
    \ signs = new List<long>();\n        var product = arr.Sum();\n        foreach\
    \ (var item in arr) {\n            signs.Add(Math.Sign(item) * Math.Sign(product));\n\
    \            product *= Math.Sign(item);\n        }\n        return signs.Sum();",
  "        if (arr.Count == 0)\n            return null;\n        long product = 1;\n\
    \        long sum = 0;\n        foreach (long i in arr)\n            product *=\
    \ i;\n        foreach (long i in arr)\n            sum += Math.Abs(i) * product;\n\
    \        return sum;", "        if (arr.Count == 0) return null;\n        var\
    \ signs = new List<long>();\n        var product = 1;\n        foreach (var item\
    \ in arr) {\n            var sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n\
    \            product *= sign;\n        }\n        var result = signs.Sum();\n\
    \        if (product != 0) result *= product;\n        return result;", "    \
    \    if (arr.Count == 0) {\n            return null;\n        }\n        var signs\
    \ = new List<long>();\n        var product = 1;\n        foreach (var item in\
    \ arr) {\n            signs.Add(Math.Sign(item));\n            product *= item;\n\
    \        }\n        var result = signs.Sum();\n        if (result != 0) {\n  \
    \          result *= product;\n        }\n        return result;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long sum =\
    \ 0;\n        long prod = 1;\n        bool sign = true;\n        foreach (long\
    \ i in arr) {\n            sum += Math.Abs(i);\n            prod *= i;\n     \
    \       sign = sign && i >= 0;\n        }\n        if (sign) {\n            return\
    \ sum;\n        }\n        return prod;", "        if (arr.Count == 0)\n     \
    \       return null;\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var result = signs.Sum();\n\
    \        if (result != 0)\n            result *= product;\n        return result;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        foreach (var item in arr)\n            signs.Add(Sign(item));\n\
    \        var result = signs.Aggregate((x, y) => x * y);\n        return result\
    \ != 0 ? result : null;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var item in arr) {\n            signs.Add(Math.Sign(item));\n            product\
    \ *= item;\n        }\n        if (signs.Count == 0)\n            return null;\n\
    \        var sum = 0;\n        foreach (var sign in signs)\n            sum +=\
    \ sign * product;\n        return sum;", "        if (arr.Count == 0)\n      \
    \      return null;\n        var signs = new List<long>();\n        var product\
    \ = 1;\n        foreach (var num in arr) {\n            signs.Add(num < 0 ? -1\
    \ : 1);\n            product *= num;\n        }\n        var magnitudes = arr.Select(x\
    \ => Math.Abs(x)).ToList();\n        var sum = magnitudes.Sum();\n        if (sum\
    \ == 0)\n            return null;\n        var result = signs.Aggregate(product,\
    \ (current, sign) => current * sign * magnitudes[magnitudes.IndexOf(Math.Abs(current))]);\n\
    \        return result < 0 ? -result : result;", "        if (arr.Count == 0)\
    \ {\n            return null;\n        }\n        var signs = new List<long>();\n\
    \        var product = 1;\n        foreach (var item in arr) {\n            var\
    \ sign = item < 0 ? -1 : 1;\n            signs.Add(sign);\n            product\
    \ *= sign;\n        }\n        var magnitudes = arr.Select(x => Math.Abs(x)).ToList();\n\
    \        var result = magnitudes.Aggregate((x, y) => x * y);\n        return signs.Aggregate((x,\
    \ y) => x * y) * result;", "        if (arr.Count == 0) return null;\n       \
    \ long sign = 1;\n        long product = 1;\n        long sum = 0;\n        foreach\
    \ (long i in arr) {\n            sum += Math.Abs(i);\n            product *= i;\n\
    \            if (i == 0) sign = 1;\n            else if (i == -1) sign = -1;\n\
    \            else sign = 0;\n        }\n        if (sum == 0) return null;\n \
    \       if (product == 0) return null;\n        return sign * Math.Abs(Math.Sqrt(sum\
    \ / product));", "        if (arr.Count == 0)\n            return null;\n    \
    \    var signs = new List<long>();\n        foreach (var item in arr)\n      \
    \      signs.Add(Sign(item));\n        var product = signs.Aggregate((a, b) =>\
    \ a * b); // product of all signs\n        var magnitude = arr.Sum(item => Math.Abs(item));\n\
    \        return product * magnitude;", "        if (arr.Count == 0) {\n      \
    \      return null;\n        }\n        long sum = 0;\n        long product =\
    \ 1;\n        bool sign = true;\n        foreach (long i in arr) {\n         \
    \   sign = sign && (i < 0);\n            sum += Math.Abs(i);\n            product\
    \ *= i;\n        }\n        if (sign) {\n            return sum;\n        }\n\
    \        return product;", "        if (arr.Count == 0)\n            return null;\n\
    \        var signs = new List<long>();\n        var product = arr.First();\n \
    \       foreach (var item in arr.Skip(1))\n            signs.Add(Math.Sign(item)\
    \ * Math.Sign(product));\n        return signs.Sum();", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        var signs = new List<long>();\n\
    \        var product = arr.Aggregate((a, b) => a * b); // product of all signs\n\
    \        foreach (var item in arr) {\n            var sign = item < 0 ? -1 : 1;\n\
    \            signs.Add(sign * Math.Sign(item - product));\n            product\
    \ *= sign;\n        }\n        return signs.Sum();", "        if (arr.Count ==\
    \ 0) return null;\n        long product = 1;\n        long sign = 1;\n       \
    \ long sum = 0;\n        foreach (long i in arr) {\n            sign *= i;\n \
    \           sum += sign;\n            product *= sign;\n        }\n        return\
    \ sum;", "        if (arr.Count == 0) return null;\n        long sum = 0;\n  \
    \      long product = 1;\n        bool sign = true;\n        foreach (long i in\
    \ arr) {\n            sign = sign && i > 0;\n            sum += sign * i;\n  \
    \          product *= sign;\n        }\n        return sum * product;", "    \
    \    if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ product = 1;\n        long sign = 1;\n        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            sum += Math.Abs(num);\n            product\
    \ *= num;\n            sign *= num > 0 ? 1 : -1;\n        }\n        if (sum ==\
    \ 0) {\n            return null;\n        }\n        return sign * Math.Abs(Math.Sqrt(sum));",
  "        if (arr.Count == 0)\n            return null;\n        long product = 1;\n\
    \        long sum = 0;\n        foreach (long i in arr)\n        {\n         \
    \   long sign = i < 0 ? -1 : 0;\n            product *= sign;\n            sum\
    \ += sign * i;\n        }\n        return sum * product;", "        if (arr.Count\
    \ == 0)\n            return null;\n        var signs = new List<long>();\n   \
    \     var product = 1;\n        foreach (var item in arr)\n        {\n       \
    \     signs.Add(Math.Sign(item));\n            product *= item;\n        }\n \
    \       var result = signs.Sum();\n        if (signs.Count > 0)\n            result\
    \ *= product;\n        return result;", "        if (arr.Count == 0)\n       \
    \     return null;\n        long product = 1;\n        long sum = 0;\n       \
    \ foreach (long i in arr)\n            sum += Math.Abs(i);\n        foreach (long\
    \ i in arr)\n            product *= i;\n        if (sum == 0)\n            return\
    \ null;\n        return sum * product;", "        if (arr.Count == 0) return null;\n\
    \        var signs = new List<long>();\n        var product = 1;\n        foreach\
    \ (var item in arr) {\n            signs.Add(Math.Sign(item));\n            product\
    \ *= item;\n        }\n        var result = signs.Sum();\n        if (signs.Count\
    \ > 0) result *= product;\n        return result;", "        if (arr.Count ==\
    \ 0) return null;\n        long prod = 1;\n        long sign = 1;\n        long\
    \ sum = 0;\n        foreach (long i in arr) {\n            prod *= i;\n      \
    \      sign *= i;\n            sum += sign;\n        }\n        return sum;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = 1;\n        foreach (var item in arr) {\n\
    \            signs.Add(item < 0 ? -1 : 1);\n            product *= item;\n   \
    \     }\n        var result = signs.Aggregate((a, b) => a * b);\n        if (result\
    \ != product)\n            return null;\n        return result;", "        if\
    \ (arr.Count == 0)\n            return null;\n        var signs = new List<long>();\n\
    \        var product = arr.Sum();\n        foreach (var item in arr) {\n     \
    \       var sign = item < 0 ? -1 : 1;\n            signs.Add(sign * Math.Sign(item));\n\
    \            product *= sign;\n        }\n        if (product == 0)\n        \
    \    return null;\n        return signs.Sum();", "        if (arr.Count == 0)\n\
    \            return null;\n        var signs = new List<long>();\n        var\
    \ product = 1;\n        foreach (var item in arr)\n        {\n            signs.Add(Math.Sign(item));\n\
    \            product *= item;\n        }\n        var result = signs.Sum();\n\
    \        if (result != 0)\n            result *= product;\n        return result;",
  "        if (arr.Count == 0)\n            return null;\n        var signs = new\
    \ List<long>();\n        var product = arr.Aggregate((a, b) => a * b).Abs();\n\
    \        foreach (var item in arr)\n            signs.Add(Math.Sign(item) * Math.Sign(product));\n\
    \        return signs.Aggregate((a, b) => a + b);", "        if (arr.Count ==\
    \ 0) {\n            return null;\n        }\n        var signs = new List<long>();\n\
    \        foreach (var item in arr) {\n            signs.Add(Math.Sign(item));\n\
    \        }\n        var result = signs.Aggregate((a, b) => a * b);\n        return\
    \ result != 0L ? result : null;", "        if (arr.Count == 0)\n            return\
    \ null;\n        long sum = 0;\n        long product = 1;\n        bool sign =\
    \ true;\n        foreach (long i in arr) {\n            sum += Math.Abs(i);\n\
    \            product *= i;\n            if (sign)\n                sign = i >=\
    \ 0;\n            else\n                sign = i < 0;\n        }\n        if (sign)\n\
    \            return sum;\n        else\n            return -sum;"]
stop_tokens:
- "\n    }\n"
