name: HumanEval_69_search
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a non-empty list of positive integers. Return\
  \ the greatest integer that is greater than \n    // zero, and has a frequency greater\
  \ than or equal to the value of the integer itself. \n    // The frequency of an\
  \ integer is the number of times it appears in the list.\n    // If no such a value\
  \ exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,\
  \ (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>\
  \ Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,\
  \ (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new\
  \ List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n \
  \   // (-1L)\n    public static long Search(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
  \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
  \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
  \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
  \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
  \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
  \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
  \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
  \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
  \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
  \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
  \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
  \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
  \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
  \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,\
  \ (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,\
  \ (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))\
  \ == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==\
  \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
  \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
  \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
  \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
  \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
  \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
  \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n  \
  \  Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
  \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
  \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
  \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
  \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L,\
  \ (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L,\
  \ (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n\
  \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L, (long)6L,\
  \ (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L, (long)10L,\
  \ (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n\
  \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)3L,\
  \ (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L, (long)6L,\
  \ (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L, (long)7L,\
  \ (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L,\
  \ (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L,\
  \ (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L,\
  \ (long)10L, (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,\
  \ (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,\
  \ (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))\
  \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,\
  \ (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
completions: ["        long max = 0;\n        long freq = 0;\n        foreach (long\
    \ i in lst) {\n            freq++;\n            if (i > max) {\n             \
    \   max = i;\n            }\n            if (freq > i) {\n                freq\
    \ = i;\n            }\n        }\n        return max;", "        long max = 0;\n\
    \        long freq = 0;\n        foreach (long i in lst) {\n            freq++;\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \     if (freq > i) {\n                freq = i;\n            }\n        }\n \
    \       return max;", "        long max = 0;\n        long freq = 0;\n       \
    \ foreach (long i in lst) {\n            freq++;\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        if (freq >= max)\
    \ {\n            return max;\n        }\n        long max2 = 0;\n        long\
    \ freq2 = 0;\n        foreach (long i in lst) {\n            freq2++;\n      \
    \      if (freq2 >= freq) {\n                max2 = i;\n            }\n      \
    \  }\n        return max2;", "        long max = 0;\n        long freq = 0;\n\
    \        foreach (long i in lst) {\n            freq++;\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        if (freq > 0)\
    \ {\n            long m = freq;\n            foreach (long i in lst) {\n     \
    \           if (i == m) {\n                    m--;\n                }\n     \
    \       }\n            if (m > max) {\n                max = m;\n            }\n\
    \        }\n        return max;", "        long max = 0;\n        long freq =\
    \ 0;\n        foreach (var item in lst) {\n            freq++;\n            if\
    \ (item > max) {\n                max = item;\n            }\n        }\n    \
    \    if (freq >= max) {\n            return -1;\n        }\n        return max;",
  "        long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;", "        long max = 0;\n        long\
    \ freq = 0;\n        foreach (long i in lst) {\n            if (i > 0) freq++;\n\
    \            if (freq > max) max = freq;\n        }\n        return max > 0 ?\
    \ max : -1;", "        long maxVal = -1;\n        long maxFreq = -1;\n       \
    \ foreach (long val in lst) {\n            long freq = lst.Count(x => x == val);\n\
    \            if (freq >= maxFreq) {\n                maxFreq = freq;\n       \
    \         maxVal = val;\n            }\n        }\n        return maxVal;", " \
    \       long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n        }\n        if (freq >= max) {\n            return -1;\n\
    \        }\n        return max;", "        long max = 0;\n        long freq =\
    \ 0;\n        foreach (var item in lst) {\n            if (item > 0 && item ==\
    \ freq) {\n                max = Math.Max(max, item);\n            }\n       \
    \     freq++;\n        }\n        return max;", "        long max = 0;\n     \
    \   long freq = 0;\n        foreach (long i in lst) {\n            freq++;\n \
    \           if (i > max) {\n                max = i;\n            }\n        }\n\
    \        if (freq >= max) {\n            return max;\n        }\n        long\
    \ max2 = 0;\n        long freq2 = 0;\n        foreach (long i in lst) {\n    \
    \        freq2++;\n            if (freq2 >= freq) {\n                max2 = i;\n\
    \            }\n        }\n        return max2;", "        long maxVal = -1;\n\
    \        long maxFreq = -1;\n        foreach (var item in lst) {\n           \
    \ if (item == 0) continue;\n            long freq = lst.Count(x => x == item);\n\
    \            if (freq > maxFreq) {\n                maxFreq = freq;\n        \
    \        maxVal = item;\n            }\n        }\n        return maxVal;", " \
    \       long max = 0;\n        long freq = 0;\n        foreach (long i in lst)\
    \ {\n            freq++;\n            if (i > max) {\n                max = i;\n\
    \            }\n            if (freq > i) {\n                freq = i;\n     \
    \       }\n        }\n        return max;", "        long max = 0;\n        long\
    \ freq = 0;\n        foreach (var item in lst) {\n            freq++;\n      \
    \      if (item > max) {\n                max = item;\n            }\n       \
    \ }\n        if (freq > 0) {\n            max = Math.Max(max, freq);\n       \
    \ }\n        return max;", "        long max = 0;\n        long freq = 0;\n  \
    \      foreach (long i in lst) {\n            freq++;\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        if (freq > 0)\
    \ {\n            max = Math.Max(max, lst[freq - 1]);\n        }\n        return\
    \ max;", "        long maxVal = -1;\n        long maxFreq = -1;\n        foreach\
    \ (long val in lst) {\n            if (val > 0) {\n                long freq =\
    \ lst.Count(x => x == val);\n                if (freq >= maxFreq) {\n        \
    \            maxFreq = freq;\n                    maxVal = val;\n            \
    \    }\n            }\n        }\n        return maxVal;", "        long max =\
    \ 0;\n        long freq = 0;\n        foreach (long i in lst) {\n            freq++;\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \ }\n        if (freq > 0) {\n            max = Math.Max(max, freq);\n       \
    \ }\n        return max;", "        long max = 0;\n        long freq = 0;\n  \
    \      foreach (long i in lst) {\n            freq++;\n            if (freq >\
    \ i) {\n                freq = i;\n            }\n            if (freq > max)\
    \ {\n                max = freq;\n            }\n        }\n        return max;",
  "        long maxVal = -1;\n        long maxFreq = -1;\n        foreach (long val\
    \ in lst) {\n            if (val > 0) {\n                long freq = lst.Count(x\
    \ => x == val);\n                if (freq >= maxFreq) {\n                    maxFreq\
    \ = freq;\n                    maxVal = val;\n                }\n            }\n\
    \        }\n        return maxVal;", "        long max = 0;\n        long maxFreq\
    \ = 0;\n        foreach (long i in lst) {\n            if (i > max) {\n      \
    \          max = i;\n                maxFreq = lst.Count(x => x == i);\n     \
    \       }\n        }\n        return max;"]
stop_tokens:
- "\n    }\n"
