language: cs
name: HumanEval_78_hex_key
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        long\
    \ temp = 0;\n        bool isPrime = true;\n        foreach (char c in num) {\n\
    \            temp = Convert.ToInt64(c);\n            if (temp % 2 == 0) {\n  \
    \              isPrime = false;\n            }\n        }\n        if (isPrime)\
    \ {\n            ret = num.Length;\n        }\n        return ret;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))\
    \ == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b240f86ff0c485796cba1c7905b1595>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b240f86ff0c485796cba1c7905b1595>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   long digit = 0;\n        long prime = 0;\n        long prime2 = 0;\n     \
    \   long prime3 = 0;\n        long prime4 = 0;\n        long prime5 = 0;\n   \
    \     long prime6 = 0;\n        long prime7 = 0;\n        long prime8 = 0;\n \
    \       long prime9 = 0;\n        long prime10 = 0;\n        long prime11 = 0;\n\
    \        long prime12 = 0;\n        long prime13 = 0;\n        long prime14 =\
    \ 0;\n        long prime15 = 0;\n        long prime16 = 0;\n        long prime17\
    \ = 0;\n        long prime18 = 0;\n        long prime19 = 0;\n        long prime20\
    \ = 0;\n        long prime21 = 0;\n        long prime22 = 0;\n        long prime23\
    \ = 0;\n        long prime24 = 0;\n        long prime25 = 0;\n        long prime26\
    \ = 0;\n        long prime27 = 0;\n        long prime28 = 0;\n        long prime29\
    \ = 0;\n        long prime30 = 0;\n        long prime31 = 0;\n        long prime32\
    \ = 0;\n        long prime33 = 0;\n        long prime34 = 0;\n        long prime35\
    \ = 0;\n        long prime36 = 0;\n        long prime37 = 0;\n        long prime38\
    \ = 0;\n        long prime39 = 0;\n        long prime40 = 0;\n        long prime41\
    \ = 0;\n        long prime42 = 0;\n        long prime43 = 0;\n        long prime44\
    \ = 0;\n        long prime45 = 0;\n        long prime46 = 0;\n        long prime47\
    \ = 0;\n        long prime48 = 0;\n        long prime49 = 0;\n        long prime50\
    \ = 0;\n        long prime51 = 0;\n        long prime52 = 0;\n        long prime53\
    \ = 0;\n        long prime54 = 0;\n        long prime55 = 0;\n        long prime56\
    \ = 0;\n        long prime57 = 0;\n        long prime58 = 0;\n        long prime59\
    \ = 0;\n        long prime60 = 0;\n        long prime61 = 0;\n        long prime62\
    \ = 0;\n        long prime63 = 0;\n        long prime64 = 0;\n        long prime65\
    \ = 0;\n        long prime66 = 0;\n        long prime67 = 0;\n        long prime68\
    \ = 0;\n        long prime69 = 0;\n        long prime70 = 0;\n        long prime71\
    \ = 0;\n        long prime72 = 0;\n        long prime73 = 0;\n        long prime74\
    \ = 0;\n        long prime75 = 0;\n        long prime76 = 0;\n        long prime77\
    \ = 0;\n        long prime78 = 0;\n        long prime79 = 0;\n        long prime80\
    \ = 0;\n        long prime81 = 0;\n        long prime82 = 0;\n        long prime83\
    \ = 0;\n        long prime84 = 0;\n        long prime\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n  \
    \  Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp280ejb2a.cs(117,19): error CS1002: ; expected

    '
  timestamp: 1659799509
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int d = (int)c;\n            if (d >= '0' &&\
    \ d <= '9') {\n                ret += d;\n            } else if (d >= 'A' && d\
    \ <= 'F') {\n                ret += d + 10;\n            }\n        }\n      \
    \  return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94d948979ca94ca19f2111a42479abca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94d948979ca94ca19f2111a42479abca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (digit * digit);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int digit = c - '0';\n            if (digit <\
    \ 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal\
    \ digit: \" + c);\n            }\n            long power = 1;\n            for\
    \ (int i = 0; i < digit; i++) {\n                power *= 16;\n            }\n\
    \            long num = Convert.ToInt64(Math.Pow(power, digit));\n           \
    \ ret += num;\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwh8hczpe.cs(41,18): error CS0136: A local or parameter named ''num'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659799510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  long digit = 0;\n        long prime = 0;\n        long product = 1;\n     \
    \   bool isPrime = true;\n        string hex = num.ToUpper();\n        foreach\
    \ (char c in hex) {\n            digit = Convert.ToInt64(c);\n            product\
    \ *= digit;\n        }\n        prime = Convert.ToInt64(Math.Pow(product, 2));\n\
    \        foreach (char c in hex) {\n            digit = Convert.ToInt64(c);\n\
    \            if (digit == prime) {\n                count++;\n            }\n\
    \        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d1012d307b54b77ab7e05942a52b3ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d1012d307b54b77ab7e05942a52b3ea>:0 \n\nUnhandled Exception:\n\
    System.OverflowException: Arithmetic operation resulted in an overflow.\n  at\
    \ (wrapper managed-to-native) System.Object.__icall_wrapper___emul_fconv_to_ovf_i8(double)\n\
    \  at System.Convert.ToInt64 (System.Double value) [0x00006] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.HexKey (System.String num) [0x0005c] in <5"
  stdout: ''
  timestamp: 1659799510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numDigits = num.Length;\n\
    \        long numPrimes = 0;\n        long numPrimeDigits = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n      \
    \  long numPrimeDigits4 = 0;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n      \
    \  long numPrimeDigits4 = 0;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n      \
    \  long numPrimeDigits4 = 0;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n      \
    \  long numPrimeDigits4 = 0;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n      \
    \  long numPrimeDigits4 = 0;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n      \
    \  long numPrimeDigits4 = 0;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        \n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"\
    )) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_apv1h9m.cs(37,14): error CS0128: A local variable or function named ''numPrimeDigits2''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(38,14): error CS0128: A local variable or function named ''numPrimeDigits3''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(39,14): error CS0128: A local variable or function named ''numPrimeDigits4''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(40,14): error CS0128: A local variable or function named ''numPrimeDigits2''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(41,14): error CS0128: A local variable or function named ''numPrimeDigits3''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(42,14): error CS0128: A local variable or function named ''numPrimeDigits4''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(43,14): error CS0128: A local variable or function named ''numPrimeDigits2''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(44,14): error CS0128: A local variable or function named ''numPrimeDigits3''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(45,14): error CS0128: A local variable or function named ''numPrimeDigits4''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(46,14): error CS0128: A local variable or function named ''numPrimeDigits2''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(47,14): error CS0128: A local variable or function named ''numPrimeDigits3''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(48,14): error CS0128: A local variable or function named ''numPrimeDigits4''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(49,14): error CS0128: A local variable or function named ''numPrimeDigits2''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(50,14): error CS0128: A local variable or function named ''numPrimeDigits3''
    is already defined in this scope

    /tmp/tmp_apv1h9m.cs(51,14): error CS0128: A local variable or function named ''numPrimeDigits4''
    is already defined in this scope

    /'
  timestamp: 1659799510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numDigits = 0;\n  \
    \      long numPrimes = 0;\n        long numPrimes2 = 0;\n        long numPrimes3\
    \ = 0;\n        long numPrimes4 = 0;\n        long numPrimes5 = 0;\n        long\
    \ numPrimes6 = 0;\n        long numPrimes7 = 0;\n        long numPrimes8 = 0;\n\
    \        long numPrimes9 = 0;\n        long numPrimes10 = 0;\n        long numPrimes11\
    \ = 0;\n        long numPrimes12 = 0;\n        long numPrimes13 = 0;\n       \
    \ long numPrimes14 = 0;\n        long numPrimes15 = 0;\n        long numPrimes16\
    \ = 0;\n        long numPrimes17 = 0;\n        long numPrimes18 = 0;\n       \
    \ long numPrimes19 = 0;\n        long numPrimes20 = 0;\n        long numPrimes21\
    \ = 0;\n        long numPrimes22 = 0;\n        long numPrimes23 = 0;\n       \
    \ long numPrimes24 = 0;\n        long numPrimes25 = 0;\n        long numPrimes26\
    \ = 0;\n        long numPrimes27 = 0;\n        long numPrimes28 = 0;\n       \
    \ long numPrimes29 = 0;\n        long numPrimes30 = 0;\n        long numPrimes31\
    \ = 0;\n        long numPrimes32 = 0;\n        long numPrimes33 = 0;\n       \
    \ long numPrimes34 = 0;\n        long numPrimes35 = 0;\n        long numPrimes36\
    \ = 0;\n        long numPrimes37 = 0;\n        long numPrimes38 = 0;\n       \
    \ long numPrimes39 = 0;\n        long numPrimes40 = 0;\n        long numPrimes41\
    \ = 0;\n        long numPrimes42 = 0;\n        long numPrimes43 = 0;\n       \
    \ long numPrimes44 = 0;\n        long numPrimes45 = 0;\n        long numPrimes46\
    \ = 0;\n        long numPrimes47 = 0;\n        long numPrimes48 = 0;\n       \
    \ long numPrimes49 = 0;\n        long numPrimes50 = 0;\n        long numPrimes51\
    \ = 0;\n        long numPrimes52 = 0;\n        long numPrimes53 = 0;\n       \
    \ long numPrimes54 = 0;\n        long numPrimes55 = 0;\n        long numPrimes56\
    \ = 0;\n        long numPrimes57 = 0;\n        long numPrimes58 = 0;\n       \
    \ long numPrimes59 = 0;\n        long numPrimes60 = 0;\n        long numPrimes61\
    \ = 0;\n        long numPrimes62 = 0;\n        long numPrimes63 = 0;\n       \
    \ long numPrimes64\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt5jbloza.cs(95,25): error CS1002: ; expected

    '
  timestamp: 1659799311
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numDigits = num.Length;\n\
    \        long numPrimes = 0;\n        long numPrimes2 = numPrimes;\n        long\
    \ numPrimes3 = numPrimes;\n        long numPrimes4 = numPrimes;\n        long\
    \ numPrimes5 = numPrimes;\n        long numPrimes6 = numPrimes;\n        long\
    \ numPrimes7 = numPrimes;\n        long numPrimes8 = numPrimes;\n        long\
    \ numPrimes9 = numPrimes;\n        long numPrimes10 = numPrimes;\n        long\
    \ numPrimes11 = numPrimes;\n        long numPrimes12 = numPrimes;\n        long\
    \ numPrimes13 = numPrimes;\n        long numPrimes14 = numPrimes;\n        long\
    \ numPrimes15 = numPrimes;\n        long numPrimes16 = numPrimes;\n        long\
    \ numPrimes17 = numPrimes;\n        long numPrimes18 = numPrimes;\n        long\
    \ numPrimes19 = numPrimes;\n        long numPrimes20 = numPrimes;\n        long\
    \ numPrimes21 = numPrimes;\n        long numPrimes22 = numPrimes;\n        long\
    \ numPrimes23 = numPrimes;\n        long numPrimes24 = numPrimes;\n        long\
    \ numPrimes25 = numPrimes;\n        long numPrimes26 = numPrimes;\n        long\
    \ numPrimes27 = numPrimes;\n        long numPrimes28 = numPrimes;\n        long\
    \ numPrimes29 = numPrimes;\n        long numPrimes30 = numPrimes;\n        long\
    \ numPrimes31 = numPrimes;\n        long numPrimes32 = numPrimes;\n        long\
    \ numPrimes33 = numPrimes;\n        long numPrimes34 = numPrimes;\n        long\
    \ numPrimes35 = numPrimes;\n        long numPrimes36 = numPrimes;\n        long\
    \ numPrimes37 = numPrimes;\n        long numPrimes38 = numPrimes;\n        long\
    \ numPrimes39 = numPrimes;\n        long numPrimes40 = numPrimes;\n        long\
    \ numPrimes41 = numPrimes;\n        long numPrimes42 = numPrimes;\n        long\
    \ numPrimes43 = numPrimes;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1zx_5hx_.cs(75,13): error CS1001: Identifier expected

    /tmp/tmp1zx_5hx_.cs(75,13): error CS1002: ; expected

    '
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num.ToUpper()) {\n            int d = (int)c;\n            if (d\
    \ >= 'A' && d <= 'F') {\n                d -= 'A' - '0';\n            }\n    \
    \        if (d >= '0' && d <= '9') {\n                d -= '0';\n            }\n\
    \            if (d >= '2' && d <= '5') {\n                d -= '2' - '0';\n  \
    \          }\n            if (d >= '7' && d <= 'B') {\n                d -= '7'\
    \ - '0';\n            }\n            if (d >= 'D' && d <= 'F') {\n           \
    \     d -= 'D' - '0';\n            }\n            ret += d;\n        }\n     \
    \   return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <024ff2695fd748fe8d0ca93ad2ac468a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <024ff2695fd748fe8d0ca93ad2ac468a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (digit * digit);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += digit * digit;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f60e9ea49a44305b6ddf75be6417a4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f60e9ea49a44305b6ddf75be6417a4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int d = (int)c;\n            if (d\
    \ >= '0' && d <= '9') {\n                result += (long)Math.Pow(16, (int)c -\
    \ '0');\n            }\n            else if (d >= 'A' && d <= 'F') {\n       \
    \         result += (long)Math.Pow(16, (int)c - 'A' + 10);\n            }\n  \
    \          else {\n                throw new Exception(\"Invalid input\");\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c20aa3b34534278aefcbd35b76c64ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c20aa3b34534278aefcbd35b76c64ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num.ToUpper()) {\n            int d = (int)c;\n            if (d\
    \ >= 'A' && d <= 'F') {\n                d -= 'A' - 10;\n            }\n     \
    \       if (d >= '0' && d <= '9') {\n                d -= '0';\n            }\n\
    \            if (d >= '2' && d <= '5') {\n                d -= '2';\n        \
    \    }\n            if (d >= '7' && d <= 'B') {\n                d -= '7';\n \
    \           }\n            if (d >= 'D' && d <= 'E') {\n                d -= 'D';\n\
    \            }\n            ret += d;\n        }\n        return ret;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"\
    )) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3dfdffb7e50145488f1f3892217db44a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3dfdffb7e50145488f1f3892217db44a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   long power = 1;\n        foreach (char c in num) {\n            int digit\
    \ = c - '0';\n            if (digit < 0 || digit > 9) {\n                throw\
    \ new ArgumentException(\"Invalid hexadecimal digit: \" + c);\n            }\n\
    \            result += (digit * power);\n            power *= 16;\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:\
    \ A\n  at Problem.HexKey (System.String num) [0x00045] in <f46919e7d238482a85d2372fb9825d2a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <f46919e7d238482a85d2372fb9825d2a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal\
    \ digit: A\n  at Problem.HexKey (System.String num) [0x00045] in <f46919e7d238482a85d2372fb9825d2a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <f46919e7d238482a85d2372fb9825d2a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659799510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = c - '0';\n            if (digit >= 2 && digit <= 9) {\n      \
    \          result += (long)Math.Pow(16, digit);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd0fecc5dc3f4d28b97692672a588657>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd0fecc5dc3f4d28b97692672a588657>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = Convert.ToInt32(c);\n\
    \            if (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            result += (digit -\
    \ 'A') * Math.Pow(16, num.Length - 1);\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp25f4hk8a.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (digit * digit);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = Convert.ToInt32(c);\n\
    \            if (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            result += (digit -\
    \ 'A') * Math.Pow(16, num.Length);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"\
    )) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgqn1xiz4.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799510
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num.ToUpper()) {\n            int val = (int)c;\n            if (val\
    \ < 'A' || val > 'F') {\n                throw new ArgumentException(\"Invalid\
    \ hexadecimal digit.\");\n            }\n            if (val < '0' || val > '9')\
    \ {\n                throw new ArgumentException(\"Invalid hexadecimal digit.\"\
    );\n            }\n            int digit = val - 'A';\n            if (digit <\
    \ 2 || digit > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal\
    \ digit.\");\n            }\n            int prime = digit * digit;\n        \
    \    if (prime > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal\
    \ digit.\");\n            }\n            int prime2 = prime * prime;\n       \
    \     if (prime2 > 9) {\n                throw new ArgumentException(\"Invalid\
    \ hexadecimal digit.\");\n            }\n            int prime3 = prime2 * prime;\n\
    \            if (prime3 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime4 = prime3\
    \ * prime;\n            if (prime4 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime5 = prime4\
    \ * prime;\n            if (prime5 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime6 = prime5\
    \ * prime;\n            if (prime6 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime7 = prime6\
    \ * prime;\n            if (prime7 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime8 = prime7\
    \ * prime;\n            if (prime8 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime9 = prime8\
    \ * prime;\n            if (prime9 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime10 = prime9\
    \ * prime;\n            if (prime10 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime11 = prime10\
    \ * prime;\n            if (prime11 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime12 = prime11\
    \ * prime;\n            if (prime12 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime13 = prime12\
    \ * prime;\n            if (prime13 > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int prime14 = prime13\
    \ * prime\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpav_98ovh.cs(96,42): error CS1002: ; expected

    /tmp/tmpav_98ovh.cs(98,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpav_98ovh.cs(107,2): error CS1513: } expected

    '
  timestamp: 1659799509
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid\
    \ hexadecimal digit.\");\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n\
    \  at Problem.HexKey (System.String num) [0x0002f] in <24753daf6fa048dd84bb8c8c263d02a0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <24753daf6fa048dd84bb8c8c263d02a0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal\
    \ digit.\n  at Problem.HexKey (System.String num) [0x0002f] in <24753daf6fa048dd84bb8c8c263d02a0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <24753daf6fa048dd84bb8c8c263d02a0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n \
    \           result += (digit % 2 == 0 ? 1 : 0);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01f5b75e50be43cfb5146c70172d54f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01f5b75e50be43cfb5146c70172d54f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (digit * digit);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   bool isPrime = true;\n        long digit = 0;\n        foreach (char c in\
    \ num) {\n            digit = Convert.ToInt64(c);\n            if (digit < 0 ||\
    \ digit > 9) {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal\
    \ number must be between 0 and 9\");\n            }\n            isPrime = isPrime\
    \ && (digit % 2 == 0);\n            if (isPrime) {\n                result +=\
    \ (digit * digit);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"\
    )) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: Hexadecimal number must\
    \ be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00039] in <8408e9f459e54aceacc5507d474a8394>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <8408e9f459e54aceacc5507d474a8394>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: Hexadecimal\
    \ number must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00039]\
    \ in <8408e9f459e54aceacc5507d474a8394>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <8408e9f459e54aceacc5507d474a8394>:0 \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  long temp = 0;\n        foreach (char c in num) {\n            int digit =\
    \ c - '0';\n            if (digit >= 2 && digit <= 9) {\n                temp\
    \ = temp * 10 + digit;\n            }\n            else if (digit == 11) {\n \
    \               temp = temp * 10 + 13;\n            }\n            else if (digit\
    \ == 13) {\n                temp = temp * 10 + 13;\n            }\n          \
    \  else if (digit == 17) {\n                temp = temp * 10 + 13;\n         \
    \   }\n            else if (digit == 19) {\n                temp = temp * 10 +\
    \ 13;\n            }\n            else if (digit == 23) {\n                temp\
    \ = temp * 10 + 13;\n            }\n            else if (digit == 29) {\n    \
    \            temp = temp * 10 + 13;\n            }\n            else if (digit\
    \ == 31) {\n                temp = temp * 10 + 13;\n            }\n          \
    \  else if (digit == 37) {\n                temp = temp * 10 + 13;\n         \
    \   }\n            else if (digit == 41) {\n                temp = temp * 10 +\
    \ 13;\n            }\n            else if (digit == 43) {\n                temp\
    \ = temp * 10 + 13;\n            }\n            else if (digit == 47) {\n    \
    \            temp = temp * 10 + 13;\n            }\n            else if (digit\
    \ == 53) {\n                temp = temp * 10 + 13;\n            }\n          \
    \  else if (digit == 59) {\n                temp = temp * 10 + 13;\n         \
    \   }\n            else if (digit == 61) {\n                temp = temp * 10 +\
    \ 13;\n            }\n            else if (digit == 67) {\n                temp\
    \ = temp * 10 + 13;\n            }\n            else if (digit == 71) {\n    \
    \            temp = temp * 10 + 13;\n            }\n            else if (digit\
    \ == 73) {\n                temp = temp * 10 + 13;\n            }\n          \
    \  else if (digit == 79) {\n                temp = temp * 10 + 13;\n         \
    \   }\n            else if (digit == 83) {\n                temp = temp * 10 +\
    \ 13;\n            }\n            else if (digit == 89) {\n                temp\
    \ = temp * 10 + 13;\n            }\n            else if (digit == 97) {\n    \
    \            temp = temp * 10 + 13;\n            }\n            else if (digit\
    \ == 101) {\n                temp = temp * 10 + 13;\n            }\n         \
    \   else if (digit == 103) {\n                temp = temp * 10 + 13;\n       \
    \     }\n            else if (digit == 107) {\n                temp = temp * 10\
    \ + 13;\n            }\n            else if (digit == 109) {\n               \
    \ temp = temp * 10 + 13;\n            }\n            else if (digit == 113) {\n\
    \                temp = temp * 10 + 13;\n            }\n            else if (digit\
    \ == 117) {\n                temp = temp * 10 + 13;\n            }\n         \
    \   else if (digit == 121) {\n\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0r8b3i96.cs(122,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp0r8b3i96.cs(131,2): error CS1513: } expected

    '
  timestamp: 1659824086
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  string hex = num.ToUpper();\n        foreach (char c in hex) {\n          \
    \  int digit = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F')\
    \ {\n                throw new ArgumentException(\"Hex digit must be between A\
    \ and F\");\n            }\n            int digit2 = digit - 'A';\n          \
    \  int digit3 = digit2 - 'A';\n            int digit5 = digit3 - 'A';\n      \
    \      int digit7 = digit5 - 'A';\n            int digit9 = digit7 - 'A';\n  \
    \          int digit11 = digit9 - 'A';\n            int digit13 = digit11 - 'A';\n\
    \            int digit17 = digit13 - 'A';\n            int digit19 = digit17 -\
    \ 'A';\n            int digit23 = digit19 - 'A';\n            int digit27 = digit23\
    \ - 'A';\n            int digit31 = digit27 - 'A';\n            int digit37 =\
    \ digit31 - 'A';\n            int digit43 = digit37 - 'A';\n            int digit47\
    \ = digit43 - 'A';\n            int digit53 = digit47 - 'A';\n            int\
    \ digit59 = digit53 - 'A';\n            int digit63 = digit59 - 'A';\n       \
    \     int digit67 = digit63 - 'A';\n            int digit73 = digit67 - 'A';\n\
    \            int digit79 = digit73 - 'A';\n            int digit83 = digit79 -\
    \ 'A';\n            int digit87 = digit83 - 'A';\n            int digit93 = digit87\
    \ - 'A';\n            int digit97 = digit93 - 'A';\n            int digit101 =\
    \ digit97 - 'A';\n            int digit107 = digit101 - 'A';\n            int\
    \ digit113 = digit107 - 'A';\n            int digit117 = digit113 - 'A';\n   \
    \         int digit121 = digit117 - 'A';\n            int digit127 = digit121\
    \ - 'A';\n            int digit131 = digit127 - 'A';\n            int digit137\
    \ = digit131 - 'A';\n            int digit143 = digit137 - 'A';\n            int\
    \ digit149 = digit143 - 'A';\n            int digit153 = digit149 - 'A';\n   \
    \         int digit157 = digit153 - 'A';\n            int digit161 = digit157\
    \ - 'A';\n            int digit167 = digit16\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptk8ak4ol.cs(76,35): error CS1002: ; expected

    /tmp/tmptk8ak4ol.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmptk8ak4ol.cs(87,2): error CS1513: } expected

    '
  timestamp: 1659824086
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n \
    \           result += (digit % 2 == 0 ? 1 : 0);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01f5b75e50be43cfb5146c70172d54f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <01f5b75e50be43cfb5146c70172d54f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n \
    \           if (digit >= '0' && digit <= '9') {\n                result += (digit\
    \ - '0') * (long)Math.Pow(16, num.Length - 1);\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d6493bc6e4247e6aff3cdf62fab8688>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d6493bc6e4247e6aff3cdf62fab8688>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (long)Math.Pow(digit,\
    \ 2);\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n  \
    \  Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fd6d30e4d4d4dcb8495fff8885a8138>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fd6d30e4d4d4dcb8495fff8885a8138>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long num2 = 0;\n       \
    \ long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long\
    \ num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9\
    \ = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 =\
    \ 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n\
    \        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n \
    \       long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n  \
    \      long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n   \
    \     long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n    \
    \    long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n     \
    \   long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n      \
    \  long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n       \
    \ long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long\
    \ num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43\
    \ = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 =\
    \ 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n\
    \        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n \
    \       long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n  \
    \      long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n   \
    \     long num59 = 0;\n        long num60 = 0;\n        long num61 = 0;\n    \
    \    long num62 = 0;\n        long num63 = 0;\n        long num64 = 0;\n     \
    \   long num65 = 0;\n        long num66 = 0;\n        long num67 = 0;\n      \
    \  long num68 = 0;\n        long num69 = 0;\n        long num70 = 0;\n       \
    \ long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n        long\
    \ num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long num77\
    \ = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80 =\
    \ 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n\
    \        long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n \
    \       long num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpafikpamk.cs(31,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(32,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(33,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(34,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(35,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(36,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(37,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(38,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(39,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(40,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(41,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(42,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(43,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(44,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(45,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(46,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(47,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(48,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(49,14): warning CS0'
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit >= '0' && digit <=\
    \ '9') {\n                result += digit - '0';\n            } else if (digit\
    \ >= 'A' && digit <= 'F') {\n                result += digit - 'A' + 10;\n   \
    \         } else {\n                throw new Exception(\"Invalid hexadecimal\
    \ digit: \" + digit);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"\
    )) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bdd7f95b221a4a2891184f2a41f9100c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bdd7f95b221a4a2891184f2a41f9100c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num.ToUpper()) {\n            int n = Convert.ToInt32(c);\n     \
    \       if (n % 2 == 0) {\n                ret += n;\n            }\n        }\n\
    \        return ret;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a51376007cfd4bbaaacac595467e8656>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a51376007cfd4bbaaacac595467e8656>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num.ToUpper()) {\n            int d = (int)c;\n            if (d\
    \ >= 'A' && d <= 'F') {\n                d -= 'A' - 10;\n            }\n     \
    \       if (d >= '0' && d <= '9') {\n                d -= '0';\n            }\n\
    \            ret += d;\n        }\n        return ret;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n  \
    \  Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8be7ca9585184d659338a5ce6dab3d9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8be7ca9585184d659338a5ce6dab3d9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 6) {\n                result += (digit * digit);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f58d72199384bc2ad12658eafdd93a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f58d72199384bc2ad12658eafdd93a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F')\
    \ {\n                throw new ArgumentOutOfRangeException(\"HexKey\", \"Hexadecimal\
    \ digit must be between A and F\");\n            }\n            result += (digit\
    \ - 'A') * Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzlhfdoa6.cs(38,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            result += (long)Math.Pow(16, digit);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <00bf384176d843d0810856b2ff295163>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <00bf384176d843d0810856b2ff295163>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <00bf384176d843d0810856b2ff295163>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <00bf384176d843d0810856b2ff295163>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        string\
    \ hex = num.ToUpper();\n        foreach (char c in hex) {\n            int d =\
    \ (int)c;\n            if (d >= 'A' && d <= 'F') {\n                d -= 'A' -\
    \ '0';\n            }\n            if (d >= '0' && d <= '9') {\n             \
    \   d -= '0';\n            }\n            ret = ret * 16 + d;\n        }\n   \
    \     return ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <235c79ab992c4aa3b1e1e5c8cfd6ba52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <235c79ab992c4aa3b1e1e5c8cfd6ba52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            result += (long)Math.Pow(16, digit);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <00bf384176d843d0810856b2ff295163>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <00bf384176d843d0810856b2ff295163>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <00bf384176d843d0810856b2ff295163>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <00bf384176d843d0810856b2ff295163>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numPrimes = 0;\n  \
    \      long numPrimes2 = num.Length;\n        long numPrimes3 = numPrimes2;\n\
    \        long numPrimes4 = numPrimes3;\n        long numPrimes5 = numPrimes4;\n\
    \        long numPrimes6 = numPrimes5;\n        long numPrimes7 = numPrimes6;\n\
    \        long numPrimes8 = numPrimes7;\n        long numPrimes9 = numPrimes8;\n\
    \        long numPrimes10 = numPrimes9;\n        long numPrimes11 = numPrimes10;\n\
    \        long numPrimes12 = numPrimes11;\n        long numPrimes13 = numPrimes12;\n\
    \        long numPrimes14 = numPrimes13;\n        long numPrimes15 = numPrimes14;\n\
    \        long numPrimes16 = numPrimes15;\n        long numPrimes17 = numPrimes16;\n\
    \        long numPrimes18 = numPrimes17;\n        long numPrimes19 = numPrimes18;\n\
    \        long numPrimes20 = numPrimes19;\n        long numPrimes21 = numPrimes20;\n\
    \        long numPrimes22 = numPrimes21;\n        long numPrimes23 = numPrimes22;\n\
    \        long numPrimes24 = numPrimes23;\n        long numPrimes25 = numPrimes24;\n\
    \        long numPrimes26 = numPrimes25;\n        long numPrimes27 = numPrimes26;\n\
    \        long numPrimes28 = numPrimes27;\n        long numPrimes29 = numPrimes28;\n\
    \        long numPrimes30 = numPrimes29;\n        long numPrimes31 = numPrimes30;\n\
    \        long numPrimes32 = numPrimes31;\n        long numPrimes33 = numPrimes32;\n\
    \        long numPrimes34 = numPrimes33;\n        long numPrimes35 = numPrimes34;\n\
    \        long numPrimes36 = numPrimes35;\n        long numPrimes37 = numPrimes36;\n\
    \        long numPrimes38 = numPrimes37;\n        long numPrimes39 = numPrimes38;\n\
    \        long numPrimes40 = numPrimes39;\n        long numPrimes41 = numPrimes40;\n\
    \        long numPrimes42 = numPrimes41;\n        long \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n  \
    \  Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeso9a8sf.cs(73,13): error CS1001: Identifier expected

    /tmp/tmpeso9a8sf.cs(73,13): error CS1002: ; expected

    '
  timestamp: 1659824086
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (digit * digit);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   bool isPrime = true;\n        foreach (char c in num.ToUpper()) {\n      \
    \      if (c >= '0' && c <= '9') {\n                long digit = Convert.ToInt64(c);\n\
    \                if (isPrime) {\n                    result += (digit % 2 == 0\
    \ ? 1 : 0);\n                }\n                else {\n                    result\
    \ += (digit % 3 == 0 ? 1 : 0);\n                }\n                isPrime = !isPrime;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93213b72c9ed4aba97fc418c8c2c7a24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93213b72c9ed4aba97fc418c8c2c7a24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\", \"Hexadecimal number must be composed of hexadecimal digits (0-9).\");\n\
    \            }\n            result += (long)Math.Pow(16, digit);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal\
    \ number must be composed of hexadecimal digits (0-9).\nParameter name: num\n\
    \  at Problem.HexKey (System.String num) [0x0002f] in <7723210fbb9e4e6094fd95b1524f22fe>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <7723210fbb9e4e6094fd95b1524f22fe>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal\
    \ number must be composed of hexadecimal digits (0-9).\nParameter name: num\n\
    \  at Problem.HexKey (System.String num) [0x0002f] in <7723210fbb9e4e6094fd95b1524f22fe>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <7723210fbb9e4e6094fd95b1524f22fe>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = Convert.ToInt32(c);\n\
    \            if (digit >= 'A' && digit <= 'F') {\n                result += digit\
    \ - 'A' + 10;\n            } else {\n                result += digit - '0';\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0b56d429e94206be45f2a99c80825e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0b56d429e94206be45f2a99c80825e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F')\
    \ {\n                throw new ArgumentException(\"Hexadecimal digit must be between\
    \ A and F\");\n            }\n            result += (digit - 'A') * Math.Pow(16,\
    \ hex.Length - 1 - hex.IndexOf(c));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"\
    )) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo5flaczx.cs(38,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F')\
    \ {\n                throw new ArgumentException(\"Invalid hexadecimal digit.\"\
    );\n            }\n            result += (digit - 'A') * Math.Pow(16, hex.Length\
    \ - 1 - hex.IndexOf(c));\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4f1gqkk7.cs(38,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   bool isPrime = true;\n        long digit = 0;\n        foreach (char c in\
    \ num) {\n            digit = Convert.ToInt64(c);\n            if (digit == 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \            result += (digit % 2 == 0) ? digit : -digit;\n        }\n       \
    \ if (isPrime) {\n            result += (num.Length % 2 == 0) ? num.Length : -num.Length;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9712f635b00f4d62afdfe75759bde660>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9712f635b00f4d62afdfe75759bde660>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\", \"Invalid hexadecimal digit: \" + c);\n            }\n            result\
    \ += (long)Math.Pow(16, digit);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))\
    \ == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Invalid hexadecimal\
    \ digit: A\nParameter name: num\n  at Problem.HexKey (System.String num) [0x00045]\
    \ in <91d7001f1dfb427daaee3c660235694f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <91d7001f1dfb427daaee3c660235694f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Invalid hexadecimal digit: A\n\
    Parameter name: num\n  at Problem.HexKey (System.String num) [0x00045] in <91d7001f1dfb427daaee3c660235694f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <91d7001f1dfb427daaee3c660235694f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            result += digit * Math.Pow(16, num.Length\
    \ - 1 - c.Length);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n  \
    \  Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpolexct50.cs(37,63): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numOfDigits = 0;\n\
    \        long numOfPrimes = 0;\n        long numOfPrimes2 = 0;\n        long numOfPrimes4\
    \ = 0;\n        long numOfPrimes6 = 0;\n        long numOfPrimes8 = 0;\n     \
    \   long numOfPrimes10 = 0;\n        long numOfPrimes12 = 0;\n        long numOfPrimes14\
    \ = 0;\n        long numOfPrimes16 = 0;\n        long numOfPrimes18 = 0;\n   \
    \     long numOfPrimes20 = 0;\n        long numOfPrimes22 = 0;\n        long numOfPrimes24\
    \ = 0;\n        long numOfPrimes26 = 0;\n        long numOfPrimes28 = 0;\n   \
    \     long numOfPrimes30 = 0;\n        long numOfPrimes32 = 0;\n        long numOfPrimes34\
    \ = 0;\n        long numOfPrimes36 = 0;\n        long numOfPrimes38 = 0;\n   \
    \     long numOfPrimes40 = 0;\n        long numOfPrimes42 = 0;\n        long numOfPrimes44\
    \ = 0;\n        long numOfPrimes46 = 0;\n        long numOfPrimes48 = 0;\n   \
    \     long numOfPrimes50 = 0;\n        long numOfPrimes52 = 0;\n        long numOfPrimes54\
    \ = 0;\n        long numOfPrimes56 = 0;\n        long numOfPrimes58 = 0;\n   \
    \     long numOfPrimes60 = 0;\n        long numOfPrimes62 = 0;\n        long numOfPrimes64\
    \ = 0;\n        long numOfPrimes66 = 0;\n        long numOfPrimes68 = 0;\n   \
    \     long numOfPrimes70 = 0;\n        long numOfPrimes72 = 0;\n        long numOfPrimes74\
    \ = 0;\n        long numOfPrimes76 = 0;\n        long numOfPrimes78 = 0;\n   \
    \     long numOfPrimes80 = 0;\n        long numOfPrimes82 = 0;\n        long numOfPrimes84\
    \ = 0;\n        long numOfPrimes86 = 0;\n        long numOfPrimes88 = 0;\n   \
    \     long numOfPrimes90 = 0;\n        long numOfPrimes92 = 0;\n        long numOfPrimes94\
    \ = 0;\n        long numOfPrimes96 = 0;\n        long numOfPrimes98 = 0;\n   \
    \     long numOfPrimes100 = 0;\n        long numOfPrimes102 = 0;\n        long\
    \ numOfPrimes104 = 0;\n        long numOfPrimes106 = 0;\n        long numOfPrimes108\
    \ = 0;\n        long numOfPrimes110 = 0;\n        long num\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9pgkskus.cs(88,17): error CS1002: ; expected

    '
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (long)Math.Pow(digit,\
    \ 2);\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n  \
    \  Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fd6d30e4d4d4dcb8495fff8885a8138>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fd6d30e4d4d4dcb8495fff8885a8138>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = Convert.ToInt32(c);\n\
    \            if (digit >= '0' && digit <= '9') {\n                result += digit\
    \ - '0';\n            }\n            else if (digit >= 'A' && digit <= 'F') {\n\
    \                result += digit - 'A' + 10;\n            }\n            else\
    \ {\n                throw new ArgumentException(\"Invalid input\");\n       \
    \     }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90fad76963244f4288212c3981620251>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90fad76963244f4288212c3981620251>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = Convert.ToInt32(c);\n\
    \            if (digit >= 'A' && digit <= 'F') {\n                result += digit\
    \ - 'A' + 10;\n            } else {\n                result += digit - '0';\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0b56d429e94206be45f2a99c80825e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0b56d429e94206be45f2a99c80825e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int d = (int)c;\n            if (d >= '0' &&\
    \ d <= '9') {\n                ret += d * 10;\n            } else if (d == 'A'\
    \ || d == 'B' || d == 'C' || d == 'D' || d == 'E' || d == 'F') {\n           \
    \     ret += 10;\n            } else {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit: \" + d);\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80441b95c4f44a1186ccdb36370917e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80441b95c4f44a1186ccdb36370917e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num.ToUpper()) {\n            int num = Convert.ToInt32(c);\n   \
    \         int pow = 1;\n            while (num > 0) {\n                ret +=\
    \ num % 10;\n                num /= 10;\n                pow *= 10;\n        \
    \    }\n            if (pow == 3) {\n                ret += 3;\n            }\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr6jq39g6.cs(33,17): error CS0136: A local or parameter named ''num'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num.ToUpper()) {\n            int d = (int)c;\n            if (d\
    \ >= '0' && d <= '9') {\n                ret += d;\n            }\n          \
    \  else if (d == 'A' || d == 'B' || d == 'C' || d == 'D' || d == 'E' || d == 'F')\
    \ {\n                ret += 10;\n            }\n        }\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0cbc33cb5c9144e18756c0e2f88ec6ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0cbc33cb5c9144e18756c0e2f88ec6ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  string hex = num.ToUpper();\n        char[] hexChars = hex.ToCharArray();\n\
    \        Array.Sort(hexChars);\n        foreach (char c in hexChars) {\n     \
    \       if (c == 'A' || c == 'B' || c == 'C' || c == 'D' || c == 'E' || c == 'F')\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8e8c341d23d4f538a8a79356eac82df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8e8c341d23d4f538a8a79356eac82df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numDigits = 0;\n  \
    \      long numPrimes = 0;\n        long numPrimeDigits = 0;\n        long numPrimePrimes\
    \ = 0;\n        long numPrimePrimeDigits = 0;\n        long numPrimePrimePrimes\
    \ = 0;\n        long numPrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimes\
    \ = 0;\n        long numPrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimes\
    \ = 0;\n        long numPrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimes\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimeDigits = 0;\n        long\
    \ numPrimePrimePrimePrimePrimePrimePrimes = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n     \
    \   long numPrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long\
    \ numPrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes =\
    \ 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp11dqc42o.cs(31,14): warning CS0219: The variable ''numDigits'' is assigned
    but its value is never used

    /tmp/tmp11dqc42o.cs(32,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmp11dqc42o.cs(33,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmp11dqc42o.cs(34,14): warning CS0219: The variable ''numPrimePrimes'' is
    assigned but its value is never used

    /tmp/tmp11dqc42o.cs(35,14): warning CS0219: The variable ''numPrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp11dqc42o.cs(36,14): warning CS0219: The variable ''numPrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp11dqc42o.cs(37,14): warning CS0219: The variable ''numPrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp11dqc42o.cs(38,14): warning CS0219: The variable ''numPrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp11dqc42o.cs(39,14): warning CS0219: The variable ''numPrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp11dqc42o.cs(40,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp11dqc42o.cs(41,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp11dqc42o.cs(42,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp11dqc42o.cs(43,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp11dqc42o.cs(44,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp11dqc42o.cs(45,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp11dqc42o.cs(46,14): warning CS021'
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - 'A';\n  \
    \          if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            long power = 1;\n            while (digit\
    \ > 0) {\n                power *= digit;\n                digit--;\n        \
    \    }\n            if (power < 2) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            result += power;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0006d] in <2b74befee9a549a794233f97c7df21c3>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <2b74befee9a549a794233f97c7df21c3>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0006d] in <2b74befee9a549a794233f97c7df21c3>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <2b74befee9a549a794233f97c7df21c3>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\", \"HexKey only accepts hexadecimal digits (0-9)\");\n            }\n   \
    \         int power = (int)Math.Pow(16, digit);\n            result += power;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: HexKey only\
    \ accepts hexadecimal digits (0-9)\nParameter name: num\n  at Problem.HexKey (System.String\
    \ num) [0x0002f] in <bb3bf41c7d87410e9a4c726daebca9db>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <bb3bf41c7d87410e9a4c726daebca9db>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: HexKey only accepts hexadecimal\
    \ digits (0-9)\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f]\
    \ in <bb3bf41c7d87410e9a4c726daebca9db>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <bb3bf41c7d87410e9a4c726daebca9db>:0 \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hex\
    \ digits must be between 0 and 9\");\n            }\n            count += digit\
    \ * Math.Pow(16, num.Length - 1 - c);\n        }\n        return count;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"\
    )) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpspsqetz9.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hexadecimal\
    \ digit must be between 0 and 9\");\n            }\n            int power = (int)Math.Pow(16,\
    \ digit);\n            result += power;\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must\
    \ be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <dc30e247ced54256a30e8ec2712763a5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <dc30e247ced54256a30e8ec2712763a5>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit\
    \ must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in\
    \ <dc30e247ced54256a30e8ec2712763a5>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00001] in <dc30e247ced54256a30e8ec2712763a5>:0 \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        char[] hexChars = hex.ToCharArray();\n\
    \        Array.Sort(hexChars);\n        foreach (char c in hexChars) {\n     \
    \       int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n    \
    \            throw new ArgumentOutOfRangeException(\"Invalid hexadecimal digit.\"\
    );\n            }\n            int digitValue = digit * 16;\n            if (digitValue\
    \ < 0 || digitValue > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    Invalid hexadecimal digit.\");\n            }\n            result += (digitValue\
    \ * digitValue);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n  \
    \  Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: Invalid hexadecimal digit.\n\
    \  at Problem.HexKey (System.String num) [0x00044] in <ffb7831dfb594c6da571a05f6141e83b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <ffb7831dfb594c6da571a05f6141e83b>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: Invalid hexadecimal\
    \ digit.\n  at Problem.HexKey (System.String num) [0x00044] in <ffb7831dfb594c6da571a05f6141e83b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <ffb7831dfb594c6da571a05f6141e83b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += digit * digit;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f60e9ea49a44305b6ddf75be6417a4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f60e9ea49a44305b6ddf75be6417a4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            if (c == 'A' || c == 'B' || c == 'C' || c ==\
    \ 'D' || c == 'E' || c == 'F') {\n                ret += 10;\n            }\n\
    \            ret += Convert.ToInt64(c);\n        }\n        return ret;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"\
    )) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee7c9883e83e45a0a3d74b1180979983>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee7c9883e83e45a0a3d74b1180979983>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        bool\
    \ isPrime = true;\n        string hex = num.ToUpper();\n        char[] hexChars\
    \ = hex.ToCharArray();\n        foreach (char c in hexChars) {\n            int\
    \ digit = c - '0';\n            if (digit < 0 || digit > 9) {\n              \
    \  isPrime = false;\n                break;\n            }\n        }\n      \
    \  if (isPrime) {\n            int primeDigit = hexChars.Length - 1;\n       \
    \     int primePower = 2;\n            while (primePower < hexChars.Length) {\n\
    \                primePower += 2;\n                primeDigit -= 2;\n        \
    \    }\n            primePower += 2;\n            primeDigit -= 2;\n         \
    \   while (primePower < hexChars.Length) {\n                primePower += 2;\n\
    \                primeDigit -= 2;\n            }\n            primePower += 2;\n\
    \            primeDigit -= 2;\n            while (primePower < hexChars.Length)\
    \ {\n                primePower += 2;\n                primeDigit -= 2;\n    \
    \        }\n            primePower += 2;\n            primeDigit -= 2;\n     \
    \       while (primePower < hexChars.Length) {\n                primePower +=\
    \ 2;\n                primeDigit -= 2;\n            }\n            primePower\
    \ += 2;\n            primeDigit -= 2;\n            while (primePower < hexChars.Length)\
    \ {\n                primePower += 2;\n                primeDigit -= 2;\n    \
    \        }\n            primePower += 2;\n            primeDigit -= 2;\n     \
    \       while (primePower < hexChars.Length) {\n                primePower +=\
    \ 2;\n                primeDigit -= 2;\n            }\n            primePower\
    \ += 2;\n            primeDigit -= 2;\n            while (primePower < hexChars.Length)\
    \ {\n                primePower += 2;\n                primeDigit -= 2;\n    \
    \        }\n            primePower += 2;\n            primeDigit -= 2;\n     \
    \       while (primePower < hexChars.Length) {\n                primePower +=\
    \ 2;\n                primeDigit -= 2;\n            }\n            primePower\
    \ += 2;\n            primeDigit -= 2;\n            while (primePower < hexChars.Length)\
    \ {\n                primePower += 2;\n                primeDigit -= 2;\n    \
    \        }\n            primePower += 2;\n            primeDigit -= 2;\n     \
    \       while (primePower < hexChars.Length) {\n                primePower +=\
    \ 2;\n                primeDigit -= 2;\n            }\n            primePower\
    \ += 2;\n            prime\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpthqukxej.cs(104,18): error CS1002: ; expected

    /tmp/tmpthqukxej.cs(106,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpthqukxej.cs(115,2): error CS1513: } expected

    '
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        char[] hexChars = hex.ToCharArray();\n\
    \        Array.Sort(hexChars);\n        foreach (char hexChar in hexChars) {\n\
    \            int decimal = Convert.ToInt32(hexChar);\n            int remainder\
    \ = decimal % 10;\n            if (remainder == 0) {\n                decimal\
    \ /= 10;\n                result += decimal;\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuw9t8ez8.cs(36,17): error CS1001: Identifier expected

    /tmp/tmpuw9t8ez8.cs(36,17): error CS1002: ; expected

    /tmp/tmpuw9t8ez8.cs(36,25): error CS1001: Identifier expected

    /tmp/tmpuw9t8ez8.cs(37,29): error CS1525: Invalid expression term ''decimal''

    /tmp/tmpuw9t8ez8.cs(39,25): error CS1001: Identifier expected

    /tmp/tmpuw9t8ez8.cs(39,25): error CS1002: ; expected

    /tmp/tmpuw9t8ez8.cs(39,25): error CS1525: Invalid expression term ''/=''

    /tmp/tmpuw9t8ez8.cs(40,27): error CS1525: Invalid expression term ''decimal''

    '
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (digit * digit);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numOfDigits = 0;\n\
    \        bool isPrime = true;\n        long power = 1;\n        string hex = num.ToUpper();\n\
    \        foreach (char c in hex) {\n            int digit = Convert.ToInt32(c);\n\
    \            int power = Convert.ToInt32(Math.Pow(digit, 2));\n            if\
    \ (isPrime) {\n                isPrime = power > 1;\n            }\n         \
    \   numOfDigits += power;\n        }\n        return numOfDigits;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))\
    \ == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpupses87z.cs(37,17): error CS0136: A local or parameter named ''power''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpupses87z.cs(33,14): warning CS0219: The variable ''power'' is assigned
    but its value is never used

    '
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\", \"Hexadecimal digit must be between 0 and 9\");\n            }\n      \
    \      result += (long)Math.Pow(16, digit);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal\
    \ digit must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String\
    \ num) [0x0002f] in <898ec5d2775846db8cadbdbe3a380b03>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <898ec5d2775846db8cadbdbe3a380b03>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digit must be between\
    \ 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f]\
    \ in <898ec5d2775846db8cadbdbe3a380b03>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <898ec5d2775846db8cadbdbe3a380b03>:0 \n"
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num.ToUpper()) {\n            int digit = Convert.ToInt32(c);\n \
    \           if (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int digit2 = digit\
    \ - 'A';\n            int digit3 = digit2 - 'A';\n            int digit5 = digit3\
    \ - 'A';\n            int digit7 = digit5 - 'A';\n            int digit11 = digit7\
    \ - 'A';\n            int digit13 = digit11 - 'A';\n            int digit17 =\
    \ digit13 - 'A';\n            int digit19 = digit17 - 'A';\n            int digit23\
    \ = digit19 - 'A';\n            int digit27 = digit23 - 'A';\n            int\
    \ digit31 = digit27 - 'A';\n            int digit37 = digit31 - 'A';\n       \
    \     int digit41 = digit37 - 'A';\n            int digit43 = digit41 - 'A';\n\
    \            int digit47 = digit43 - 'A';\n            int digit51 = digit47 -\
    \ 'A';\n            int digit53 = digit51 - 'A';\n            int digit57 = digit53\
    \ - 'A';\n            int digit61 = digit57 - 'A';\n            int digit63 =\
    \ digit61 - 'A';\n            int digit67 = digit63 - 'A';\n            int digit71\
    \ = digit67 - 'A';\n            int digit73 = digit71 - 'A';\n            int\
    \ digit77 = digit73 - 'A';\n            int digit81 = digit77 - 'A';\n       \
    \     int digit83 = digit81 - 'A';\n            int digit87 = digit83 - 'A';\n\
    \            int digit91 = digit87 - 'A';\n            int digit93 = digit91 -\
    \ 'A';\n            int digit97 = digit93 - 'A';\n            int digit101 = digit97\
    \ - 'A';\n            int digit103 = digit101 - 'A';\n            int digit107\
    \ = digit103 - 'A';\n            int digit111 = digit107 - 'A';\n            int\
    \ digit113 = digit111 - 'A';\n            int digit117 = digit113 - 'A';\n   \
    \         int digit121 = digit117 - 'A';\n            int digit123 = digit121\
    \ - 'A';\n            int digit127 = digit123 - 'A';\n            \n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"))\
    \ == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmabrd5vu.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpmabrd5vu.cs(87,2): error CS1513: } expected

    '
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hexadecimal\
    \ digit must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must\
    \ be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <29408ce5feb841abb72a74f3a449cd20>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <29408ce5feb841abb72a74f3a449cd20>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit\
    \ must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in\
    \ <29408ce5feb841abb72a74f3a449cd20>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00001] in <29408ce5feb841abb72a74f3a449cd20>:0 \n"
  stdout: ''
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        string\
    \ hex = num.ToUpper();\n        foreach (char c in hex) {\n            int d =\
    \ (int)c;\n            if (d >= '0' && d <= '9') {\n                ret += d;\n\
    \            } else if (d >= 'A' && d <= 'F') {\n                ret += d + 10;\n\
    \            } else {\n                throw new Exception(\"Invalid hexadecimal\
    \ digit: \" + d);\n            }\n        }\n        return ret;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ffa13de3cc346d68b47194de2ff3b33>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ffa13de3cc346d68b47194de2ff3b33>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        string\
    \ hex = num.ToUpper();\n        char[] hexChars = hex.ToCharArray();\n       \
    \ Array.Sort(hexChars);\n        foreach (char c in hexChars) {\n            if\
    \ (c >= '0' && c <= '9') {\n                ret += c - '0';\n            } else\
    \ if (c >= 'A' && c <= 'F') {\n                ret += c - 'A' + 10;\n        \
    \    } else if (c >= 'a' && c <= 'f') {\n                ret += c - 'a' + 10;\n\
    \            }\n        }\n        return ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64612e6307764e13bdad91fa9c44e83c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64612e6307764e13bdad91fa9c44e83c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int d = (int)c;\n            if (d >= '0' &&\
    \ d <= '9') {\n                ret += d * 0x10;\n            } else if (d >= 'A'\
    \ && d <= 'F') {\n                ret += 0x10 + 0xA + (d - 'A');\n           \
    \ }\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa076445ace1418495fcbcfac0ecb44a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa076445ace1418495fcbcfac0ecb44a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num.ToUpper()) {\n            int d = (int)c;\n            if (d\
    \ >= 'A' && d <= 'F') {\n                d -= 'A' - '9';\n            }\n    \
    \        if (d >= '0' && d <= '9') {\n                d -= '0';\n            }\n\
    \            ret += d * Math.Pow(16, num.Length - 1 - num.IndexOf(c));\n     \
    \   }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyz_2rb4r.cs(40,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - '0';\n  \
    \          if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit: \" + c);\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:\
    \ A\n  at Problem.HexKey (System.String num) [0x00045] in <c21e62e5d1c74663a48ef5cd6c90ff68>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <c21e62e5d1c74663a48ef5cd6c90ff68>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal\
    \ digit: A\n  at Problem.HexKey (System.String num) [0x00045] in <c21e62e5d1c74663a48ef5cd6c90ff68>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <c21e62e5d1c74663a48ef5cd6c90ff68>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long num2 = 0;\n       \
    \ foreach (char c in num) {\n            int d = (int)c;\n            if (d >=\
    \ '0' && d <= '9') {\n                num2 += d * Math.Pow(16, num.Length - 1);\n\
    \            }\n        }\n        return num2;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb499dkkl.cs(35,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        bool\
    \ isPrime = true;\n        foreach (char c in num) {\n            int digit =\
    \ c - '0';\n            if (digit < 0 || digit > 9) {\n                throw new\
    \ ArgumentOutOfRangeException(\"num\", \"HexKey only accepts hexadecimal digits\
    \ (0-9).\");\n            }\n            if (isPrime) {\n                ret +=\
    \ digit * Math.Pow(16, digit);\n            }\n            else {\n          \
    \      ret += digit * Math.Pow(16, digit - 2);\n            }\n            isPrime\
    \ = !isPrime;\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_x1ac4dq.cs(39,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp_x1ac4dq.cs(42,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        string\
    \ hex = num.ToUpper();\n        foreach (char c in hex) {\n            int digit\
    \ = Convert.ToInt32(c);\n            int power = (int)Math.Pow(16, hex.Length\
    \ - 1);\n            int result = digit * power;\n            ret = ret + result;\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5374de20c874fb7b37cf725f1fd3294>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5374de20c874fb7b37cf725f1fd3294>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            result += (long)Math.Pow(16,\
    \ (int)c);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa69b7759389405484398f996e821715>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa69b7759389405484398f996e821715>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - 'A';\n  \
    \          if (digit >= 2 && digit <= 8) {\n                result += (digit *\
    \ digit);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ef66c286cc143a2b13ccb764d4bc5b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ef66c286cc143a2b13ccb764d4bc5b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - 'A';\n  \
    \          if (digit >= 2 && digit <= 8) {\n                result += (digit *\
    \ digit);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ef66c286cc143a2b13ccb764d4bc5b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ef66c286cc143a2b13ccb764d4bc5b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid\
    \ hexadecimal digit: \" + c);\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:\
    \ A\n  at Problem.HexKey (System.String num) [0x00040] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal\
    \ digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num.ToUpper()) {\n            int n = Convert.ToInt32(c);\n     \
    \       if (n % 2 == 0) {\n                ret += n;\n            }\n        }\n\
    \        return ret;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a51376007cfd4bbaaacac595467e8656>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a51376007cfd4bbaaacac595467e8656>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\", \"HexKey only accepts hexadecimal digits (0-9)\");\n            }\n   \
    \         int power = (int)Math.Pow(16, digit);\n            if (IsPrime(power))\
    \ {\n                result += power;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp63qc5sgm.cs(38,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            result += (long)Convert.ToInt64(c);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb5d6e8e60b14fed9c19b11fc410388d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb5d6e8e60b14fed9c19b11fc410388d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numDigits = 0;\n  \
    \      long numPrimes = 0;\n        long numPrimes2 = num.Length;\n        long\
    \ numPrimes3 = numPrimes2 * numPrimes2;\n        long numPrimes4 = numPrimes3\
    \ * numPrimes3;\n        long numPrimes5 = numPrimes4 * numPrimes4;\n        long\
    \ numPrimes6 = numPrimes5 * numPrimes5;\n        long numPrimes7 = numPrimes6\
    \ * numPrimes6;\n        long numPrimes8 = numPrimes7 * numPrimes7;\n        long\
    \ numPrimes9 = numPrimes8 * numPrimes8;\n        long numPrimes10 = numPrimes9\
    \ * numPrimes9;\n        long numPrimes11 = numPrimes10 * numPrimes10;\n     \
    \   long numPrimes12 = numPrimes11 * numPrimes11;\n        long numPrimes13 =\
    \ numPrimes12 * numPrimes12;\n        long numPrimes14 = numPrimes13 * numPrimes13;\n\
    \        long numPrimes15 = numPrimes14 * numPrimes14;\n        long numPrimes16\
    \ = numPrimes15 * numPrimes15;\n        long numPrimes17 = numPrimes16 * numPrimes16;\n\
    \        long numPrimes18 = numPrimes17 * numPrimes17;\n        long numPrimes19\
    \ = numPrimes18 * numPrimes18;\n        long numPrimes20 = numPrimes19 * numPrimes19;\n\
    \        long numPrimes21 = numPrimes20 * numPrimes20;\n        long numPrimes22\
    \ = numPrimes21 * numPrimes20;\n        long numPrimes23 = numPrimes22 * numPrimes22;\n\
    \        long numPrimes24 = numPrimes23 * numPrimes23;\n        long numPrimes25\
    \ = numPrimes24 * numPrimes24;\n        long numPrimes26 = numPrimes25 * numPrimes25;\n\
    \        long numPrimes27 = numPrimes26 * numPrimes26;\n        long numPrimes28\
    \ = numPrimes27 * numPrimes27;\n        long numPrimes29 = numPrimes28 * numPrimes28;\n\
    \        long numPrimes30 = numPrimes29 * numPrimes29;\n        long numPrimes31\
    \ = numPrimes30 * numPrimes\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp779brxg1.cs(62,51): error CS1002: ; expected

    '
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    HexKey\", \"Invalid hexadecimal digit: \" + c);\n            }\n            long\
    \ power = 1;\n            for (int i = 0; i < digit; i++) {\n                power\
    \ *= 16;\n            }\n            result += power;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Invalid hexadecimal\
    \ digit: A\nParameter name: HexKey\n  at Problem.HexKey (System.String num) [0x00045]\
    \ in <a48a4e62812248e2bc5d7b4b068a5c85>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <a48a4e62812248e2bc5d7b4b068a5c85>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Invalid hexadecimal digit: A\n\
    Parameter name: HexKey\n  at Problem.HexKey (System.String num) [0x00045] in <a48a4e62812248e2bc5d7b4b068a5c85>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <a48a4e62812248e2bc5d7b4b068a5c85>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 8) {\n                result += digit * digit;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <150994e9c8184c5d9e17b3264dbf9bb7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <150994e9c8184c5d9e17b3264dbf9bb7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - 'A';\n  \
    \          if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit: \" + c);\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac212b345a442aca8708743f41b188b>:0 \n\nUnhandled Exception:\n\
    System.ArgumentException: Invalid hexadecimal digit: 1\n  at Problem.HexKey (System.String\
    \ num) [0x00045] in <2ac212b345a442aca8708743f41b188b>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00015] in <2ac212b345a442aca8708743f41b188b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentException: Invalid hexadecimal digit: 1\n  at Problem.HexKey\
    \ (System.String num) [0x00045] in <2ac212b345a442aca8708743f41b188b>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00015] in <2ac212b345a442aca8708743f41b188b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = Convert.ToInt32(c);\n\
    \            if (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"\
    Hexadecimal digit must be between A and F\");\n            }\n            int\
    \ digitValue = digit - 'A';\n            if (digitValue == 0) {\n            \
    \    digitValue = 1;\n            }\n            int power = (int)Math.Pow(digitValue,\
    \ 2);\n            if (power > result) {\n                result = power;\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must\
    \ be between A and F\n  at Problem.HexKey (System.String num) [0x00037] in <aa52a9d7145f41e7a7966517dde51940>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00015] in <aa52a9d7145f41e7a7966517dde51940>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit\
    \ must be between A and F\n  at Problem.HexKey (System.String num) [0x00037] in\
    \ <aa52a9d7145f41e7a7966517dde51940>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00015] in <aa52a9d7145f41e7a7966517dde51940>:0 \n"
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\", \"Hexadecimal digit must be between 0 and 9\");\n            }\n      \
    \      long power = (long)(Math.Pow(16, digit));\n            result += power;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Hexadecimal\
    \ digit must be between 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String\
    \ num) [0x0002f] in <db79f4e0b14b4ec1b9969dbc605bc527>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <db79f4e0b14b4ec1b9969dbc605bc527>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Hexadecimal digit must be between\
    \ 0 and 9\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f]\
    \ in <db79f4e0b14b4ec1b9969dbc605bc527>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <db79f4e0b14b4ec1b9969dbc605bc527>:0 \n"
  stdout: ''
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num.ToUpper()) {\n            int d = (int)c;\n            if (d\
    \ >= '0' && d <= '9') {\n                ret += d * 10;\n            } else if\
    \ (d >= 'A' && d <= 'F') {\n                ret += 10 + d - 'A';\n           \
    \ } else {\n                throw new ArgumentException(\"Invalid hexadecimal\
    \ digit: \" + c);\n            }\n        }\n        return ret;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef094c7f887940e4ad5ae19fc57c5e38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef094c7f887940e4ad5ae19fc57c5e38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int d = (int)c;\n            if (d >= '0' &&\
    \ d <= '9') {\n                ret += d * Math.Pow(16, num.Length - 1);\n    \
    \        }\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwhwq_xv7.cs(35,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int d = (int)c;\n            if (d\
    \ >= '0' && d <= '9') {\n                result += Math.Pow(16, (d - '0'));\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp7uuwctt.cs(35,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   long digit = 0;\n        long digit2 = 0;\n        bool isPrime = false;\n\
    \        bool isPrime2 = false;\n        bool isPrime3 = false;\n        bool\
    \ isPrime4 = false;\n        bool isPrime5 = false;\n        bool isPrime6 = false;\n\
    \        bool isPrime7 = false;\n        bool isPrime8 = false;\n        bool\
    \ isPrime9 = false;\n        bool isPrime10 = false;\n        bool isPrime11 =\
    \ false;\n        bool isPrime12 = false;\n        bool isPrime13 = false;\n \
    \       bool isPrime14 = false;\n        bool isPrime15 = false;\n        bool\
    \ isPrime16 = false;\n        bool isPrime17 = false;\n        bool isPrime18\
    \ = false;\n        bool isPrime19 = false;\n        bool isPrime20 = false;\n\
    \        bool isPrime21 = false;\n        bool isPrime22 = false;\n        bool\
    \ isPrime23 = false;\n        bool isPrime24 = false;\n        bool isPrime25\
    \ = false;\n        bool isPrime26 = false;\n        bool isPrime27 = false;\n\
    \        bool isPrime28 = false;\n        bool isPrime29 = false;\n        bool\
    \ isPrime30 = false;\n        bool isPrime31 = false;\n        bool isPrime32\
    \ = false;\n        bool isPrime33 = false;\n        bool isPrime34 = false;\n\
    \        bool isPrime35 = false;\n        bool isPrime36 = false;\n        bool\
    \ isPrime37 = false;\n        bool isPrime38 = false;\n        bool isPrime39\
    \ = false;\n        bool isPrime40 = false;\n        bool isPrime41 = false;\n\
    \        bool isPrime42 = false;\n        bool isPrime43 = false;\n        bool\
    \ isPrime44 = false;\n        bool isPrime45 = false;\n        bool isPrime46\
    \ = false;\n        bool isPrime47 = false;\n        bool isPrime48 = false;\n\
    \        bool isPrime49 = false;\n        bool isPrime50 = false;\n        bool\
    \ isPrime51 = false;\n        bool isPrime52 = false;\n        bool isPrime53\
    \ = false;\n        bool isPrime54 = false;\n        bool isPrime55 = false;\n\
    \        bool isPrime56 = false;\n        bool isPrime57 = false;\n        bool\
    \ isPrime58 = false;\n        bool isPrime59 = false;\n        bool isPrime60\
    \ = false;\n        bool isPrime61 = false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvf9p0uyj.cs(31,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(32,14): warning CS0219: The variable ''digit'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(33,14): warning CS0219: The variable ''digit2'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(34,14): warning CS0219: The variable ''isPrime'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(35,14): warning CS0219: The variable ''isPrime2'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(36,14): warning CS0219: The variable ''isPrime3'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(37,14): warning CS0219: The variable ''isPrime4'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(38,14): warning CS0219: The variable ''isPrime5'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(39,14): warning CS0219: The variable ''isPrime6'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(40,14): warning CS0219: The variable ''isPrime7'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(41,14): warning CS0219: The variable ''isPrime8'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(42,14): warning CS0219: The variable ''isPrime9'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(43,14): warning CS0219: The variable ''isPrime10'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(44,14): warning CS0219: The variable ''isPrime11'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(45,14): warning CS0219: The variable ''isPrime12'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(46,14): warning CS0219: The variable ''isPrime13'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(47,14): warning CS0219: The variable ''isPrime14'' is assigned
    but its value is never used

    /tmp/tmpvf9p0uyj.cs(48,14): warning CS0219: The variable ''isPrime15'' is assigned
    but its'
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        bool\
    \ isPrime = true;\n        long n = Convert.ToInt64(num);\n        long d = Convert.ToInt64(Math.Pow(Convert.ToDouble(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow(Math.Pow\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2kve8cnh.cs(34,1481): error CS1026: ) expected

    /tmp/tmp2kve8cnh.cs(34,1481): error CS1002: ; expected

    '
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            result += (long)Math.Pow(16, digit);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <00bf384176d843d0810856b2ff295163>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <00bf384176d843d0810856b2ff295163>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <00bf384176d843d0810856b2ff295163>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <00bf384176d843d0810856b2ff295163>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - 'A';\n  \
    \          if (digit >= 2 && digit <= 9) {\n                result += digit *\
    \ digit;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7cbb4f5a9794b2492e5a8c96a7ef352>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7cbb4f5a9794b2492e5a8c96a7ef352>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F')\
    \ {\n                throw new ArgumentOutOfRangeException(\"HexKey\", \"Invalid\
    \ hexadecimal digit: \" + c);\n            }\n            result += (digit - 'A')\
    \ * Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoi8a9ljm.cs(38,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - 'A';\n  \
    \          if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"\
    Hex digits must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <44d98708766f408a8ea15e8077e00a6d>:0 \n\nUnhandled Exception:\n\
    System.ArgumentException: Hex digits must be between 0 and 9\n  at Problem.HexKey\
    \ (System.String num) [0x00034] in <44d98708766f408a8ea15e8077e00a6d>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00015] in <44d98708766f408a8ea15e8077e00a6d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hex digits must\
    \ be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <44d98708766f408a8ea15e8077e00a6d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00015] in <44d98708766f408a8ea15e8077e00a6d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            result += (long)Math.Pow(16, digit);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <00bf384176d843d0810856b2ff295163>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <00bf384176d843d0810856b2ff295163>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <00bf384176d843d0810856b2ff295163>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <00bf384176d843d0810856b2ff295163>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numDigits = num.Length;\n\
    \        long numPrimes = 0;\n        long numPrimeDigits = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits5 = 0;\n        long numPrimeDigits6 = 0;\n      \
    \  long numPrimeDigits7 = 0;\n        long numPrimeDigits8 = 0;\n        long\
    \ numPrimeDigits9 = 0;\n        long numPrimeDigits10 = 0;\n        long numPrimeDigits11\
    \ = 0;\n        long numPrimeDigits12 = 0;\n        long numPrimeDigits13 = 0;\n\
    \        long numPrimeDigits14 = 0;\n        long numPrimeDigits15 = 0;\n    \
    \    long numPrimeDigits16 = 0;\n        long numPrimeDigits17 = 0;\n        long\
    \ numPrimeDigits18 = 0;\n        long numPrimeDigits19 = 0;\n        long numPrimeDigits20\
    \ = 0;\n        long numPrimeDigits21 = 0;\n        long numPrimeDigits22 = 0;\n\
    \        long numPrimeDigits23 = 0;\n        long numPrimeDigits24 = 0;\n    \
    \    long numPrimeDigits25 = 0;\n        long numPrimeDigits26 = 0;\n        long\
    \ numPrimeDigits27 = 0;\n        long numPrimeDigits28 = 0;\n        long numPrimeDigits29\
    \ = 0;\n        long numPrimeDigits30 = 0;\n        long numPrimeDigits31 = 0;\n\
    \        long numPrimeDigits32 = 0;\n        long numPrimeDigits33 = 0;\n    \
    \    long numPrimeDigits34 = 0;\n        long numPrimeDigits35 = 0;\n        long\
    \ numPrimeDigits36 = 0;\n        long numPrimeDigits37 = 0;\n        long numPrimeDigits38\
    \ = 0;\n        long numPrimeDigits39 = 0;\n        long numPrimeDigits40 = 0;\n\
    \        long numPrimeDigits41 = 0;\n        long numPrimeDigits42 = 0;\n    \
    \    long numPrimeDigits43 = 0;\n        long numPrimeDigits44 = 0;\n        long\
    \ numPrimeDigits45 = 0;\n        long numPrimeDigits46 = 0;\n        long numPrimeDigits47\
    \ = 0;\n        long numPrimeDigits48 = 0;\n        long numPrimeDigits49 = 0;\n\
    \        long numPrimeDigits50 = 0;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsyuzxq4e.cs(32,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpsyuzxq4e.cs(33,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(34,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(35,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(36,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(37,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(38,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(39,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(40,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(41,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(42,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(43,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(44,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(45,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(46,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(47,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(48,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numOfDigits = 0;\n\
    \        long numOfPrimes = 0;\n        long numOfPrimes2 = 0;\n        long numOfPrimes3\
    \ = 0;\n        long numOfPrimes4 = 0;\n        long numOfPrimes5 = 0;\n     \
    \   long numOfPrimes6 = 0;\n        long numOfPrimes7 = 0;\n        long numOfPrimes8\
    \ = 0;\n        long numOfPrimes9 = 0;\n        long numOfPrimes10 = 0;\n    \
    \    long numOfPrimes11 = 0;\n        long numOfPrimes12 = 0;\n        long numOfPrimes13\
    \ = 0;\n        long numOfPrimes14 = 0;\n        long numOfPrimes15 = 0;\n   \
    \     long numOfPrimes16 = 0;\n        long numOfPrimes17 = 0;\n        long numOfPrimes18\
    \ = 0;\n        long numOfPrimes19 = 0;\n        long numOfPrimes20 = 0;\n   \
    \     long numOfPrimes21 = 0;\n        long numOfPrimes22 = 0;\n        long numOfPrimes23\
    \ = 0;\n        long numOfPrimes24 = 0;\n        long numOfPrimes25 = 0;\n   \
    \     long numOfPrimes26 = 0;\n        long numOfPrimes27 = 0;\n        long numOfPrimes28\
    \ = 0;\n        long numOfPrimes29 = 0;\n        long numOfPrimes30 = 0;\n   \
    \     long numOfPrimes31 = 0;\n        long numOfPrimes32 = 0;\n        long numOfPrimes33\
    \ = 0;\n        long numOfPrimes34 = 0;\n        long numOfPrimes35 = 0;\n   \
    \     long numOfPrimes36 = 0;\n        long numOfPrimes37 = 0;\n        long numOfPrimes38\
    \ = 0;\n        long numOfPrimes39 = 0;\n        long numOfPrimes40 = 0;\n   \
    \     long numOfPrimes41 = 0;\n        long numOfPrimes42 = 0;\n        long numOfPrimes43\
    \ = 0;\n        long numOfPrimes44 = 0;\n        long numOfPrimes45 = 0;\n   \
    \     long numOfPrimes46 = 0;\n        long numOfPrimes47 = 0;\n        long numOfPrimes48\
    \ = 0;\n        long numOfPrimes49 = 0;\n        long numOfPrimes50 = 0;\n   \
    \     long numOfPrimes51 = 0;\n        long numOfPrimes52 = 0;\n        long numOfPrimes53\
    \ = 0;\n        long numOfPrimes54 = 0;\n        long numOfPrimes55 = 0;\n   \
    \     long numOfPrimes56 = 0;\n        long numOfPri\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n  \
    \  Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbfhpnj6h.cs(88,22): error CS1002: ; expected

    '
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\", \"HexKey only accepts hexadecimal digits (0-9)\");\n            }\n   \
    \         int power = (int)Math.Pow(16, digit);\n            result += power;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: HexKey only\
    \ accepts hexadecimal digits (0-9)\nParameter name: num\n  at Problem.HexKey (System.String\
    \ num) [0x0002f] in <bb3bf41c7d87410e9a4c726daebca9db>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <bb3bf41c7d87410e9a4c726daebca9db>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: HexKey only accepts hexadecimal\
    \ digits (0-9)\nParameter name: num\n  at Problem.HexKey (System.String num) [0x0002f]\
    \ in <bb3bf41c7d87410e9a4c726daebca9db>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <bb3bf41c7d87410e9a4c726daebca9db>:0 \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int n = Convert.ToInt32(c);\n            if (n\
    \ % 2 == 0) {\n                ret += n;\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d615ee292fbc4f2aa9604dac05175c77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d615ee292fbc4f2aa9604dac05175c77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid\
    \ hexadecimal digit: \" + c);\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:\
    \ A\n  at Problem.HexKey (System.String num) [0x00040] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal\
    \ digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - 'A';\n  \
    \          if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"\
    Hexadecimal digit must be between 0 and 9\");\n            }\n            result\
    \ += digit * Math.Pow(16, num.Length - 1 - c.Length);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprf9ng9jh.cs(37,63): error CS1061: ''char'' does not contain a definition
    for ''Length'' and no accessible extension method ''Length'' accepting a first
    argument of type ''char'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - '0';\n  \
    \          if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            result += (long)Math.Pow(16, digit);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x00034] in <56341050a61c47ffaa7099d9bbba7178>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <56341050a61c47ffaa7099d9bbba7178>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x00034] in <56341050a61c47ffaa7099d9bbba7178>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <56341050a61c47ffaa7099d9bbba7178>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824089
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = c - '0';\n            if (digit >= 2 && digit <= 9) {\n      \
    \          result += (long)Math.Pow(16, digit);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd0fecc5dc3f4d28b97692672a588657>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd0fecc5dc3f4d28b97692672a588657>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799510
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int d = (int)c;\n            if (d >= '0' &&\
    \ d <= '9') {\n                ret += d;\n            } else if (d >= 'A' && d\
    \ <= 'F') {\n                ret += d - 'A' + 10;\n            } else {\n    \
    \            throw new Exception(\"Invalid hexadecimal digit: \" + c);\n     \
    \       }\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfbb18b8f50747a8bdb08da1b874cc82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfbb18b8f50747a8bdb08da1b874cc82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit >= 'A' && digit <=\
    \ 'F') {\n                result += (digit - 'A') * Math.Pow(16, hex.Length -\
    \ 1);\n            } else {\n                result += (digit - '0') * Math.Pow(16,\
    \ hex.Length - 1);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"\
    )) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ikipos6.cs(36,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5ikipos6.cs(38,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long num2 = 0;\n       \
    \ long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long\
    \ num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9\
    \ = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 =\
    \ 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n\
    \        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n \
    \       long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n  \
    \      long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n   \
    \     long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n    \
    \    long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n     \
    \   long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n      \
    \  long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n       \
    \ long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long\
    \ num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43\
    \ = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 =\
    \ 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n\
    \        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n \
    \       long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n  \
    \      long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n   \
    \     long num59 = 0;\n        long num60 = 0;\n        long num61 = 0;\n    \
    \    long num62 = 0;\n        long num63 = 0;\n        long num64 = 0;\n     \
    \   long num65 = 0;\n        long num66 = 0;\n        long num67 = 0;\n      \
    \  long num68 = 0;\n        long num69 = 0;\n        long num70 = 0;\n       \
    \ long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n        long\
    \ num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long num77\
    \ = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80 =\
    \ 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n\
    \        long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n \
    \       long num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpafikpamk.cs(31,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(32,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(33,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(34,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(35,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(36,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(37,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(38,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(39,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(40,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(41,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(42,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(43,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(44,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(45,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(46,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(47,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(48,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(49,14): warning CS0'
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == 'A' || c == 'B' || c == 'C'\
    \ || c == 'D' || c == 'E' || c == 'F') {\n                count += 2;\n      \
    \      }\n            else if (c >= '0' && c <= '9') {\n                count\
    \ += 1;\n            }\n        }\n        return count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n  \
    \  Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <840993e145c84d9c87926e9aa29e6173>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <840993e145c84d9c87926e9aa29e6173>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824089
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long num2 = 0;\n       \
    \ bool isPrime = true;\n        string hex = num.ToUpper();\n        char[] hexChars\
    \ = hex.ToCharArray();\n        foreach (char hexChar in hexChars) {\n       \
    \     int hexVal = Convert.ToInt32(hexChar);\n            if (hexVal < '0' ||\
    \ hexVal > '9') {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        if (isPrime) {\n            int hexVal = Convert.ToInt32(hexChars[0]);\n\
    \            if (hexVal < '0' || hexVal > '9') {\n                num2 = hexVal;\n\
    \            }\n        }\n        return num2;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2539192b111f47e68a73ff5b8e75474b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2539192b111f47e68a73ff5b8e75474b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid\
    \ hexadecimal digit: \" + c);\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:\
    \ A\n  at Problem.HexKey (System.String num) [0x00040] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal\
    \ digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int digit = c - '0';\n            if (digit <\
    \ 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal\
    \ digit: \" + c);\n            }\n            if (digit == 0) {\n            \
    \    continue;\n            }\n            long power = 1;\n            for (int\
    \ i = 1; i < digit; i++) {\n                power *= digit;\n            }\n \
    \           if (num.Length > 1) {\n                power = power * 2;\n      \
    \      }\n            if (num.Length > 2) {\n                power = power * 3;\n\
    \            }\n            if (num.Length > 3) {\n                power = power\
    \ * 5;\n            }\n            if (num.Length > 4) {\n                power\
    \ = power * 7;\n            }\n            if (num.Length > 5) {\n           \
    \     power = power * 11;\n            }\n            if (num.Length > 6) {\n\
    \                power = power * 13;\n            }\n            if (num.Length\
    \ > 7) {\n                power = power * 17;\n            }\n            if (num.Length\
    \ > 8) {\n                power = power * 19;\n            }\n            if (num.Length\
    \ > 9) {\n                power = power * 23;\n            }\n            if (num.Length\
    \ > 10) {\n                power = power * 29;\n            }\n            if\
    \ (num.Length > 11) {\n                power = power * 31;\n            }\n  \
    \          if (num.Length > 12) {\n                power = power * 37;\n     \
    \       }\n            if (num.Length > 13) {\n                power = power *\
    \ 51;\n            }\n            if (num.Length > 14) {\n                power\
    \ = power * 59;\n            }\n            if (num.Length > 15) {\n         \
    \       power = power * 67;\n            }\n            if (num.Length > 16) {\n\
    \                power = power * 71;\n            }\n            if (num.Length\
    \ > 17) {\n                power = power * 79;\n            }\n            if\
    \ (num.Length > 18) {\n                power = power * 83;\n            }\n  \
    \          if (num.Length > 19) {\n                power = power * 89;\n     \
    \       }\n            if (num.Length > 20) {\n                power = power *\
    \ 97;\n            }\n            if (num.Length > 21) {\n                power\
    \ = power * 101;\n            }\n            if (num.Length > 22) {\n        \
    \        power = power * 103;\n            }\n            if (num.Length > 23)\
    \ {\n                power = power * 107;\n            }\n            if (num.Length\
    \ > 24) {\n                power = power * 111;\n            }\n            if\
    \ (num.Length > 25) {\n                power = power * 113;\n\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmmlxk7hg.cs(120,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpmmlxk7hg.cs(129,2): error CS1513: } expected

    '
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n \
    \           if (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit: \" + c);\n            }\n            result += (digit\
    \ - 'A') * Math.Pow(16, num.Length - 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6tdhscr0.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hexadecimal\
    \ digit must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must\
    \ be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <29408ce5feb841abb72a74f3a449cd20>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <29408ce5feb841abb72a74f3a449cd20>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit\
    \ must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in\
    \ <29408ce5feb841abb72a74f3a449cd20>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00001] in <29408ce5feb841abb72a74f3a449cd20>:0 \n"
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F')\
    \ {\n                throw new ArgumentOutOfRangeException(\"Hexadecimal digit\
    \ must be between A and F\");\n            }\n            result += (digit - 'A')\
    \ * Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6dvfroj2.cs(38,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824089
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += digit * digit;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f60e9ea49a44305b6ddf75be6417a4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f60e9ea49a44305b6ddf75be6417a4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n \
    \           if (digit >= 'A' && digit <= 'F') {\n                result += digit\
    \ - 'A' + 10;\n            }\n            else if (digit >= '0' && digit <= '9')\
    \ {\n                result += digit - '0';\n            }\n            else {\n\
    \                throw new ArgumentException(\"Invalid input\");\n           \
    \ }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <40ce34c5884e40229274336903f3dbb7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <40ce34c5884e40229274336903f3dbb7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = c - '0';\n            if (digit < 0 || digit > 9) {\n        \
    \        throw new ArgumentOutOfRangeException(\"HexKey\");\n            }\n \
    \           result += (long)Math.Pow(16, digit);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: HexKey\n  at Problem.HexKey\
    \ (System.String num) [0x00038] in <2468230e01784c4b9d15d1ebfcd8e85d>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <2468230e01784c4b9d15d1ebfcd8e85d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: HexKey\n  at\
    \ Problem.HexKey (System.String num) [0x00038] in <2468230e01784c4b9d15d1ebfcd8e85d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <2468230e01784c4b9d15d1ebfcd8e85d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            int power = (int)Math.Pow(16, digit);\n  \
    \          result += power;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <bdc7412e8bf24a119914d873c2b604db>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <bdc7412e8bf24a119914d873c2b604db>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <bdc7412e8bf24a119914d873c2b604db>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <bdc7412e8bf24a119914d873c2b604db>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int digit = c - '0';\n            if (digit <\
    \ 0 || digit > 9) {\n                throw new ArgumentException(\"Hexadecimal\
    \ digit must be between 0 and 9\");\n            }\n            int power = (int)Math.Pow(16,\
    \ digit);\n            int product = Convert.ToInt32(Math.Pow(16, digit) * digit);\n\
    \            if (product == 1) {\n                ret += power;\n            }\n\
    \            else {\n                ret += power * product;\n            }\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must\
    \ be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00032] in <9bb813d5a45242fc857dfaa79257e4c4>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <9bb813d5a45242fc857dfaa79257e4c4>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit\
    \ must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00032] in\
    \ <9bb813d5a45242fc857dfaa79257e4c4>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00001] in <9bb813d5a45242fc857dfaa79257e4c4>:0 \n"
  stdout: ''
  timestamp: 1659824089
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long num2 = 0;\n       \
    \ foreach (char c in num) {\n            if (c >= '0' && c <= '9') {\n       \
    \         num2 += c - '0';\n            } else if (c >= 'A' && c <= 'F') {\n \
    \               num2 += c - 'A' + 10;\n            } else if (c >= 'a' && c <=\
    \ 'f') {\n                num2 += c - 'a' + 10;\n            }\n        }\n  \
    \      return num2;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4623d31bc0bd403bbe978d02551e6c2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4623d31bc0bd403bbe978d02551e6c2b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid\
    \ hex digit: \" + c);\n            }\n            int power = (int)Math.Pow(16,\
    \ digit);\n            result += power;\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hex digit: A\n\
    \  at Problem.HexKey (System.String num) [0x00040] in <96e768adfb4042f5b9b9412b82e80f60>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <96e768adfb4042f5b9b9412b82e80f60>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hex digit:\
    \ A\n  at Problem.HexKey (System.String num) [0x00040] in <96e768adfb4042f5b9b9412b82e80f60>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <96e768adfb4042f5b9b9412b82e80f60>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long num2 = 0;\n       \
    \ long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long\
    \ num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9\
    \ = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 =\
    \ 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n\
    \        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n \
    \       long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n  \
    \      long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n   \
    \     long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n    \
    \    long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n     \
    \   long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n      \
    \  long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n       \
    \ long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long\
    \ num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43\
    \ = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 =\
    \ 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n\
    \        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n \
    \       long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n  \
    \      long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n   \
    \     long num59 = 0;\n        long num60 = 0;\n        long num61 = 0;\n    \
    \    long num62 = 0;\n        long num63 = 0;\n        long num64 = 0;\n     \
    \   long num65 = 0;\n        long num66 = 0;\n        long num67 = 0;\n      \
    \  long num68 = 0;\n        long num69 = 0;\n        long num70 = 0;\n       \
    \ long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n        long\
    \ num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long num77\
    \ = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80 =\
    \ 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n\
    \        long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n \
    \       long num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpafikpamk.cs(31,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(32,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(33,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(34,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(35,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(36,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(37,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(38,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(39,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(40,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(41,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(42,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(43,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(44,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(45,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(46,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(47,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(48,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(49,14): warning CS0'
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numDigits = num.Length;\n\
    \        long numPrimes = 0;\n        long numPrimeDigits = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits5 = 0;\n        long numPrimeDigits6 = 0;\n      \
    \  long numPrimeDigits7 = 0;\n        long numPrimeDigits8 = 0;\n        long\
    \ numPrimeDigits9 = 0;\n        long numPrimeDigits10 = 0;\n        long numPrimeDigits11\
    \ = 0;\n        long numPrimeDigits12 = 0;\n        long numPrimeDigits13 = 0;\n\
    \        long numPrimeDigits14 = 0;\n        long numPrimeDigits15 = 0;\n    \
    \    long numPrimeDigits16 = 0;\n        long numPrimeDigits17 = 0;\n        long\
    \ numPrimeDigits18 = 0;\n        long numPrimeDigits19 = 0;\n        long numPrimeDigits20\
    \ = 0;\n        long numPrimeDigits21 = 0;\n        long numPrimeDigits22 = 0;\n\
    \        long numPrimeDigits23 = 0;\n        long numPrimeDigits24 = 0;\n    \
    \    long numPrimeDigits25 = 0;\n        long numPrimeDigits26 = 0;\n        long\
    \ numPrimeDigits27 = 0;\n        long numPrimeDigits28 = 0;\n        long numPrimeDigits29\
    \ = 0;\n        long numPrimeDigits30 = 0;\n        long numPrimeDigits31 = 0;\n\
    \        long numPrimeDigits32 = 0;\n        long numPrimeDigits33 = 0;\n    \
    \    long numPrimeDigits34 = 0;\n        long numPrimeDigits35 = 0;\n        long\
    \ numPrimeDigits36 = 0;\n        long numPrimeDigits37 = 0;\n        long numPrimeDigits38\
    \ = 0;\n        long numPrimeDigits39 = 0;\n        long numPrimeDigits40 = 0;\n\
    \        long numPrimeDigits41 = 0;\n        long numPrimeDigits42 = 0;\n    \
    \    long numPrimeDigits43 = 0;\n        long numPrimeDigits44 = 0;\n        long\
    \ numPrimeDigits45 = 0;\n        long numPrimeDigits46 = 0;\n        long numPrimeDigits47\
    \ = 0;\n        long numPrimeDigits48 = 0;\n        long numPrimeDigits49 = 0;\n\
    \        long numPrimeDigits50 = 0;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsyuzxq4e.cs(32,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpsyuzxq4e.cs(33,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(34,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(35,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(36,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(37,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(38,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(39,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(40,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(41,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(42,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(43,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(44,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(45,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(46,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(47,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(48,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int d = (int)c;\n            if (d >= '0' &&\
    \ d <= '9') {\n                ret += d * 0x30;\n            } else if (d >= 'A'\
    \ && d <= 'F') {\n                ret += 0x40 - d + 0x30;\n            } else\
    \ {\n                throw new Exception(\"Invalid input\");\n            }\n\
    \        }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba03431eea8447c3ba222044ae1f2d99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ba03431eea8447c3ba222044ae1f2d99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824089
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        string\
    \ hex = num.ToUpper();\n        foreach (char c in hex) {\n            int d =\
    \ (int)c;\n            if (d >= 'A' && d <= 'F') {\n                d += 10;\n\
    \            }\n            if (d >= '0' && d <= '9') {\n                ret +=\
    \ d;\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n  \
    \  Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d9a9a1dfa8643e4a15badc026682aa6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d9a9a1dfa8643e4a15badc026682aa6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        char[] hexChars = hex.ToCharArray();\n\
    \        Array.Sort(hexChars);\n        foreach (char c in hexChars) {\n     \
    \       int digit = c - '0';\n            if (digit == 0 || digit == 1) {\n  \
    \              continue;\n            }\n            int power = (int)Math.Pow(digit,\
    \ 2);\n            int sum = 0;\n            for (int i = 0; i < power; i++) {\n\
    \                sum += hexChars[i];\n            }\n            if (sum % 2 ==\
    \ 0) {\n                result++;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.HexKey (System.String num) [0x00061]\
    \ in <ffb4282f7726468b8260360104e66738>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <ffb4282f7726468b8260360104e66738>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.HexKey (System.String num) [0x00061] in <ffb4282f7726468b8260360104e66738>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <ffb4282f7726468b8260360104e66738>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   long digit = 0;\n        long prime = 0;\n        long numDigits = 0;\n  \
    \      bool isPrime = true;\n        bool isDigit = false;\n        bool isUpper\
    \ = false;\n        bool isLower = false;\n        bool isSymbol = false;\n  \
    \      bool isUpperSymbol = false;\n        bool isLowerSymbol = false;\n    \
    \    bool isUpperSymbolOrLower = false;\n        bool isDigitOrSymbol = false;\n\
    \        bool isUpperDigitOrSymbol = false;\n        bool isLowerDigitOrSymbol\
    \ = false;\n        bool isUpperDigitOrLowerSymbol = false;\n        bool isUpperDigitOrLowerSymbolOrLower\
    \ = false;\n        bool isUpperDigitOrLowerSymbolOrLowerDigit = false;\n    \
    \    bool isUpperDigitOrLowerSymbolOrLowerDigitOrSymbol = false;\n        bool\
    \ isUpperDigitOrLowerSymbolOrLowerDigitOrSymbolOrUpper = false;\n        bool\
    \ isUpperDigitOrLowerSymbolOrLowerDigitOrSymbolOrUpperOrLower = false;\n     \
    \   bool isUpperDigitOrLowerSymbolOrLowerDigitOrSymbolOrUpperOrLowerOrDigit =\
    \ false;\n        bool isUpperDigitOrLowerSymbolOrLowerDigitOrSymbolOrUpperOrLowerOrDigitOrSymbol\
    \ = false;\n        bool isUpperDigitOrLowerSymbolOrLowerDigitOrSymbolOrUpperOrLowerOrDigitOrSymbolOrUpper\
    \ = false;\n        bool isUpperDigitOrLowerSymbolOrLowerDigitOrSymbolOrUpperOrLowerOrDigitOrSymbolOrUpperOrLower\
    \ = false;\n        bool isUpperDigitOrLowerSymbolOrLowerDigitOrSymbolOrUpperOrLowerOrDigitOrSymbolOrUpperOrLowerOrDigit\
    \ = false;\n        bool isUpperDigitOrLowerSymbolOrLowerDigitOrSymbolOrUpperOrLowerOrDigitOrSymbolOrUpperOrLowerOrDigitOrSymbol\
    \ = false;\n        bool isUpperDigitOrLowerSymbolOrLowerDigitOrSymbolOrUpperOrLowerOrDigitOrSymbolOrUpperOrLowerOrDigitOrSymbolOrUpper\
    \ = false;\n        bool isUpperDigitOrLowerSymbolOrLowerDigitOrSymbolOrUpperOrLowerOrDigitOrSymbolOrUpperOrLowerOrDigitOrSymbolOrUpperOrLower\
    \ = false;\n        bool isUpperDigitOrLowerSymbolOrLowerDigitOrSymbolOrUpperOrLowerOrDigitOrSymbolOrUpperOrLowerOrDigitOrSymbolOrUpperOrLowerOrDigit\
    \ = false;\n        bool isUpperDigitOrLowerSymbolOrLowerDigitOrSymbolOrUpperOrLowerOrDigitOrSymbolOrUpperOrLowerOrDigitOrSymbolOrUpperOrLowerOrDigitOrSymbolOrUpper\
    \ = false;\n        bool isUpperDigitOrLowerSymbolOrLowerDigitOrSymbolOrUpperOrLower\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7urzfa5v.cs(62,73): error CS1002: ; expected

    '
  timestamp: 1659824089
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int d = (int)c;\n            if (d >= '0' &&\
    \ d <= '9') {\n                ret += d * 0x10;\n            } else if (d >= 'A'\
    \ && d <= 'F') {\n                ret += 0x10 + 0xA + (d - 'A');\n           \
    \ } else {\n                throw new Exception(\"Invalid hexadecimal digit: \"\
    \ + d);\n            }\n        }\n        return ret;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n  \
    \  Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2cc9a185e6843128d8e26a7954daf50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2cc9a185e6843128d8e26a7954daf50>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid\
    \ hex digit: \" + c);\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hex digit: A\n\
    \  at Problem.HexKey (System.String num) [0x00040] in <52cefa97344a45fdaeacffd02e9cebc5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <52cefa97344a45fdaeacffd02e9cebc5>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hex digit:\
    \ A\n  at Problem.HexKey (System.String num) [0x00040] in <52cefa97344a45fdaeacffd02e9cebc5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <52cefa97344a45fdaeacffd02e9cebc5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit >= 'A' && digit <=\
    \ 'F') {\n                result += (digit - 'A') * Math.Pow(16, hex.Length -\
    \ 1);\n            } else {\n                result += (digit - '0') * Math.Pow(16,\
    \ hex.Length - 1);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"\
    )) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5ikipos6.cs(36,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5ikipos6.cs(38,17): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F')\
    \ {\n                throw new ArgumentOutOfRangeException(\"HexKey\", \"Hexadecimal\
    \ digit must be between A and F\");\n            }\n            result += (digit\
    \ - 'A') * Math.Pow(16, hex.Length - 1 - hex.IndexOf(c));\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzlhfdoa6.cs(38,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F')\
    \ {\n                throw new ArgumentOutOfRangeException(\"Hex digit must be\
    \ between A and F\");\n            }\n            result += (digit - 'A') * Math.Pow(16,\
    \ hex.Length - 1 - hex.IndexOf(c));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"\
    )) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0gos6xng.cs(38,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824089
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  long digit = 0;\n        string hex = num.ToUpper();\n        foreach (char\
    \ c in hex) {\n            digit = Convert.ToInt64(c);\n            if (digit\
    \ == 11 || digit == 13) {\n                count++;\n            }\n        }\n\
    \        return count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b413a83b3c3c44ab96270c358cacd663>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b413a83b3c3c44ab96270c358cacd663>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824089
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        char[] hexChars = hex.ToCharArray();\n\
    \        foreach (char hexChar in hexChars) {\n            int hexValue = Convert.ToInt32(hexChar);\n\
    \            int decimalValue = hexValue - '0';\n            if (decimalValue\
    \ % 2 == 0) {\n                result += decimalValue;\n            }\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4c31d1301f446758c8d466e939a1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4c31d1301f446758c8d466e939a1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F')\
    \ {\n                throw new ArgumentException(\"Invalid hexadecimal digit.\"\
    );\n            }\n            result += (digit - 'A') * Math.Pow(16, hex.Length\
    \ - 1 - hex.IndexOf(c));\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4f1gqkk7.cs(38,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - 'A';\n  \
    \          if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit: \" + c);\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ac212b345a442aca8708743f41b188b>:0 \n\nUnhandled Exception:\n\
    System.ArgumentException: Invalid hexadecimal digit: 1\n  at Problem.HexKey (System.String\
    \ num) [0x00045] in <2ac212b345a442aca8708743f41b188b>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00015] in <2ac212b345a442aca8708743f41b188b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentException: Invalid hexadecimal digit: 1\n  at Problem.HexKey\
    \ (System.String num) [0x00045] in <2ac212b345a442aca8708743f41b188b>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00015] in <2ac212b345a442aca8708743f41b188b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824088
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int n = (int)c;\n            if (n < '0' || n\
    \ > '9') {\n                continue;\n            }\n            long nn = Convert.ToInt64(num);\n\
    \            long nn = nn * 16 + n;\n            long nnn = nn * 16;\n       \
    \     long nnnn = (nn * 16) * 16;\n            long nnnnn = (nnn * 16) * 16;\n\
    \            long nnnnnn = (nnnn * 16) * 16;\n            long nnnnnnn = (nnnnn\
    \ * 16) * 16;\n            long nnnnnnnn = (nnnnnnn * 16) * 16;\n            long\
    \ nnnnnnnnn = (nnnnnnnnn * 16) * 16;\n            long nnnnnnnnnn = (nnnnnnnnnnn\
    \ * 16) * 16;\n            long nnnnnnnnnnn = (nnnnnnnnnnnnn * 16) * 16;\n   \
    \         long nnnnnnnnnnnn = (nnnnnnnnnnnnnnn * 16) * 16;\n            long nnnnnnnnnnnnn\
    \ = (nnnnnnnnnnnnnnnnn * 16) * 16;\n            long nnnnnnnnnnnnnn = (nnnnnnnnnnnnnnnnnnn\
    \ * 16) * 16;\n            long nnnnnnnnnnnnnnn = (nnnnnnnnnnnnnnnnnnn * 16) *\
    \ 16;\n            long nnnnnnnnnnnnnnn = (nnnnnnnnnnnnnnnnnnn * 16) * 16;\n \
    \           long nnnnnnnnnnnnnnnn = (nnnnnnnnnnnnnnnnnnn * 16) * 16;\n       \
    \     long nnnnnnnnnnnnnnnnn = (nnnnnnnnnnnnnnnnnnnnn * 16) * 16;\n          \
    \  long nnnnnnnnnnnnnnnnnn = (nnnnnnnnnnnnnnnnnnnnn * 16) * 16;\n            long\
    \ nnnnnnnnnnnnnnnnnnn = (nnnnnnnnnnnnnnnnnnnnnnn * 16) * 16;\n            long\
    \ nnnnnnnnnnnnnnnnnnn = (nnnnnnnnnnnnnnnnnnnnnnn * 16) * 16;\n            long\
    \ nnnnnnnnnnnnnnnnnnnn = (nnnnnnnnnnnnnnnnnnnnnnn * 16) * 16;\n            long\
    \ nnnnnnnnnnnnnnnnnnn = (nnnnnnnnnnnnnnnnnnnnnnn * 16) * 16;\n            long\
    \ nnnnnnnnnnnnnnnnnnnn = (nnnn\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf6hscbue.cs(60,46): error CS1026: ) expected

    /tmp/tmpf6hscbue.cs(60,46): error CS1002: ; expected

    /tmp/tmpf6hscbue.cs(62,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpf6hscbue.cs(71,2): error CS1513: } expected

    '
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   long digits = 0;\n        long primes = 0;\n        long hexDigits = 0;\n\
    \        long hexPrimes = 0;\n        long hexPrimeDigits = 0;\n        long hexPrimePrimes\
    \ = 0;\n        long hexPrimePrimeDigits = 0;\n        long hexPrimePrimePrimes\
    \ = 0;\n        long hexPrimePrimePrimeDigits = 0;\n        long hexPrimePrimePrimePrimes\
    \ = 0;\n        long hexPrimePrimePrimePrimeDigits = 0;\n        long hexPrimePrimePrimePrimePrimes\
    \ = 0;\n        long hexPrimePrimePrimePrimePrimeDigits = 0;\n        long hexPrimePrimePrimePrimePrimePrimes\
    \ = 0;\n        long hexPrimePrimePrimePrimePrimePrimeDigits = 0;\n        long\
    \ hexPrimePrimePrimePrimePrimePrimePrimes = 0;\n        long hexPrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n        long hexPrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n     \
    \   long hexPrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long\
    \ hexPrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n        long hexPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n        long hexPrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n\
    \        long hexPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n  \
    \      long hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n    \
    \    long hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n \
    \       long hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes = 0;\n\
    \        long hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n        long hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimes\
    \ = 0;\n        long hexPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3l6ybgw5.cs(53,14): error CS0128: A local variable or function named ''hexPrimePrimePrimePrimePrimePrimePrimePrimePrimes''
    is already defined in this scope

    /tmp/tmp3l6ybgw5.cs(54,14): error CS0128: A local variable or function named ''hexPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits''
    is already defined in this scope

    /tmp/tmp3l6ybgw5.cs(31,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmp3l6ybgw5.cs(32,14): warning CS0219: The variable ''digits'' is assigned
    but its value is never used

    /tmp/tmp3l6ybgw5.cs(33,14): warning CS0219: The variable ''primes'' is assigned
    but its value is never used

    /tmp/tmp3l6ybgw5.cs(34,14): warning CS0219: The variable ''hexDigits'' is assigned
    but its value is never used

    /tmp/tmp3l6ybgw5.cs(35,14): warning CS0219: The variable ''hexPrimes'' is assigned
    but its value is never used

    /tmp/tmp3l6ybgw5.cs(36,14): warning CS0219: The variable ''hexPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmp3l6ybgw5.cs(37,14): warning CS0219: The variable ''hexPrimePrimes'' is
    assigned but its value is never used

    /tmp/tmp3l6ybgw5.cs(38,14): warning CS0219: The variable ''hexPrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp3l6ybgw5.cs(39,14): warning CS0219: The variable ''hexPrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp3l6ybgw5.cs(40,14): warning CS0219: The variable ''hexPrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp3l6ybgw5.cs(41,14): warning CS0219: The variable ''hexPrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp3l6ybgw5.cs(42,14): warning CS0219: The variable ''hexPrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp3l6ybgw5.cs(43,14): warning CS0219: The variable ''hexPrimePrimePrimePrimePrimes''
    is assigned but its value is never used

    /tmp/tmp3l6ybgw5.cs(44,14): warning CS0219: The variable ''hexPrimePrimePrimePrimePri'
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   bool isPrime = true;\n        long prime = 2;\n        long product = 1;\n\
    \        foreach (char c in num) {\n            int digit = c - '0';\n       \
    \     int primeDigit = prime - '0';\n            if (digit == primeDigit) {\n\
    \                isPrime = true;\n                prime++;\n            } else\
    \ {\n                isPrime = false;\n            }\n            product *= digit;\n\
    \        }\n        if (isPrime) {\n            result++;\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaw0oo3k3.cs(37,30): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid\
    \ hex digit: \" + c);\n            }\n            int power = (int)Math.Pow(16,\
    \ digit);\n            if (num.Length > 1) {\n                power = power /\
    \ 2;\n            }\n            result += power;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hex digit: A\n\
    \  at Problem.HexKey (System.String num) [0x00040] in <0f324c6818ab4a07a16a1bad2a6a4544>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0f324c6818ab4a07a16a1bad2a6a4544>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hex digit:\
    \ A\n  at Problem.HexKey (System.String num) [0x00040] in <0f324c6818ab4a07a16a1bad2a6a4544>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0f324c6818ab4a07a16a1bad2a6a4544>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - 'A';\n  \
    \          if (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"\
    Hexadecimal digit must be between 0 and 9\");\n            }\n            long\
    \ power = 1;\n            for (int i = 1; i < digit; i++) {\n                power\
    \ *= (long)Math.Pow(16, i);\n            }\n            result += digit * power;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must\
    \ be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in <a765806719c2443481c8651c31555371>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00015] in <a765806719c2443481c8651c31555371>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit\
    \ must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034] in\
    \ <a765806719c2443481c8651c31555371>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00015] in <a765806719c2443481c8651c31555371>:0 \n"
  stdout: ''
  timestamp: 1659824090
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (digit * digit);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = Convert.ToInt32(c);\n\
    \            if (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"\
    Hexadecimal digit must be between A and F\");\n            }\n            result\
    \ += (digit - 'A') * Math.Pow(16, num.Length - 1);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwomflp13.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824089
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int d = (int)c;\n            if (d >= '0' &&\
    \ d <= '9') {\n                ret += d * 0x30;\n            } else if (d >= 'A'\
    \ && d <= 'F') {\n                ret += d * 0x40 + 0x61;\n            } else\
    \ if (d == 'A' || d == 'B' || d == 'C' || d == 'D' || d == 'E' || d == 'F') {\n\
    \                ret += 0x61;\n            }\n        }\n        return ret;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17501fdc292e4083a6293371735449a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17501fdc292e4083a6293371735449a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid\
    \ hexadecimal digit: \" + c);\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit:\
    \ A\n  at Problem.HexKey (System.String num) [0x00040] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal\
    \ digit: A\n  at Problem.HexKey (System.String num) [0x00040] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <85732041efbd4fcc86611abe2d8c56d9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        string\
    \ hex = num.ToUpper();\n        foreach (char c in hex) {\n            int n =\
    \ Convert.ToInt32(c);\n            int d = n % 16;\n            if (d != 0) {\n\
    \                ret += d;\n            }\n        }\n        return ret;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7803e325880b414d945b15d931226637>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7803e325880b414d945b15d931226637>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824090
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n \
    \           if (digit >= '0' && digit <= '9') {\n                result += (digit\
    \ - '0');\n            }\n            else if (digit == 'A') {\n             \
    \   result += (10 - 'A');\n            }\n            else if (digit == 'B') {\n\
    \                result += (11 - 'A');\n            }\n            else if (digit\
    \ == 'C') {\n                result += (12 - 'A');\n            }\n          \
    \  else if (digit == 'D') {\n                result += (13 - 'A');\n         \
    \   }\n            else if (digit == 'E') {\n                result += (14 - 'A');\n\
    \            }\n            else if (digit == 'F') {\n                result +=\
    \ (15 - 'A');\n            }\n            else {\n                throw new Exception(\"\
    Invalid hexadecimal digit\");\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c0afa825b4c4ea7816d3dfc25f06735>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c0afa825b4c4ea7816d3dfc25f06735>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824090
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - '0';\n  \
    \          if (digit >= 2 && digit <= 9) {\n                result += digit *\
    \ digit;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dfe2c3891884e5abed9fbdfd7f27cb3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dfe2c3891884e5abed9fbdfd7f27cb3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numDigits = num.Length;\n\
    \        long numPrimes = 0;\n        long numPrimeDigits = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits = numDigits;\n        long numPrimeDigits2 = 0;\n\
    \        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n      \
    \  long numPrimeDigits = numDigits;\n        long numPrimeDigits2 = 0;\n     \
    \   long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long\
    \ numPrimeDigits = numDigits;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits\
    \ = numDigits;\n        long numPrimeDigits2 = 0;\n        long numPrimeDigits3\
    \ = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits = numDigits;\n\
    \        long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n      \
    \  long numPrimeDigits4 = 0;\n        long numPrimeDigits = numDigits;\n     \
    \   long numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n        long\
    \ numPrimeDigits4 = 0;\n        long numPrimeDigits = numDigits;\n        long\
    \ numPrimeDigits2 = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4\
    \ = 0;\n        long numPrimeDigits = numDigits;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits = numDigits;\n        long numPrimeDigits2 = 0;\n\
    \        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n      \
    \  long numPrimeDigits = numDigits;\n        long numPrimeDigits2 = 0;\n     \
    \   long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long\
    \ numPrimeDigits = numDigits;\n        long numPrimeDigits2 = 0;\n        long\
    \ numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n        long numPrimeDigits\
    \ = numDigits;\n        long numPrimeDigits2 = 0;\n        long numPrimeDigits3\
    \ = 0;\n        long numPrimeDigits4 = 0;\n        long numPri\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp06w38zbv.cs(85,20): error CS1002: ; expected

    '
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long num2 = 0;\n       \
    \ long num3 = 0;\n        long num4 = 0;\n        long num5 = 0;\n        long\
    \ num6 = 0;\n        long num7 = 0;\n        long num8 = 0;\n        long num9\
    \ = 0;\n        long num10 = 0;\n        long num11 = 0;\n        long num12 =\
    \ 0;\n        long num13 = 0;\n        long num14 = 0;\n        long num15 = 0;\n\
    \        long num16 = 0;\n        long num17 = 0;\n        long num18 = 0;\n \
    \       long num19 = 0;\n        long num20 = 0;\n        long num21 = 0;\n  \
    \      long num22 = 0;\n        long num23 = 0;\n        long num24 = 0;\n   \
    \     long num25 = 0;\n        long num26 = 0;\n        long num27 = 0;\n    \
    \    long num28 = 0;\n        long num29 = 0;\n        long num30 = 0;\n     \
    \   long num31 = 0;\n        long num32 = 0;\n        long num33 = 0;\n      \
    \  long num34 = 0;\n        long num35 = 0;\n        long num36 = 0;\n       \
    \ long num37 = 0;\n        long num38 = 0;\n        long num39 = 0;\n        long\
    \ num40 = 0;\n        long num41 = 0;\n        long num42 = 0;\n        long num43\
    \ = 0;\n        long num44 = 0;\n        long num45 = 0;\n        long num46 =\
    \ 0;\n        long num47 = 0;\n        long num48 = 0;\n        long num49 = 0;\n\
    \        long num50 = 0;\n        long num51 = 0;\n        long num52 = 0;\n \
    \       long num53 = 0;\n        long num54 = 0;\n        long num55 = 0;\n  \
    \      long num56 = 0;\n        long num57 = 0;\n        long num58 = 0;\n   \
    \     long num59 = 0;\n        long num60 = 0;\n        long num61 = 0;\n    \
    \    long num62 = 0;\n        long num63 = 0;\n        long num64 = 0;\n     \
    \   long num65 = 0;\n        long num66 = 0;\n        long num67 = 0;\n      \
    \  long num68 = 0;\n        long num69 = 0;\n        long num70 = 0;\n       \
    \ long num71 = 0;\n        long num72 = 0;\n        long num73 = 0;\n        long\
    \ num74 = 0;\n        long num75 = 0;\n        long num76 = 0;\n        long num77\
    \ = 0;\n        long num78 = 0;\n        long num79 = 0;\n        long num80 =\
    \ 0;\n        long num81 = 0;\n        long num82 = 0;\n        long num83 = 0;\n\
    \        long num84 = 0;\n        long num85 = 0;\n        long num86 = 0;\n \
    \       long num87 = 0;\n\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpafikpamk.cs(31,14): warning CS0219: The variable ''num2'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(32,14): warning CS0219: The variable ''num3'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(33,14): warning CS0219: The variable ''num4'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(34,14): warning CS0219: The variable ''num5'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(35,14): warning CS0219: The variable ''num6'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(36,14): warning CS0219: The variable ''num7'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(37,14): warning CS0219: The variable ''num8'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(38,14): warning CS0219: The variable ''num9'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(39,14): warning CS0219: The variable ''num10'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(40,14): warning CS0219: The variable ''num11'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(41,14): warning CS0219: The variable ''num12'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(42,14): warning CS0219: The variable ''num13'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(43,14): warning CS0219: The variable ''num14'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(44,14): warning CS0219: The variable ''num15'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(45,14): warning CS0219: The variable ''num16'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(46,14): warning CS0219: The variable ''num17'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(47,14): warning CS0219: The variable ''num18'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(48,14): warning CS0219: The variable ''num19'' is assigned
    but its value is never used

    /tmp/tmpafikpamk.cs(49,14): warning CS0'
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = Convert.ToInt32(c);\n\
    \            if (digit < 'A' || digit > 'F') {\n                throw new ArgumentException(\"\
    Hexadecimal digit must be between A and F\");\n            }\n            result\
    \ += (digit - 'A') * Math.Pow(16, num.Length - 1);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwomflp13.cs(37,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int n = (int)c;\n            if (n < 10)\n  \
    \              ret += n * n;\n            else if (n < 16)\n                ret\
    \ += n * n * n;\n            else if (n < 26)\n                ret += n * n *\
    \ n * n * n;\n            else if (n < 36)\n                ret += n * n * n *\
    \ n * n * n;\n            else if (n < 46)\n                ret += n * n * n *\
    \ n * n * n * n;\n            else if (n < 56)\n                ret += n * n *\
    \ n * n * n * n * n * n;\n            else if (n < 66)\n                ret +=\
    \ n * n * n * n * n * n * n * n * n;\n            else if (n < 76)\n         \
    \       ret += n * n * n * n * n * n * n * n * n * n;\n            else if (n\
    \ < 86)\n                ret += n * n * n * n * n * n * n * n * n * n * n;\n \
    \           else if (n < 96)\n                ret += n * n * n * n * n * n * n\
    \ * n * n * n * n * n;\n            else if (n < 106)\n                ret +=\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n;\n            else if (n <\
    \ 114)\n                ret += n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n;\n            else if (n < 122)\n                ret += n * n * n * n\
    \ * n * n * n * n * n * n * n * n * n * n * n;\n            else if (n < 130)\n\
    \                ret += n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n;\n            else if (n < 138)\n                ret += n * n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n;\n            else if (n < 146)\n\
    \                ret += n * n * n * n * n * n * n * n * n * n * n * n * n * n\
    \ * n * n;\n            else if (n < 154)\n                ret += n * n * n *\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n;\n            else if (n <\
    \ 162)\n                ret += n * n * n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n;\n            else if (n < 170)\n                ret += n\
    \ * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n            else\
    \ if (n < 178)\n                ret += n * n * n * n * n * n * n * n * n * n *\
    \ n * n * n * n * n * n;\n            else if (n < 186)\n                ret +=\
    \ n * n * n * n * n * n * n * n * n * n * n * n * n * n * n * n;\n           \
    \ else if (n < 194)\n                ret += n * n * n * n * n * n * n * n * n\
    \ * n * n * n * n * n * n * n;\n            else if (n < 202)\n              \
    \  ret += n * n * n * n * n * n * n * n * n * n * \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyz6wrjrt.cs(79,63): error CS1525: Invalid expression term ''}''

    /tmp/tmpyz6wrjrt.cs(79,63): error CS1002: ; expected

    /tmp/tmpyz6wrjrt.cs(81,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpyz6wrjrt.cs(90,2): error CS1513: } expected

    '
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   bool isPrime = true;\n        foreach (char c in num) {\n            int digit\
    \ = Convert.ToInt32(c);\n            if (digit < 0 || digit > 9) {\n         \
    \       throw new ArgumentOutOfRangeException(\"HexKey\", \"The input string contains\
    \ invalid characters.\");\n            }\n            int digitValue = digit -\
    \ '0';\n            if (isPrime) {\n                if (digitValue % 2 == 0) {\n\
    \                    isPrime = false;\n                }\n            }\n    \
    \        else {\n                if (digitValue % 3 == 0) {\n                \
    \    isPrime = true;\n                }\n            }\n            if (isPrime)\
    \ {\n                result += (long)Math.Pow(digitValue, 2);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: The input string\
    \ contains invalid characters.\nParameter name: HexKey\n  at Problem.HexKey (System.String\
    \ num) [0x00038] in <221bed12bae4467f9e12e95b41b6e31f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <221bed12bae4467f9e12e95b41b6e31f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: The input string contains invalid\
    \ characters.\nParameter name: HexKey\n  at Problem.HexKey (System.String num)\
    \ [0x00038] in <221bed12bae4467f9e12e95b41b6e31f>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <221bed12bae4467f9e12e95b41b6e31f>:0 \n"
  stdout: ''
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int digit = c - '0';\n            if (digit <\
    \ 0 || digit > 9) {\n                throw new ArgumentException(\"Invalid hexadecimal\
    \ digit: \" + c);\n            }\n            int power = (int)Math.Pow(16, digit);\n\
    \            long pow = Convert.ToInt64(Math.Pow(16, digit));\n            long\
    \ sum = 0;\n            for (int i = 0; i < digit; i++) {\n                sum\
    \ += Convert.ToInt64(Math.Pow(16, i));\n            }\n            long mult =\
    \ Convert.ToInt64(Math.Pow(16, digit - 1));\n            long product = Convert.ToInt64(Math.Pow(16,\
    \ digit - 1));\n            while (mult <= pow) {\n                product *=\
    \ mult;\n                mult += Convert.ToInt64(Math.Pow(16, digit - 1));\n \
    \           }\n            long div = Convert.ToInt64(Math.Pow(16, digit - 1));\n\
    \            while (product >= pow) {\n                product /= div;\n     \
    \           div += Convert.ToInt64(Math.Pow(16, digit - 1));\n            }\n\
    \            if (mult > pow) {\n                mult -= pow;\n            }\n\
    \            if (product > pow) {\n                product -= pow;\n         \
    \   }\n            long result = mult * product / div;\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n                result -= pow;\n            }\n            if (result\
    \ > pow) {\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn8qjp8i8.cs(118,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpn8qjp8i8.cs(127,2): error CS1513: } expected

    '
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numPrimes = 0;\n  \
    \      long numDigits = 0;\n        long numPrimeDigits = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits5 = 0;\n        long numPrimeDigits6 = 0;\n      \
    \  long numPrimeDigits7 = 0;\n        long numPrimeDigits8 = 0;\n        long\
    \ numPrimeDigits9 = 0;\n        long numPrimeDigits10 = 0;\n        long numPrimeDigits11\
    \ = 0;\n        long numPrimeDigits12 = 0;\n        long numPrimeDigits13 = 0;\n\
    \        long numPrimeDigits14 = 0;\n        long numPrimeDigits15 = 0;\n    \
    \    long numPrimeDigits16 = 0;\n        long numPrimeDigits17 = 0;\n        long\
    \ numPrimeDigits18 = 0;\n        long numPrimeDigits19 = 0;\n        long numPrimeDigits20\
    \ = 0;\n        long numPrimeDigits21 = 0;\n        long numPrimeDigits22 = 0;\n\
    \        long numPrimeDigits23 = 0;\n        long numPrimeDigits24 = 0;\n    \
    \    long numPrimeDigits25 = 0;\n        long numPrimeDigits26 = 0;\n        long\
    \ numPrimeDigits27 = 0;\n        long numPrimeDigits28 = 0;\n        long numPrimeDigits29\
    \ = 0;\n        long numPrimeDigits30 = 0;\n        long numPrimeDigits31 = 0;\n\
    \        long numPrimeDigits32 = 0;\n        long numPrimeDigits33 = 0;\n    \
    \    long numPrimeDigits34 = 0;\n        long numPrimeDigits35 = 0;\n        long\
    \ numPrimeDigits36 = 0;\n        long numPrimeDigits37 = 0;\n        long numPrimeDigits38\
    \ = 0;\n        long numPrimeDigits39 = 0;\n        long numPrimeDigits40 = 0;\n\
    \        long numPrimeDigits41 = 0;\n        long numPrimeDigits42 = 0;\n    \
    \    long numPrimeDigits43 = 0;\n        long numPrimeDigits44 = 0;\n        long\
    \ numPrimeDigits45 = 0;\n        long numPrimeDigits46 = 0;\n        long numPrimeDigits47\
    \ = 0;\n        long numPrimeDigits48 = 0;\n        long numPrimeDigits49 = 0;\n\
    \        long numPrimeDigits50 = 0;\n        long numPrime\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv9j5xrpi.cs(83,22): error CS1002: ; expected

    '
  timestamp: 1659824089
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  long digit = 0;\n        bool isPrime = true;\n        bool isHex = false;\n\
    \        foreach (char c in num) {\n            if (char.IsDigit(c)) {\n     \
    \           digit = Convert.ToInt64(c);\n                isHex = true;\n     \
    \       }\n            else if (char.IsUpper(c)) {\n                isHex = false;\n\
    \            }\n            else if (char.IsUpper(c)) {\n                isPrime\
    \ = false;\n            }\n            else {\n                isPrime = true;\n\
    \            }\n            if (isPrime && digit % 2 == 0) {\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a150760708243249f6e87c762c1c59a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7a150760708243249f6e87c762c1c59a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824090
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   long digit = 0;\n        long prime = 2;\n        long product = 1;\n    \
    \    bool isPrime = true;\n        foreach (char c in num) {\n            digit\
    \ = Convert.ToInt64(c);\n            product *= digit;\n        }\n        result\
    \ += (product % prime);\n        prime = 3;\n        product = 1;\n        isPrime\
    \ = true;\n        foreach (char c in num) {\n            digit = Convert.ToInt64(c);\n\
    \            product *= digit;\n            if (product % prime == 0) {\n    \
    \            isPrime = false;\n            }\n        }\n        if (isPrime)\
    \ {\n            result += (product % prime);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adafb9f86bb0408a89489311af9edac4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adafb9f86bb0408a89489311af9edac4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        long\
    \ sum = 0;\n        string hex = num.ToUpper();\n        foreach (char c in hex)\
    \ {\n            int num = Convert.ToInt32(c);\n            sum += num;\n    \
    \    }\n        long num2 = sum;\n        long num3 = num2;\n        long num4\
    \ = num3;\n        long num5 = num4;\n        long num6 = num5;\n        long\
    \ num7 = num6;\n        long num8 = num7;\n        long num9 = num8;\n       \
    \ long num10 = num9;\n        long num11 = num10;\n        long num12 = num11;\n\
    \        long num13 = num12;\n        long num14 = num13;\n        long num15\
    \ = num14;\n        long num16 = num15;\n        long num17 = num16;\n       \
    \ long num18 = num17;\n        long num19 = num18;\n        long num20 = num19;\n\
    \        long num21 = num20;\n        long num22 = num21;\n        long num23\
    \ = num22;\n        long num24 = num23;\n        long num25 = num24;\n       \
    \ long num26 = num25;\n        long num27 = num26;\n        long num28 = num27;\n\
    \        long num29 = num28;\n        long num30 = num29;\n        long num31\
    \ = num30;\n        long num32 = num31;\n        long num33 = num32;\n       \
    \ long num34 = num33;\n        long num35 = num34;\n        long num36 = num35;\n\
    \        long num37 = num36;\n        long num38 = num37;\n        long num39\
    \ = num38;\n        long num40 = num39;\n        long num41 = num40;\n       \
    \ long num42 = num41;\n        long num43 = num42;\n        long num44 = num43;\n\
    \        long num45 = num44;\n        long num46 = num45;\n        long num47\
    \ = num46;\n        long num48 = num47;\n        long num49 = num48;\n       \
    \ long num50 = num49;\n        long num51 = num50;\n        long num52 = num51;\n\
    \        long num53 = num52;\n        long num54 = num53;\n        long num55\
    \ = num54;\n        long num56 = num55;\n        long num57\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n\
    \    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwc9sfcxd.cs(93,19): error CS1002: ; expected

    '
  timestamp: 1659824089
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F')\
    \ {\n                throw new ArgumentOutOfRangeException(\"Invalid hexadecimal\
    \ digit: \" + c);\n            }\n            result += (digit - 'A') * Math.Pow(16,\
    \ hex.Length - 1 - hex.IndexOf(c));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\"\
    )) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpczrl7j_m.cs(38,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824090
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int d = (int)c;\n       \
    \     if (d >= '0' && d <= '9') {\n                result += (long)Math.Pow(16,\
    \ (int)c - '0');\n            }\n            if (d >= 'A' && d <= 'F') {\n   \
    \             result += (long)Math.Pow(16, (int)c - 'A' + 10);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <118dba517e4c467280c5c3fac2ca700b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <118dba517e4c467280c5c3fac2ca700b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hex\
    \ digits must be between 0 and 9\");\n            }\n            result += (long)Math.Pow(16,\
    \ digit);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hex digits must be between\
    \ 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <dde7ef85fcb140b48c985aa733a20021>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <dde7ef85fcb140b48c985aa733a20021>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hex digits must\
    \ be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <dde7ef85fcb140b48c985aa733a20021>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <dde7ef85fcb140b48c985aa733a20021>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824090
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (digit * digit);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int d = (int)c;\n            if (d >= '0' &&\
    \ d <= '9') {\n                ret += d * 10;\n            } else if (d >= 'A'\
    \ && d <= 'F') {\n                ret += 10 + d - 'A';\n            }\n      \
    \  }\n        return ret;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <175ff44308a44183bcd3c6a0e3df0d36>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <175ff44308a44183bcd3c6a0e3df0d36>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824090
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num.ToUpper()) {\n            int d = (int)c;\n            if (d\
    \ >= '0' && d <= '9') {\n                ret += d;\n            } else if (d >=\
    \ 'A' && d <= 'F') {\n                ret += d - 'A' + 10;\n            } else\
    \ {\n                throw new ArgumentException(\"Invalid input\");\n       \
    \     }\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67f607a3cb674006a45f579e088f11a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67f607a3cb674006a45f579e088f11a0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int digit = Convert.ToInt32(c);\n           \
    \ if (digit < '0' || digit > '9') {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n            int digitValue = (int)digit;\n\
    \            int digitCount = 1;\n            while (digitValue > 1) {\n     \
    \           digitValue /= 10;\n                digitCount++;\n            }\n\
    \            int digitPrime = digitValue % 2 == 0 ? 2 : 3;\n            int digitPrimeCount\
    \ = 1;\n            while (digitPrime > 1) {\n                digitPrime /= 10;\n\
    \                digitPrimeCount++;\n            }\n            int digitPrimePrime\
    \ = digitPrime % 2 == 0 ? 2 : 3;\n            int digitPrimePrimeCount = 1;\n\
    \            while (digitPrimePrime > 1) {\n                digitPrimePrime /=\
    \ 10;\n                digitPrimePrimeCount++;\n            }\n            if\
    \ (digitPrimeCount == digitPrimePrimeCount) {\n                ret += digitPrimePrime;\n\
    \            }\n        }\n        return ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Invalid hexadecimal digit.\n\
    \  at Problem.HexKey (System.String num) [0x00035] in <6f5c1a2eada44f409faf5269eabd2754>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <6f5c1a2eada44f409faf5269eabd2754>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Invalid hexadecimal\
    \ digit.\n  at Problem.HexKey (System.String num) [0x00035] in <6f5c1a2eada44f409faf5269eabd2754>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <6f5c1a2eada44f409faf5269eabd2754>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - '0';\n  \
    \          if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\", \"HexKey only accepts hexadecimal digits (0-9)\");\n            }\n   \
    \         int power = (int)Math.Pow(16, digit);\n            result += power;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: HexKey only\
    \ accepts hexadecimal digits (0-9)\nParameter name: num\n  at Problem.HexKey (System.String\
    \ num) [0x00034] in <117d9063bb574dd7acd1dc4071fe1645>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <117d9063bb574dd7acd1dc4071fe1645>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: HexKey only accepts hexadecimal\
    \ digits (0-9)\nParameter name: num\n  at Problem.HexKey (System.String num) [0x00034]\
    \ in <117d9063bb574dd7acd1dc4071fe1645>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <117d9063bb574dd7acd1dc4071fe1645>:0 \n"
  stdout: ''
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int digit = c - '0';\n            if (digit >\
    \ 9) {\n                throw new ArgumentException(\"Invalid hexadecimal digit.\"\
    );\n            }\n            int digit2 = digit % 10;\n            int digit3\
    \ = digit / 10;\n            if (digit2 == 2 && digit3 == 2) {\n             \
    \   ret += 2;\n            } else if (digit2 == 3 && digit3 == 2) {\n        \
    \        ret += 3;\n            } else if (digit2 == 5 && digit3 == 2) {\n   \
    \             ret += 5;\n            } else if (digit2 == 7 && digit3 == 2) {\n\
    \                ret += 7;\n            } else if (digit2 == 11 && digit3 == 2)\
    \ {\n                ret += 11;\n            } else if (digit2 == 13 && digit3\
    \ == 2) {\n                ret += 13;\n            } else if (digit2 == 17 &&\
    \ digit3 == 2) {\n                ret += 17;\n            } else if (digit2 ==\
    \ 19 && digit3 == 2) {\n                ret += 19;\n            } else if (digit2\
    \ == 23 && digit3 == 2) {\n                ret += 23;\n            } else if (digit2\
    \ == 29 && digit3 == 2) {\n                ret += 29;\n            } else if (digit2\
    \ == 37 && digit3 == 2) {\n                ret += 37;\n            } else if (digit2\
    \ == 41 && digit3 == 2) {\n                ret += 41;\n            } else if (digit2\
    \ == 43 && digit3 == 2) {\n                ret += 43;\n            } else if (digit2\
    \ == 47 && digit3 == 2) {\n                ret += 47;\n            } else if (digit2\
    \ == 53 && digit3 == 2) {\n                ret += 53;\n            } else if (digit2\
    \ == 59 && digit3 == 2) {\n                ret += 59;\n            } else if (digit2\
    \ == 63 && digit3 == 2) {\n                ret += 63;\n            } else if (digit2\
    \ == 67 && digit3 == 2) {\n                ret += 67;\n            } else if (digit2\
    \ == 71 && digit3 == 2) {\n                ret += 71;\n            } else if (digit2\
    \ == 73 && digit3 == 2) {\n                ret += 73;\n            } else if (digit2\
    \ == 79 && digit3 == 2) {\n                ret += 79;\n            } else if (digit2\
    \ == 83 && digit3 == 2) {\n                ret += 83;\n            } else if (digit2\
    \ == 89 && digit3 == 2) {\n                ret += 89;\n            } else if (digit2\
    \ == 97 && digit3 == 2) {\n                ret += 97;\n            } else if (digit2\
    \ == 101 && digit3 == 2) {\n                ret += 101;\n            } else if\
    \ (digit2 == 103 && digit3 == 2) {\n                ret += 103;\n            }\
    \ else if (digit2 == 107 && digit3 == 2) {\n                ret += 107;\n    \
    \        } else if (digit2 == 109 && digit3 == 2) {\n                ret += 109;\n\
    \            } else if (digit2 == 113 && digit3 == 2) {\n                ret +=\
    \ 113;\n            } else if (digit2 == 117 && digit3 == 2) {\n             \
    \   ret += 117;\n            } else if (digit2 == 121 && \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n  \
    \  Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphxzh6uuv.cs(99,40): error CS1525: Invalid expression term ''}''

    /tmp/tmphxzh6uuv.cs(99,40): error CS1026: ) expected

    /tmp/tmphxzh6uuv.cs(99,40): error CS1002: ; expected

    /tmp/tmphxzh6uuv.cs(101,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmphxzh6uuv.cs(110,2): error CS1513: } expected

    '
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        char[] hexChars = hex.ToCharArray();\n\
    \        foreach (char hexChar in hexChars) {\n            int hexDigit = hexChar\
    \ - '0';\n            if (hexDigit % 2 == 0) {\n                result += hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit * hexDigit\
    \ * \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz5_ta399.cs(37,1269): error CS1525: Invalid expression term ''}''

    /tmp/tmpz5_ta399.cs(37,1269): error CS1002: ; expected

    /tmp/tmpz5_ta399.cs(39,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpz5_ta399.cs(48,2): error CS1513: } expected

    '
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit < 'A' || digit > 'F')\
    \ {\n                throw new ArgumentOutOfRangeException(\"HexKey\", \"The input\
    \ string contains invalid hexadecimal digit.\");\n            }\n            int\
    \ digit2 = digit - 'A';\n            int digit3 = digit2 - 'A';\n            int\
    \ digit4 = digit3 - 'A';\n            int digit5 = digit4 - 'A';\n           \
    \ int digit6 = digit5 - 'A';\n            int digit7 = digit6 - 'A';\n       \
    \     int digit8 = digit7 - 'A';\n            int digit9 = digit8 - 'A';\n   \
    \         int digit10 = digit9 - 'A';\n            int digit11 = digit10 - 'A';\n\
    \            int digit12 = digit11 - 'A';\n            int digit13 = digit12 -\
    \ 'A';\n            int digit14 = digit13 - 'A';\n            int digit15 = digit14\
    \ - 'A';\n            int digit16 = digit15 - 'A';\n            int digit17 =\
    \ digit16 - 'A';\n            int digit18 = digit17 - 'A';\n            int digit19\
    \ = digit18 - 'A';\n            int digit20 = digit19 - 'A';\n            int\
    \ digit21 = digit20 - 'A';\n            int digit22 = digit21 - 'A';\n       \
    \     int digit23 = digit22 - 'A';\n            int digit24 = digit23 - 'A';\n\
    \            int digit25 = digit24 - 'A';\n            int digit26 = digit25 -\
    \ 'A';\n            int digit27 = digit26 - 'A';\n            int digit28 = digit27\
    \ - 'A';\n            int digit29 = digit28 - 'A';\n            int digit30 =\
    \ digit29 - 'A';\n            int digit31 = digit30 - 'A';\n            int digit32\
    \ = digit31 - 'A';\n            int digit33 = digit32 - 'A';\n            int\
    \ digit34 = digit33 - 'A';\n            int digit35 = digit34 - 'A';\n       \
    \     int digit36 = digit35 - 'A';\n            int digit37 = digit36 - 'A';\n\
    \            int digit38 = digit37 - 'A';\n            int digit39 = digit38 -\
    \ 'A';\n            int digit\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp5xigg1c.cs(76,22): error CS1002: ; expected

    /tmp/tmpp5xigg1c.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpp5xigg1c.cs(87,2): error CS1513: } expected

    '
  timestamp: 1659824090
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n \
    \           result += (digit % 2 == 0) ? digit : digit + 1;\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <18c7242ff4984136ad2ce482515949c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <18c7242ff4984136ad2ce482515949c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numDigits = num.Length;\n\
    \        long numPrimes = 0;\n        long numPrimes2 = 0;\n        long numPrimes3\
    \ = 0;\n        long numPrimes4 = 0;\n        long numPrimes5 = 0;\n        long\
    \ numPrimes6 = 0;\n        long numPrimes7 = 0;\n        long numPrimes8 = 0;\n\
    \        long numPrimes9 = 0;\n        long numPrimes10 = 0;\n        long numPrimes11\
    \ = 0;\n        long numPrimes12 = 0;\n        long numPrimes13 = 0;\n       \
    \ long numPrimes14 = 0;\n        long numPrimes15 = 0;\n        long numPrimes16\
    \ = 0;\n        long numPrimes17 = 0;\n        long numPrimes18 = 0;\n       \
    \ long numPrimes19 = 0;\n        long numPrimes20 = 0;\n        long numPrimes21\
    \ = 0;\n        long numPrimes22 = 0;\n        long numPrimes23 = 0;\n       \
    \ long numPrimes24 = 0;\n        long numPrimes25 = 0;\n        long numPrimes26\
    \ = 0;\n        long numPrimes27 = 0;\n        long numPrimes28 = 0;\n       \
    \ long numPrimes29 = 0;\n        long numPrimes30 = 0;\n        long numPrimes31\
    \ = 0;\n        long numPrimes32 = 0;\n        long numPrimes33 = 0;\n       \
    \ long numPrimes34 = 0;\n        long numPrimes35 = 0;\n        long numPrimes36\
    \ = 0;\n        long numPrimes37 = 0;\n        long numPrimes38 = 0;\n       \
    \ long numPrimes39 = 0;\n        long numPrimes40 = 0;\n        long numPrimes41\
    \ = 0;\n        long numPrimes42 = 0;\n        long numPrimes43 = 0;\n       \
    \ long numPrimes44 = 0;\n        long numPrimes45 = 0;\n        long numPrimes46\
    \ = 0;\n        long numPrimes47 = 0;\n        long numPrimes48 = 0;\n       \
    \ long numPrimes49 = 0;\n        long numPrimes50 = 0;\n        long numPrimes51\
    \ = 0;\n        long numPrimes52 = 0;\n        long numPrimes53 = 0;\n       \
    \ long numPrimes54 = 0;\n        long numPrimes55 = 0;\n        long numPrimes56\
    \ = 0;\n        long numPrimes57 = 0;\n        long numPrimes58 = 0;\n       \
    \ long numPrimes59 = 0;\n        long numPrimes60 = 0;\n        long numPrimes61\
    \ = 0;\n        long numPrimes62 = 0;\n        long numPrimes63 = 0;\n       \
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkb36qu2b.cs(32,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(33,14): warning CS0219: The variable ''numPrimes2'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(34,14): warning CS0219: The variable ''numPrimes3'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(35,14): warning CS0219: The variable ''numPrimes4'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(36,14): warning CS0219: The variable ''numPrimes5'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(37,14): warning CS0219: The variable ''numPrimes6'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(38,14): warning CS0219: The variable ''numPrimes7'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(39,14): warning CS0219: The variable ''numPrimes8'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(40,14): warning CS0219: The variable ''numPrimes9'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(41,14): warning CS0219: The variable ''numPrimes10'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(42,14): warning CS0219: The variable ''numPrimes11'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(43,14): warning CS0219: The variable ''numPrimes12'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(44,14): warning CS0219: The variable ''numPrimes13'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(45,14): warning CS0219: The variable ''numPrimes14'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(46,14): warning CS0219: The variable ''numPrimes15'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(47,14): warning CS0219: The variable ''numPrimes16'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(48,14): warning CS0219: The variable ''numPrimes17'' is assigned
    but its value is never used

    /tmp/tmpkb36qu2b.cs(49,14): warning CS0219: '
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int digit = c - '0';\n            if (digit <\
    \ 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            long power = 1;\n            for (int i =\
    \ 0; i < digit; i++) {\n                power *= (long)Math.Pow(16, i);\n    \
    \        }\n            if (power == 1) {\n                ret += power;\n   \
    \         } else {\n                ret += power * digit;\n            }\n   \
    \     }\n        return ret;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x00032] in <0e07d6b356d24fd8ae5c4560505b11bf>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <0e07d6b356d24fd8ae5c4560505b11bf>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x00032] in <0e07d6b356d24fd8ae5c4560505b11bf>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <0e07d6b356d24fd8ae5c4560505b11bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentException(\"Hexadecimal\
    \ digit must be between 0 and 9\");\n            }\n            int power = (int)Math.Pow(16,\
    \ digit);\n            result += power;\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hexadecimal digit must\
    \ be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in <dc30e247ced54256a30e8ec2712763a5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <dc30e247ced54256a30e8ec2712763a5>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hexadecimal digit\
    \ must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0002f] in\
    \ <dc30e247ced54256a30e8ec2712763a5>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00001] in <dc30e247ced54256a30e8ec2712763a5>:0 \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit >= '0' && digit <=\
    \ '9') {\n                result += digit - '0';\n            }\n            else\
    \ if (digit >= 'A' && digit <= 'F') {\n                result += digit - 'A' +\
    \ 10;\n            }\n            else {\n                throw new ArgumentException(\"\
    Invalid hexadecimal digit.\");\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a161ce73f30f4d2ebdfe5b8370feaa4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a161ce73f30f4d2ebdfe5b8370feaa4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824090
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (long)Math.Pow(digit,\
    \ 2);\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n  \
    \  Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\"\
    )) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fd6d30e4d4d4dcb8495fff8885a8138>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fd6d30e4d4d4dcb8495fff8885a8138>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - 'A';\n  \
    \          if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            result += (long)Math.Pow(16, digit);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f96f8ef755de40cf98354f92dee21d06>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Specified argument was out of the range of\
    \ valid values.\nParameter name: num\n  at Problem.HexKey (System.String num)\
    \ [0x00034] in <f96f8ef755de40cf98354f92dee21d06>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00015] in <f96f8ef755de40cf98354f92dee21d06>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentOutOfRangeException: Specified argument was out of\
    \ the range of valid values.\nParameter name: num\n  at Problem.HexKey (System.String\
    \ num) [0x00034] in <f96f8ef755de40cf98354f92dee21d06>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00015] in <f96f8ef755de40cf98354f92dee21d06>:0 \n"
  stdout: ''
  timestamp: 1659824090
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n \
    \           if (digit >= '0' && digit <= '9') {\n                result += digit\
    \ - '0';\n            }\n            else if (digit == 'A') {\n              \
    \  result += 11;\n            }\n            else if (digit == 'B') {\n      \
    \          result += 13;\n            }\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be54ebdbb1924a35ac4c46e37d48999f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be54ebdbb1924a35ac4c46e37d48999f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            result += (long)Math.Pow(16, digit);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <00bf384176d843d0810856b2ff295163>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <00bf384176d843d0810856b2ff295163>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <00bf384176d843d0810856b2ff295163>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <00bf384176d843d0810856b2ff295163>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        foreach\
    \ (char c in num) {\n            int digit = c - '0';\n            if (digit <\
    \ 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            long power = 1;\n            for (int i =\
    \ 1; i < digit; i++) {\n                power *= (long)Math.Pow(digit, i);\n \
    \           }\n            if (power == 1) {\n                ret += power;\n\
    \            }\n        }\n        return ret;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <0d9c8b30090f4a18bc6c224e7f249ca1>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <0d9c8b30090f4a18bc6c224e7f249ca1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <0d9c8b30090f4a18bc6c224e7f249ca1>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <0d9c8b30090f4a18bc6c224e7f249ca1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824090
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (digit * digit);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (digit * digit);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   long sum = 0;\n        foreach (char c in num) {\n            int digit =\
    \ c - '0';\n            sum += digit * Math.Pow(16, digit);\n        }\n     \
    \   long num = sum;\n        long num2 = num % 10;\n        long num3 = num /\
    \ 10;\n        long num4 = num % 10;\n        long num5 = num / 10;\n        long\
    \ num6 = num % 10;\n        long num7 = num / 10;\n        long num8 = num % 10;\n\
    \        long num9 = num / 10;\n        long num10 = num % 10;\n        long num11\
    \ = num / 10;\n        long num12 = num % 10;\n        long num13 = num / 10;\n\
    \        long num14 = num % 10;\n        long num15 = num / 10;\n        long\
    \ num16 = num % 10;\n        long num17 = num / 10;\n        long num18 = num\
    \ % 10;\n        long num19 = num / 10;\n        long num20 = num % 10;\n    \
    \    long num21 = num / 10;\n        long num22 = num % 10;\n        long num23\
    \ = num / 10;\n        long num24 = num % 10;\n        long num25 = num / 10;\n\
    \        long num26 = num % 10;\n        long num27 = num / 10;\n        long\
    \ num28 = num % 10;\n        long num29 = num / 10;\n        long num30 = num\
    \ % 10;\n        long num31 = num / 10;\n        long num32 = num % 10;\n    \
    \    long num33 = num / 10;\n        long num34 = num % 10;\n        long num35\
    \ = num / 10;\n        long num36 = num % 10;\n        long num37 = num / 10;\n\
    \        long num38 = num % 10;\n        long num39 = num / 10;\n        long\
    \ num40 = num % 10;\n        long num41 = num / 10;\n        long num42 = num\
    \ % 10;\n        long num43 = num / 10;\n        long num44 = num % 10;\n    \
    \    long num45 = num / 10;\n        long num46 = num % 10;\n        long num47\
    \ = num / 10;\n        long num48 = num % 10;\n        long num49 = num / 10;\n\
    \        long num50 = num % 10;\n        long num51 = num / 10;\n        long\
    \ num52 = num % 10;\n        long num53 = num / 10;\n        long num54 = num\
    \ % 10;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpducregq9.cs(33,28): error CS0841: Cannot use local variable ''num'' before
    it is declared

    /tmp/tmpducregq9.cs(35,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpducregq9.cs(37,14): error CS0136: A local or parameter named ''num'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpducregq9.cs(31,14): warning CS0219: The variable ''result'' is assigned
    but its value is never used

    /tmp/tmpducregq9.cs(30,24): error CS0161: ''Problem.HexKey(string)'': not all
    code paths return a value

    '
  timestamp: 1659824090
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int digit = Convert.ToInt32(c);\n            if (digit == 0 || digit == 1)\
    \ {\n                continue;\n            }\n            long power = 1;\n \
    \           while (power < digit) {\n                power *= digit;\n       \
    \     }\n            if (power > result) {\n                result = power;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc5b46c5bff44e68b9d9a9adb43467a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc5b46c5bff44e68b9d9a9adb43467a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824091
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long count = 0;\n      \
    \  string hex = num.ToUpper();\n        foreach (char c in hex) {\n          \
    \  int digit = Convert.ToInt32(c);\n            if (digit < '0' || digit > '9')\
    \ {\n                throw new ArgumentException(\"Hex digits must be between\
    \ 0 and 9\");\n            }\n            int digit2 = digit - '0';\n        \
    \    if (digit2 == 2) {\n                count += 2;\n            }\n        \
    \    if (digit2 == 3) {\n                count += 3;\n            }\n        \
    \    if (digit2 == 5) {\n                count += 5;\n            }\n        \
    \    if (digit2 == 7) {\n                count += 7;\n            }\n        \
    \    if (digit2 == 11) {\n                count += 11;\n            }\n      \
    \      if (digit2 == 13) {\n                count += 13;\n            }\n    \
    \    }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: Hex digits must be between\
    \ 0 and 9\n  at Problem.HexKey (System.String num) [0x0003e] in <44a94bed4de4489ea1eb355b3ba542b7>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <44a94bed4de4489ea1eb355b3ba542b7>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: Hex digits must\
    \ be between 0 and 9\n  at Problem.HexKey (System.String num) [0x0003e] in <44a94bed4de4489ea1eb355b3ba542b7>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <44a94bed4de4489ea1eb355b3ba542b7>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824090
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long numDigits = num.Length;\n\
    \        long numPrimes = 0;\n        long numPrimeDigits = 0;\n        long numPrimeDigits2\
    \ = 0;\n        long numPrimeDigits3 = 0;\n        long numPrimeDigits4 = 0;\n\
    \        long numPrimeDigits5 = 0;\n        long numPrimeDigits6 = 0;\n      \
    \  long numPrimeDigits7 = 0;\n        long numPrimeDigits8 = 0;\n        long\
    \ numPrimeDigits9 = 0;\n        long numPrimeDigits10 = 0;\n        long numPrimeDigits11\
    \ = 0;\n        long numPrimeDigits12 = 0;\n        long numPrimeDigits13 = 0;\n\
    \        long numPrimeDigits14 = 0;\n        long numPrimeDigits15 = 0;\n    \
    \    long numPrimeDigits16 = 0;\n        long numPrimeDigits17 = 0;\n        long\
    \ numPrimeDigits18 = 0;\n        long numPrimeDigits19 = 0;\n        long numPrimeDigits20\
    \ = 0;\n        long numPrimeDigits21 = 0;\n        long numPrimeDigits22 = 0;\n\
    \        long numPrimeDigits23 = 0;\n        long numPrimeDigits24 = 0;\n    \
    \    long numPrimeDigits25 = 0;\n        long numPrimeDigits26 = 0;\n        long\
    \ numPrimeDigits27 = 0;\n        long numPrimeDigits28 = 0;\n        long numPrimeDigits29\
    \ = 0;\n        long numPrimeDigits30 = 0;\n        long numPrimeDigits31 = 0;\n\
    \        long numPrimeDigits32 = 0;\n        long numPrimeDigits33 = 0;\n    \
    \    long numPrimeDigits34 = 0;\n        long numPrimeDigits35 = 0;\n        long\
    \ numPrimeDigits36 = 0;\n        long numPrimeDigits37 = 0;\n        long numPrimeDigits38\
    \ = 0;\n        long numPrimeDigits39 = 0;\n        long numPrimeDigits40 = 0;\n\
    \        long numPrimeDigits41 = 0;\n        long numPrimeDigits42 = 0;\n    \
    \    long numPrimeDigits43 = 0;\n        long numPrimeDigits44 = 0;\n        long\
    \ numPrimeDigits45 = 0;\n        long numPrimeDigits46 = 0;\n        long numPrimeDigits47\
    \ = 0;\n        long numPrimeDigits48 = 0;\n        long numPrimeDigits49 = 0;\n\
    \        long numPrimeDigits50 = 0;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsyuzxq4e.cs(32,14): warning CS0219: The variable ''numPrimes'' is assigned
    but its value is never used

    /tmp/tmpsyuzxq4e.cs(33,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(34,14): warning CS0219: The variable ''numPrimeDigits2'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(35,14): warning CS0219: The variable ''numPrimeDigits3'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(36,14): warning CS0219: The variable ''numPrimeDigits4'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(37,14): warning CS0219: The variable ''numPrimeDigits5'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(38,14): warning CS0219: The variable ''numPrimeDigits6'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(39,14): warning CS0219: The variable ''numPrimeDigits7'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(40,14): warning CS0219: The variable ''numPrimeDigits8'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(41,14): warning CS0219: The variable ''numPrimeDigits9'' is
    assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(42,14): warning CS0219: The variable ''numPrimeDigits10''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(43,14): warning CS0219: The variable ''numPrimeDigits11''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(44,14): warning CS0219: The variable ''numPrimeDigits12''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(45,14): warning CS0219: The variable ''numPrimeDigits13''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(46,14): warning CS0219: The variable ''numPrimeDigits14''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(47,14): warning CS0219: The variable ''numPrimeDigits15''
    is assigned but its value is never used

    /tmp/tmpsyuzxq4e.cs(48,14): warning CS0219: The variable ''numPrimeDigits16''
    is ass'
  timestamp: 1659824088
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (digit * digit);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit >= 2 && digit <= 9) {\n                result += (digit * digit);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d026fcd2fdc49baa24a0fb65eabc15d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = c - '0';\n            if\
    \ (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    num\");\n            }\n            result += (long)Math.Pow(16, digit);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Specified argument\
    \ was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <00bf384176d843d0810856b2ff295163>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <00bf384176d843d0810856b2ff295163>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: num\n  at Problem.HexKey\
    \ (System.String num) [0x0002f] in <00bf384176d843d0810856b2ff295163>:0 \n  at\
    \ Problem.Main (System.String[] args) [0x00001] in <00bf384176d843d0810856b2ff295163>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824087
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num.ToUpper()) {\n            int digit = c - 'A';\n  \
    \          if (digit < 0 || digit > 9) {\n                throw new ArgumentOutOfRangeException(\"\
    Hexadecimal digit must be between 0 and 9\");\n            }\n            int\
    \ power = (int)Math.Pow(16, digit);\n            result += power;\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb38765caae34f098982d58f51759f06>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Specified argument was out of the range of\
    \ valid values.\nParameter name: Hexadecimal digit must be between 0 and 9\n \
    \ at Problem.HexKey (System.String num) [0x00034] in <bb38765caae34f098982d58f51759f06>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00015] in <bb38765caae34f098982d58f51759f06>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Specified\
    \ argument was out of the range of valid values.\nParameter name: Hexadecimal\
    \ digit must be between 0 and 9\n  at Problem.HexKey (System.String num) [0x00034]\
    \ in <bb38765caae34f098982d58f51759f06>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00015] in <bb38765caae34f098982d58f51759f06>:0 \n"
  stdout: ''
  timestamp: 1659824091
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        char[] hexChars = hex.ToCharArray();\n\
    \        foreach (char hexChar in hexChars) {\n            int hexInt = Convert.ToInt32(hexChar);\n\
    \            int hexInt2 = hexInt * hexInt;\n            if (hexInt2 % 2 == 0)\
    \ {\n                result += hexInt2;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e459b663959c4acfa6a3f2c5bf03a400>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e459b663959c4acfa6a3f2c5bf03a400>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824091
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   string hex = num.ToUpper();\n        foreach (char c in hex) {\n         \
    \   int d = (int)c;\n            if (d >= 'A' && d <= 'F') {\n               \
    \ d -= 'A' - 10;\n            }\n            if (d >= '0' && d <= '9') {\n   \
    \             d -= '0';\n            }\n            result += d;\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\"\
    )) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68cbe5a9909f4246aa1fd7fd4663d875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68cbe5a9909f4246aa1fd7fd4663d875>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824091
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int digit = Convert.ToInt32(c);\n \
    \           if (digit < '0' || digit > '9') {\n                return result;\n\
    \            }\n            result += (digit - '0') * (long)Math.Pow(16, num.Length\
    \ - 1);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(HexKey((\"AB\")) == (1L));\n    Debug.Assert(HexKey((\"\
    1077E\")) == (2L));\n    Debug.Assert(HexKey((\"ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"\
    2020\")) == (2L));\n    Debug.Assert(HexKey((\"123456789ABCDEF0\")) == (6L));\n\
    \    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <207aff14243e4300a66d0821d382de41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <207aff14243e4300a66d0821d382de41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824091
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long ret = 0;\n        bool\
    \ isPrime = true;\n        long numDigits = num.Length;\n        long numHexDigits\
    \ = 0;\n        long numPrimeDigits = 0;\n        long numPrimeHexDigits = 0;\n\
    \        long numPrimePrimeDigits = 0;\n        long numPrimePrimeHexDigits =\
    \ 0;\n        long numPrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimeHexDigits\
    \ = 0;\n        long numPrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimeHexDigits\
    \ = 0;\n        long numPrimePrimePrimePrimePrimeDigits = 0;\n        long numPrimePrimePrimePrimePrimeHexDigits\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimeDigits = 0;\n        long\
    \ numPrimePrimePrimePrimePrimePrimeHexDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimeHexDigits = 0;\n  \
    \      long numPrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n        long\
    \ numPrimePrimePrimePrimePrimePrimePrimePrimeHexDigits = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimeHexDigits = 0;\n\
    \        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n  \
    \      long numPrimePrimePrimePrimePrimePrimePrimePrimePrimeHexDigits = 0;\n \
    \       long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits = 0;\n\
    \        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeHexDigits =\
    \ 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeHexDigits\
    \ = 0;\n        long numPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits\
    \ = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7oybncjq.cs(52,14): error CS0128: A local variable or function named ''numPrimePrimePrimePrimePrimePrimePrimePrimeHexDigits''
    is already defined in this scope

    /tmp/tmp7oybncjq.cs(53,14): error CS0128: A local variable or function named ''numPrimePrimePrimePrimePrimePrimePrimePrimePrimeDigits''
    is already defined in this scope

    /tmp/tmp7oybncjq.cs(31,14): warning CS0219: The variable ''ret'' is assigned but
    its value is never used

    /tmp/tmp7oybncjq.cs(32,14): warning CS0219: The variable ''isPrime'' is assigned
    but its value is never used

    /tmp/tmp7oybncjq.cs(34,14): warning CS0219: The variable ''numHexDigits'' is assigned
    but its value is never used

    /tmp/tmp7oybncjq.cs(35,14): warning CS0219: The variable ''numPrimeDigits'' is
    assigned but its value is never used

    /tmp/tmp7oybncjq.cs(36,14): warning CS0219: The variable ''numPrimeHexDigits''
    is assigned but its value is never used

    /tmp/tmp7oybncjq.cs(37,14): warning CS0219: The variable ''numPrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp7oybncjq.cs(38,14): warning CS0219: The variable ''numPrimePrimeHexDigits''
    is assigned but its value is never used

    /tmp/tmp7oybncjq.cs(39,14): warning CS0219: The variable ''numPrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp7oybncjq.cs(40,14): warning CS0219: The variable ''numPrimePrimePrimeHexDigits''
    is assigned but its value is never used

    /tmp/tmp7oybncjq.cs(41,14): warning CS0219: The variable ''numPrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp7oybncjq.cs(42,14): warning CS0219: The variable ''numPrimePrimePrimePrimeHexDigits''
    is assigned but its value is never used

    /tmp/tmp7oybncjq.cs(43,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimeDigits''
    is assigned but its value is never used

    /tmp/tmp7oybncjq.cs(44,14): warning CS0219: The variable ''numPrimePrimePrimePrimePrimeHexDigits''
    is assigned but its value is never used

    /tmp/tmp7oyb'
  timestamp: 1659824091
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You have been tasked to write a function that receives\
    \ \n    // a hexadecimal number as a string and counts the number of hexadecimal\
    \ \n    // digits that are primes (prime number, or a prime, is a natural number\
    \ \n    // greater than 1 that is not a product of two smaller natural numbers).\n\
    \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
    \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
    \ 13).\n    // Note: you may assume the input is always correct or empty string,\
    \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n \
    \   // >>> HexKey((\"AB\"))\n    // (1L)\n    // >>> HexKey((\"1077E\"))\n   \
    \ // (2L)\n    // >>> HexKey((\"ABED1A33\"))\n    // (4L)\n    // >>> HexKey((\"\
    123456789ABCDEF0\"))\n    // (6L)\n    // >>> HexKey((\"2020\"))\n    // (2L)\n\
    \    public static long HexKey(string num) {\n        long result = 0;\n     \
    \   foreach (char c in num) {\n            int d = (int)c;\n            if (d\
    \ >= '0' && d <= '9') {\n                result += (long)Math.Pow(16, (int)c -\
    \ '0');\n            } else if (d == 'A') {\n                result += (long)Math.Pow(16,\
    \ (int)c - 'A');\n            } else if (d == 'B') {\n                result +=\
    \ (long)Math.Pow(16, (int)c - 'A');\n            } else if (d == 'C') {\n    \
    \            result += (long)Math.Pow(16, (int)c - 'A');\n            } else if\
    \ (d == 'D') {\n                result += (long)Math.Pow(16, (int)c - 'A');\n\
    \            } else if (d == 'E') {\n                result += (long)Math.Pow(16,\
    \ (int)c - 'A');\n            } else if (d == 'F') {\n                result +=\
    \ (long)Math.Pow(16, (int)c - 'A');\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
    AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
    ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
    123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
    )) == (12L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aaa4bc5aeea94edf94e0fbfacaa590ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aaa4bc5aeea94edf94e0fbfacaa590ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824091
