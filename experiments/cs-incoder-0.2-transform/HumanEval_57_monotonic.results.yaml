language: cs
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first > last)\n\
    \            return false;\n        long mid = first + (last - first) / 2;\n \
    \       bool isIncreasing = true;\n        bool isDecreasing = true;\n       \
    \ bool isMonotonic = true;\n        foreach (long x in l)\n        {\n       \
    \     if (x > mid)\n            {\n                isIncreasing = false;\n   \
    \         }\n            if (x < mid)\n            {\n                isDecreasing\
    \ = false;\n            }\n            if (x == mid)\n            {\n        \
    \        isMonotonic = false;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing || isMonotonic;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d653b1aaf06496d9052e525de412794>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d653b1aaf06496d9052e525de412794>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        foreach (long x in l) {\n            if (x > mid) {\n               \
    \ isDecreasing = false;\n            } else if (x < mid) {\n                isIncreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e682bb1d9e8d4b86a1aae1bc9490b808>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e682bb1d9e8d4b86a1aae1bc9490b808>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool increasing = true;\n        foreach (long el in l.Skip(1))\
    \ {\n            if (el < prev) {\n                increasing = false;\n     \
    \       }\n            prev = el;\n        }\n        return increasing;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a33e9807fdfa4447b14ebe880edc1444>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a33e9807fdfa4447b14ebe880edc1444>:0 \n"
  stdout: ''
  timestamp: 1659799768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long middle = l.Count\
    \ / 2;\n        long middle2 = middle + middle;\n        long middle3 = middle2\
    \ + middle;\n        long middle4 = middle3 + middle;\n        long middle5 =\
    \ middle4 + middle;\n        long middle6 = middle5 + middle;\n        long middle7\
    \ = middle6 + middle;\n        long middle8 = middle7 + middle;\n        long\
    \ middle9 = middle8 + middle;\n        long middle10 = middle9 + middle;\n   \
    \     long middle11 = middle10 + middle;\n        long middle12 = middle11 + middle;\n\
    \        long middle13 = middle12 + middle;\n        long middle14 = middle13\
    \ + middle;\n        long middle15 = middle14 + middle;\n        long middle16\
    \ = middle15 + middle;\n        long middle17 = middle16 + middle;\n        long\
    \ middle18 = middle17 + middle;\n        long middle19 = middle18 + middle;\n\
    \        long middle20 = middle19 + middle;\n        long middle21 = middle20\
    \ + middle;\n        long middle22 = middle21 + middle;\n        long middle23\
    \ = middle22 + middle;\n        long middle24 = middle23 + middle;\n        long\
    \ middle25 = middle24 + middle;\n        long middle26 = middle25 + middle;\n\
    \        long middle27 = middle26 + middle;\n        long middle28 = middle27\
    \ + middle;\n        long middle29 = middle28 + middle;\n        long middle30\
    \ = middle29 + middle;\n        long middle31 = middle30 + middle;\n        long\
    \ middle32 = middle31 + middle;\n        long middle33 = middle32 + middle;\n\
    \        long middle34 = middle33 + middle;\n        long middle35 = middle34\
    \ + middle;\n        long middle36 = middle35 + middle;\n        long middle37\
    \ = middle36 + middle;\n        long middle38 = middle37 + middle;\n        long\
    \ middle39 = middle38 + middle;\n        long middle40 = middle39 + middle;\n\
    \        long middle41 = middle40 + middle;\n        long middle42 = middle41\
    \ + middle;\n        long middle43 = middle42 + middle;\n        long middle44\
    \ = middle43 + middle;\n        long middle45 = middle44 + middle;\n        long\
    \ middle46 = middle45 + middle;\n        long middle47 = middle46 + middle;\n\
    \        long middle48 = middle47 + middle;\n        long middle49 = middle48\
    \ + middle;\n        long middle50 = middle49 + middle;\n        long middle51\
    \ = middle50 + middle;\n        long middle5\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9t3bfox1.cs(70,21): error CS1002: ; expected

    '
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        bool isIncreasing = true;\n        foreach (long\
    \ current in l.Skip(1)) {\n            if (current < prev) {\n               \
    \ isIncreasing = false;\n            }\n            prev = current;\n        }\n\
    \        return isIncreasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a3620e172274d069b27302b4bc2e3ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a3620e172274d069b27302b4bc2e3ea>:0 \n"
  stdout: ''
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool isIncreasing = (max\
    \ > min);\n        if (isIncreasing) {\n            bool isDecreasing = false;\n\
    \            foreach (long x in l) {\n                if (x > max) {\n       \
    \             isDecreasing = true;\n                    break;\n             \
    \   }\n            }\n            return isDecreasing;\n        } else {\n   \
    \         bool isDecreasing = true;\n            foreach (long x in l) {\n   \
    \             if (x < min) {\n                    isDecreasing = false;\n    \
    \                break;\n                }\n            }\n            return\
    \ isDecreasing;\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f74d40663340d19068a48580be4ac0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f74d40663340d19068a48580be4ac0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        foreach (long x in l.Skip(1).Take(l.Count\
    \ - 1)) {\n            if (x > mid) decreasing = false;\n            if (x < mid)\
    \ increasing = false;\n        }\n        return increasing || decreasing;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a101e78af7204684830cfbe5450095bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a101e78af7204684830cfbe5450095bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        bool monotonic = true;\n \
    \       foreach (long x in l) {\n            if (x < mid) {\n                decreasing\
    \ = false;\n            } else if (x > mid) {\n                increasing = false;\n\
    \            } else {\n                monotonic = false;\n            }\n   \
    \     }\n        if (increasing && decreasing) return true;\n        if (increasing\
    \ && !decreasing) return false;\n        if (decreasing && !increasing) return\
    \ false;\n        return monotonic;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b259e1b8b06475cae75cb50cbb530ba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b259e1b8b06475cae75cb50cbb530ba>:0 \n"
  stdout: ''
  timestamp: 1659799768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + (last - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMon\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd5xs_hbh.cs(40,19): error CS1002: ; expected

    '
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        bool increasing =\
    \ (first < last);\n        if (increasing) {\n            bool increasing2 = true;\n\
    \            foreach (long x in l.Skip(1))\n                if (x < first)\n \
    \                   increasing2 = false;\n            return increasing2;\n  \
    \      }\n        bool decreasing = (first > last);\n        if (decreasing) {\n\
    \            bool decreasing2 = true;\n            foreach (long x in l.Skip(1))\n\
    \                if (x > last)\n                    decreasing2 = false;\n   \
    \         return decreasing2;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b5c2d628f2643de86f3b13b12e38786>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b5c2d628f2643de86f3b13b12e38786>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long max = l.Max();\n        long min = l.Min();\n\
    \        if (min > max) return false;\n        long mid = min + (max - min) /\
    \ 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n \
    \       foreach (long x in l) {\n            if (x > mid) {\n                isIncreasing\
    \ = false;\n            } else if (x < mid) {\n                isDecreasing =\
    \ false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8a827f704f545f1b3f1ed387019f81f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8a827f704f545f1b3f1ed387019f81f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        bool isMonotonic = true;\n       \
    \ foreach (long x in l) {\n            if (x > max) {\n                isIncreasing\
    \ = false;\n            }\n            if (x < min) {\n                isDecreasing\
    \ = false;\n            }\n            if (x == max) {\n                isMonotonic\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing\
    \ || isMonotonic;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ee191474b2d483d83ecc9435ebe73a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ee191474b2d483d83ecc9435ebe73a9>:0 \n"
  stdout: ''
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        foreach (long x in l.Skip(1).Take(l.Count - 1)) {\n            if (x\
    \ > mid) {\n                isIncreasing = false;\n            }\n           \
    \ if (x < mid) {\n                isDecreasing = false;\n            }\n     \
    \       if (x == mid) {\n                isMonotonic = false;\n            }\n\
    \        }\n        return isIncreasing || isDecreasing || isMonotonic;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74aeb5ee8c674d6da3ad942e26a24ed4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74aeb5ee8c674d6da3ad942e26a24ed4>:0 \n"
  stdout: ''
  timestamp: 1659799768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long middle = l.Count\
    \ / 2;\n        bool increasing = true;\n        bool decreasing = true;\n   \
    \     long middleValue = l.Count / 2;\n        long middleValue2 = l.Count / 2;\n\
    \        long middleValue3 = l.Count / 2;\n        long middleValue4 = l.Count\
    \ / 2;\n        long middleValue5 = l.Count / 2;\n        long middleValue6 =\
    \ l.Count / 2;\n        long middleValue7 = l.Count / 2;\n        long middleValue8\
    \ = l.Count / 2;\n        long middleValue9 = l.Count / 2;\n        long middleValue10\
    \ = l.Count / 2;\n        long middleValue11 = l.Count / 2;\n        long middleValue12\
    \ = l.Count / 2;\n        long middleValue13 = l.Count / 2;\n        long middleValue14\
    \ = l.Count / 2;\n        long middleValue15 = l.Count / 2;\n        long middleValue16\
    \ = l.Count / 2;\n        long middleValue17 = l.Count / 2;\n        long middleValue18\
    \ = l.Count / 2;\n        long middleValue19 = l.Count / 2;\n        long middleValue20\
    \ = l.Count / 2;\n        long middleValue21 = l.Count / 2;\n        long middleValue22\
    \ = l.Count / 2;\n        long middleValue23 = l.Count / 2;\n        long middleValue24\
    \ = l.Count / 2;\n        long middleValue25 = l.Count / 2;\n        long middleValue26\
    \ = l.Count / 2;\n        long middleValue27 = l.Count / 2;\n        long middleValue28\
    \ = l.Count / 2;\n        long middleValue29 = l.Count / 2;\n        long middleValue30\
    \ = l.Count / 2;\n        long middleValue31 = l.Count / 2;\n        long middleValue32\
    \ = l.Count / 2;\n        long middleValue33 = l.Count / 2;\n        long middleValue34\
    \ = l.Count / 2;\n        long middleValue35 = l.Count / 2;\n        long middleValue36\
    \ = l.Count / 2;\n        long middleValue37 = l.Count / 2;\n        long middleValue38\
    \ = l.Count / 2;\n        long middleValue39 = l.Count / 2;\n        long middleValue40\
    \ = l.Count / 2;\n        long middleValue41 = l.Count / 2;\n        long middleValue42\
    \ = l.Count / 2;\n        long middleValue43 = l.Count / 2;\n        long middleValue44\
    \ = l.Count / 2;\n        long middleValue\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp03039v_n.cs(66,25): error CS1002: ; expected

    '
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min > max) {\n    \
    \        long tmp = min;\n            min = max;\n            max = tmp;\n   \
    \     }\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        long curr = min;\n        long next = max;\n        while (curr < next)\
    \ {\n            isIncreasing &= (curr < next);\n            isDecreasing &= (curr\
    \ > next);\n            long mid = curr + ((next - curr) / 2);\n            if\
    \ (mid > curr) {\n                curr = mid;\n            } else {\n        \
    \        next = mid;\n            }\n        }\n        return isIncreasing ||\
    \ isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57e083d9dffd43b19ff4083ab2c29ca7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57e083d9dffd43b19ff4083ab2c29ca7>:0 \n"
  stdout: ''
  timestamp: 1659799768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        long mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        bool isMonotonic = true;\n       \
    \ bool isMonotonicIncreasing = true;\n        bool isMonotonicDecreasing = true;\n\
    \        bool isMonotonicIncreasingDecreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            long current = l[i];\n            if (current\
    \ < mid) {\n                isMonotonic = false;\n                isMonotonicIncreasing\
    \ = false;\n                isMonotonicDecreasing = false;\n                isMonotonicIncreasingDecreasing\
    \ = false;\n            } else if (current > mid) {\n                isMonotonic\
    \ = false;\n                isMonotonicIncreasing = false;\n                isMonotonicDecreasing\
    \ = false;\n                isMonotonicIncreasingDecreasing = false;\n       \
    \     } else if (current == mid) {\n                isMonotonic = false;\n   \
    \             isMonotonicIncreasing = false;\n                isMonotonicDecreasing\
    \ = false;\n                isMonotonicIncreasingDecreasing = false;\n       \
    \     } else if (current < first) {\n                isMonotonic = false;\n  \
    \              isMonotonicIncreasing = false;\n                isMonotonicDecreasing\
    \ = false;\n                isMonotonicIncreasingDecreasing = false;\n       \
    \     } else if (current > last) {\n                isMonotonic = false;\n   \
    \             isMonotonicIncreasing = false;\n                isMonotonicDecreasing\
    \ = false;\n                isMonotonicIncreasingDecreasing = false;\n       \
    \     } else if (current < mid) {\n                isMonotonicIncreasing = false;\n\
    \                isMonotonicDecreasing = false;\n                isMonotonicIncreasingDecreasing\
    \ = false;\n            } else if (current > mid) {\n                isMonotonicIncreasing\
    \ = false;\n                isMonotonicDecreasing = false;\n                isMonotonicIncreasingDecreasing\
    \ = false;\n            } else if (current < first) {\n                isMonotonicIncreasingDecreasing\
    \ = false;\n            } else if (current > last) {\n                isMonotonicIncreasingDecreasing\
    \ = false;\n            }\n            if (isMonotonic) {\n                isMonotonicIncreasing\
    \ = true;\n                isMonotonicDecreasing = true;\n                isMonotonicIncreasingDecre\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzhpwfcks.cs(70,43): error CS1002: ; expected

    /tmp/tmpzhpwfcks.cs(72,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpzhpwfcks.cs(83,2): error CS1513: } expected

    '
  timestamp: 1659799768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  if (max < min) {\n            isIncreasing = false;\n            isDecreasing\
    \ = false;\n        }\n        else {\n            long diff = max - min;\n  \
    \          if (diff < 0)\n                isIncreasing = false;\n            else\
    \ if (diff > 0)\n                isDecreasing = false;\n            else\n   \
    \             isIncreasing = true;\n        }\n        if (mid < min)\n      \
    \      isIncreasing = false;\n        if (mid > max)\n            isDecreasing\
    \ = false;\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_demr5lj.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = (max + min)\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        bool isMonotonic = true;\n        foreach (long x in l) {\n         \
    \   if (x > mid) {\n                isIncreasing = false;\n            }\n   \
    \         if (x < mid) {\n                isDecreasing = false;\n            }\n\
    \            if (x == mid) {\n                isMonotonic = false;\n         \
    \   }\n        }\n        if (isIncreasing && isDecreasing && isMonotonic) {\n\
    \            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5979f1177ff34e45bd5d88b3cac927ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5979f1177ff34e45bd5d88b3cac927ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long prev = l[0];\n        long current = l[1];\n\
    \        bool increasing = true;\n        for (int i = 2; i < l.Count; i++) {\n\
    \            long next = l[i];\n            if (current < next) {\n          \
    \      increasing = false;\n                break;\n            }\n          \
    \  current = next;\n        }\n        return increasing || (current == prev);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3069be6114484bcb85283ce57512daa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3069be6114484bcb85283ce57512daa3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min > max) {\n    \
    \        return false;\n        }\n        long mid = min + (max - min) / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  foreach (long x in l) {\n            if (x > mid) {\n                isIncreasing\
    \ = false;\n            }\n            if (x < mid) {\n                isDecreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7402dcb4857e409095fb3d70b6539e68>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7402dcb4857e409095fb3d70b6539e68>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  if (min < mid) {\n            isIncreasing = false;\n        }\n        if\
    \ (max > mid) {\n            isDecreasing = false;\n        }\n        if (isIncreasing\
    \ && isDecreasing) {\n            return true;\n        }\n        if (isIncreasing)\
    \ {\n            return false;\n        }\n        if (isDecreasing) {\n     \
    \       return true;\n        }\n        throw new ArgumentException(\"List is\
    \ not monotonically increasing or decreasing\");\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: List is not monotonically\
    \ increasing or decreasing\n  at Problem.Monotonic (System.Collections.Generic.List`1[T]\
    \ l) [0x00066] in <bb890299c85241e58f170f771d30e5c9>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00017] in <bb890299c85241e58f170f771d30e5c9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.ArgumentException: List is not monotonically increasing or\
    \ decreasing\n  at Problem.Monotonic (System.Collections.Generic.List`1[T] l)\
    \ [0x00066] in <bb890299c85241e58f170f771d30e5c9>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00017] in <bb890299c85241e58f170f771d30e5c9>:0 \n"
  stdout: ''
  timestamp: 1659824147
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp402ys5ht.cs(61,22): error CS1026: ) expected

    /tmp/tmp402ys5ht.cs(61,22): error CS1002: ; expected

    '
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < mid) {\n                isIncreasing = false;\n\
    \            } else if (l[i] > mid) {\n                isDecreasing = false;\n\
    \            } else {\n                isIncreasing = isDecreasing = true;\n \
    \           }\n        }\n        return isIncreasing || isDecreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b30b2a1911f423a883dece076eab1bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b30b2a1911f423a883dece076eab1bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0)\n            return true;\n        if (l.Count == 1)\n            return\
    \ l[0] == l[1];\n        long prev = l[0];\n        bool changed = true;\n   \
    \     foreach (long el in l.Skip(1))\n        {\n            if (prev < el)\n\
    \            {\n                changed = false;\n                break;\n   \
    \         }\n            prev = el;\n        }\n        return changed;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aceacb47c23d4f18a1b50e2fb22dafd8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aceacb47c23d4f18a1b50e2fb22dafd8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < mid) {\n                isIncreasing = false;\n\
    \            } else if (l[i] > mid) {\n                isDecreasing = false;\n\
    \            }\n        }\n        if (isIncreasing && isDecreasing) return true;\n\
    \        if (isIncreasing && !isDecreasing) return false;\n        if (!isIncreasing\
    \ && isDecreasing) return false;\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df28faff33aa4535b50d3c621ba75dd6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df28faff33aa4535b50d3c621ba75dd6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = (first + last) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        bool isMonotonic = true;\n       \
    \ for (int i = 0; i < l.Count - 1; i++) {\n            if (l[i] > mid) {\n   \
    \             isIncreasing = false;\n            }\n            if (l[i] < mid)\
    \ {\n                isDecreasing = false;\n            }\n            if (l[i]\
    \ == mid) {\n                isMonotonic = false;\n            }\n        }\n\
    \        return isIncreasing || isDecreasing || isMonotonic;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <264ec907bed44597b26d88109b5d5e99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <264ec907bed44597b26d88109b5d5e99>:0 \n"
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        long mid2 = mid\
    \ + (mid - first) / 2;\n        long mid3 = mid2 + (mid2 - first) / 2;\n     \
    \   long mid4 = mid3 + (mid3 - first) / 2;\n        long mid5 = mid4 + (mid4 -\
    \ first) / 2;\n        long mid6 = mid5 + (mid5 - first) / 2;\n        long mid7\
    \ = mid6 + (mid6 - first) / 2;\n        long mid8 = mid7 + (mid7 - first) / 2;\n\
    \        long mid9 = mid8 + (mid8 - first) / 2;\n        long mid10 = mid9 + (mid9\
    \ - first) / 2;\n        long mid11 = mid10 + (mid10 - first) / 2;\n        long\
    \ mid12 = mid11 + (mid11 - first) / 2;\n        long mid13 = mid12 + (mid12 -\
    \ first) / 2;\n        long mid14 = mid13 + (mid13 - first) / 2;\n        long\
    \ mid15 = mid14 + (mid14 - first) / 2;\n        long mid16 = mid15 + (mid15 -\
    \ first) / 2;\n        long mid17 = mid16 + (mid16 - first) / 2;\n        long\
    \ mid18 = mid17 + (mid17 - first) / 2;\n        long mid19 = mid18 + (mid18 -\
    \ first) / 2;\n        long mid20 = mid19 + (mid19 - first) / 2;\n        long\
    \ mid21 = mid20 + (mid20 - first) / 2;\n        long mid22 = mid21 + (mid21 -\
    \ first) / 2;\n        long mid23 = mid22 + (mid22 - first) / 2;\n        long\
    \ mid24 = mid23 + (mid23 - first) / 2;\n        long mid25 = mid24 + (mid24 -\
    \ first) / 2;\n        long mid26 = mid25 + (mid25 - first) / 2;\n        long\
    \ mid27 = mid26 + (mid26 - first) / 2;\n        long mid28 = mid27 + (mid27 -\
    \ first) / 2;\n        long mid29 = mid28 + (mid28 - first) / 2;\n        long\
    \ mid30 = mid29 + (mid29 - first) / 2;\n        long mid31 = mid30 + (mid30 -\
    \ first) / 2;\n        long mid32 = mid31 + (mid31 - first) / 2;\n        long\
    \ mid33 = mid32 + (mid32 - first) / 2;\n        long mid34 = mid33 + (mid33 -\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd9jou38y.cs(53,38): error CS1525: Invalid expression term ''}''

    /tmp/tmpd9jou38y.cs(53,38): error CS1026: ) expected

    /tmp/tmpd9jou38y.cs(53,38): error CS1002: ; expected

    '
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool increasing = true;\n        foreach (long el in l.Skip(1))\
    \ {\n            if (el < prev) {\n                increasing = false;\n     \
    \       }\n            prev = el;\n        }\n        return increasing;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a33e9807fdfa4447b14ebe880edc1444>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a33e9807fdfa4447b14ebe880edc1444>:0 \n"
  stdout: ''
  timestamp: 1659799768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n    \
    \    bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonic = true;\n\
    \        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasing = true;\n\
    \        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonot\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp54gza3i6.cs(36,89): error CS1002: ; expected

    '
  timestamp: 1659824147
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        long diff = max - min;\n        long diff2 = mid - min;\n        long\
    \ diff3 = mid - max;\n        long diff4 = max - mid;\n        long diff5 = mid\
    \ + max;\n        long diff6 = max - mid;\n        long diff7 = mid + min;\n \
    \       long diff8 = min + mid;\n        long diff9 = max - mid;\n        long\
    \ diff10 = mid + max;\n        long diff11 = mid + min;\n        long diff12 =\
    \ min + mid;\n        long diff13 = max - mid;\n        long diff14 = mid + max;\n\
    \        long diff15 = mid + min;\n        long diff16 = min + mid;\n        long\
    \ diff17 = max - mid;\n        long diff18 = mid + max;\n        long diff19 =\
    \ mid + min;\n        long diff20 = min + mid;\n        long diff21 = max - mid;\n\
    \        long diff22 = mid + max;\n        long diff23 = mid + min;\n        long\
    \ diff24 = min + mid;\n        long diff25 = max - mid;\n        long diff26 =\
    \ mid + max;\n        long diff27 = mid + min;\n        long diff28 = min + mid;\n\
    \        long diff29 = max - mid;\n        long diff30 = mid + max;\n        long\
    \ diff31 = mid + min;\n        long diff32 = min + mid;\n        long diff33 =\
    \ max - mid;\n        long diff34 = mid + max;\n        long diff35 = mid + min;\n\
    \        long diff36 = min + mid;\n        long diff37 = max - mid;\n        long\
    \ diff38 = mid + max;\n        long diff39 = mid + min;\n        long diff40 =\
    \ min + mid;\n        long diff41 = max - mid;\n        long diff42 = mid + max;\n\
    \        long diff43 = mid + min;\n        long diff44 = min + mid;\n        long\
    \ diff45 = max - mid;\n        long diff46 = mid + max;\n        long diff47 =\
    \ mid + min;\n        long diff48 = min + mid;\n        long diff49 = max - mid;\n\
    \        long diff50 = mid + max;\n        long diff51 = mid + min;\n        long\
    \ diff52 = min + mid;\n        long diff53 = max - mid;\n        \n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpymc5xvnj.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpymc5xvnj.cs(16,24): error CS0161: ''Problem.Monotonic(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659824147
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first == last)\
    \ return true;\n        if (first > last) return true;\n        if (first < last)\
    \ return false;\n        long mid = l.Count / 2;\n        long midVal = l.ElementAt(mid);\n\
    \        if (midVal < first) return true;\n        if (midVal > last) return true;\n\
    \        if (midVal < last) return false;\n        long midNext = l.ElementAt(mid\
    \ + 1);\n        if (midNext > last) return true;\n        if (midNext < first)\
    \ return false;\n        long midPrev = l.ElementAt(mid - 1);\n        if (midPrev\
    \ < first) return true;\n        if (midPrev > last) return true;\n        if\
    \ (midPrev < last) return false;\n        long midNextPrev = l.ElementAt(mid +\
    \ 2);\n        if (midNextPrev > last) return true;\n        if (midNextPrev <\
    \ first) return false;\n        long midNextNext = l.ElementAt(mid + 3);\n   \
    \     if (midNextNext > last) return true;\n        if (midNextNext < first) return\
    \ false;\n        long midNextNextPrev = l.ElementAt(mid + 4);\n        if (midNextNextPrev\
    \ > last) return true;\n        if (midNextNextPrev < first) return false;\n \
    \       long midNextNextNext = l.ElementAt(mid + 5);\n        if (midNextNextNext\
    \ > last) return true;\n        if (midNextNextNext < first) return false;\n \
    \       long midNextNextNextPrev = l.ElementAt(mid + 6);\n        if (midNextNextNextPrev\
    \ > last) return true;\n        if (midNextNextNextPrev < first) return false;\n\
    \        long midNextNextNextNext = l.ElementAt(mid + 7);\n        if (midNextNextNextNext\
    \ > last) return true;\n        if (midNextNextNextNext < first) return false;\n\
    \        long midNextNextNextNextPrev = l.ElementAt(mid + 8);\n        if (midNextNextNextNextPrev\
    \ > last) return true;\n        if (midNextNextNextNextPrev < first) return false;\n\
    \        long midNextNextNextNextNext = l.ElementAt(mid + 9);\n        if (midNextNextNextNextNext\
    \ > last) return true;\n        if (midNextNextNextNextNext < first) return false;\n\
    \        long midNextNextNextNextNextPrev = l.ElementAt(mid + 10);\n        if\
    \ (midNextNextNextNextNextPrev > last) return true;\n        if (midNextNextNextNextNextPrev\
    \ < first) return false;\n        long midNextNextNextNextNextNext = l.ElementAt(mid\
    \ + 11);\n        if (midNextNextNextNextNextNextPrev > last) return true;\n \
    \       if (midNextNextNextNextNextNextPrev < first) return false;\n        long\
    \ midNextNextNextNextNextNextPre\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_lz_0jsv.cs(64,44): error CS1002: ; expected

    '
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n       \
    \ long max = l[0];\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        long current = l[0];\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] > max) {\n                isIncreasing = false;\n\
    \                max = l[i];\n            }\n            if (l[i] < current) {\n\
    \                isDecreasing = false;\n                current = l[i];\n    \
    \        }\n        }\n        if (isIncreasing && isDecreasing) return true;\n\
    \        if (isIncreasing && !isDecreasing) return true;\n        if (!isIncreasing\
    \ && isDecreasing) return true;\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9c097525a77487ea40452ec1554cd90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9c097525a77487ea40452ec1554cd90>:0 \n"
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long prev = l[0];\n        long curr = l[1];\n \
    \       bool isIncreasing = true;\n        bool isDecreasing = true;\n       \
    \ for (int i = 2; i < l.Count; i++) {\n            long next = l[i];\n       \
    \     if (curr < next) {\n                isIncreasing = false;\n            }\n\
    \            if (curr > next) {\n                isDecreasing = false;\n     \
    \       }\n            if (isIncreasing && isDecreasing) {\n                return\
    \ true;\n            }\n            if (isIncreasing && !isDecreasing) {\n   \
    \             return false;\n            }\n            if (isDecreasing && !isIncreasing)\
    \ {\n                return false;\n            }\n            prev = curr;\n\
    \            curr = next;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b1f81c6464b473994d0159b7bffeb3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b1f81c6464b473994d0159b7bffeb3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool isIncreasing = (min\
    \ < max);\n        bool isDecreasing = (min > max);\n        if (isIncreasing\
    \ && isDecreasing) return true;\n        if (isIncreasing && !isDecreasing) return\
    \ true;\n        if (!isIncreasing && isDecreasing) return true;\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <572388b61c54496f96f1905ef4cd1f78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <572388b61c54496f96f1905ef4cd1f78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        bool increasing =\
    \ (first <= last);\n        if (increasing) {\n            foreach (long x in\
    \ l.Skip(1))\n                if (x <= first)\n                    return false;\n\
    \            return true;\n        }\n        foreach (long x in l.Skip(1))\n\
    \            if (x >= last)\n                return false;\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <40d1b91370094ec0b9733c4e9286ad2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <40d1b91370094ec0b9733c4e9286ad2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        long curr = l[0];\n        bool isIncreasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            long next = l[i];\n\
    \            if (curr < next) {\n                isIncreasing = false;\n     \
    \       }\n            if (curr > next) {\n                isIncreasing = true;\n\
    \            }\n            curr = next;\n        }\n        return isIncreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ca93afb5a7b46e4892b88255968a07a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ca93afb5a7b46e4892b88255968a07a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long middle = l.Skip(1).First();\n\
    \        long middle2 = l.Skip(2).First();\n        long middle3 = l.Skip(3).First();\n\
    \        long middle4 = l.Skip(4).First();\n        long middle5 = l.Skip(5).First();\n\
    \        long middle6 = l.Skip(6).First();\n        long middle7 = l.Skip(7).First();\n\
    \        long middle8 = l.Skip(8).First();\n        long middle9 = l.Skip(9).First();\n\
    \        long middle10 = l.Skip(10).First();\n        long middle11 = l.Skip(11).First();\n\
    \        long middle12 = l.Skip(12).First();\n        long middle13 = l.Skip(13).First();\n\
    \        long middle14 = l.Skip(14).First();\n        long middle15 = l.Skip(15).First();\n\
    \        long middle16 = l.Skip(16).First();\n        long middle17 = l.Skip(17).First();\n\
    \        long middle18 = l.Skip(18).First();\n        long middle19 = l.Skip(19).First();\n\
    \        long middle20 = l.Skip(20).First();\n        long middle21 = l.Skip(21).First();\n\
    \        long middle22 = l.Skip(22).First();\n        long middle23 = l.Skip(23).First();\n\
    \        long middle24 = l.Skip(24).First();\n        long middle25 = l.Skip(25).First();\n\
    \        long middle26 = l.Skip(26).First();\n        long middle27 = l.Skip(27).First();\n\
    \        long middle28 = l.Skip(28).First();\n        long middle29 = l.Skip(29).First();\n\
    \        long middle30 = l.Skip(30).First();\n        long middle31 = l.Skip(31).First();\n\
    \        long middle32 = l.Skip(32).First();\n        long middle33 = l.Skip(33).First();\n\
    \        long middle34 = l.Skip(34).First();\n        long middle35 = l.Skip(35).First();\n\
    \        long middle36 = l.Skip(36).First();\n        long middle37 = l.Skip(37).First();\n\
    \        long middle38 = l.Skip(38).First();\n        long middle39 = l.Skip(39).First();\n\
    \        long middle40 = l.Skip\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3c5kbeg_.cs(58,31): error CS1002: ; expected

    '
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        var min = l.Min();\n        var max = l.Max();\n\
    \        var mid = min + (max - min) / 2;\n        var mid2 = mid + (max - min)\
    \ / 2;\n        if (mid < min) return true;\n        if (mid2 < min) return true;\n\
    \        if (mid > max) return true;\n        if (mid2 > max) return true;\n \
    \       return false;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca60eb51105b4cf8b64a401a5ae64ef3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca60eb51105b4cf8b64a401a5ae64ef3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                increasing = false;\n            } else if (current > mid) {\n\
    \                decreasing = false;\n            } else {\n                mid\
    \ = current;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <810564642a1b46339697c9424c920331>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <810564642a1b46339697c9424c920331>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        bool isIncreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < first) {\n                isIncreasing = false;\n\
    \                break;\n            }\n            if (l[i] > last) {\n     \
    \           isIncreasing = true;\n                break;\n            }\n    \
    \    }\n        return isIncreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f0c321df2bc445d871a83e33169fc1e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f0c321df2bc445d871a83e33169fc1e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return false;\n        if (l.Count\
    \ == 2) return l[0] > l[1];\n        long mid = l.Count / 2;\n        List<long>\
    \ left = new List<long>(l.Count - 1);\n        List<long> right = new List<long>(l.Count\
    \ - 1);\n        left.AddRange(l.Take(mid));\n        right.AddRange(l.Skip(mid));\n\
    \        bool leftMonotonic = Monotonic(left);\n        bool rightMonotonic =\
    \ Monotonic(right);\n        return leftMonotonic || rightMonotonic;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppnqenbyd.cs(23,30): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmppnqenbyd.cs(24,31): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824147
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return false;\n        if (l.Count\
    \ == 2) return l[0] < l[1];\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        bool isMonotonicIncreasing = true;\n        bool isMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingMonotonic = true;\n        bool isMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicDecreasingIncreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicDecreasingIncreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicDecreasingIncreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicDecreasingIncreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic = true;\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdvl4di5c.cs(34,14): error CS0128: A local variable or function named ''isMonotonicIncreasingDecreasingMonotonic''
    is already defined in this scope

    /tmp/tmpdvl4di5c.cs(35,14): error CS0128: A local variable or function named ''isMonotonicDecreasingMonotonic''
    is already defined in this scope

    /tmp/tmpdvl4di5c.cs(37,14): error CS0128: A local variable or function named ''isMonotonicDecreasingMonotonic''
    is already defined in this scope

    /tmp/tmpdvl4di5c.cs(42,14): error CS0128: A local variable or function named ''isMonotonicDecreasingIncreasingMonotonicDecreasingMonotonic''
    is already defined in this scope

    /tmp/tmpdvl4di5c.cs(43,14): error CS0128: A local variable or function named ''isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic''
    is already defined in this scope

    /tmp/tmpdvl4di5c.cs(44,14): error CS0128: A local variable or function named ''isMonotonicDecreasingIncreasingMonotonicDecreasingMonotonic''
    is already defined in this scope

    /tmp/tmpdvl4di5c.cs(45,14): error CS0128: A local variable or function named ''isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic''
    is already defined in this scope

    /tmp/tmpdvl4di5c.cs(46,14): error CS0128: A local variable or function named ''isMonotonicDecreasingIncreasingMonotonicDecreasingMonotonic''
    is already defined in this scope

    /tmp/tmpdvl4di5c.cs(47,14): error CS0128: A local variable or function named ''isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic''
    is already defined in this scope

    /tmp/tmpdvl4di5c.cs(23,14): warning CS0219: The variable ''isIncreasing'' is assigned
    but its value is never used

    /tmp/tmpdvl4di5c.cs(24,14): warning CS0219: The variable ''isDecreasing'' is assigned
    but its value is never used

    /tmp/tmpdvl4di5c.cs(25,14): warning CS0219: The variable ''isMonotonic'' is assigned
    but its value is never used

    /tmp/tmpdvl4di5c.cs(26,14): warning CS0219: The variable ''isMonotonicIncreasing''
    is assigned but its value is never'
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        long current = first;\n\
    \        long previous = first;\n        foreach (long x in l) {\n           \
    \ if (current > x) {\n                isDecreasing = false;\n            }\n \
    \           if (current < x) {\n                isIncreasing = false;\n      \
    \      }\n            current = x;\n            previous = x;\n        }\n   \
    \     if (isIncreasing && isDecreasing) {\n            return true;\n        }\n\
    \        if (isIncreasing && !isDecreasing) {\n            return false;\n   \
    \     }\n        if (!isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58a07cefb0d54779a11ac6ce9c701ea9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58a07cefb0d54779a11ac6ce9c701ea9>:0 \n"
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0], last = l[l.Count - 1];\n    \
    \    if (first == last) return true;\n        if (first < last) return true;\n\
    \        long mid = first + (last - first) / 2;\n        bool isIncreasing = Monotonic(l.Skip(1).Take(l.Count\
    \ - 1));\n        bool isDecreasing = Monotonic(l.Skip(1).Take(l.Count - 1));\n\
    \        if (isIncreasing && isDecreasing) return true;\n        if (isIncreasing\
    \ && !isDecreasing) return true;\n        if (!isIncreasing && isDecreasing) return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4lnzb9rv.cs(22,39): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmp4lnzb9rv.cs(23,39): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool increasing = true;\n        foreach (long el in l.Skip(1))\
    \ {\n            if (el < prev) {\n                increasing = false;\n     \
    \       }\n            prev = el;\n        }\n        return increasing;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a33e9807fdfa4447b14ebe880edc1444>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a33e9807fdfa4447b14ebe880edc1444>:0 \n"
  stdout: ''
  timestamp: 1659799768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long prev = l[0];\n        long current = l[1];\n\
    \        long next = (long)1;\n        bool increasing = true;\n        bool decreasing\
    \ = true;\n        for (int i = 2; i < l.Count; i++) {\n            long curr\
    \ = l[i];\n            if (curr < prev) {\n                decreasing = false;\n\
    \            }\n            else if (curr > prev) {\n                increasing\
    \ = false;\n            }\n            else {\n                if (curr < next)\
    \ {\n                    decreasing = false;\n                }\n            \
    \    else if (curr > next) {\n                    increasing = false;\n      \
    \          }\n                else {\n                    next++;\n          \
    \      }\n            }\n            prev = current;\n            current = curr;\n\
    \        }\n        return increasing || decreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <142d5a70aa0a4da9ab3fd8ef3c8fddd4>:0 \n"
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max < min) {\n    \
    \        return false;\n        }\n        long mid = max / 2;\n        long mid2\
    \ = mid / 2;\n        long mid3 = mid / 3;\n        long mid4 = mid / 4;\n   \
    \     long mid5 = mid / 5;\n        long mid6 = mid / 6;\n        long mid7 =\
    \ mid / 7;\n        long mid8 = mid / 8;\n        long mid9 = mid / 9;\n     \
    \   long mid10 = mid / 10;\n        long mid11 = mid / 11;\n        long mid12\
    \ = mid / 12;\n        long mid13 = mid / 13;\n        long mid14 = mid / 14;\n\
    \        long mid15 = mid / 15;\n        long mid16 = mid / 16;\n        long\
    \ mid17 = mid / 17;\n        long mid18 = mid / 18;\n        long mid19 = mid\
    \ / 19;\n        long mid20 = mid / 20;\n        long mid21 = mid / 21;\n    \
    \    long mid22 = mid / 22;\n        long mid23 = mid / 23;\n        long mid24\
    \ = mid / 24;\n        long mid25 = mid / 25;\n        long mid26 = mid / 26;\n\
    \        long mid27 = mid / 27;\n        long mid28 = mid / 28;\n        long\
    \ mid29 = mid / 29;\n        long mid30 = mid / 30;\n        long mid31 = mid\
    \ / 31;\n        long mid32 = mid / 32;\n        long mid33 = mid / 33;\n    \
    \    long mid34 = mid / 34;\n        long mid35 = mid / 35;\n        long mid36\
    \ = mid / 36;\n        long mid37 = mid / 37;\n        long mid38 = mid / 38;\n\
    \        long mid39 = mid / 39;\n        long mid40 = mid / 40;\n        long\
    \ mid41 = mid / 41;\n        long mid42 = mid / 42;\n        long mid43 = mid\
    \ / 43;\n        long mid44 = mid / 44;\n        long mid45 = mid / 45;\n    \
    \    long mid46 = mid / 46;\n        long mid47 = mid / 47;\n        long mid48\
    \ = mid / 48;\n        long mid49 = mid / 49;\n        long mid50 = mid / 50;\n\
    \        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsjc2n1hm.cs(16,24): error CS0161: ''Problem.Monotonic(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool increasing = true;\n        foreach (long e in l.Skip(1))\n\
    \        {\n            if (e < prev)\n            {\n                increasing\
    \ = false;\n                break;\n            }\n            prev = e;\n   \
    \     }\n        return increasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6e8b1ee5d314935b01ea3272158d125>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6e8b1ee5d314935b01ea3272158d125>:0 \n"
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        if (first == last) return true;\n        long mid = (first +\
    \ last) / 2;\n        bool isIncreasing = Monotonic(l, 0, mid);\n        bool\
    \ isDecreasing = Monotonic(l, mid, l.Count - 1);\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr9krcpx0.cs(22,29): error CS1501: No overload for method ''Monotonic''
    takes 3 arguments

    /tmp/tmpr9krcpx0.cs(23,29): error CS1501: No overload for method ''Monotonic''
    takes 3 arguments

    '
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + ((last - first) / 2);\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        long midValue = l.ElementAt(mid);\n        long midValue2 =\
    \ l.ElementAt(mid + 1);\n        long midValue3 = l.ElementAt(mid + 2);\n    \
    \    long midValue4 = l.ElementAt(mid + 3);\n        long midValue5 = l.ElementAt(mid\
    \ + 4);\n        long midValue6 = l.ElementAt(mid + 5);\n        long midValue7\
    \ = l.ElementAt(mid + 6);\n        long midValue8 = l.ElementAt(mid + 7);\n  \
    \      long midValue9 = l.ElementAt(mid + 8);\n        long midValue10 = l.ElementAt(mid\
    \ + 9);\n        long midValue11 = l.ElementAt(mid + 10);\n        long midValue12\
    \ = l.ElementAt(mid + 11);\n        long midValue13 = l.ElementAt(mid + 12);\n\
    \        long midValue14 = l.ElementAt(mid + 13);\n        long midValue15 = l.ElementAt(mid\
    \ + 14);\n        long midValue16 = l.ElementAt(mid + 15);\n        long midValue17\
    \ = l.ElementAt(mid + 16);\n        long midValue18 = l.ElementAt(mid + 17);\n\
    \        long midValue19 = l.ElementAt(mid + 18);\n        long midValue20 = l.ElementAt(mid\
    \ + 19);\n        long midValue21 = l.ElementAt(mid + 20);\n        long midValue22\
    \ = l.ElementAt(mid + 21);\n        long midValue23 = l.ElementAt(mid + 22);\n\
    \        long midValue24 = l.ElementAt(mid + 23);\n        long midValue25 = l.ElementAt(mid\
    \ + 24);\n        long midValue26 = l.ElementAt(mid + 25);\n        long midValue27\
    \ = l.ElementAt(mid + 26);\n        long midValue28 = l.ElementAt(mid + 27);\n\
    \        long midValue29 = l.ElementAt(mid + 28);\n        long midValue30 = l.ElementAt(mid\
    \ + 29);\n        long midValue31 = l.ElementAt(mid + 30);\n        long midValue32\
    \ = l.ElementAt(mid + 31);\n        long midValue33 = l.ElementAt(mid + 32);\n\
    \        long midValue34 = l.ElementAt(mid + 33);\n        long midValue35 = l.ElementAt(mid\
    \ + 34);\n        long midValue36 = l.ElementAt(mid + 35\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgkfjkjk7.cs(57,47): error CS1026: ) expected

    /tmp/tmpgkfjkjk7.cs(57,47): error CS1002: ; expected

    '
  timestamp: 1659824147
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n    \
    \    bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingDecreasingMonotonicIncreasing = true;\n      \
    \  bool isMonotonicIncreasingDecreasingMonotonicDecreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing = true;\n     \
    \   bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicIncreasingDecreasing\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq13bxfho.cs(37,93): error CS1002: ; expected

    '
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first > last)\n\
    \            return false;\n        long mid = first + (last - first) / 2;\n \
    \       bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l.Skip(1).Take(l.Count - 1)) {\n            if (x > mid)\n      \
    \          decreasing = false;\n            else if (x < mid)\n              \
    \  increasing = false;\n            else\n                break;\n        }\n\
    \        return increasing || decreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <457ccd5598af47fe97f2d7d40aceb388>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <457ccd5598af47fe97f2d7d40aceb388>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long first = l[0], last = l[0];\n        bool increasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long current\
    \ = l[i];\n            if (current < first) increasing = false;\n            if\
    \ (current > last) increasing = true;\n            last = current;\n        }\n\
    \        return increasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dff47f7465e4125867655e1935a20a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dff47f7465e4125867655e1935a20a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long prev = l[0];\n        long curr = l[1];\n  \
    \      long next = l[0];\n        bool isIncreasing = true;\n        for (int\
    \ i = 2; i < l.Count; i++) {\n            prev = curr;\n            curr = next;\n\
    \            next = l[i];\n            if (curr < prev) {\n                isIncreasing\
    \ = false;\n            }\n        }\n        return isIncreasing;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c691ecad85cf4a5a9af2606ae3304eba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c691ecad85cf4a5a9af2606ae3304eba>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        long diff = max - min;\n        long diff2 = mid - min;\n        long\
    \ diff3 = max - mid;\n        long diff4 = mid - max;\n        bool isMonotonic\
    \ = true;\n        if (diff < diff2 && diff < diff3 && diff < diff4) {\n     \
    \       isMonotonic = false;\n        }\n        return isMonotonic;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqem327xl.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool increasing = true;\n        foreach (long current\
    \ in l.Skip(1))\n            if (current < prev)\n                increasing =\
    \ false;\n            else\n                prev = current;\n        return increasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7052ec58e8cc4520859cbcf3a0645e12>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7052ec58e8cc4520859cbcf3a0645e12>:0 \n"
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        bool increasing =\
    \ (first <= last);\n        if (increasing) {\n            long mid = l.Skip(1).Take(2).Last();\n\
    \            increasing = (mid <= last);\n        }\n        return increasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78caf9b21df44313b942da44e0237791>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78caf9b21df44313b942da44e0237791>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = (first + last) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        bool isMonotonic = true;\n       \
    \ bool isIncreasingOrDecreasing = true;\n        bool isMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrDecreasingOrIncreasing = true;\n        bool\
    \ isMonotonicOrIncreasingOrDecreasingOrMonotonic = true;\n        bool isMonotonicOrDecreasingOrIncreasingOrMonotonic\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicOrDecreasingOrIncreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrDecreasingOrIncreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicOrDecreasingOrIncreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicOrDecreasingOrIncreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicOrIncreasingOrDecreasingOrMonotonicOr\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp83ft0p9l.cs(39,62): error CS1002: ; expected

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        if (min > max) {\n    \
    \        long tmp = min;\n            min = max;\n            max = tmp;\n   \
    \     }\n        long mid = min + (max - min) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        foreach (long x in l) {\n\
    \            if (x > mid) {\n                isIncreasing = false;\n         \
    \   }\n            if (x < mid) {\n                isDecreasing = false;\n   \
    \         }\n        }\n        return isIncreasing || isDecreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63f143904c53488db1ee2ee60c2cef92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63f143904c53488db1ee2ee60c2cef92>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) >> 1);\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < mid) {\n                decreasing = false;\n\
    \            } else if (l[i] > mid) {\n                increasing = false;\n \
    \           } else {\n                mid = l[i];\n            }\n        }\n\
    \        return increasing || decreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8053feca46654686922b6652658e3221>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8053feca46654686922b6652658e3221>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        bool increasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < first) {\n\
    \                increasing = false;\n            }\n            if (current >\
    \ last) {\n                increasing = false;\n            }\n        }\n   \
    \     return increasing;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49300b7f623a4da88a3e00ec6b15d28d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49300b7f623a4da88a3e00ec6b15d28d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min < max) {\n    \
    \        long mid = (max + min) / 2;\n            if (mid < min) {\n         \
    \       return true;\n            }\n            if (mid > max) {\n          \
    \      return false;\n            }\n            long mid2 = l.IndexOf(mid);\n\
    \            if (mid2 != -1) {\n                long mid2max = l.IndexOf(mid,\
    \ mid2);\n                if (mid2max != -1) {\n                    long mid2min\
    \ = l.IndexOf(mid, mid2max);\n                    if (mid2min != -1) {\n     \
    \                   long mid2mid = l.IndexOf(mid, mid2min, mid2max);\n       \
    \                 if (mid2mid != -1) {\n                            long mid2mid2\
    \ = l.IndexOf(mid, mid2min, mid2mid);\n                            if (mid2mid2\
    \ != -1) {\n                                return Monotonic(l.Skip(mid2mid2).Take(mid2mid2\
    \ - mid2min));\n                            }\n                        }\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpia6tkveu.cs(29,47): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpia6tkveu.cs(31,51): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpia6tkveu.cs(33,55): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpia6tkveu.cs(33,64): error CS1503: Argument 3: cannot convert from ''long''
    to ''int''

    /tmp/tmpia6tkveu.cs(35,60): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpia6tkveu.cs(35,69): error CS1503: Argument 3: cannot convert from ''long''
    to ''int''

    /tmp/tmpia6tkveu.cs(37,57): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long prev = l[0];\n        long current = l[1];\n\
    \        bool isIncreasing = true;\n        for (int i = 2; i < l.Count; i++)\
    \ {\n            long next = l[i];\n            if (next < prev) {\n         \
    \       isIncreasing = false;\n            }\n            prev = current;\n  \
    \          current = next;\n        }\n        return isIncreasing;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca264499485144abb5026c0d9f9debbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca264499485144abb5026c0d9f9debbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + ((last - first) / 2);\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        long midValue = l.ElementAt(mid);\n        foreach (long value\
    \ in l) {\n            if (value < midValue) {\n                isDecreasing =\
    \ false;\n            }\n            if (value > midValue) {\n               \
    \ isIncreasing = false;\n            }\n            if (value == midValue) {\n\
    \                isIncreasing = isDecreasing = true;\n            }\n        }\n\
    \        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7kmjbimk.cs(22,37): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0], last = l[l.Count - 1];\n    \
    \    long mid = first + (last - first) / 2;\n        long mid2 = mid + (mid -\
    \ first) / 2;\n        long mid3 = mid2 + (mid2 - first) / 2;\n        long mid4\
    \ = mid3 + (mid3 - first) / 2;\n        long mid5 = mid4 + (mid4 - first) / 2;\n\
    \        long mid6 = mid5 + (mid5 - first) / 2;\n        long mid7 = mid6 + (mid6\
    \ - first) / 2;\n        long mid8 = mid7 + (mid7 - first) / 2;\n        long\
    \ mid9 = mid8 + (mid8 - first) / 2;\n        long mid10 = mid9 + (mid9 - first)\
    \ / 2;\n        long mid11 = mid10 + (mid10 - first) / 2;\n        long mid12\
    \ = mid11 + (mid11 - first) / 2;\n        long mid13 = mid12 + (mid12 - first)\
    \ / 2;\n        long mid14 = mid13 + (mid13 - first) / 2;\n        long mid15\
    \ = mid14 + (mid14 - first) / 2;\n        long mid16 = mid15 + (mid15 - first)\
    \ / 2;\n        long mid17 = mid16 + (mid16 - first) / 2;\n        long mid18\
    \ = mid17 + (mid17 - first) / 2;\n        long mid19 = mid18 + (mid18 - first)\
    \ / 2;\n        long mid20 = mid19 + (mid19 - first) / 2;\n        long mid21\
    \ = mid20 + (mid20 - first) / 2;\n        long mid22 = mid21 + (mid21 - first)\
    \ / 2;\n        long mid23 = mid22 + (mid22 - first) / 2;\n        long mid24\
    \ = mid23 + (mid23 - first) / 2;\n        long mid25 = mid24 + (mid24 - first)\
    \ / 2;\n        long mid26 = mid25 + (mid25 - first) / 2;\n        long mid27\
    \ = mid26 + (mid26 - first) / 2;\n        long mid28 = mid27 + (mid27 - first)\
    \ / 2;\n        long mid29 = mid28 + (mid28 - first) / 2;\n        long mid30\
    \ = mid29 + (mid29 - first) / 2;\n        long mid31 = mid30 + (mid30 - first)\
    \ / 2;\n        long mid32 = mid31 + (mid31 - first) / 2;\n        long mid33\
    \ = mid32 + (mid32 - first) / 2;\n        long mid34 = mid33 + (mid33 - first)\
    \ / 2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps884fiem.cs(16,24): error CS0161: ''Problem.Monotonic(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max < min) {\n    \
    \        return false;\n        }\n        long mid = min + (max - min) / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  foreach (long x in l) {\n            if (x > mid) {\n                isDecreasing\
    \ = false;\n            }\n            if (x < mid) {\n                isIncreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <829e5ed45048406ca3d8655a21267f8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <829e5ed45048406ca3d8655a21267f8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        bool increasing2 = true;\n\
    \        bool decreasing2 = true;\n        bool increasing3 = true;\n        bool\
    \ decreasing3 = true;\n        bool increasing4 = true;\n        bool decreasing4\
    \ = true;\n        bool increasing5 = true;\n        bool decreasing5 = true;\n\
    \        bool increasing6 = true;\n        bool decreasing6 = true;\n        bool\
    \ increasing7 = true;\n        bool decreasing7 = true;\n        bool increasing8\
    \ = true;\n        bool decreasing8 = true;\n        bool increasing9 = true;\n\
    \        bool decreasing9 = true;\n        bool increasing10 = true;\n       \
    \ bool decreasing10 = true;\n        bool increasing11 = true;\n        bool decreasing11\
    \ = true;\n        bool increasing12 = true;\n        bool decreasing12 = true;\n\
    \        bool increasing13 = true;\n        bool decreasing13 = true;\n      \
    \  bool increasing14 = true;\n        bool decreasing14 = true;\n        bool\
    \ increasing15 = true;\n        bool decreasing15 = true;\n        bool increasing16\
    \ = true;\n        bool decreasing16 = true;\n        bool increasing17 = true;\n\
    \        bool decreasing17 = true;\n        bool increasing18 = true;\n      \
    \  bool decreasing18 = true;\n        bool increasing19 = true;\n        bool\
    \ decreasing19 = true;\n        bool increasing20 = true;\n        bool decreasing20\
    \ = true;\n        bool increasing21 = true;\n        bool decreasing21 = true;\n\
    \        bool increasing22 = true;\n        bool decreasing22 = true;\n      \
    \  bool increasing23 = true;\n        bool decreasing23 = true;\n        bool\
    \ increasing24 = true;\n        bool decreasing24 = true;\n        bool increasing25\
    \ = true;\n        bool decreasing25 = true;\n        bool increasing26 = true;\n\
    \        bool decreasing26 = true;\n        bool increasing27 = true;\n      \
    \  bool decreasing27 = true;\n        bool increasing28 = true;\n        bool\
    \ decreasing28 = true;\n        bool increasing29 = true;\n        bool decreasing29\
    \ = true;\n        bool increasing30 = true;\n        bool decre\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp18_acdvu.cs(80,19): error CS1002: ; expected

    '
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        long mid2 = mid\
    \ + (mid - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        bool isMonotonic2 = true;\n\
    \        bool isMonotonic3 = true;\n        bool isMonotonic4 = true;\n      \
    \  bool isMonotonic5 = true;\n        bool isMonotonic6 = true;\n        bool\
    \ isMonotonic7 = true;\n        bool isMonotonic8 = true;\n        bool isMonotonic9\
    \ = true;\n        bool isMonotonic10 = true;\n        bool isMonotonic11 = true;\n\
    \        bool isMonotonic12 = true;\n        bool isMonotonic13 = true;\n    \
    \    bool isMonotonic14 = true;\n        bool isMonotonic15 = true;\n        bool\
    \ isMonotonic16 = true;\n        bool isMonotonic17 = true;\n        bool isMonotonic18\
    \ = true;\n        bool isMonotonic19 = true;\n        bool isMonotonic20 = true;\n\
    \        bool isMonotonic21 = true;\n        bool isMonotonic22 = true;\n    \
    \    bool isMonotonic23 = true;\n        bool isMonotonic24 = true;\n        bool\
    \ isMonotonic25 = true;\n        bool isMonotonic26 = true;\n        bool isMonotonic27\
    \ = true;\n        bool isMonotonic28 = true;\n        bool isMonotonic29 = true;\n\
    \        bool isMonotonic30 = true;\n        bool isMonotonic31 = true;\n    \
    \    bool isMonotonic32 = true;\n        bool isMonotonic33 = true;\n        bool\
    \ isMonotonic34 = true;\n        bool isMonotonic35 = true;\n        bool isMonotonic36\
    \ = true;\n        bool isMonotonic37 = true;\n        bool isMonotonic38 = true;\n\
    \        bool isMonotonic39 = true;\n        bool isMonotonic40 = true;\n    \
    \    bool isMonotonic41 = true;\n        bool isMonotonic42 = true;\n        bool\
    \ isMonotonic43 = true;\n        bool isMonotonic44 = true;\n        bool isMonotonic45\
    \ = true;\n        bool isMonotonic46 = true;\n        bool isMonotonic47 = true;\n\
    \        bool isMonotonic48 = true;\n        bool isMonotonic49 = true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqupw07z5.cs(22,14): warning CS0219: The variable ''isIncreasing'' is assigned
    but its value is never used

    /tmp/tmpqupw07z5.cs(23,14): warning CS0219: The variable ''isDecreasing'' is assigned
    but its value is never used

    /tmp/tmpqupw07z5.cs(24,14): warning CS0219: The variable ''isMonotonic'' is assigned
    but its value is never used

    /tmp/tmpqupw07z5.cs(25,14): warning CS0219: The variable ''isMonotonic2'' is assigned
    but its value is never used

    /tmp/tmpqupw07z5.cs(26,14): warning CS0219: The variable ''isMonotonic3'' is assigned
    but its value is never used

    /tmp/tmpqupw07z5.cs(27,14): warning CS0219: The variable ''isMonotonic4'' is assigned
    but its value is never used

    /tmp/tmpqupw07z5.cs(28,14): warning CS0219: The variable ''isMonotonic5'' is assigned
    but its value is never used

    /tmp/tmpqupw07z5.cs(29,14): warning CS0219: The variable ''isMonotonic6'' is assigned
    but its value is never used

    /tmp/tmpqupw07z5.cs(30,14): warning CS0219: The variable ''isMonotonic7'' is assigned
    but its value is never used

    /tmp/tmpqupw07z5.cs(31,14): warning CS0219: The variable ''isMonotonic8'' is assigned
    but its value is never used

    /tmp/tmpqupw07z5.cs(32,14): warning CS0219: The variable ''isMonotonic9'' is assigned
    but its value is never used

    /tmp/tmpqupw07z5.cs(33,14): warning CS0219: The variable ''isMonotonic10'' is
    assigned but its value is never used

    /tmp/tmpqupw07z5.cs(34,14): warning CS0219: The variable ''isMonotonic11'' is
    assigned but its value is never used

    /tmp/tmpqupw07z5.cs(35,14): warning CS0219: The variable ''isMonotonic12'' is
    assigned but its value is never used

    /tmp/tmpqupw07z5.cs(36,14): warning CS0219: The variable ''isMonotonic13'' is
    assigned but its value is never used

    /tmp/tmpqupw07z5.cs(37,14): warning CS0219: The variable ''isMonotonic14'' is
    assigned but its value is never used

    /tmp/tmpqupw07z5.cs(38,14): warning CS0219: The variable ''isMonotonic15'' is
    assigned but its value is never used

    /tmp/tmpqupw'
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1cd06ec55da141dfa8e81e4f6ef83c45>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1cd06ec55da141dfa8e81e4f6ef83c45>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        long mid = first + (last - first) / 2;\n        long mid2 = mid + (mid\
    \ - first) / 2;\n        long mid3 = mid2 + (mid2 - first) / 2;\n        long\
    \ mid4 = mid3 + (mid3 - first) / 2;\n        long mid5 = mid4 + (mid4 - first)\
    \ / 2;\n        long mid6 = mid5 + (mid5 - first) / 2;\n        long mid7 = mid6\
    \ + (mid6 - first) / 2;\n        long mid8 = mid7 + (mid7 - first) / 2;\n    \
    \    long mid9 = mid8 + (mid8 - first) / 2;\n        long mid10 = mid9 + (mid9\
    \ - first) / 2;\n        long mid11 = mid10 + (mid10 - first) / 2;\n        long\
    \ mid12 = mid11 + (mid11 - first) / 2;\n        long mid13 = mid12 + (mid12 -\
    \ first) / 2;\n        long mid14 = mid13 + (mid13 - first) / 2;\n        long\
    \ mid15 = mid14 + (mid14 - first) / 2;\n        long mid16 = mid15 + (mid15 -\
    \ first) / 2;\n        long mid17 = mid16 + (mid16 - first) / 2;\n        long\
    \ mid18 = mid17 + (mid17 - first) / 2;\n        long mid19 = mid18 + (mid18 -\
    \ first) / 2;\n        long mid20 = mid19 + (mid19 - first) / 2;\n        long\
    \ mid21 = mid20 + (mid20 - first) / 2;\n        long mid22 = mid21 + (mid21 -\
    \ first) / 2;\n        long mid23 = mid22 + (mid22 - first) / 2;\n        long\
    \ mid24 = mid23 + (mid23 - first) / 2;\n        long mid25 = mid24 + (mid24 -\
    \ first) / 2;\n        long mid26 = mid25 + (mid25 - first) / 2;\n        long\
    \ mid27 = mid26 + (mid26 - first) / 2;\n        long mid28 = mid27 + (mid27 -\
    \ first) / 2;\n        long mid29 = mid28 + (mid28 - first) / 2;\n        long\
    \ mid30 = mid29 + (mid29 - first) / 2;\n        long mid31 = mid30 + (mid30 -\
    \ first) / 2;\n        long mid32 = mid31 + (mid31 - first) / 2;\n        long\
    \ mid33 = mid32 + (mid32 - first) / 2;\n        long mid34 = mid33 + (mid33 -\
    \ first) / \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp27oazs8u.cs(53,47): error CS1525: Invalid expression term ''}''

    /tmp/tmp27oazs8u.cs(53,47): error CS1002: ; expected

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) >> 1);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isDecreasing = false;\n            } else if (current > mid)\
    \ {\n                isIncreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && current > last) isIncreasing = false;\n            if (isDecreasing && current\
    \ < first) isDecreasing = false;\n            last = current;\n        }\n   \
    \     return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ead7f64fbf14a159d45777c908514c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ead7f64fbf14a159d45777c908514c0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = (mid > max);\n        bool isDecreasing = (mid <\
    \ min);\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdjd2b0pg.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool increasing = true;\n        foreach (long el in l.Skip(1))\n\
    \        {\n            if (el < prev)\n            {\n                increasing\
    \ = false;\n                break;\n            }\n            prev = el;\n  \
    \      }\n        return increasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c808c6017af842a5beeb2164526fa809>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c808c6017af842a5beeb2164526fa809>:0 \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + (last - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasing = true;\n\
    \        bool isMonotonicDecreasingMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMon\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpan9m177k.cs(40,48): error CS1002: ; expected

    '
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp402ys5ht.cs(61,22): error CS1026: ) expected

    /tmp/tmp402ys5ht.cs(61,22): error CS1002: ; expected

    '
  timestamp: 1659824147
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = (min < mid);\n        bool isDecreasing = (max >\
    \ mid);\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjaqvwqba.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        foreach (long x in l) {\n            if (x > mid) {\n               \
    \ isIncreasing = false;\n            }\n            if (x < mid) {\n         \
    \       isDecreasing = false;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41d753b469594c0987bb572209ed5f7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41d753b469594c0987bb572209ed5f7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long max = l.Max();\n        long min = l.Min();\n\
    \        long mid = l.Count / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonic = true;\n\
    \        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecre\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdej9ktkz.cs(37,86): error CS1002: ; expected

    '
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = (max < mid);\n        bool isDecreasing = (min >\
    \ mid);\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphy3niqjg.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool isIncreasing = (max\
    \ < min);\n        bool isDecreasing = (max > min);\n        if (isIncreasing\
    \ && isDecreasing)\n            return true;\n        if (isIncreasing && !isDecreasing)\n\
    \            return false;\n        if (!isIncreasing && isDecreasing)\n     \
    \       return false;\n        bool isMonotonic = true;\n        foreach (long\
    \ x in l)\n        {\n            isMonotonic = isMonotonic && (x > max);\n  \
    \          isMonotonic = isMonotonic && (x < min);\n        }\n        return\
    \ isMonotonic;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a44633dc4cf4800a228899a55144cc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a44633dc4cf4800a228899a55144cc0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long middle = l.Skip(1).Take(2).Last();\n\
    \        long middle2 = l.Skip(2).Take(1).Last();\n        long middle3 = l.Skip(3).Take(1).Last();\n\
    \        long middle4 = l.Skip(4).Take(1).Last();\n        long middle5 = l.Skip(5).Take(1).Last();\n\
    \        long middle6 = l.Skip(6).Take(1).Last();\n        long middle7 = l.Skip(7).Take(1).Last();\n\
    \        long middle8 = l.Skip(8).Take(1).Last();\n        long middle9 = l.Skip(9).Take(1).Last();\n\
    \        long middle10 = l.Skip(10).Take(1).Last();\n        long middle11 = l.Skip(11).Take(1).Last();\n\
    \        long middle12 = l.Skip(12).Take(1).Last();\n        long middle13 = l.Skip(13).Take(1).Last();\n\
    \        long middle14 = l.Skip(14).Take(1).Last();\n        long middle15 = l.Skip(15).Take(1).Last();\n\
    \        long middle16 = l.Skip(16).Take(1).Last();\n        long middle17 = l.Skip(17).Take(1).Last();\n\
    \        long middle18 = l.Skip(18).Take(1).Last();\n        long middle19 = l.Skip(19).Take(1).Last();\n\
    \        long middle20 = l.Skip(20).Take(1).Last();\n        long middle21 = l.Skip(21).Take(1).Last();\n\
    \        long middle22 = l.Skip(22).Take(1).Last();\n        long middle23 = l.Skip(23).Take(1).Last();\n\
    \        long middle24 = l.Skip(24).Take(1).Last();\n        long middle25 = l.Skip(25).Take(1).Last();\n\
    \        long middle26 = l.Skip(26).Take(1).Last();\n        long middle27 = l.Skip(27).Take(1).Last();\n\
    \        long middle28 = l.Skip(28).Take(1).Last();\n        long middle29 = l.Skip(29).Take(1).Last();\n\
    \        long middle30 = l.Skip(30).Take(1).Last();\n        long middle31 = l.Skip(31).Take(1).Last();\n\
    \        long middle32 = l.Skip(32).Take(1).Last();\n        long \n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8orh31d2.cs(51,13): error CS1001: Identifier expected

    /tmp/tmp8orh31d2.cs(51,13): error CS1002: ; expected

    '
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n    \
    \    bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasing = true;\n\
    \        bool isMonotonicDecreasingMonotonicIncreasingDecreasing = true;\n   \
    \     bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing = true;\n\
    \        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecre\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcjw79j19.cs(40,88): error CS1002: ; expected

    '
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        bool increasing =\
    \ (first <= last);\n        bool decreasing = (first >= last);\n        if (increasing\
    \ && decreasing)\n            return false;\n        if (increasing)\n       \
    \     return true;\n        if (decreasing)\n            return false;\n     \
    \   long mid = l.Count / 2;\n        long midVal = l[mid];\n        bool increasingMid\
    \ = (midVal <= last);\n        bool decreasingMid = (midVal >= last);\n      \
    \  if (increasingMid && decreasingMid)\n            return false;\n        if\
    \ (increasingMid)\n            return true;\n        if (decreasingMid)\n    \
    \        return false;\n        long mid2 = mid / 2;\n        long midVal2 = l[mid2];\n\
    \        bool increasingMid2 = ((midVal2 <= last) && (midVal2 >= first));\n  \
    \      bool decreasingMid2 = ((midVal2 >= first) && (midVal2 <= last));\n    \
    \    if (increasingMid2 && decreasingMid2)\n            return false;\n      \
    \  if (increasingMid2)\n            return true;\n        if (decreasingMid2)\n\
    \            return false;\n        long mid3 = mid / 3;\n        long midVal3\
    \ = l[mid3];\n        bool increasingMid3 = (midVal3 <= last) && (midVal3 >= first);\n\
    \        bool decreasingMid3 = (midVal3 >= first) && (midVal3 <= last);\n    \
    \    if (increasingMid3 && decreasingMid3)\n            return false;\n      \
    \  if (increasingMid3)\n            return true;\n        if (decreasingMid3)\n\
    \            return false;\n        long mid4 = mid / 4;\n        long midVal4\
    \ = l[mid4];\n        bool increasingMid4 = (midVal4 <= last) && (midVal4 >= first);\n\
    \        bool decreasingMid4 = (midVal4 >= first) && (midVal4 <= last);\n    \
    \    if (increasingMid4 && decreasingMid4)\n            return false;\n      \
    \  if (increasingMid4)\n            return true;\n        if (decreasingMid4)\n\
    \            return false;\n        long mid5 = mid / 5;\n        long midVal5\
    \ = l[mid5];\n        bool increasingMid5 = (midVal5 <= last) && (midVal5 >= first);\n\
    \        bool decreasingMid5 = (midVal5 >= first) && (midVal5 <= last);\n    \
    \    if (increasingMid5 && decreasingMid5)\n            return \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmwi2o9on.cs(72,19): error CS1525: Invalid expression term ''}''

    /tmp/tmpmwi2o9on.cs(72,19): error CS1002: ; expected

    '
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max < min) {\n    \
    \        return false;\n        }\n        long mid = max / 2;\n        long mid2\
    \ = min / 2;\n        long mid3 = mid / 2;\n        long mid4 = mid3 / 2;\n  \
    \      long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7\
    \ = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n\
    \        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long\
    \ mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13\
    \ / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n   \
    \     long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long mid19\
    \ = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20 /\
    \ 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n     \
    \   long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long mid26\
    \ = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27 /\
    \ 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n     \
    \   long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33\
    \ = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 /\
    \ 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n     \
    \   long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long mid40\
    \ = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41 /\
    \ 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 / 2;\n     \
    \   long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n        long mid47\
    \ = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49 = mid48 /\
    \ 2;\n        long mid50 = mid49 / 2;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu8h2w_2d.cs(16,24): error CS0161: ''Problem.Monotonic(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0], last = l[l.Count - 1];\n    \
    \    bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            long current = l[i];\n            if\
    \ (current < first) increasing = false;\n            else if (current > last)\
    \ decreasing = false;\n            else if (current == first) increasing = true;\n\
    \            else if (current == last) decreasing = true;\n        }\n       \
    \ return increasing || decreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9633862e897448dbcc54fb2fe92289e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9633862e897448dbcc54fb2fe92289e>:0 \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        bool result = true;\n        foreach (long el in\
    \ l.Skip(1)) {\n            if (el < prev) {\n                result = false;\n\
    \                break;\n            }\n            prev = el;\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a308dcc6df9340a7bd0da29b4de7bf88>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a308dcc6df9340a7bd0da29b4de7bf88>:0 \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = (min < max);\n        bool isDecreasing = (max >\
    \ min);\n        bool isMonotonic = true;\n        if (isIncreasing && isDecreasing)\
    \ {\n            isMonotonic = (mid == 0);\n        } else if (isIncreasing) {\n\
    \            isMonotonic = (mid > 0);\n        } else if (isDecreasing) {\n  \
    \          isMonotonic = (mid < 0);\n        }\n        return isMonotonic;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3164241f6d7643de86898efe5d3b9861>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3164241f6d7643de86898efe5d3b9861>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max == min) {\n   \
    \         return true;\n        }\n        if (max < min) {\n            return\
    \ false;\n        }\n        long mid = (max + min) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        foreach (long x in l) {\n            if (x > mid) {\n               \
    \ isIncreasing = false;\n            }\n            if (x < mid) {\n         \
    \       isDecreasing = false;\n            }\n            if (x == mid) {\n  \
    \              isMonotonic = false;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing || isMonotonic;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0657fcbef6ea40d8b46a85f8dc9127ec>:0 \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        var first = l[0];\n        var last = l[l.Count\
    \ - 1];\n        if (first < last) return true;\n        if (first > last) return\
    \ false;\n        var mid = l.Count / 2;\n        var m1 = l[mid];\n        var\
    \ m2 = l[mid + 1];\n        if (m1 < m2) return true;\n        if (m1 > m2) return\
    \ false;\n        var m3 = l[mid * 2];\n        var m4 = l[mid * 2 + 1];\n   \
    \     if (m3 < m4) return true;\n        if (m3 > m4) return false;\n        var\
    \ m5 = l[mid * 3];\n        var m6 = l[mid * 3 + 1];\n        if (m5 < m6) return\
    \ true;\n        if (m5 > m6) return false;\n        var m7 = l[mid * 4];\n  \
    \      var m8 = l[mid * 4 + 1];\n        if (m7 < m8) return true;\n        if\
    \ (m7 > m8) return false;\n        var m9 = l[mid * 5];\n        var m10 = l[mid\
    \ * 5 + 1];\n        if (m9 < m10) return true;\n        if (m9 > m10) return\
    \ false;\n        var m11 = l[mid * 6];\n        var m12 = l[mid * 6 + 1];\n \
    \       if (m11 < m12) return true;\n        if (m11 > m12) return false;\n  \
    \      var m13 = l[mid * 7];\n        var m14 = l[mid * 7 + 1];\n        if (m13\
    \ < m14) return true;\n        if (m13 > m14) return false;\n        var m15 =\
    \ l[mid * 8];\n        var m16 = l[mid * 8 + 1];\n        if (m15 < m16) return\
    \ true;\n        if (m15 > m16) return false;\n        var m17 = l[mid * 9];\n\
    \        var m18 = l[mid * 9 + 1];\n        if (m17 < m18) return true;\n    \
    \    if (m17 > m18) return false;\n        var m19 = l[mid * 10];\n        var\
    \ m20 = l[mid * 10 + 1];\n        if (m19 < m20) return true;\n        if (m19\
    \ > m20) return false;\n        var m21 = l[mid * 11];\n        var m22 = l[mid\
    \ * 11 + 1];\n        if (m21 < m22) return true;\n        if (m21 > m22) return\
    \ false;\n        var m23 = l[mid * 12];\n        var m24 = l[mid * 12 + 1];\n\
    \        if (m23 < m24) return true;\n        if (m23 > m24) return false;\n \
    \       var m25 = l[mid * 13];\n        var m26 = l[m\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqlt6tb_1.cs(72,22): error CS1003: Syntax error, '']'' expected

    /tmp/tmpqlt6tb_1.cs(72,22): error CS1002: ; expected

    '
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  long midVal = l[mid];\n        long midVal2 = l[mid];\n        long midVal3\
    \ = l[mid];\n        long midVal4 = l[mid];\n        long midVal5 = l[mid];\n\
    \        long midVal6 = l[mid];\n        long midVal7 = l[mid];\n        long\
    \ midVal8 = l[mid];\n        long midVal9 = l[mid];\n        long midVal10 = l[mid];\n\
    \        long midVal11 = l[mid];\n        long midVal12 = l[mid];\n        long\
    \ midVal13 = l[mid];\n        long midVal14 = l[mid];\n        long midVal15 =\
    \ l[mid];\n        long midVal16 = l[mid];\n        long midVal17 = l[mid];\n\
    \        long midVal18 = l[mid];\n        long midVal19 = l[mid];\n        long\
    \ midVal20 = l[mid];\n        long midVal21 = l[mid];\n        long midVal22 =\
    \ l[mid];\n        long midVal23 = l[mid];\n        long midVal24 = l[mid];\n\
    \        long midVal25 = l[mid];\n        long midVal26 = l[mid];\n        long\
    \ midVal27 = l[mid];\n        long midVal28 = l[mid];\n        long midVal29 =\
    \ l[mid];\n        long midVal30 = l[mid];\n        long midVal31 = l[mid];\n\
    \        long midVal32 = l[mid];\n        long midVal33 = l[mid];\n        long\
    \ midVal34 = l[mid];\n        long midVal35 = l[mid];\n        long midVal36 =\
    \ l[mid];\n        long midVal37 = l[mid];\n        long midVal38 = l[mid];\n\
    \        long midVal39 = l[mid];\n        long midVal40 = l[mid];\n        long\
    \ midVal41 = l[mid];\n        long midVal42 = l[mid];\n        long midVal43 =\
    \ l[mid];\n        long midVal44 = l[mid];\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0pp4i4km.cs(22,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(23,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(24,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(25,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(26,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(27,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(28,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(29,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(30,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(31,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(32,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(33,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(34,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(35,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(36,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(37,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(38,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(39,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(40,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(41,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(42,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp0pp4i4km.cs(43,27): err'
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min > max) {\n    \
    \        return false;\n        }\n        long mid = l.Count / 2;\n        long\
    \ midVal = l[mid];\n        long midVal2 = l[mid+1];\n        if (midVal > midVal2)\
    \ {\n            return false;\n        }\n        long midVal3 = l[mid-1];\n\
    \        if (midVal > midVal3) {\n            return false;\n        }\n     \
    \   long midVal4 = l[mid];\n        if (midVal4 > midVal) {\n            return\
    \ false;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb32k36do.cs(23,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpb32k36do.cs(24,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpb32k36do.cs(28,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpb32k36do.cs(32,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min > max) return false;\n\
    \        if (min == max) return true;\n        long mid = min + (max - min) /\
    \ 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n \
    \       bool isMonotonic = true;\n        foreach (long x in l) {\n          \
    \  if (x > mid) isIncreasing = false;\n            if (x < mid) isDecreasing =\
    \ false;\n            if (x == mid) isMonotonic = false;\n        }\n        return\
    \ isIncreasing || isDecreasing || isMonotonic;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d879c6faf054c3bac7f3a0c1f2fabfa>:0 \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        foreach (long x in l.Skip(1).Take(l.Count\
    \ - 1)) {\n            if (x > mid) {\n                isIncreasing = false;\n\
    \                break;\n            }\n            if (x < mid) {\n         \
    \       isDecreasing = false;\n                break;\n            }\n       \
    \ }\n        return isIncreasing || isDecreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4a621f2ac4b447896969fd261b03b87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4a621f2ac4b447896969fd261b03b87>:0 \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        bool increasing = true;\n        foreach (long el\
    \ in l.Skip(1)) {\n            if (el < prev) {\n                increasing =\
    \ false;\n            }\n            prev = el;\n        }\n        return increasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b84d80a1fa9f4c08ae018c1bc920de74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b84d80a1fa9f4c08ae018c1bc920de74>:0 \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        bool isIncreasing = (mid > min);\n        bool isDecreasing\
    \ = (mid < max);\n        if (isIncreasing && isDecreasing)\n            return\
    \ true;\n        if (isIncreasing && !isDecreasing)\n            return false;\n\
    \        if (!isIncreasing && isDecreasing)\n            return false;\n     \
    \   bool isMonotonic = true;\n        foreach (long x in l)\n            if (x\
    \ < mid)\n                isMonotonic = false;\n        return isMonotonic;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84ade2ca874f4b1aac682a1bb45c5f9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84ade2ca874f4b1aac682a1bb45c5f9c>:0 \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min < max) {\n    \
    \        long mid = l.Count / 2;\n            long midVal = l[mid];\n        \
    \    bool isIncreasing = true;\n            bool isDecreasing = true;\n      \
    \      for (int i = 0; i < l.Count - 1; i++) {\n                if (l[i] > midVal)\
    \ {\n                    isIncreasing = false;\n                }\n          \
    \      if (l[i] < midVal) {\n                    isDecreasing = false;\n     \
    \           }\n            }\n            if (isIncreasing && isDecreasing) {\n\
    \                return true;\n            }\n            if (isIncreasing &&\
    \ !isDecreasing) {\n                return true;\n            }\n            if\
    \ (!isIncreasing && isDecreasing) {\n                return true;\n          \
    \  }\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp92pe6uuz.cs(21,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        if (min > max) {\n    \
    \        return false;\n        }\n        long mid = min + (max - min) / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  foreach (long num in l) {\n            if (num < mid) {\n                isDecreasing\
    \ = false;\n            } else if (num > mid) {\n                isIncreasing\
    \ = false;\n            } else {\n                isIncreasing = isDecreasing\
    \ = true;\n            }\n            if (isIncreasing && isDecreasing) {\n  \
    \              return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <787235bd1f5e421bbb197a8fcf3ad526>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <787235bd1f5e421bbb197a8fcf3ad526>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = (min < mid);\n        bool isDecreasing = (max >\
    \ mid);\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjaqvwqba.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && isDecreasing) return true;\n            if (isIncreasing && !isDecreasing)\
    \ return false;\n            if (!isIncreasing && isDecreasing) return false;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f94bbf5a9ba4b45a49e212011fd3782>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f94bbf5a9ba4b45a49e212011fd3782>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long max = l.Max();\n        long min = l.Min();\n\
    \        long mid = l.Count / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        if (max < min) {\n            isIncreasing = false;\n\
    \            isDecreasing = false;\n        }\n        else {\n            if\
    \ (mid > 0) isIncreasing = Monotonic(l.GetRange(0, mid));\n            if (mid\
    \ < l.Count - 1) isDecreasing = Monotonic(l.GetRange(mid, l.Count - 1));\n   \
    \     }\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpolvo41b3.cs(28,65): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpolvo41b3.cs(29,72): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        long mid = first + (last - first) / 2;\n        long mid2 = mid + (mid\
    \ - first) / 2;\n        long mid3 = mid2 + (mid2 - first) / 2;\n        long\
    \ mid4 = mid3 + (mid3 - first) / 2;\n        long mid5 = mid4 + (mid4 - first)\
    \ / 2;\n        long mid6 = mid5 + (mid5 - first) / 2;\n        long mid7 = mid6\
    \ + (mid6 - first) / 2;\n        long mid8 = mid7 + (mid7 - first) / 2;\n    \
    \    long mid9 = mid8 + (mid8 - first) / 2;\n        long mid10 = mid9 + (mid9\
    \ - first) / 2;\n        long mid11 = mid10 + (mid10 - first) / 2;\n        long\
    \ mid12 = mid11 + (mid11 - first) / 2;\n        long mid13 = mid12 + (mid12 -\
    \ first) / 2;\n        long mid14 = mid13 + (mid13 - first) / 2;\n        long\
    \ mid15 = mid14 + (mid14 - first) / 2;\n        long mid16 = mid15 + (mid15 -\
    \ first) / 2;\n        long mid17 = mid16 + (mid16 - first) / 2;\n        long\
    \ mid18 = mid17 + (mid17 - first) / 2;\n        long mid19 = mid18 + (mid18 -\
    \ first) / 2;\n        long mid20 = mid19 + (mid19 - first) / 2;\n        long\
    \ mid21 = mid20 + (mid20 - first) / 2;\n        long mid22 = mid21 + (mid21 -\
    \ first) / 2;\n        long mid23 = mid22 + (mid22 - first) / 2;\n        long\
    \ mid24 = mid23 + (mid23 - first) / 2;\n        long mid25 = mid24 + (mid24 -\
    \ first) / 2;\n        long mid26 = mid25 + (mid25 - first) / 2;\n        long\
    \ mid27 = mid26 + (mid26 - first) / 2;\n        long mid28 = mid27 + (mid27 -\
    \ first) / 2;\n        long mid29 = mid28 + (mid28 - first) / 2;\n        long\
    \ mid30 = mid29 + (mid29 - first) / 2;\n        long mid31 = mid30 + (mid30 -\
    \ first) / 2;\n        long mid32 = mid31 + (mid31 - first) / 2;\n        long\
    \ mid33 = mid32 + (mid32 - first) / 2;\n        long mid34 = mid33 + (mid33 -\
    \ first) / \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp27oazs8u.cs(53,47): error CS1525: Invalid expression term ''}''

    /tmp/tmp27oazs8u.cs(53,47): error CS1002: ; expected

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max < min) return false;\n\
    \        long mid = min + (max - min) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        foreach (long x in l) {\n        \
    \    if (x > mid) {\n                isDecreasing = false;\n                break;\n\
    \            }\n            if (x < mid) {\n                isIncreasing = false;\n\
    \                break;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fc3fb2a7a9446a7a19ba43cb8835ce4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fc3fb2a7a9446a7a19ba43cb8835ce4>:0 \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + (last - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        if (first < mid) {\n            isIncreasing = Monotonic(l.Skip(1).Take(l.Count\
    \ - 1));\n        }\n        if (mid < last) {\n            isDecreasing = Monotonic(l.Take(l.Count\
    \ - 1).Skip(l.Count - 1));\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe2bsncga.cs(23,38): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpe2bsncga.cs(26,38): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max < min) {\n    \
    \        return false;\n        }\n        long mid = l.Count / 2;\n        long\
    \ midVal = l[mid];\n        if (midVal < min) {\n            return false;\n \
    \       }\n        if (midVal > max) {\n            return false;\n        }\n\
    \        long leftMax = l[mid];\n        long rightMax = l[mid];\n        long\
    \ leftMin = l[mid];\n        long rightMin = l[mid];\n        bool leftIsMax =\
    \ true;\n        bool rightIsMax = true;\n        bool leftIsMin = true;\n   \
    \     bool rightIsMin = true;\n        bool leftIsMidVal = true;\n        bool\
    \ rightIsMidVal = true;\n        bool leftIsMaxVal = true;\n        bool rightIsMaxVal\
    \ = true;\n        bool leftIsMinVal = true;\n        bool rightIsMinVal = true;\n\
    \        bool leftIsMidValVal = true;\n        bool rightIsMidValVal = true;\n\
    \        bool leftIsMaxValVal = true;\n        bool rightIsMaxValVal = true;\n\
    \        bool leftIsMinValVal = true;\n        bool rightIsMinValVal = true;\n\
    \        bool leftIsMidValValVal = true;\n        bool rightIsMidValValVal = true;\n\
    \        bool leftIsMaxValValVal = true;\n        bool rightIsMaxValValVal = true;\n\
    \        bool leftIsMinValValVal = true;\n        bool rightIsMinValValVal = true;\n\
    \        bool leftIsMidValValValVal = true;\n        bool rightIsMidValValValVal\
    \ = true;\n        bool leftIsMaxValValValVal = true;\n        bool rightIsMaxValValValVal\
    \ = true;\n        bool leftIsMinValValValVal = true;\n        bool rightIsMinValValValVal\
    \ = true;\n        bool leftIsMidValValValValVal = true;\n        bool rightIsMidValValValValVal\
    \ = true;\n        bool leftIsMaxValValValValVal = true;\n        bool rightIsMaxValValValValVal\
    \ = true;\n        bool leftIsMinValValValValVal = true;\n        bool rightIsMinValValValValVal\
    \ = true;\n        bool leftIsMidValValValValValVal = true;\n        bool rightIsMidValValValValValVal\
    \ = true;\n        bool leftIsMaxValValValValValVal = true;\n        bool rightIsMaxValValValValValVal\
    \ = true;\n        bool leftIsMinValValValValValVal = true;\n        bool rightIsMinValValValValValVal\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4b_panrl.cs(73,42): error CS1002: ; expected

    '
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp402ys5ht.cs(61,22): error CS1026: ) expected

    /tmp/tmp402ys5ht.cs(61,22): error CS1002: ; expected

    '
  timestamp: 1659824147
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + ((last - first) / 2);\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingDecreasingMonotonic = true;\n        bool isMonotonicIncreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingDecreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicDecreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingDecreasingMonotonic = true;\n        bool is\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppk_233vs.cs(50,14): error CS1001: Identifier expected

    /tmp/tmppk_233vs.cs(50,14): error CS1002: ; expected

    /tmp/tmppk_233vs.cs(50,14): error CS1525: Invalid expression term ''is''

    /tmp/tmppk_233vs.cs(50,16): error CS1031: Type expected

    /tmp/tmppk_233vs.cs(50,16): error CS1002: ; expected

    '
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        if (l.Count == 1) {\n            return true;\n        }\n  \
    \      long prev = l[0];\n        bool increasing = true;\n        bool decreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long current\
    \ = l[i];\n            if (current < prev) {\n                decreasing = false;\n\
    \            }\n            if (current > prev) {\n                increasing\
    \ = false;\n            }\n            prev = current;\n        }\n        if\
    \ (increasing && decreasing) {\n            return true;\n        }\n        if\
    \ (increasing && !decreasing) {\n            return true;\n        }\n       \
    \ if (decreasing && !increasing) {\n            return true;\n        }\n    \
    \    return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min < max) {\n    \
    \        long mid = min + (max - min) / 2;\n            bool isIncreasing = l.TakeWhile(x\
    \ => x <= mid).All(x => x >= mid);\n            bool isDecreasing = l.TakeWhile(x\
    \ => x >= mid).All(x => x <= mid);\n            return isIncreasing || isDecreasing;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <760a199d8e934816b7fa57d535c10fd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <760a199d8e934816b7fa57d535c10fd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && isDecreasing) return false;\n        }\n        return true;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d07621402e2245a4a8d51b4a4a6a0f0c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d07621402e2245a4a8d51b4a4a6a0f0c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        bool increasing = true;\n        foreach (long el\
    \ in l.Skip(1)) {\n            if (el < prev) {\n                increasing =\
    \ false;\n                break;\n            }\n            prev = el;\n    \
    \    }\n        return increasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2acbbd1ac18647f4818907646da66806>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2acbbd1ac18647f4818907646da66806>:0 \n"
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long max = l.Max();\n        long min = l.Min();\n\
    \        if (max < min) return false;\n        long mid = min + (max - min) /\
    \ 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n \
    \       foreach (long x in l) {\n            if (x > mid) isIncreasing = false;\n\
    \            if (x < mid) isDecreasing = false;\n        }\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6990c92e6ec24cd49b1d0785e339e89e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6990c92e6ec24cd49b1d0785e339e89e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        bool isMonotonic = true;\n        foreach (long x in l) {\n         \
    \   if (x < mid) {\n                isDecreasing = false;\n            } else\
    \ if (x > mid) {\n                isIncreasing = false;\n            } else {\n\
    \                isMonotonic = false;\n            }\n        }\n        return\
    \ isMonotonic;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24f1d3a00bed45498afa4801cd0349c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24f1d3a00bed45498afa4801cd0349c2>:0 \n"
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long first = l[0], last = l[l.Count - 1];\n     \
    \   long mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            long current = l[i];\n            if (current < mid) {\n    \
    \            isIncreasing = false;\n            } else if (current > mid) {\n\
    \                isDecreasing = false;\n            } else {\n               \
    \ isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && isDecreasing) return true;\n        }\n        return false;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08c8e1f1cfd5499e89dc17983dc92393>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08c8e1f1cfd5499e89dc17983dc92393>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0], last = l[l.Count - 1];\n    \
    \    bool increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n  \
    \          if (l[i] < first) increasing = false;\n            if (l[i] > last)\
    \ increasing = false;\n        }\n        return increasing;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85498958a84641a086829e96881c5d72>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85498958a84641a086829e96881c5d72>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            mid = current\
    \ + (mid - current) / 2;\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <915feedc01b2424e9eaa556c05a536b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <915feedc01b2424e9eaa556c05a536b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        var first = l[0];\n        var last = l[l-1];\n \
    \       var mid = first + ((last - first) >> 1);\n        var left = new List<long>();\n\
    \        var right = new List<long>();\n        foreach (var x in l)\n       \
    \ {\n            if (x < mid)\n            {\n                left.Add(x);\n \
    \           }\n            else if (x > mid)\n            {\n                right.Add(x);\n\
    \            }\n            else\n            {\n                return false;\n\
    \            }\n        }\n        return Monotonic(left) && Monotonic(right);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy80r629l.cs(19,22): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''int''

    '
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max < min) {\n    \
    \        return false;\n        }\n        long mid = l.Count / 2;\n        long\
    \ midVal = l[mid];\n        long midVal2 = l[mid];\n        long midVal3 = l[mid];\n\
    \        long midVal4 = l[mid];\n        long midVal5 = l[mid];\n        long\
    \ midVal6 = l[mid];\n        long midVal7 = l[mid];\n        long midVal8 = l[mid];\n\
    \        long midVal9 = l[mid];\n        long midVal10 = l[mid];\n        long\
    \ midVal11 = l[mid];\n        long midVal12 = l[mid];\n        long midVal13 =\
    \ l[mid];\n        long midVal14 = l[mid];\n        long midVal15 = l[mid];\n\
    \        long midVal16 = l[mid];\n        long midVal17 = l[mid];\n        long\
    \ midVal18 = l[mid];\n        long midVal19 = l[mid];\n        long midVal20 =\
    \ l[mid];\n        long midVal21 = l[mid];\n        long midVal22 = l[mid];\n\
    \        long midVal23 = l[mid];\n        long midVal24 = l[mid];\n        long\
    \ midVal25 = l[mid];\n        long midVal26 = l[mid];\n        long midVal27 =\
    \ l[mid];\n        long midVal28 = l[mid];\n        long midVal29 = l[mid];\n\
    \        long midVal30 = l[mid];\n        long midVal31 = l[mid];\n        long\
    \ midVal32 = l[mid];\n        long midVal33 = l[mid];\n        long midVal34 =\
    \ l[mid];\n        long midVal35 = l[mid];\n        long midVal36 = l[mid];\n\
    \        long midVal37 = l[mid];\n        long midVal38 = l[mid];\n        long\
    \ midVal39 = l[mid];\n        long midVal40 = l[mid];\n        long midVal41 =\
    \ l[mid];\n        long midVal42 = l[mid];\n        long midVal43 = l[mid];\n\
    \        long midVal44 = l[mid];\n        long midVal45 = \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfyi54nrx.cs(67,24): error CS1525: Invalid expression term ''}''

    /tmp/tmpfyi54nrx.cs(67,24): error CS1002: ; expected

    '
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool isIncreasing = (max\
    \ > min);\n        bool isDecreasing = (max < min);\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <110f9640438f456ab5e6ad24abc82229>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <110f9640438f456ab5e6ad24abc82229>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n    \
    \    bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingDecreasingMonotonic = true;\n        bool isMonotonicDecreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicDecreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingDecreasingMonotonic = true;\n        bool isMonotonicDecreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicDecre\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk9p54876.cs(50,30): error CS1002: ; expected

    '
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool increasing = true;\n        foreach (long current\
    \ in l.Skip(1))\n        {\n            if (current < prev)\n            {\n \
    \               increasing = false;\n                break;\n            }\n \
    \           prev = current;\n        }\n        return increasing;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b81c3d79a2e04c1190a00fde81c7a708>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b81c3d79a2e04c1190a00fde81c7a708>:0 \n"
  stdout: ''
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp402ys5ht.cs(61,22): error CS1026: ) expected

    /tmp/tmp402ys5ht.cs(61,22): error CS1002: ; expected

    '
  timestamp: 1659824147
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        bool increasing =\
    \ (first < last);\n        bool decreasing = (first > last);\n        if (increasing\
    \ && decreasing) return true;\n        if (increasing) return true;\n        if\
    \ (decreasing) return false;\n        long mid = l.Count / 2;\n        bool increasing2\
    \ = Monotonic(l.GetRange(0, mid));\n        bool decreasing2 = Monotonic(l.GetRange(mid,\
    \ l.Count - 1));\n        if (increasing2 && decreasing2) return true;\n     \
    \   if (increasing2) return true;\n        if (decreasing2) return false;\n  \
    \      long mid2 = l.Count / 2;\n        bool increasing3 = Monotonic(l.GetRange(0,\
    \ mid2));\n        bool decreasing3 = Monotonic(l.GetRange(mid2, l.Count - 1));\n\
    \        if (increasing3 && decreasing3) return true;\n        if (increasing3)\
    \ return true;\n        if (decreasing3) return false;\n        long mid3 = l.Count\
    \ / 2;\n        bool increasing4 = Monotonic(l.GetRange(0, mid3));\n        bool\
    \ decreasing4 = Monotonic(l.GetRange(mid3, l.Count - 1));\n        if (increasing4\
    \ && decreasing4) return true;\n        if (increasing4) return true;\n      \
    \  if (decreasing4) return false;\n        long mid4 = l.Count / 2;\n        bool\
    \ increasing5 = Monotonic(l.GetRange(0, mid4));\n        bool decreasing5 = Monotonic(l.GetRange(mid4,\
    \ l.Count - 1));\n        if (increasing5 && decreasing5) return true;\n     \
    \   if (increasing5) return true;\n        if (decreasing5) return false;\n  \
    \      long mid5 = l.Count / 2;\n        bool increasing6 = Monotonic(l.GetRange(0,\
    \ mid5));\n        bool decreasing6 = Monotonic(l.GetRange(mid5, l.Count - 1));\n\
    \        if (increasing6 && decreasing6) return true;\n        if (increasing6)\
    \ return true;\n        if (decreasing6) return false;\n        long mid6 = l.Count\
    \ / 2;\n        bool increasing7 = Monotonic(l.GetRange(0, mid6));\n        bool\
    \ decreasing7 = Monotonic(l.GetRange(mid6, l.Count - 1));\n        if (increasing7\
    \ && decreasing7) return true;\n        if (increasing7) return true;\n      \
    \  if (decreasing7) return false;\n        long mid7 = l.\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppij5cgdv.cs(60,23): error CS1001: Identifier expected

    /tmp/tmppij5cgdv.cs(60,23): error CS1002: ; expected

    '
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n       \
    \ long first = l[0];\n        long last = l[0];\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        foreach (long e in l.Skip(1))\n    \
    \    {\n            if (e < first) increasing = false;\n            if (e > last)\
    \ decreasing = false;\n            last = e;\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1fa6529dd25d41da8952057f0322b581>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1fa6529dd25d41da8952057f0322b581>:0 \n"
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < mid) {\n                isIncreasing = false;\n\
    \            }\n            if (l[i] > mid) {\n                isDecreasing =\
    \ false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00c79a8427c144438846e8a76da7b445>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00c79a8427c144438846e8a76da7b445>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long middle = l.Skip(1).Take(2).Last();\n\
    \        long middle2 = l.Skip(1).Take(2).Skip(1).Take(2).Last();\n        long\
    \ middle3 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Last();\n      \
    \  long middle4 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Last();\n\
    \        long middle5 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Skip(1).Last();\n\
    \        long middle6 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Skip(1).Skip(1).Last();\n\
    \        long middle7 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Skip(1).Skip(1).Skip(1).Last();\n\
    \        long middle8 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Last();\n\
    \        long middle9 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Last();\n\
    \        long middle10 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Last();\n\
    \        long middle11 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Last();\n\
    \        long middle12 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Last();\n\
    \        long middle13 = l.Skip(1).Take(2).Skip(1).Take(2).Skip(1).Take(2).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Skip(1).Last();\n\
    \        long middle14 = l.Skip(1).Take(2).Skip(1).Take(2).\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptvysiybw.cs(32,59): error CS1001: Identifier expected

    /tmp/tmptvysiybw.cs(32,59): error CS1002: ; expected

    '
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max == min) {\n   \
    \         return true;\n        }\n        bool increasing = (max < min);\n  \
    \      bool decreasing = (max > min);\n        if (increasing || decreasing) {\n\
    \            bool increasingOrDecreasing = increasing || decreasing;\n       \
    \     bool increasingOrDecreasingOrEqual = increasing || decreasing || max ==\
    \ min;\n            if (increasingOrDecreasing || increasingOrDecreasingOrEqual)\
    \ {\n                return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3d11fbc8316a4d4ebfdf41e8dd59f2cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3d11fbc8316a4d4ebfdf41e8dd59f2cc>:0 \n"
  stdout: ''
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l\
    \ != null);\n        Debug.Assert(l.Count > 0);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4lmpz4w2.cs(61,29): error CS1026: ) expected

    /tmp/tmp4lmpz4w2.cs(61,29): error CS1002: ; expected

    '
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            mid = current\
    \ + (mid - current) / 2;\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e15ea0820bd7430eab2a97b75b729303>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e15ea0820bd7430eab2a97b75b729303>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        bool increasing =\
    \ true;\n        bool decreasing = true;\n        foreach (long x in l)\n    \
    \    {\n            if (x < first)\n            {\n                decreasing\
    \ = false;\n            }\n            else if (x > last)\n            {\n   \
    \             increasing = false;\n            }\n            else\n         \
    \   {\n                if (x < first)\n                {\n                   \
    \ decreasing = false;\n                }\n                else if (x > last)\n\
    \                {\n                    increasing = false;\n                }\n\
    \                else\n                {\n                    if (!increasing\
    \ && !decreasing)\n                    {\n                        return true;\n\
    \                    }\n                    else if (increasing && decreasing)\n\
    \                    {\n                        return false;\n              \
    \      }\n                    else if (increasing)\n                    {\n  \
    \                      decreasing = false;\n                    }\n          \
    \          else\n                    {\n                        increasing = false;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ increasing || decreasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8bee20e73f54829b4cd7c9c8bbf9ca8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8bee20e73f54829b4cd7c9c8bbf9ca8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long middle = l.Count\
    \ / 2;\n        long middle2 = middle / 2;\n        long middle3 = middle2 / 2;\n\
    \        long middle4 = middle3 / 2;\n        long middle5 = middle4 / 2;\n  \
    \      long middle6 = middle5 / 2;\n        long middle7 = middle6 / 2;\n    \
    \    long middle8 = middle7 / 2;\n        long middle9 = middle8 / 2;\n      \
    \  long middle10 = middle9 / 2;\n        long middle11 = middle10 / 2;\n     \
    \   long middle12 = middle11 / 2;\n        long middle13 = middle12 / 2;\n   \
    \     long middle14 = middle13 / 2;\n        long middle15 = middle14 / 2;\n \
    \       long middle16 = middle15 / 2;\n        long middle17 = middle16 / 2;\n\
    \        long middle18 = middle17 / 2;\n        long middle19 = middle18 / 2;\n\
    \        long middle20 = middle19 / 2;\n        long middle21 = middle20 / 2;\n\
    \        long middle22 = middle21 / 2;\n        long middle23 = middle22 / 2;\n\
    \        long middle24 = middle23 / 2;\n        long middle25 = middle24 / 2;\n\
    \        long middle26 = middle25 / 2;\n        long middle27 = middle26 / 2;\n\
    \        long middle28 = middle27 / 2;\n        long middle29 = middle28 / 2;\n\
    \        long middle30 = middle29 / 2;\n        long middle31 = middle30 / 2;\n\
    \        long middle32 = middle31 / 2;\n        long middle33 = middle32 / 2;\n\
    \        long middle34 = middle33 / 2;\n        long middle35 = middle34 / 2;\n\
    \        long middle36 = middle35 / 2;\n        long middle37 = middle36 / 2;\n\
    \        long middle38 = middle37 / 2;\n        long middle39 = middle38 / 2;\n\
    \        long middle40 = middle39 / 2;\n        long middle41 = middle40 / 2;\n\
    \        long middle42 = middle41 / 2;\n        long middle43 = middle42 / 2;\n\
    \        long middle44 = middle43 / 2;\n        long middle45 = middle44 / 2;\n\
    \        long middle46 = middle45 / 2;\n        long middle47 = middle46 / 2;\n\
    \        long middle48 = middle47 / 2;\n        long middle49 = middle48 / 2;\n\
    \        long middle50 = middle49 / 2;\n        long middle51 = middle50 / 2;\n\
    \        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprol05aqz.cs(16,24): error CS0161: ''Problem.Monotonic(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + (last - first) / 2;\n        bool increasing = first < mid;\n        bool\
    \ decreasing = last > mid;\n        if (increasing && decreasing)\n          \
    \  return true;\n        if (increasing)\n            return false;\n        if\
    \ (decreasing)\n            return true;\n        bool increasing2 = l.TakeWhile(x\
    \ => x <= mid).All(x => x <= mid);\n        bool decreasing2 = l.Reverse().TakeWhile(x\
    \ => x >= mid).All(x => x >= mid);\n        if (increasing2 && decreasing2)\n\
    \            return true;\n        if (increasing2)\n            return false;\n\
    \        if (decreasing2)\n            return true;\n        bool increasing3\
    \ = l.TakeWhile(x => x <= mid).All(x => x <= mid);\n        bool decreasing3 =\
    \ l.Reverse().TakeWhile(x => x >= mid).All(x => x >= mid);\n        if (increasing3\
    \ && decreasing3)\n            return true;\n        if (increasing3)\n      \
    \      return false;\n        if (decreasing3)\n            return true;\n   \
    \     bool increasing4 = l.TakeWhile(x => x <= mid).All(x => x <= mid);\n    \
    \    bool decreasing4 = l.Reverse().TakeWhile(x => x >= mid).All(x => x >= mid);\n\
    \        if (increasing4 && decreasing4)\n            return true;\n        if\
    \ (increasing4)\n            return false;\n        if (decreasing4)\n       \
    \     return true;\n        bool increasing5 = l.TakeWhile(x => x <= mid).All(x\
    \ => x <= mid);\n        bool decreasing5 = l.Reverse().TakeWhile(x => x >= mid).All(x\
    \ => x >= mid);\n        if (increasing5 && decreasing5)\n            return true;\n\
    \        if (increasing5)\n            return false;\n        if (decreasing5)\n\
    \            return true;\n        bool increasing6 = l.TakeWhile(x => x <= mid).All(x\
    \ => x <= mid);\n        bool decreasing6 = l.Reverse().TakeWhile(x => x >= mid).All(x\
    \ => x >= mid);\n        if (increasing6 && decreasing6)\n            return true;\n\
    \        if (increasing6)\n            return false;\n        if (decreasing6)\n\
    \            return true;\n        bool increasing7 = l.TakeWhile(x => x <= mid).All(x\
    \ => x <= mid);\n        bool decreasing7 = l.Reverse().TakeWhile(x => x >= mid).All(x\
    \ => x >= mid);\n        if (increasing\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppweflwbj.cs(70,23): error CS1026: ) expected

    /tmp/tmppweflwbj.cs(70,23): error CS1525: Invalid expression term ''}''

    /tmp/tmppweflwbj.cs(70,23): error CS1002: ; expected

    '
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max < min) {\n    \
    \        return false;\n        }\n        long mid = min + (max - min) / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  foreach (long element in l) {\n            if (element < mid) {\n         \
    \       isDecreasing = false;\n            } else if (element > mid) {\n     \
    \           isIncreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a39ab0898f314faf8ac2da853b4cec14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a39ab0898f314faf8ac2da853b4cec14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n    \
    \    bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonic = true;\n\
    \        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreas\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1axfitpv.cs(35,132): error CS1002: ; expected

    '
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        bool isMonotonic = true;\n        foreach (long x in l) {\n         \
    \   if (x > mid) {\n                isIncreasing = false;\n            }\n   \
    \         if (x < mid) {\n                isDecreasing = false;\n            }\n\
    \            if (x == mid) {\n                isMonotonic = false;\n         \
    \   }\n        }\n        return isIncreasing || isDecreasing || isMonotonic;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27b82deae4c74316aa9ad9112e94d5a6>:0 \n"
  stdout: ''
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp402ys5ht.cs(61,22): error CS1026: ) expected

    /tmp/tmp402ys5ht.cs(61,22): error CS1002: ; expected

    '
  timestamp: 1659824147
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        if (first > last) return true;\n        if (first == last) return\
    \ true;\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = Monotonic(l.Skip(1).Take(l.Count - 1));\n        bool isDecreasing = Monotonic(l.Take(l.Count\
    \ - 1).Skip(1));\n        if (isIncreasing && isDecreasing) return true;\n   \
    \     if (isIncreasing && !isDecreasing) return false;\n        if (!isIncreasing\
    \ && isDecreasing) return false;\n        return Monotonic(l.Skip(1).Take(l.Count\
    \ - 1));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw2upse0h.cs(23,39): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpw2upse0h.cs(24,39): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpw2upse0h.cs(28,26): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n    \
    \    bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingDecreasingMonotonicIncreasing = true;\n      \
    \  bool isMonotonicIncreasingDecreasingMonotonicDecreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing = true;\n     \
    \   bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreas\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyqapjth.cs(38,138): error CS1002: ; expected

    '
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = (max + min)\
    \ / 2;\n        bool increasing = (mid > max);\n        bool decreasing = (mid\
    \ < min);\n        if (increasing || decreasing) {\n            bool increasing2\
    \ = (l.Count > 1);\n            bool decreasing2 = (l.Count > 1);\n          \
    \  if (increasing2) {\n                increasing = (l.Last() > mid);\n      \
    \      }\n            if (decreasing2) {\n                decreasing = (l.First()\
    \ < mid);\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e635b37223445ed8d1435b54f849f48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e635b37223445ed8d1435b54f849f48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp402ys5ht.cs(61,22): error CS1026: ) expected

    /tmp/tmp402ys5ht.cs(61,22): error CS1002: ; expected

    '
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && isDecreasing) return true;\n            if (isIncreasing && !isDecreasing)\
    \ return true;\n            if (!isIncreasing && isDecreasing) return true;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5077266e076490a99ecc52bc143e34c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5077266e076490a99ecc52bc143e34c>:0 \n"
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        bool increasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < first) increasing\
    \ = false;\n            if (current > last) increasing = false;\n        }\n \
    \       return increasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c43e0d56061a42bfa16bb7bd9497b35e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c43e0d56061a42bfa16bb7bd9497b35e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        bool increasing = true;\n        bool decreasing = true;\n  \
    \      for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n\
    \            if (current < first) {\n                increasing = false;\n   \
    \         } else if (current > last) {\n                decreasing = false;\n\
    \            } else {\n                increasing = current < last;\n        \
    \        decreasing = current > first;\n            }\n        }\n        return\
    \ increasing || decreasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <521b299bde6946df9f3d41f3f3d58404>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <521b299bde6946df9f3d41f3f3d58404>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min == max) {\n   \
    \         return true;\n        }\n        if (min < 0 || max < 0) {\n       \
    \     return false;\n        }\n        long mid = min + (max - min) / 2;\n  \
    \      if (mid < min) {\n            return false;\n        }\n        if (mid\
    \ > max) {\n            return false;\n        }\n        bool leftIncreasing\
    \ = l.Take(1).All(x => x <= mid);\n        bool rightIncreasing = l.Take(l.Count\
    \ - 1).All(x => x >= mid);\n        return leftIncreasing || rightIncreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <945cd45cac0349e48a58b35fe72a39c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <945cd45cac0349e48a58b35fe72a39c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long prev = l[0];\n        bool increasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n\
    \            if (current < prev) {\n                increasing = false;\n    \
    \        }\n            prev = current;\n        }\n        return increasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e235f6a4b92428da78e293b5fda0490>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e235f6a4b92428da78e293b5fda0490>:0 \n"
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        bool increasing = true;\n        foreach (long el\
    \ in l.Skip(1)) {\n            if (el < prev) {\n                increasing =\
    \ false;\n            }\n            prev = el;\n        }\n        return increasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b84d80a1fa9f4c08ae018c1bc920de74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b84d80a1fa9f4c08ae018c1bc920de74>:0 \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max < min) {\n    \
    \        return false;\n        }\n        long mid = max / 2;\n        bool increasing\
    \ = (mid > min);\n        bool decreasing = (mid < min);\n        if (increasing\
    \ || decreasing) {\n            while (true) {\n                long mid2 = mid\
    \ / 2;\n                if (mid > mid2) {\n                    mid = mid - mid2;\n\
    \                    if (mid < min) {\n                        mid = mid2;\n \
    \                       break;\n                    }\n                } else\
    \ {\n                    mid = mid + mid2;\n                    if (mid > max)\
    \ {\n                        mid = mid2;\n                        break;\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ increasing || decreasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659824156
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        foreach (long x in l) {\n            if (x > mid) {\n               \
    \ isIncreasing = false;\n            }\n            if (x < mid) {\n         \
    \       isDecreasing = false;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41d753b469594c0987bb572209ed5f7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <41d753b469594c0987bb572209ed5f7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = (first\
    \ + last) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing =\
    \ true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingDecreasingMonotonicIncreasing = true;\n      \
    \  bool isMonotonicIncreasingDecreasingMonotonicDecreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing = true;\n     \
    \   bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonic\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3yp1sjbr.cs(40,25): error CS1002: ; expected

    '
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = (first + last) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            long current = l[i];\n            if (current < mid) {\n    \
    \            isIncreasing = false;\n            } else if (current > mid) {\n\
    \                isDecreasing = false;\n            } else {\n               \
    \ isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && isDecreasing) return true;\n            if (isIncreasing && !isDecreasing)\
    \ return false;\n            if (!isIncreasing && isDecreasing) return false;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c5518c7b6c3847afa220e0d2e54c3746>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c5518c7b6c3847afa220e0d2e54c3746>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        bool isMonotonic = true;\n        foreach (long x in l) {\n         \
    \   if (x > mid) {\n                isIncreasing = false;\n            }\n   \
    \         if (x < mid) {\n                isDecreasing = false;\n            }\n\
    \            if (x == mid) {\n                isMonotonic = false;\n         \
    \   }\n        }\n        if (isIncreasing && isDecreasing && isMonotonic) {\n\
    \            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13eef6e1b46c4edc8fdee4e955b96a8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13eef6e1b46c4edc8fdee4e955b96a8a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = (first + last) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            long current = l[i];\n            if (current < mid) {\n    \
    \            isIncreasing = false;\n            } else if (current > mid) {\n\
    \                isDecreasing = false;\n            } else {\n               \
    \ isIncreasing = isDecreasing = true;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <652b93aa3ee1457ab9b4d2beaa9c9dc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <652b93aa3ee1457ab9b4d2beaa9c9dc7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first > last)\n\
    \            return false;\n        long mid = first + (last - first) / 2;\n \
    \       bool isIncreasing = true;\n        bool isDecreasing = true;\n       \
    \ bool isMonotonic = true;\n        foreach (long x in l)\n        {\n       \
    \     if (x > mid)\n            {\n                isIncreasing = false;\n   \
    \             isDecreasing = false;\n                break;\n            }\n \
    \           if (x < mid)\n            {\n                isDecreasing = false;\n\
    \                isIncreasing = false;\n                break;\n            }\n\
    \            if (x == mid)\n            {\n                isIncreasing = true;\n\
    \                isDecreasing = true;\n                break;\n            }\n\
    \        }\n        if (isIncreasing && isDecreasing)\n        {\n           \
    \ isMonotonic = true;\n        }\n        else if (isIncreasing && !isDecreasing)\n\
    \        {\n            isMonotonic = false;\n        }\n        else if (!isIncreasing\
    \ && isDecreasing)\n        {\n            isMonotonic = true;\n        }\n  \
    \      return isMonotonic;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f5294a262444dc78b9878f388a58eae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f5294a262444dc78b9878f388a58eae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n    \
    \    bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicDecreasing = true;\n   \
    \     bool isMonotonicIncreasingMonotonicIncreasing = true;\n        bool isMonotonicIncreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonicIncreasing = true;\n        bool isMonotonicDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonicIncreasing = true;\n        bool isMonotonicDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonicIncreasing = true;\n        bool isMonotonicDecreasingMonotonic\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppg4457t4.cs(49,44): error CS1002: ; expected

    '
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first < last)\n\
    \            return false;\n        long mid = l.Count / 2;\n        long midVal\
    \ = l[mid];\n        long midVal2 = l[mid + 1];\n        long midVal3 = l[mid\
    \ + 2];\n        long midVal4 = l[mid + 3];\n        long midVal5 = l[mid + 4];\n\
    \        long midVal6 = l[mid + 5];\n        long midVal7 = l[mid + 6];\n    \
    \    long midVal8 = l[mid + 7];\n        long midVal9 = l[mid + 8];\n        long\
    \ midVal10 = l[mid + 9];\n        long midVal11 = l[mid + 10];\n        long midVal12\
    \ = l[mid + 11];\n        long midVal13 = l[mid + 12];\n        long midVal14\
    \ = l[mid + 13];\n        long midVal15 = l[mid + 14];\n        long midVal16\
    \ = l[mid + 15];\n        long midVal17 = l[mid + 16];\n        long midVal18\
    \ = l[mid + 17];\n        long midVal19 = l[mid + 18];\n        long midVal20\
    \ = l[mid + 19];\n        long midVal21 = l[mid + 20];\n        long midVal22\
    \ = l[mid + 21];\n        long midVal23 = l[mid + 22];\n        long midVal24\
    \ = l[mid + 23];\n        long midVal25 = l[mid + 24];\n        long midVal26\
    \ = l[mid + 25];\n        long midVal27 = l[mid + 26];\n        long midVal28\
    \ = l[mid + 27];\n        long midVal29 = l[mid + 28];\n        long midVal30\
    \ = l[mid + 29];\n        long midVal31 = l[mid + 30];\n        long midVal32\
    \ = l[mid + 31];\n        long midVal33 = l[mid + 32];\n        long midVal34\
    \ = l[mid + 33];\n        long midVal35 = l[mid + 34];\n        long midVal36\
    \ = l[mid + 35];\n        long midVal37 = l[mid + 36];\n        long midVal38\
    \ = l[mid + 37];\n        long midVal39 = l[mid + 38];\n        long midVal40\
    \ = l[mid + 39];\n        long midVal41 = l[mid + 40];\n        \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_g6pa3wg.cs(22,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(23,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(24,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(25,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(26,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(27,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(28,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(29,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(30,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(31,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(32,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(33,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(34,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(35,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(36,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(37,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(38,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(39,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(40,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(41,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(42,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_g6pa3wg.cs(43,27): err'
  timestamp: 1659824151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min == max) {\n   \
    \         return true;\n        }\n        long mid = l.Count / 2;\n        bool\
    \ leftIsMax = l.ElementAt(mid) == max;\n        bool rightIsMax = l.ElementAt(mid)\
    \ == max;\n        if (leftIsMax && rightIsMax) {\n            return true;\n\
    \        }\n        if (leftIsMax) {\n            return Monotonic(l.Take(mid));\n\
    \        }\n        if (rightIsMax) {\n            return Monotonic(l.Skip(mid).Take(l.Count\
    \ - mid));\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkn1d6lpc.cs(23,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpkn1d6lpc.cs(24,39): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpkn1d6lpc.cs(29,37): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpkn1d6lpc.cs(32,37): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min == max) {\n   \
    \         return true;\n        }\n        if (min > max) {\n            long\
    \ tmp = min;\n            min = max;\n            max = tmp;\n        }\n    \
    \    bool isIncreasing = true;\n        bool isDecreasing = true;\n        bool\
    \ isMonotonic = true;\n        long current = min;\n        long previous = min;\n\
    \        foreach (long element in l) {\n            if (element < current) {\n\
    \                isDecreasing = false;\n            }\n            if (element\
    \ > current) {\n                isIncreasing = false;\n            }\n       \
    \     if (element == previous) {\n                isMonotonic = false;\n     \
    \       }\n            previous = current;\n            current = element;\n \
    \       }\n        return isIncreasing || isDecreasing || isMonotonic;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        bool increasing = true;\n        bool decreasing\
    \ = true;\n        foreach (long current in l.Skip(1)) {\n            if (current\
    \ < prev) {\n                decreasing = false;\n            }\n            if\
    \ (current > prev) {\n                increasing = false;\n            }\n   \
    \         prev = current;\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        if (l.Count == 1) {\n            return true;\n        }\n  \
    \      long first = l[0];\n        long last = l[l.Count - 1];\n        long mid\
    \ = first + ((last - first) / 2);\n        bool isIncreasing = true;\n       \
    \ bool isDecreasing = true;\n        bool isMonotonic = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            long current = l[i];\n            if\
    \ (current < mid) {\n                isIncreasing = false;\n            } else\
    \ if (current > mid) {\n                isDecreasing = false;\n            } else\
    \ {\n                isMonotonic = false;\n            }\n        }\n        if\
    \ (isIncreasing && isDecreasing) {\n            return isMonotonic;\n        }\n\
    \        if (isIncreasing) {\n            return isMonotonic;\n        }\n   \
    \     if (isDecreasing) {\n            return isMonotonic;\n        }\n      \
    \  if (isMonotonic) {\n            return isMonotonic;\n        }\n        if\
    \ (isIncreasing && isMonotonic) {\n            return isMonotonic;\n        }\n\
    \        if (isDecreasing && isMonotonic) {\n            return isMonotonic;\n\
    \        }\n        if (isMonotonic) {\n            return isMonotonic;\n    \
    \    }\n        return isMonotonic;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c34c4662216c447cb8a189afd9a1f492>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c34c4662216c447cb8a189afd9a1f492>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = (min <= max);\n        bool isDecreasing = (max >=\
    \ min);\n        if (isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if (isIncreasing && !isDecreasing) {\n            return false;\n\
    \        }\n        if (!isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa6ffd102dbf4b548a8bd59ae615742b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa6ffd102dbf4b548a8bd59ae615742b>:0 \n"
  stdout: ''
  timestamp: 1659824151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0)\n            return true;\n        if (l.Count == 1)\n            return\
    \ l[0] == l[1];\n        long first = l[0];\n        long last = l[l.Count - 1];\n\
    \        long mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        for (int i = 0; i < l.Count - 1; i++)\
    \ {\n            if (l[i] < mid) {\n                isIncreasing = false;\n  \
    \              break;\n            }\n            if (l[i] > mid) {\n        \
    \        isDecreasing = false;\n                break;\n            }\n      \
    \  }\n        if (isIncreasing && isDecreasing)\n            return true;\n  \
    \      if (isIncreasing && !isDecreasing)\n            return false;\n       \
    \ if (!isIncreasing && isDecreasing)\n            return false;\n        if (isIncreasing\
    \ && isDecreasing) {\n            bool increasing = true;\n            bool decreasing\
    \ = true;\n            for (int i = 0; i < l.Count - 1; i++) {\n             \
    \   if (l[i] < mid) {\n                    increasing = false;\n             \
    \       break;\n                }\n                if (l[i] > mid) {\n       \
    \             decreasing = false;\n                    break;\n              \
    \  }\n            }\n            if (increasing && decreasing)\n             \
    \   return true;\n            if (increasing && !decreasing)\n               \
    \ return false;\n            if (!increasing && decreasing)\n                return\
    \ false;\n            if (increasing && decreasing) {\n                bool increasing\
    \ = true;\n                bool decreasing = true;\n                for (int i\
    \ = 0; i < l.Count - 1; i++) {\n                    if (l[i] < mid) {\n      \
    \                  increasing = false;\n                        break;\n     \
    \               }\n                    if (l[i] > mid) {\n                   \
    \     decreasing = false;\n                        break;\n                  \
    \  }\n                }\n                if (increasing && decreasing)\n     \
    \               return true;\n                if (increasing && !decreasing)\n\
    \                    return false;\n                if (!increasing && decreasing)\n\
    \                    return false;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9dnh5qz6.cs(62,22): error CS0136: A local or parameter named ''increasing''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp9dnh5qz6.cs(63,22): error CS0136: A local or parameter named ''decreasing''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = (mid > max);\n        bool isDecreasing = (mid <\
    \ min);\n        if (isIncreasing && isDecreasing) return true;\n        if (isIncreasing\
    \ && !isDecreasing) return true;\n        if (!isIncreasing && isDecreasing) return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a4a63e10a05468899bef956c438a374>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a4a63e10a05468899bef956c438a374>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824151
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        if (first < last) return true;\n        if (first > last) return\
    \ false;\n        long mid = first + ((last - first) / 2);\n        if (mid <\
    \ first) return true;\n        if (mid > last) return false;\n        long mid2\
    \ = mid + ((last - mid) / 2);\n        if (mid2 < first) return true;\n      \
    \  if (mid2 > last) return false;\n        long mid3 = mid2 + ((last - mid2) /\
    \ 2);\n        if (mid3 < first) return true;\n        if (mid3 > last) return\
    \ false;\n        long mid4 = mid3 + ((last - mid3) / 2);\n        if (mid4 <\
    \ first) return true;\n        if (mid4 > last) return false;\n        long mid5\
    \ = mid4 + ((last - mid4) / 2);\n        if (mid5 < first) return true;\n    \
    \    if (mid5 > last) return false;\n        long mid6 = mid5 + ((last - mid5)\
    \ / 2);\n        if (mid6 < first) return true;\n        if (mid6 > last) return\
    \ false;\n        long mid7 = mid6 + ((last - mid6) / 2);\n        if (mid7 <\
    \ first) return true;\n        if (mid7 > last) return false;\n        long mid8\
    \ = mid7 + ((last - mid7) / 2);\n        if (mid8 < first) return true;\n    \
    \    if (mid8 > last) return false;\n        long mid9 = mid8 + ((last - mid8)\
    \ / 2);\n        if (mid9 < first) return true;\n        if (mid9 > last) return\
    \ false;\n        long mid10 = mid9 + ((last - mid9) / 2);\n        if (mid10\
    \ < first) return true;\n        if (mid10 > last) return false;\n        long\
    \ mid11 = mid10 + ((last - mid10) / 2);\n        if (mid11 < first) return true;\n\
    \        if (mid11 > last) return false;\n        long mid12 = mid11 + ((last\
    \ - mid11) / 2);\n        if (mid12 < first) return true;\n        if (mid12 >\
    \ last) return false;\n        long mid13 = mid12 + ((last - mid12) / 2);\n  \
    \      if (mid13 < first) return true;\n        if (mid13 > last) return false;\n\
    \        long mid14 = mid13 + ((last - mid13) / 2);\n        if (mid14 < first)\
    \ return true;\n        if (mid14 > last) return false;\n        long mid15 =\
    \ mid14 + ((last - mid14) / 2);\n        if (mid15 < first) return true;\n   \
    \     if (mid15 > last) return false;\n        long mid16 = mid15 + ((last - mid15)\
    \ / 2);\n        if (mid16 < first) return true;\n        if (mid16 > last\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp73qo2t6_.cs(69,25): error CS1026: ) expected

    /tmp/tmp73qo2t6_.cs(69,25): error CS1525: Invalid expression term ''}''

    /tmp/tmp73qo2t6_.cs(69,25): error CS1002: ; expected

    '
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        bool increasing = true;\n        foreach (long el\
    \ in l.Skip(1)) {\n            if (el < prev) {\n                increasing =\
    \ false;\n                break;\n            }\n            prev = el;\n    \
    \    }\n        return increasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2acbbd1ac18647f4818907646da66806>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2acbbd1ac18647f4818907646da66806>:0 \n"
  stdout: ''
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        long diff = max - min;\n        long diff2 = mid - min;\n        long\
    \ diff3 = max - mid;\n        long diff4 = mid - max;\n        long diff5 = min\
    \ - mid;\n        long diff6 = max - min;\n        long diff7 = mid - min;\n \
    \       long diff8 = max - mid;\n        long diff9 = mid - max;\n        long\
    \ diff10 = mid - min;\n        long diff11 = min - mid;\n        long diff12 =\
    \ max - mid;\n        long diff13 = mid - min;\n        long diff14 = max - mid;\n\
    \        long diff15 = mid - max;\n        long diff16 = mid - min;\n        long\
    \ diff17 = min - mid;\n        long diff18 = max - mid;\n        long diff19 =\
    \ mid - max;\n        long diff20 = mid - min;\n        long diff21 = min - mid;\n\
    \        long diff22 = max - mid;\n        long diff23 = mid - max;\n        long\
    \ diff24 = mid - min;\n        long diff25 = min - mid;\n        long diff26 =\
    \ max - mid;\n        long diff27 = mid - max;\n        long diff28 = mid - min;\n\
    \        long diff29 = min - mid;\n        long diff30 = max - mid;\n        long\
    \ diff31 = mid - max;\n        long diff32 = mid - min;\n        long diff33 =\
    \ min - mid;\n        long diff34 = max - mid;\n        long diff35 = mid - max;\n\
    \        long diff36 = mid - min;\n        long diff37 = min - mid;\n        long\
    \ diff38 = max - mid;\n        long diff39 = mid - max;\n        long diff40 =\
    \ mid - min;\n        long diff41 = min - mid;\n        long diff42 = max - mid;\n\
    \        long diff43 = mid - max;\n        long diff44 = mid - min;\n        long\
    \ diff45 = min - mid;\n        long diff46 = max - mid;\n        long diff47 =\
    \ mid - max;\n        long diff48 = mid - min;\n        long diff49 = min - mid;\n\
    \        long diff50 = max - mid;\n        long diff51 = mid - max;\n\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcizr9dmn.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpcizr9dmn.cs(16,24): error CS0161: ''Problem.Monotonic(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        bool increasing = true;\n        foreach (long el\
    \ in l.Skip(1)) {\n            if (el < prev) {\n                increasing =\
    \ false;\n                break;\n            }\n            prev = el;\n    \
    \    }\n        return increasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2acbbd1ac18647f4818907646da66806>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2acbbd1ac18647f4818907646da66806>:0 \n"
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + ((last - first) / 2);\n        bool increasing = (first < mid);\n        bool\
    \ decreasing = (last > mid);\n        if (increasing && decreasing) return true;\n\
    \        if (increasing && !decreasing) return true;\n        if (!increasing\
    \ && decreasing) return true;\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebd17bd6583a45998baa1182306421bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebd17bd6583a45998baa1182306421bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool isIncreasing = (max\
    \ >= min);\n        bool isDecreasing = (max <= min);\n        if (isIncreasing\
    \ && isDecreasing)\n            return true;\n        if (isIncreasing && !isDecreasing)\n\
    \            return true;\n        if (!isIncreasing && isDecreasing)\n      \
    \      return true;\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03e0aa7b6f0e4ffc89178f13e880cf03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <03e0aa7b6f0e4ffc89178f13e880cf03>:0 \n"
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        if (min > max) {\n    \
    \        return false;\n        }\n        long mid = min + (max - min) / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  foreach (long x in l) {\n            if (x > mid) {\n                isDecreasing\
    \ = false;\n                break;\n            }\n            if (x < mid) {\n\
    \                isIncreasing = false;\n                break;\n            }\n\
    \        }\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69ceee0d5a074430958660e8a1ffd3e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69ceee0d5a074430958660e8a1ffd3e5>:0 \n"
  stdout: ''
  timestamp: 1659824152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long middle = l.Count\
    \ / 2;\n        long middleValue = l.ElementAt(middle);\n        bool isIncreasing\
    \ = (first < middleValue) || (middleValue < last);\n        bool isDecreasing\
    \ = (first > middleValue) || (middleValue > last);\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp45ohaohm.cs(20,40): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool increasing = true;\n        foreach (long el in l.Skip(1))\n\
    \            if (el < prev)\n                increasing = false;\n           \
    \ else\n                prev = el;\n        return increasing;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec12d97c4e514f5d9c4b41ace1c7b6de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec12d97c4e514f5d9c4b41ace1c7b6de>:0 \n"
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n       \
    \ long max = l[0];\n        bool changed = true;\n        foreach (long x in l.Skip(1))\n\
    \            if (x > max) {\n                max = x;\n                changed\
    \ = false;\n            }\n        return changed;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be0f1f20d2a94737982ecd3bd2ef0257>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be0f1f20d2a94737982ecd3bd2ef0257>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        if (first > last) return true;\n        long mid = first + (last\
    \ - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        foreach (long x in l.Skip(1).Take(l.Count - 1)) {\n       \
    \     if (x > mid) {\n                isIncreasing = false;\n            } else\
    \ if (x < mid) {\n                isDecreasing = false;\n            }\n     \
    \   }\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b8b4935990548aebbb00b6a11b5642b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b8b4935990548aebbb00b6a11b5642b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long prev = l[0];\n        long current = l[1];\n\
    \        bool isIncreasing = true;\n        for (int i = 2; i < l.Count; i++)\
    \ {\n            long next = l[i];\n            if (current < next) {\n      \
    \          isIncreasing = false;\n            }\n            if (current > prev)\
    \ {\n                isIncreasing = true;\n            }\n            prev = current;\n\
    \            current = next;\n        }\n        return isIncreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3e50f338729485e83bdd3a9b0eb4d0a>:0 \n"
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n       \
    \ long max = l[0];\n        bool first = true;\n        foreach (long x in l.Skip(1))\n\
    \        {\n            if (x > max) return false;\n            if (first)\n \
    \           {\n                first = false;\n                max = x;\n    \
    \        }\n            else\n            {\n                if (x < max) return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f3c5b4613c06413594264259b265e5eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f3c5b4613c06413594264259b265e5eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && current > last) isIncreasing = false;\n            if (isDecreasing && current\
    \ < first) isDecreasing = false;\n            last = current;\n        }\n   \
    \     return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d500ff2286e4e219affb8fc58afd224>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d500ff2286e4e219affb8fc58afd224>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        if (l.Count == 1) {\n            return true;\n        }\n  \
    \      long first = l[0];\n        long last = l[l.Count - 1];\n        long middle\
    \ = first + ((last - first) / 2);\n        bool isIncreasing = true;\n       \
    \ bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n   \
    \         long current = l[i];\n            if (current < middle) {\n        \
    \        isIncreasing = false;\n            }\n            if (current > middle)\
    \ {\n                isDecreasing = false;\n            }\n        }\n       \
    \ return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b6e110f3c78418b9962d979896fcdd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b6e110f3c78418b9962d979896fcdd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        long mid2 = mid\
    \ + (mid - first) / 2;\n        long mid3 = mid2 + (mid2 - first) / 2;\n     \
    \   long mid4 = mid3 + (mid3 - first) / 2;\n        long mid5 = mid4 + (mid4 -\
    \ first) / 2;\n        long mid6 = mid5 + (mid5 - first) / 2;\n        long mid7\
    \ = mid6 + (mid6 - first) / 2;\n        long mid8 = mid7 + (mid7 - first) / 2;\n\
    \        long mid9 = mid8 + (mid8 - first) / 2;\n        long mid10 = mid9 + (mid9\
    \ - first) / 2;\n        long mid11 = mid10 + (mid10 - first) / 2;\n        long\
    \ mid12 = mid11 + (mid11 - first) / 2;\n        long mid13 = mid12 + (mid12 -\
    \ first) / 2;\n        long mid14 = mid13 + (mid13 - first) / 2;\n        long\
    \ mid15 = mid14 + (mid14 - first) / 2;\n        long mid16 = mid15 + (mid15 -\
    \ first) / 2;\n        long mid17 = mid16 + (mid16 - first) / 2;\n        long\
    \ mid18 = mid17 + (mid17 - first) / 2;\n        long mid19 = mid18 + (mid18 -\
    \ first) / 2;\n        long mid20 = mid19 + (mid19 - first) / 2;\n        long\
    \ mid21 = mid20 + (mid20 - first) / 2;\n        long mid22 = mid21 + (mid21 -\
    \ first) / 2;\n        long mid23 = mid22 + (mid22 - first) / 2;\n        long\
    \ mid24 = mid23 + (mid23 - first) / 2;\n        long mid25 = mid24 + (mid24 -\
    \ first) / 2;\n        long mid26 = mid25 + (mid25 - first) / 2;\n        long\
    \ mid27 = mid26 + (mid26 - first) / 2;\n        long mid28 = mid27 + (mid27 -\
    \ first) / 2;\n        long mid29 = mid28 + (mid28 - first) / 2;\n        long\
    \ mid30 = mid29 + (mid29 - first) / 2;\n        long mid31 = mid30 + (mid30 -\
    \ first) / 2;\n        long mid32 = mid31 + (mid31 - first) / 2;\n        long\
    \ mid33 = mid32 + (mid32 - first) / 2;\n        long mid34 = mid33 + (mid33 -\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd9jou38y.cs(53,38): error CS1525: Invalid expression term ''}''

    /tmp/tmpd9jou38y.cs(53,38): error CS1026: ) expected

    /tmp/tmpd9jou38y.cs(53,38): error CS1002: ; expected

    '
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return false;\n        long prev = l[0];\n        bool increasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n\
    \            if (current < prev) {\n                increasing = false;\n    \
    \        }\n            prev = current;\n        }\n        return increasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14854216f6344e84bc35ebf54a73b884>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14854216f6344e84bc35ebf54a73b884>:0 \n"
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        bool increasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < first) increasing\
    \ = false;\n            if (current > last) increasing = false;\n        }\n \
    \       return increasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c43e0d56061a42bfa16bb7bd9497b35e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c43e0d56061a42bfa16bb7bd9497b35e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        bool increasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < first) {\n\
    \                increasing = false;\n            }\n            if (current >\
    \ last) {\n                increasing = false;\n            }\n        }\n   \
    \     return increasing;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49300b7f623a4da88a3e00ec6b15d28d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49300b7f623a4da88a3e00ec6b15d28d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = (max + min)\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        if (min < mid) {\n            isIncreasing = false;\n        }\n    \
    \    if (max > mid) {\n            isDecreasing = false;\n        }\n        if\
    \ (isIncreasing && isDecreasing) {\n            return true;\n        }\n    \
    \    if (isIncreasing && !isDecreasing) {\n            return false;\n       \
    \ }\n        if (!isIncreasing && isDecreasing) {\n            return false;\n\
    \        }\n        return isIncreasing ? isDecreasing : isDecreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4feae6c52111435988508488e77359db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4feae6c52111435988508488e77359db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        bool increasing = true;\n        foreach (long el\
    \ in l.Skip(1))\n            if (el < prev)\n                increasing = false;\n\
    \            else\n                prev = el;\n        return increasing;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1df2bc4db8b145fd8ab7b3494467c94e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1df2bc4db8b145fd8ab7b3494467c94e>:0 \n"
  stdout: ''
  timestamp: 1659824152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = l.Count\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        if (first < mid) {\n            isIncreasing = Monotonic(l.Skip(1).Take(mid));\n\
    \        }\n        if (last > mid) {\n            isDecreasing = Monotonic(l.Take(mid).Reverse());\n\
    \        }\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpywjif7lf.cs(23,53): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpywjif7lf.cs(26,45): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        foreach (long x in l.Skip(1).Take(l.Count\
    \ - 1)) {\n            if (x <= mid) {\n                decreasing = false;\n\
    \                if (x > mid) increasing = false;\n            }\n           \
    \ else {\n                increasing = false;\n                if (x < mid) decreasing\
    \ = false;\n            }\n            mid = x;\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7da8df9a99b84d1e858ef73333e2022c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7da8df9a99b84d1e858ef73333e2022c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min > max) return false;\n\
    \        if (min == max) return true;\n        long mid = min + (max - min) /\
    \ 2;\n        bool leftIsIncreasing = l.Take(1).All(x => x >= mid);\n        bool\
    \ rightIsIncreasing = l.Skip(1).All(x => x <= mid);\n        return leftIsIncreasing\
    \ || rightIsIncreasing;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d2425d1327f4605a2794e3d0bb0cc21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d2425d1327f4605a2794e3d0bb0cc21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        long midValue = mid;\n \
    \       foreach (long value in l) {\n            if (value > midValue) {\n   \
    \             isDecreasing = false;\n            } else if (value < midValue)\
    \ {\n                isIncreasing = false;\n            } else {\n           \
    \     midValue = value;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6b2701c52f74140be79443561861659>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6b2701c52f74140be79443561861659>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return false;\n        long max = l.Max();\n        long min = l.Min();\n\
    \        long mid = l.Count / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingDecreasingDecreasingMonotonic = true;\n      \
    \  bool isMonotonicIncreasingDecreasingIncreasingMonotonic = true;\n        bool\
    \ isMonotonicDecreasingDecreasingMonotonic = true;\n        bool isMonotonicDecreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingIncreasingDecreasingMonotonic = true;\n      \
    \  bool isMonotonicDecreasingDecreasingMonotonic = true;\n        bool isMonotonicDecreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingDecreasingMonotonic = true;\n\
    \        bool isMonotonicDecreasingIncreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingDecreasingMonotonic = true;\n\
    \        bool isMonotonicDecreasingDecreasingMonotonic = true;\n        bool isMonotonicDe\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjc1pvq74.cs(49,27): error CS1002: ; expected

    '
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool increasing = (min\
    \ <= max);\n        bool decreasing = (max >= min);\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f56570e41f4479ab4bd0a2fc091b794>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f56570e41f4479ab4bd0a2fc091b794>:0 \n"
  stdout: ''
  timestamp: 1659824152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        long mid = first + ((last - first) / 2);\n        long mid2 = mid + ((last\
    \ - mid) / 2);\n        long mid3 = mid2 + ((last - mid2) / 2);\n        long\
    \ mid4 = mid3 + ((last - mid3) / 2);\n        long mid5 = mid4 + ((last - mid4)\
    \ / 2);\n        long mid6 = mid5 + ((last - mid5) / 2);\n        long mid7 =\
    \ mid6 + ((last - mid6) / 2);\n        long mid8 = mid7 + ((last - mid7) / 2);\n\
    \        long mid9 = mid8 + ((last - mid8) / 2);\n        long mid10 = mid9 +\
    \ ((last - mid9) / 2);\n        long mid11 = mid10 + ((last - mid10) / 2);\n \
    \       long mid12 = mid11 + ((last - mid11) / 2);\n        long mid13 = mid12\
    \ + ((last - mid12) / 2);\n        long mid14 = mid13 + ((last - mid13) / 2);\n\
    \        long mid15 = mid14 + ((last - mid14) / 2);\n        long mid16 = mid15\
    \ + ((last - mid15) / 2);\n        long mid17 = mid16 + ((last - mid16) / 2);\n\
    \        long mid18 = mid17 + ((last - mid17) / 2);\n        long mid19 = mid18\
    \ + ((last - mid18) / 2);\n        long mid20 = mid19 + ((last - mid19) / 2);\n\
    \        long mid21 = mid20 + ((last - mid20) / 2);\n        long mid22 = mid21\
    \ + ((last - mid21) / 2);\n        long mid23 = mid22 + ((last - mid22) / 2);\n\
    \        long mid24 = mid23 + ((last - mid23) / 2);\n        long mid25 = mid24\
    \ + ((last - mid24) / 2);\n        long mid26 = mid25 + ((last - mid25) / 2);\n\
    \        long mid27 = mid26 + ((last - mid26) / 2);\n        long mid28 = mid27\
    \ + ((last - mid27) / 2);\n        long mid29 = mid28 + ((last - mid28) / 2);\n\
    \        long mid30 = mid29 + ((last - mid29) / 2);\n        long mid31 = mid30\
    \ + ((last - mid30) / 2);\n        long mid32 = mid31 + ((last - \n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbz8ftxrk.cs(51,38): error CS1525: Invalid expression term ''}''

    /tmp/tmpbz8ftxrk.cs(51,38): error CS1026: ) expected

    /tmp/tmpbz8ftxrk.cs(51,38): error CS1002: ; expected

    '
  timestamp: 1659824151
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        long current = min;\n        long\
    \ previous = min;\n        foreach (long i in l) {\n            if (current <\
    \ i) {\n                isDecreasing = false;\n            }\n            if (current\
    \ > i) {\n                isIncreasing = false;\n            }\n            current\
    \ = i;\n            previous = i;\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b153035039d74e93b790be9b7251d3da>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b153035039d74e93b790be9b7251d3da>:0 \n"
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool increasing = (max\
    \ < min);\n        if (increasing)\n            return true;\n        bool decreasing\
    \ = (min > max);\n        if (decreasing)\n            return true;\n        bool\
    \ monotonic = true;\n        foreach (long x in l)\n        {\n            long\
    \ y = x;\n            if (y > max)\n            {\n                y = max;\n\
    \            }\n            if (y < min)\n            {\n                y = min;\n\
    \            }\n            if (y != x)\n            {\n                monotonic\
    \ = false;\n                break;\n            }\n        }\n        return monotonic;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b27f81d56e74d09a13e23c55bd2d0d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b27f81d56e74d09a13e23c55bd2d0d8>:0 \n"
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < mid) {\n                isIncreasing = false;\n\
    \            }\n            if (l[i] > mid) {\n                isDecreasing =\
    \ false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c72584b6bf6240d9bec2f9b86f78511d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c72584b6bf6240d9bec2f9b86f78511d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        foreach (long x in l) {\n            if (x < mid) {\n               \
    \ isDecreasing = false;\n            } else if (x > mid) {\n                isIncreasing\
    \ = false;\n            } else {\n                isIncreasing &= x >= mid;\n\
    \                isDecreasing &= x <= mid;\n            }\n        }\n       \
    \ return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5f0ef50c72341a3a5364b8882d9ac9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5f0ef50c72341a3a5364b8882d9ac9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return false;\n        long first = l[0];\n        long last = l[0];\n\
    \        bool increasing = true;\n        bool decreasing = true;\n        for\
    \ (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n        \
    \    if (current < first) {\n                decreasing = false;\n           \
    \ }\n            if (current > last) {\n                increasing = false;\n\
    \            }\n            if (current < last) {\n                last = current;\n\
    \            }\n            if (current > first) {\n                first = current;\n\
    \            }\n        }\n        if (increasing && decreasing) {\n         \
    \   return true;\n        }\n        if (increasing && !decreasing) {\n      \
    \      return true;\n        }\n        if (decreasing && !increasing) {\n   \
    \         return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long current\
    \ = l[i];\n            if (current < mid) {\n                isIncreasing = false;\n\
    \                break;\n            }\n            if (current > mid) {\n   \
    \             isIncreasing = true;\n                break;\n            }\n  \
    \      }\n        return isIncreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1d95651cc8e4ae7be8e41e94c16698e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1d95651cc8e4ae7be8e41e94c16698e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824152
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        long mid = first + (last - first) / 2;\n        bool increasing = (mid\
    \ > first);\n        bool decreasing = (mid < last);\n        if (increasing ||\
    \ decreasing) {\n            bool increasing2 = (first < mid);\n            bool\
    \ decreasing2 = (last > mid);\n            if (increasing2 || decreasing2) {\n\
    \                bool increasing3 = (mid < last);\n                bool decreasing3\
    \ = (mid > first);\n                if (increasing3 || decreasing3) {\n      \
    \              bool increasing4 = (last < mid);\n                    bool decreasing4\
    \ = (first > mid);\n                    if (increasing4 || decreasing4) {\n  \
    \                      bool increasing5 = (mid < first);\n                   \
    \     bool decreasing5 = (mid > last);\n                        if (increasing5\
    \ || decreasing5) {\n                            bool increasing6 = (first < last);\n\
    \                            bool decreasing6 = (last > first);\n            \
    \                if (increasing6 || decreasing6) {\n                         \
    \       return true;\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc7yxg5gk.cs(19,23): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''int''

    '
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        bool increasing = true;\n        foreach (long x\
    \ in l.Skip(1)) {\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4ed88c0ca0241f5a3a3b02d69d97cb1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4ed88c0ca0241f5a3a3b02d69d97cb1>:0 \n"
  stdout: ''
  timestamp: 1659824153
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return false;\n        long first\
    \ = l[0];\n        long last = l[l-1];\n        long mid = (first + last) / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  if (first < mid) {\n            isIncreasing = Monotonic(l);\n        }\n \
    \       if (mid < last) {\n            isDecreasing = Monotonic(l);\n        }\n\
    \        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9l8firkh.cs(20,23): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''int''

    '
  timestamp: 1659824152
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isDecreasing = false;\n            } else if (current > mid)\
    \ {\n                isIncreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && isDecreasing) return true;\n            if (isIncreasing && !isDecreasing)\
    \ return false;\n            if (!isIncreasing && isDecreasing) return false;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea802e7c1c804e9aa794b19a06b8b416>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea802e7c1c804e9aa794b19a06b8b416>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824153
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return True is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        if (min > max) {\n    \
    \        long tmp = min;\n            min = max;\n            max = tmp;\n   \
    \     }\n        bool increasing = true;\n        bool decreasing = true;\n  \
    \      foreach (long i in l) {\n            if (i < min) {\n                decreasing\
    \ = false;\n            }\n            if (i > max) {\n                increasing\
    \ = false;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <479b0a0bc2b54e77a522ac89ae97db44>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <479b0a0bc2b54e77a522ac89ae97db44>:0 \n"
  stdout: ''
  timestamp: 1659824153
