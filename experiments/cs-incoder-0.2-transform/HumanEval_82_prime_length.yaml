name: HumanEval_82_prime_length
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes a string and returns True if the\
  \ string\n    // length is a prime number or False otherwise\n    // Examples\n\
  \    // >>> PrimeLength((\"Hello\"))\n    // (true)\n    // >>> PrimeLength((\"\
  abcdcba\"))\n    // (true)\n    // >>> PrimeLength((\"kittens\"))\n    // (true)\n\
  \    // >>> PrimeLength((\"orange\"))\n    // (false)\n    public static bool PrimeLength(string\
  \ str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PrimeLength((\"\
  Hello\")) == (true));\n    Debug.Assert(PrimeLength((\"abcdcba\")) == (true));\n\
  \    Debug.Assert(PrimeLength((\"kittens\")) == (true));\n    Debug.Assert(PrimeLength((\"\
  orange\")) == (false));\n    Debug.Assert(PrimeLength((\"wow\")) == (true));\n \
  \   Debug.Assert(PrimeLength((\"world\")) == (true));\n    Debug.Assert(PrimeLength((\"\
  MadaM\")) == (true));\n    Debug.Assert(PrimeLength((\"Wow\")) == (true));\n   \
  \ Debug.Assert(PrimeLength((\"\")) == (false));\n    Debug.Assert(PrimeLength((\"\
  HI\")) == (true));\n    Debug.Assert(PrimeLength((\"go\")) == (true));\n    Debug.Assert(PrimeLength((\"\
  gogo\")) == (false));\n    Debug.Assert(PrimeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n\
  \    Debug.Assert(PrimeLength((\"Madam\")) == (true));\n    Debug.Assert(PrimeLength((\"\
  M\")) == (false));\n    Debug.Assert(PrimeLength((\"0\")) == (false));\n    }\n\n\
  }\n"
completions: ["        int n = str.Length;\n        if (n < 2) return false;\n   \
    \     if (n == 2) return true;\n        if (n % 2 == 0) return false;\n      \
    \  int k = 3;\n        while (k <= n/2) {\n            if (n % k == 0) return\
    \ false;\n            k += 2;\n        }\n        return true;", "        if (str\
    \ == null || str.Length == 0)\n            return false;\n        int n = str.Length;\n\
    \        if (n == 1)\n            return true;\n        if (n == 2)\n        \
    \    return true;\n        if (n % 2 == 0)\n            return false;\n      \
    \  int m = (int) Math.Sqrt(n);\n        for (int i = 2; i <= m; i++)\n       \
    \     if (n % i == 0)\n                return false;\n        return true;", " \
    \       bool isPrime = true;\n        int length = str.Length;\n        for (int\
    \ i = 2; i <= length / 2; i++) {\n            if (str[length - i] != str[length\
    \ - i - 1]) {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        return isPrime;", "        bool isPrime = true;\n\
    \        int length = str.Length;\n        for (int i = 0; i < length; i++) {\n\
    \            int count = 0;\n            int j = 0;\n            while (j < length)\
    \ {\n                if (str[j] == str[i]) {\n                    count++;\n \
    \                   j++;\n                } else {\n                    break;\n\
    \                }\n            }\n            if (count == 0) {\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     return isPrime;", "        bool isPrime = true;\n        int length = str.Length;\n\
    \        for (int i = 2; i <= length / 2; i++) {\n            if (str.Substring(i\
    \ - 1, 1) == str.Substring(i, 1))\n                isPrime = false;\n        }\n\
    \        return isPrime;", "        bool isPrime = true;\n        int length =\
    \ str.Length;\n        for (int i = 1; i < length / 2; i++) {\n            if\
    \ (str[i] != str[length - i - 1]) {\n                isPrime = false;\n      \
    \          break;\n            }\n        }\n        return isPrime;", "     \
    \   bool isPrime = true;\n        int length = str.Length;\n        for (int i\
    \ = 1; i < length; i++)\n        {\n            if (str[i] != str[i - 1]) {\n\
    \                for (int j = 1; j < i; j++)\n                {\n            \
    \        if (str[j] == str[i - 1])\n                    {\n                  \
    \      isPrime = false;\n                        break;\n                    }\n\
    \                }\n            }\n        }\n        return isPrime;", "    \
    \    bool isPrime = true;\n        long n = long.Parse(str);\n        long limit\
    \ = long.Parse(Math.Sqrt(n).ToString());\n        long counter = 1;\n        while\
    \ (counter <= limit) {\n            if (n % counter == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n            counter++;\n  \
    \      }\n        return isPrime;", "        bool isPrime = true;\n        int\
    \ length = str.Length;\n        for (int i = 3; i <= Math.Sqrt(length); i += 2)\
    \ {\n            if (str[length - i] != '\\0') {\n                for (int j =\
    \ i; j < length; j += i) {\n                    if (str[j] != '\\0') {\n     \
    \                   isPrime = false;\n                        break;\n       \
    \             }\n                }\n            }\n        }\n        return isPrime;",
  "        int length = str.Length;\n        if (length < 2)\n            return true;\n\
    \        int max = (int)Math.Sqrt(length);\n        for (int i = 2; i <= max;\
    \ i++) {\n            if (length%i == 0)\n                return false;\n    \
    \    }\n        return true;", "        int n = str.Length;\n        if (n ==\
    \ 0) return false;\n        if (n == 1) return true;\n        if (n % 2 == 0)\
    \ return false;\n        if (n % 3 == 0) return false;\n        bool isPrime =\
    \ true;\n        for (int i = 3; i <= Math.Sqrt(n); i += 2) {\n            if\
    \ (n % i == 0) {\n                isPrime = false;\n                break;\n \
    \           }\n        }\n        return isPrime;", "        bool isPrime = true;\n\
    \        int length = str.Length;\n        for (int i = 2; i <= length / 2; i++)\
    \ {\n            if (str[i - 1] != str[i]) {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        return isPrime;", " \
    \       if (str == null || str.Length <= 1) {\n            return true;\n    \
    \    }\n        bool isPrime = true;\n        for (int i = 3; i <= str.Length\
    \ / 2; i += 2) {\n            if (str.Substring(i, 1).All(c => c != '0')) {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n        return isPrime;", "        if (str == null || str.Length <= 1)\
    \ {\n            return false;\n        }\n        bool isPrime = true;\n    \
    \    for (int i = 2; i <= str.Length; i++) {\n            if (str.Substring(0,\
    \ i).Contains(str)) {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        return isPrime;", "        bool isPrime = true;\n\
    \        int length = str.Length;\n        for (int i = 1; i < length; i++)\n\
    \        {\n            if (str[i] != str[i - 1]) {\n                int j = 0;\n\
    \                while (j < i)\n                {\n                    if (str[j]\
    \ == str[i])\n                    {\n                        isPrime = false;\n\
    \                        break;\n                    }\n                    j++;\n\
    \                }\n            }\n        }\n        return isPrime;", "    \
    \    if (str == null || str.Length < 2)\n            return false;\n        bool\
    \ isPrime = true;\n        for (int i = 0; i < str.Length; i++) {\n          \
    \  int n = Convert.ToInt32(str[i]);\n            if (n % 2 == 0)\n           \
    \     return false;\n            int sqrt = (int)Math.Sqrt(n);\n            int\
    \ count = 0;\n            for (int j = i; j < str.Length; j++)\n             \
    \   if (str[j] % sqrt == 0)\n                    count++;\n            if (count\
    \ == str.Length)\n                isPrime = false;\n        }\n        return\
    \ isPrime;", "        if (str == null || str.Length < 2)\n            return false;\n\
    \        bool isPrime = true;\n        long n = long.Parse(str);\n        for\
    \ (int i = 2; i <= Math.Sqrt(n); i++) {\n            if (n % i == 0) {\n     \
    \           isPrime = false;\n                break;\n            }\n        }\n\
    \        return isPrime;", "        if (str == null || str.Length == 0)\n    \
    \        return false;\n        int n = str.Length;\n        int count = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            int j = 0;\n            while\
    \ (j < n && str[j] == str[i])\n                j++;\n            if (j == n)\n\
    \                return true;\n            else\n                count++;\n  \
    \      }\n        if (count == n)\n            return true;\n        else\n  \
    \          return false;", "        bool isPrime = true;\n        bool isPrime2\
    \ = true;\n        int length = str.Length;\n        for (int i = 0; i < length;\
    \ i++) {\n            if (str[i] != ' ') {\n                isPrime2 = false;\n\
    \            }\n        }\n        for (int i = 2; i < length; i++) {\n      \
    \      if (str[i] != ' ') {\n                isPrime = false;\n            }\n\
    \        }\n        if (isPrime) {\n            return true;\n        }\n    \
    \    if (isPrime2) {\n            return false;\n        }\n        return false;",
  "        if (str == null || str.Length <= 1) {\n            return false;\n    \
    \    }\n        var primes = new List<int>();\n        var primeFactors = new\
    \ List<int>();\n        var isPrime = true;\n        var isPrimeFactor = false;\n\
    \        var isPrimeFactor2 = false;\n        var isPrimeFactor3 = false;\n  \
    \      var isPrimeFactor4 = false;\n        var isPrimeFactor5 = false;\n    \
    \    var isPrimeFactor6 = false;\n        var isPrimeFactor7 = false;\n      \
    \  var isPrimeFactor8 = false;\n        var isPrimeFactor9 = false;\n        var\
    \ isPrimeFactor10 = false;\n        var isPrimeFactor11 = false;\n        var\
    \ isPrimeFactor12 = false;\n        var isPrimeFactor13 = false;\n        var\
    \ isPrimeFactor14 = false;\n        var isPrimeFactor15 = false;\n        var\
    \ isPrimeFactor16 = false;\n        var isPrimeFactor17 = false;\n        var\
    \ isPrimeFactor18 = false;\n        var isPrimeFactor19 = false;\n        var\
    \ isPrimeFactor20 = false;\n        var isPrimeFactor21 = false;\n        var\
    \ isPrimeFactor22 = false;\n        var isPrimeFactor23 = false;\n        var\
    \ isPrimeFactor24 = false;\n        var isPrimeFactor25 = false;\n        var\
    \ isPrimeFactor26 = false;\n        var isPrimeFactor27 = false;\n        var\
    \ isPrimeFactor28 = false;\n        var isPrimeFactor29 = false;\n        var\
    \ isPrimeFactor30 = false;\n        var isPrimeFactor31 = false;\n        var\
    \ isPrimeFactor32 = false;\n        var isPrimeFactor33 = false;\n        var\
    \ isPrimeFactor34 = false;\n        var isPrimeFactor35 = false;\n        var\
    \ isPrimeFactor36 = false;\n        var isPrimeFactor37 = false;\n        var\
    \ isPrimeFactor38 = false;\n        var isPrimeFactor39 = false;\n        var\
    \ isPrimeFactor40 = false;\n        var isPrimeFactor41 = false;\n        var\
    \ isPrimeFactor42 = false;\n        var isPrimeFactor43 = false;\n        var\
    \ isPrimeFactor44 = false;\n        var isPrimeFactor45 = false;\n        var\
    \ isPrimeFactor46 = false;\n        var isPrimeFactor47 = false;\n        var\
    \ isPrimeFactor48 = false;\n        var isPrimeFactor49 = false;\n        var\
    \ isPrimeFactor50 = false;\n        var isPrimeFactor51 = false;\n        var\
    \ isPrimeFactor52 = false;\n        var isPrimeFactor53 = false;\n        var\
    \ isPrimeFactor54 = false;\n        var isPrimeFactor55 = false;\n        var\
    \ isPrimeFactor56 = false;\n        var isPrimeFactor57 = false;\n        var\
    \ isPrimeFactor58 = false;\n        var isPrime"]
stop_tokens:
- "\n    }\n"
