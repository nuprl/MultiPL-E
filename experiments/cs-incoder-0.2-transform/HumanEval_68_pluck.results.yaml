language: cs
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        while (smallest_value % 2 == 0) {\n                smallest_value /=\
    \ 2;\n                smallest_index++;\n            }\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5c8z3qgq.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smalest_value = arr.Min();\n        int smalest_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (arr[i] < smalest_value) {\n               \
    \     smalest_value = arr[i];\n                    smalest_index = i;\n      \
    \          }\n            }\n        }\n        result.Add(smalest_value);\n \
    \       result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5db4cb2e98940d1b28929d2ac458e45>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f5db4cb2e98940d1b28929d2ac458e45>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f5db4cb2e98940d1b28929d2ac458e45>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = -1;\n        long smallest_even_value = -1;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (smallest_even_value == -1) {\n                    smallest_even_value = value;\n\
    \                    smallest_index = value;\n                } else if (value\
    \ < smallest_even_value) {\n                    smallest_even_value = value;\n\
    \                    smallest_index = value;\n                }\n            }\n\
    \        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6822b845ea7447998287bb13d54fb2bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6822b845ea7447998287bb13d54fb2bf>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <6822b845ea7447998287bb13d54fb2bf>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long node in arr) {\n  \
    \          if (node % 2 == 0) {\n                smallest_even_value = node;\n\
    \                smallest_index = arr.IndexOf(node);\n                found =\
    \ true;\n                break;\n            }\n        }\n        if (!found)\
    \ {\n            return result;\n        }\n        List<long> result_list = new\
    \ List<long>();\n        foreach (long node in arr) {\n            if (node %\
    \ 2 == 0) {\n                if (node < smallest_even_value) {\n             \
    \       result_list.Add(smallest_even_value);\n                    result_list.Add(smallest_index);\n\
    \                }\n            }\n        }\n        return result_list;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80832e919d784923b9406d4be61ee3e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <80832e919d784923b9406d4be61ee3e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        long smallestEvenValue\
    \ = 0;\n        long smallestIndex = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           smallestEvenValue = item;\n                smallestIndex = arr.IndexOf(item);\n\
    \            }\n        }\n        if (smallestEvenValue == 0) {\n           \
    \ return result;\n        }\n        List<long> evenValues = new List<long>();\n\
    \        List<long> indexValues = new List<long>();\n        foreach (var item\
    \ in arr) {\n            if (item % 2 == 0) {\n                evenValues.Add(item);\n\
    \                indexValues.Add(arr.IndexOf(item));\n            }\n        }\n\
    \        if (evenValues.Count == 0) {\n            return result;\n        }\n\
    \        long smallestEvenValue = evenValues.Min();\n        long smallestIndex\
    \ = indexValues.Min();\n        if (smallestEvenValue == smallestEvenValue) {\n\
    \            smallestEvenValue = evenValues.Min();\n            smallestIndex\
    \ = indexValues.Min();\n        }\n        result.Add(smallestEvenValue);\n  \
    \      result.Add(smallestIndex);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpylgc7eso.cs(58,14): error CS0128: A local variable or function named ''smallestEvenValue''
    is already defined in this scope

    /tmp/tmpylgc7eso.cs(59,14): error CS0128: A local variable or function named ''smallestIndex''
    is already defined in this scope

    /tmp/tmpylgc7eso.cs(60,13): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    '
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1)\
    \ {\n            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            while (smallest_index != smallest_even_index)\
    \ {\n                result.Add(arr[smallest_index]);\n                smallest_index++;\n\
    \            }\n        }\n        else {\n            while (smallest_index !=\
    \ smallest_even_index) {\n                result.Add(arr[smallest_index]);\n \
    \               smallest_index++;\n            }\n            result.Add(smallest_value);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfn2q48uw.cs(44,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpfn2q48uw.cs(55,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpfn2q48uw.cs(61,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = arr.IndexOf(smallest_value);\n        long smallest_even_value\
    \ = smallest_value % 2 == 0 ? smallest_value : smallest_value - 1;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] == smallest_even_value) {\n                found = true;\n         \
    \       result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \                break;\n            }\n        }\n        if (!found) {\n   \
    \         result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e2462e2908a413aa68439ff2cdc1cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e2462e2908a413aa68439ff2cdc1cca>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <0e2462e2908a413aa68439ff2cdc1cca>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var node in arr) {\n   \
    \         if (node.Value % 2 == 0) {\n                if (smallest_value == 0)\
    \ {\n                    smallest_value = node.Value;\n                    smallest_index\
    \ = node.Index;\n                    found = true;\n                } else if\
    \ (smallest_value < node.Value) {\n                    smallest_value = node.Value;\n\
    \                    smallest_index = node.Index;\n                    found =\
    \ true;\n                }\n            }\n        }\n        if (found) {\n \
    \           result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq31cfj4u.cs(40,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpq31cfj4u.cs(42,43): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpq31cfj4u.cs(43,43): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpq31cfj4u.cs(45,50): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpq31cfj4u.cs(46,43): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpq31cfj4u.cs(47,43): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (smallestEvenValue % 2 == 0) {\n\
    \                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a32b9e2387034621b8f26ae37629bcb1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a32b9e2387034621b8f26ae37629bcb1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        foreach (var node in arr) {\n            if (node.Value % 2 ==\
    \ 0) {\n                if (smallest_value < node.Value) {\n                 \
    \   smallest_value = node.Value;\n                    smallest_index = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        if (smallest_index > 0)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw83nno3.cs(39,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmptw83nno3.cs(40,43): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmptw83nno3.cs(41,43): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (found) {\n                    result.Add(smallest_even_value);\n\
    \                    result.Add(smallest_even_index);\n                    return\
    \ result;\n                }\n                found = true;\n                smallest_even_value\
    \ = arr[i];\n                smallest_even_index = i;\n            }\n       \
    \ }\n        if (!found) {\n            return result;\n        }\n        List<long>\
    \ evens = new List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0) {\n                evens.Add(arr[i]);\n     \
    \       }\n        }\n        long smallest_even = evens.Min();\n        long\
    \ smallest_even_index = evens.IndexOf(smallest_even);\n        result.Add(smallest_even);\n\
    \        result.Add(smallest_even_index);\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwgan8l5c.cs(64,14): error CS0128: A local variable or function named ''smallest_even_index''
    is already defined in this scope

    '
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min(x => x % 2 ==\
    \ 0 ? x : 0);\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <92fa791e33444708894d21cc716247a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <92fa791e33444708894d21cc716247a1>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ selector) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck\
    \ (System.Collections.Generic.List`1[T] arr) [0x00007] in <92"
  stdout: ''
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_even_index\
    \ = 0;\n        bool found = false;\n        foreach (var node in arr) {\n   \
    \         if (found == true) {\n                if (smallest_even_value < node.Value)\
    \ {\n                    smallest_even_value = node.Value;\n                 \
    \   smallest_even_index = node.Index;\n                }\n            }\n    \
    \        if (node.Value % 2 == 0) {\n                found = true;\n         \
    \   }\n        }\n        if (smallest_even_value == 0) {\n            return\
    \ result;\n        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp01d2tqzs.cs(41,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp01d2tqzs.cs(42,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp01d2tqzs.cs(43,48): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp01d2tqzs.cs(46,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        List<long> res\
    \ = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        foreach (long node in arr) {\n            if (node % 2 == 0) {\n\
    \                if (smallest_value == 0) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       } else {\n                    if (smallest_value < node) {\n         \
    \               smallest_value = node;\n                        smallest_index\
    \ = arr.IndexOf(node);\n                    }\n                }\n           \
    \ }\n        }\n        if (smallest_value == 0) {\n            return new List<long>();\n\
    \        }\n        res.Add(smallest_value);\n        res.Add(smallest_index);\n\
    \        return res;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58c56df1740f422b916a0946dfd4fd39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58c56df1740f422b916a0946dfd4fd39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_value = 0;\n        bool found = false;\n      \
    \  foreach (long node in arr) {\n            if (node % 2 == 0) {\n          \
    \      smallest_even_value = node;\n                smallest_index = arr.IndexOf(node);\n\
    \                smallest_value = smallest_even_value;\n                found\
    \ = true;\n            }\n        }\n        if (found) {\n            int index\
    \ = smallest_index;\n            while (index >= 0) {\n                if (smallest_value\
    \ == arr[index]) {\n                    result.Add(smallest_value);\n        \
    \            result.Add(index);\n                    break;\n                }\n\
    \                index--;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwn3_hev8.cs(49,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659798899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smalest_value = 0;\n        int smalest_index\
    \ = 0;\n        long smalest_even_value = 0;\n        int smalest_even_index =\
    \ 0;\n        bool has_even_value = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                has_even_value =\
    \ true;\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            }\n            if (arr[i] < smalest_value) {\n           \
    \     smalest_value = arr[i];\n                smalest_index = i;\n          \
    \  }\n        }\n        if (has_even_value) {\n            smalest_value = smalest_even_value;\n\
    \            smalest_index = smalest_even_index;\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56ec2832fd7b4b2a95e60f4364301f9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <56ec2832fd7b4b2a95e60f4364301f9e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        for (int i = 0; i < arr.Count; i++) {\n                if (arr[i] ==\
    \ smallest_value) {\n                    smallest_index = i;\n               \
    \     break;\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1ezfkkkf.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        long smallest_even_value = 0;\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            long value\
    \ = arr[i];\n            if (value % 2 == 0) {\n                found = true;\n\
    \                if (value < smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \           else if (value == smallest_value) {\n                    smallest_even_value\
    \ = value;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0477c1b9d9ed4818a13a2e7a0cbb31e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0477c1b9d9ed4818a13a2e7a0cbb31e7>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <0477c1b9d9ed4818a13a2e7a0cbb31e7>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        int smallest_even_index\
    \ = 0;\n        foreach (var node in arr) {\n            if (node.Value % 2 ==\
    \ 0) {\n                if (smallest_even_value < node.Value) {\n            \
    \        smallest_even_value = node.Value;\n                    smallest_even_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smallest_even_value == 0) {\n            return new List<long>();\n       \
    \ }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcolixbjn.cs(39,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpcolixbjn.cs(40,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpcolixbjn.cs(41,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        long smalest_index_value = 0;\n        long smalest_index_value2\
    \ = 0;\n        long smalest_index_value3 = 0;\n        long smalest_index_value4\
    \ = 0;\n        long smalest_index_value5 = 0;\n        long smalest_index_value6\
    \ = 0;\n        long smalest_index_value7 = 0;\n        long smalest_index_value8\
    \ = 0;\n        long smalest_index_value9 = 0;\n        long smalest_index_value10\
    \ = 0;\n        long smalest_index_value11 = 0;\n        long smalest_index_value12\
    \ = 0;\n        long smalest_index_value13 = 0;\n        long smalest_index_value14\
    \ = 0;\n        long smalest_index_value15 = 0;\n        long smalest_index_value16\
    \ = 0;\n        long smalest_index_value17 = 0;\n        long smalest_index_value18\
    \ = 0;\n        long smalest_index_value19 = 0;\n        long smalest_index_value20\
    \ = 0;\n        long smalest_index_value21 = 0;\n        long smalest_index_value22\
    \ = 0;\n        long smalest_index_value23 = 0;\n        long smalest_index_value24\
    \ = 0;\n        long smalest_index_value25 = 0;\n        long smalest_index_value26\
    \ = 0;\n        long smalest_index_value27 = 0;\n        long smalest_index_value28\
    \ = 0;\n        long smalest_index_value29 = 0;\n        long smalest_index_value30\
    \ = 0;\n        long smalest_index_value31 = 0;\n        long smalest_index_value32\
    \ = 0;\n        long smalest_index_value33 = 0;\n        long smalest_index_value34\
    \ = 0;\n        long smalest_index_value35 = 0;\n        long smalest_index_value36\
    \ = 0;\n        long smalest_index_value37 = 0;\n        long smalest_index_value38\
    \ = 0;\n        long smalest_index_value39 = 0;\n        long smalest_index_value40\
    \ = 0;\n        long smalest_index_value41 = 0;\n        long smalest_index_value42\
    \ = 0;\n        long smalest_index_value43 = 0;\n        long smalest_index_value44\
    \ = 0;\n        long smalest_index_value45 = 0;\n        long smalest_index_value46\
    \ = 0;\n        long smalest_index_value47 = 0;\n        long smalest_index_value48\
    \ = 0;\n        long smalest_index_value49 = 0;\n        \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvhst8v_o.cs(36,14): warning CS0219: The variable ''smalest_value'' is
    assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(37,14): warning CS0219: The variable ''smalest_index'' is
    assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(38,14): warning CS0219: The variable ''smalest_index_value''
    is assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(39,14): warning CS0219: The variable ''smalest_index_value2''
    is assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(40,14): warning CS0219: The variable ''smalest_index_value3''
    is assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(41,14): warning CS0219: The variable ''smalest_index_value4''
    is assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(42,14): warning CS0219: The variable ''smalest_index_value5''
    is assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(43,14): warning CS0219: The variable ''smalest_index_value6''
    is assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(44,14): warning CS0219: The variable ''smalest_index_value7''
    is assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(45,14): warning CS0219: The variable ''smalest_index_value8''
    is assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(46,14): warning CS0219: The variable ''smalest_index_value9''
    is assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(47,14): warning CS0219: The variable ''smalest_index_value10''
    is assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(48,14): warning CS0219: The variable ''smalest_index_value11''
    is assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(49,14): warning CS0219: The variable ''smalest_index_value12''
    is assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(50,14): warning CS0219: The variable ''smalest_index_value13''
    is assigned but its value is never used

    /tmp/tmpvhst8v_o.cs(51,14): warning CS0219: The variable ''smalest_index_value14''
    is assigned but its value is never used

    /tmp/tmpvhs'
  timestamp: 1659798899
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0)\n            return new List<long>();\n        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        int smallest_index = 0;\n    \
    \    for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                if (smallest_even_value < arr[i]) {\n                    smallest_even_value\
    \ = arr[i];\n                    smallest_index = i;\n                }\n    \
    \        }\n        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffbfb232a7d149a3928c1d63c555bf02>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ffbfb232a7d149a3928c1d63c555bf02>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        foreach (long value in arr) {\n            if (value\
    \ % 2 == 0) {\n                if (smallestEvenValue % 2 == 0) {\n           \
    \         if (value < smallestEvenValue) {\n                        smallestEvenValue\
    \ = value;\n                        smallestIndex = arr.IndexOf(value);\n    \
    \                }\n                } else {\n                    if (value <\
    \ smallestEvenValue) {\n                        smallestEvenValue = value;\n \
    \                       smallestIndex = arr.IndexOf(value);\n                \
    \    }\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c330a784664a56bc0de8688726f8f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1c330a784664a56bc0de8688726f8f3>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <c1c330a784664a56bc0de8688726f8f3>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long smallest_value = arr.Min();\n        long smallest_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ < smallest_value) {\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n        if (smallest_value\
    \ % 2 == 0) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        List<long> evens = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                evens.Add(arr[i]);\n            }\n        }\n       \
    \ long smallest_even = evens.Min();\n        int smallest_even_index = evens.IndexOf(smallest_even);\n\
    \        result.Add(smallest_even);\n        result.Add(smallest_even_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <223d5c6743cf4b6aa0ecb2faff6d3698>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <223d5c6743cf4b6aa0ecb2faff6d3698>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823966
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        bool found = false;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            long value = arr[i];\n            if (value\
    \ % 2 == 0) {\n                if (value < smallest_value) {\n               \
    \     smallest_value = value;\n                    smallest_index = i;\n     \
    \               found = true;\n                }\n            }\n        }\n \
    \       if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7271c5a5c0bf49a5b33c696b5aab91b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7271c5a5c0bf49a5b33c696b5aab91b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        foreach (var node in arr) {\n            if (node.Value % 2 ==\
    \ 0) {\n                if (smallest_value < node.Value) {\n                 \
    \   smallest_value = node.Value;\n                    smallest_index = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        if (smallest_index > 0)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptw83nno3.cs(39,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmptw83nno3.cs(40,43): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmptw83nno3.cs(41,43): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        long smalest_value\
    \ = arr.Min();\n        long smalest_index = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n % 2 == 0)\
    \ {\n                if (smalest_value == n) {\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n                else {\n             \
    \       smalest_value = n;\n                    smalest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value))\
    \ {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c5233bfd788243c096b0cf88a9a8e22b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c5233bfd788243c096b0cf88a9a8e22b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <c5233bfd788243c096b0cf88a9a8e22b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = arr.IndexOf(smallest_value);\n        bool found = false;\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              found = true;\n                result.Add(value);\n           \
    \     if (smallest_value == value) {\n                    smallest_index = arr.IndexOf(value);\n\
    \                }\n            }\n        }\n        if (!found) {\n        \
    \    return result;\n        }\n        List<long> result_2 = new List<long>();\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              result_2.Add(value);\n            }\n        }\n        if (result_2.Count\
    \ > 1) {\n            result_2.Sort();\n            result_2.Remove(smallest_value);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_2.Remove(smallest_index);\n\
    \            result_2.Sort();\n            result_\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjebez_j6.cs(109,20): error CS1002: ; expected

    /tmp/tmpjebez_j6.cs(111,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpjebez_j6.cs(122,2): error CS1513: } expected

    '
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        while (smallest_index > 0) {\n                if (arr[smallest_index]\
    \ % 2 == 0) {\n                    smallest_value += arr[smallest_index];\n  \
    \                  smallest_index--;\n                } else {\n             \
    \       break;\n                }\n            }\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            return\
    \ result;\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4rryk96b.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4rryk96b.cs(52,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4rryk96b.cs(53,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long smallest_value = 0;\n        long smallest_index = 0;\n\
    \        bool has_even_value = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long value = arr[i];\n            if (value % 2 == 0) {\n\
    \                has_even_value = true;\n            }\n            if (value\
    \ < smallest_value) {\n                smallest_value = value;\n             \
    \   smallest_index = i;\n            }\n        }\n        if (has_even_value)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        } else {\n            int smallest_index_with_even_value = smallest_index;\n\
    \            while (smallest_index_with_even_value < arr.Count - 1 && arr[smallest_index_with_even_value]\
    \ % 2 == 0) {\n                smallest_index_with_even_value++;\n           \
    \ }\n            result.Add(smallest_value);\n            result.Add(smallest_index_with_even_value);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_qji5232.cs(56,50): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823966
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var item in arr) {\n   \
    \         if (item % 2 == 0) {\n                smallest_value = item;\n     \
    \           smallest_index = arr.IndexOf(item);\n                found = true;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd99bf3bfbea4c948bddc2eb5a722c71>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd99bf3bfbea4c948bddc2eb5a722c71>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smalest_value = arr.Min();\n        int smalest_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smalest_value < arr[i]) {\n               \
    \     smalest_value = arr[i];\n                    smalest_index = i;\n      \
    \          }\n            }\n        }\n        result.Add(smalest_value);\n \
    \       result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ea569890bac440990f934f4f095feef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ea569890bac440990f934f4f095feef>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <8ea569890bac440990f934f4f095feef>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        bool has_even_values\
    \ = arr.Count > 0;\n        if (has_even_values) {\n            int smallest_even_value_index\
    \ = arr.FindIndex(x => x == smallest_even_value);\n            if (smallest_even_value_index\
    \ > 0) {\n                result.Add(smallest_even_value);\n                result.Add(smallest_even_value_index);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7479391f893c42dbac36df4a385244b9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7479391f893c42dbac36df4a385244b9>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x0000d] in\
    \ <7479391f893c42dbac36df4a385244b9>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        int\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (smallestEvenValue % 2 == 0) {\n\
    \                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54f7a8f73dd64faa839bee0addcd2ea7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54f7a8f73dd64faa839bee0addcd2ea7>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <54f7a8f73dd64faa839bee0addcd2ea7>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = -1;\n        bool found = false;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            long value = arr[i];\n            if (value\
    \ % 2 == 0) {\n                if (smallest_value == 0) {\n                  \
    \  smallest_value = value;\n                    smallest_index = i;\n        \
    \            found = true;\n                } else if (smallest_value < value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                    found = true;\n                }\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_value);\n  \
    \          result.Add(smallest_index);\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bac432749ced4a8f947d3337dd0a7ca5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bac432749ced4a8f947d3337dd0a7ca5>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <bac432749ced4a8f947d3337dd0a7ca5>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        int\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (smallestEvenValue < arr[i]) {\n\
    \                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea760aa7bd454a83875773f8ab0eb831>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea760aa7bd454a83875773f8ab0eb831>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ea760aa7bd454a83875773f8ab0eb831>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEven = arr.Min(x => x % 2 == 0 ? x\
    \ : 0);\n        long smallestIndex = arr.IndexOf(smallestEven);\n        result.Add(smallestEven);\n\
    \        if (smallestIndex != -1) {\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85c4c4c0f2624123bc7def4e6c485ae8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <85c4c4c0f2624123bc7def4e6c485ae8>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ selector) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck\
    \ (System.Collections.Generic.List`1[T] arr) [0x00007] in <85"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        bool found = false;\n\
    \        long smallest_even_value_plus_one = smallest_even_value + 1;\n      \
    \  foreach (long i in arr) {\n            if (i == smallest_even_value_plus_one)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        long smallest_even_value_plus_two = smallest_even_value + 2;\n\
    \        foreach (long i in arr) {\n            if (i == smallest_even_value_plus_two)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        long smallest_even_value_plus_three = smallest_even_value +\
    \ 3;\n        foreach (long i in arr) {\n            if (i == smallest_even_value_plus_three)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        long smallest_even_value_plus_four = smallest_even_value + 4;\n\
    \        foreach (long i in arr) {\n            if (i == smallest_even_value_plus_four)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        long smallest_even_value_plus_five = smallest_even_value + 5;\n\
    \        foreach (long i in arr) {\n            if (i == smallest_even_value_plus_five)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        long smallest_even_value_plus_six = smallest_even_value + 6;\n\
    \        foreach (long i in arr) {\n            if (i == smallest_even_value_plus_six)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        long smallest_even_value_plus_seven = smallest_even_value +\
    \ 7;\n        foreach (long i in arr) {\n            if (i == smallest_even_value_plus_seven)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphaqvg0na.cs(121,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmphaqvg0na.cs(132,2): error CS1513: } expected

    '
  timestamp: 1659823966
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                found = true;\n     \
    \           smallest_value = arr[i];\n                smallest_index = i;\n  \
    \          }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66608ba710c541d5818abc0fc599a97c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66608ba710c541d5818abc0fc599a97c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        foreach (var node in arr) {\n            if (node.Value % 2 ==\
    \ 0) {\n                if (smallest_value < node.Value) {\n                 \
    \   smallest_value = node.Value;\n                    smallest_index = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        if (smallest_index != 0)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphwonu8ek.cs(39,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmphwonu8ek.cs(40,43): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmphwonu8ek.cs(41,43): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (smallestEvenValue == arr[i]) {\n                    foundSmallestEvenValue\
    \ = true;\n                    smallestIndex = i;\n                }\n       \
    \     }\n        }\n        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        } else {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c14939a34917435fb6bd420c2c14b42b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c14939a34917435fb6bd420c2c14b42b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <c14939a34917435fb6bd420c2c14b42b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        long current_value = 0;\n        long current_index = 0;\n   \
    \     bool found = false;\n        foreach (var item in arr) {\n            if\
    \ (item % 2 == 0) {\n                current_value = item;\n                current_index\
    \ = current_index + 1;\n            }\n            else {\n                if\
    \ (current_value == 0) {\n                    smallest_value = item;\n       \
    \             smallest_index = current_index;\n                    found = true;\n\
    \                }\n                else {\n                    if (smallest_value\
    \ < item) {\n                        smallest_value = item;\n                \
    \        smallest_index = current_index;\n                        found = true;\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        else {\n            result.Add(0);\n            result.Add(0);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5f4d0d6100d49f7adbd0ebe4bf88c37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5f4d0d6100d49f7adbd0ebe4bf88c37>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == arr.Count - 1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = smallest_even_index + 1; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjhu2wyyv.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjhu2wyyv.cs(44,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = arr.IndexOf(smallest_value);\n        bool found = false;\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              if (smallest_value == value) {\n                    found = true;\n\
    \                    break;\n                }\n                if (smallest_value\
    \ < value) {\n                    smallest_value = value;\n                  \
    \  smallest_index = arr.IndexOf(value);\n                }\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_value);\n    \
    \        result.Add(smallest_index);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1ef45e9fd484ebc96cd69e7178c0568>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1ef45e9fd484ebc96cd69e7178c0568>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <c1ef45e9fd484ebc96cd69e7178c0568>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823966
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        bool is_even = true;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            long value = arr[i];\n            if (value\
    \ < smallest_value) {\n                smallest_value = value;\n             \
    \   smallest_index = i;\n            }\n            if (value == smallest_value\
    \ && is_even) {\n                result.Add(smallest_value);\n               \
    \ result.Add(smallest_index);\n                is_even = false;\n            }\n\
    \        }\n        if (is_even) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <836ee3a62736414eaa5299b0013ccd64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <836ee3a62736414eaa5299b0013ccd64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823966
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        int\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (smallestEvenValue % 2 == 0) {\n\
    \                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54f7a8f73dd64faa839bee0addcd2ea7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54f7a8f73dd64faa839bee0addcd2ea7>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <54f7a8f73dd64faa839bee0addcd2ea7>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823966
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallest_value < arr[i]) {\n              \
    \      smallest_value = arr[i];\n                    smallest_index = i;\n   \
    \             }\n            }\n        }\n        if (smallest_index > 0) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab33201648d54c5cbfbf5f43314c93c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ab33201648d54c5cbfbf5f43314c93c9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_even_value = 0;\n        long smallest_even_index\
    \ = 0;\n        bool found = false;\n        foreach (var node in arr) {\n   \
    \         if (found == true) {\n                if (smallest_value == 0) {\n \
    \                   smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                }\n                else if (smallest_value\
    \ == node) {\n                    smallest_index = arr.IndexOf(node);\n      \
    \          }\n                else if (smallest_value == node && smallest_index\
    \ == arr.IndexOf(node)) {\n                    smallest_even_value = node;\n \
    \                   smallest_even_index = arr.IndexOf(node);\n               \
    \ }\n                else if (smallest_value == node && smallest_even_index ==\
    \ arr.IndexOf(node)) {\n                    smallest_even_index = arr.IndexOf(node);\n\
    \                }\n            }\n            if (node % 2 == 0) {\n        \
    \        smallest_even_value = node;\n                smallest_even_index = arr.IndexOf(node);\n\
    \                found = true;\n            }\n        }\n        if (smallest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        else if (smallest_even_index\
    \ == arr.IndexOf(smallest_even_value)) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        else if (smallest_index\
    \ == arr.IndexOf(smallest_value)) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        else {\n        \
    \    result.Add(smallest_value);\n            result.Add(smallest_index);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9715edb9aa7248b89e7a76794f60fc3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9715edb9aa7248b89e7a76794f60fc3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        foreach (var node in arr) {\n            if (node.Value % 2 ==\
    \ 0) {\n                if (smallest_even_value < node.Value) {\n            \
    \        smallest_even_value = node.Value;\n                    smallest_index\
    \ = node.Index;\n                }\n            }\n        }\n        if (smallest_even_value\
    \ == 0) {\n            return result;\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprvo_58wu.cs(39,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmprvo_58wu.cs(40,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmprvo_58wu.cs(41,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmprvo_58wu.cs(42,43): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ int smallest_even_index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smallest_even_value <\
    \ arr[i]) {\n                    smallest_even_value = arr[i];\n             \
    \       smallest_even_index = i;\n                }\n            }\n        }\n\
    \        if (smallest_even_index != -1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a26e90d5bf34395b15f30f21be7c29b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a26e90d5bf34395b15f30f21be7c29b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <8a26e90d5bf34395b15f30f21be7c29b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_even_value) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        } else {\n            result.Add(smallest_even_value);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cc19c8d459144608dfd75020e402f3d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cc19c8d459144608dfd75020e402f3d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <9cc19c8d459144608dfd75020e402f3d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f81ca8744b83467db40356867b6713c5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f81ca8744b83467db40356867b6713c5>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f81ca8744b83467db40356867b6713c5>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        long smallest_value_index\
    \ = arr.IndexOf(smallest_even_value);\n        long smallest_value = smallest_even_value;\n\
    \        bool found = false;\n        foreach (long value in arr) {\n        \
    \    if (value % 2 == 0) {\n                if (smallest_value == smallest_even_value)\
    \ {\n                    found = true;\n                    smallest_value = value;\n\
    \                    smallest_value_index = arr.IndexOf(value);\n            \
    \    }\n                else {\n                    if (smallest_value < smallest_even_value)\
    \ {\n                        found = true;\n                        smallest_value\
    \ = value;\n                        smallest_value_index = arr.IndexOf(value);\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_value_index);\n\
    \        }\n        else {\n            result.Add(smallest_even_value);\n   \
    \         result.Add(smallest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f378b33faa8c4097a1540c2f65b1603c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f378b33faa8c4097a1540c2f65b1603c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f378b33faa8c4097a1540c2f65b1603c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEven = arr.Min();\n        long smallestIndex\
    \ = arr.IndexOf(smallestEven);\n        if (smallestIndex == -1) {\n         \
    \   return result;\n        }\n        bool isEven = true;\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestEvenIndex = arr.IndexOf(smallestEvenValue);\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      isEven = false;\n            }\n            if (isEven) {\n           \
    \     if (smallestEvenValue < n) {\n                    smallestEvenValue = n;\n\
    \                    smallestEvenIndex = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestEvenIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1ca6d18cd9c47e3bbd5fac125c13f65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1ca6d18cd9c47e3bbd5fac125c13f65>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <c1ca6d18cd9c47e3bbd5fac125c13f65>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long node in arr) {\n  \
    \          if (node % 2 == 0) {\n                found = true;\n             \
    \   if (smallest_value == 0) {\n                    smallest_value = node;\n \
    \                   smallest_index = arr.IndexOf(node);\n                }\n \
    \               else if (smallest_value < node) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       }\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da4da8689da64f8d9c8588f722363c65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da4da8689da64f8d9c8588f722363c65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        List<long> result\
    \ = new List<long>();\n        long smallestEven = arr.Min();\n        long smallestIndex\
    \ = arr.IndexOf(smallestEven);\n        bool foundSmallestEven = false;\n    \
    \    bool foundSmallestIndex = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long value = arr[i];\n            if (value % 2 == 0) {\n\
    \                if (foundSmallestEven) {\n                    result.Add(smallestEven);\n\
    \                    foundSmallestEven = false;\n                    foundSmallestIndex\
    \ = true;\n                }\n                result.Add(value);\n           \
    \     foundSmallestEven = true;\n                foundSmallestIndex = false;\n\
    \            }\n        }\n        if (foundSmallestEven) {\n            result.Add(smallestEven);\n\
    \        }\n        if (foundSmallestIndex) {\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f06d1977b234431093ead349308ca423>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f06d1977b234431093ead349308ca423>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        bool found = false;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n          \
    \      smallest_value = arr[i];\n                smallest_index = i;\n       \
    \         found = false;\n            }\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <880f1b4919b84c5a98cc140b98c23f6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <880f1b4919b84c5a98cc140b98c23f6c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <880f1b4919b84c5a98cc140b98c23f6c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        bool has_even_values\
    \ = arr.Count > 0;\n        bool has_zeros = arr.Any(x => x == 0);\n        if\
    \ (has_even_values) {\n            int even_value_count = arr.Count(x => x % 2\
    \ == 0);\n            if (even_value_count > 1) {\n                smallest_even_value\
    \ = arr.Min(x => x % 2 == 0);\n                smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \            }\n        }\n        if (has_zeros) {\n            int zero_count\
    \ = arr.Count(x => x == 0);\n            if (zero_count > 1) {\n             \
    \   smallest_even_value = arr.Min(x => x == 0);\n                smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n            }\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_even_index);\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaqohmn43.cs(43,39): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmpaqohmn43.cs(50,39): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    '
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0)\n            return new List<long>();\n        var evens = arr.Where(x =>\
    \ x % 2 == 0).ToList();\n        if (evens.Count == 0)\n            return new\
    \ List<long>();\n        var min = evens.Min();\n        var index = evens.IndexOf(min);\n\
    \        if (index == 0)\n            return new List<long>();\n        var min\
    \ = evens.Min();\n        var index = evens.IndexOf(min);\n        if (index ==\
    \ 0)\n            return new List<long>();\n        var min = evens.Min();\n \
    \       var index = evens.IndexOf(min);\n        if (index == 0)\n           \
    \ return new List<long>();\n        var min = evens.Min();\n        var index\
    \ = evens.IndexOf(min);\n        if (index == 0)\n            return new List<long>();\n\
    \        var min = evens.Min();\n        var index = evens.IndexOf(min);\n   \
    \     if (index == 0)\n            return new List<long>();\n        var min =\
    \ evens.Min();\n        var index = evens.IndexOf(min);\n        if (index ==\
    \ 0)\n            return new List<long>();\n        var min = evens.Min();\n \
    \       var index = evens.IndexOf(min);\n        if (index == 0)\n           \
    \ return new List<long>();\n        var min = evens.Min();\n        var index\
    \ = evens.IndexOf(min);\n        if (index == 0)\n            return new List<long>();\n\
    \        var min = evens.Min();\n        var index = evens.IndexOf(min);\n   \
    \     if (index == 0)\n            return new List<long>();\n        var min =\
    \ evens.Min();\n        var index = evens.IndexOf(min);\n        if (index ==\
    \ 0)\n            return new List<long>();\n        var min = evens.Min();\n \
    \       var index = evens.IndexOf(min);\n        if (index == 0)\n           \
    \ return new List<long>();\n        var min = evens.Min();\n        var index\
    \ = evens.IndexOf(min);\n        if (index == 0)\n            return new List<long>();\n\
    \        var min = evens.Min();\n        var index = evens.IndexOf(min);\n   \
    \     if (index == 0)\n            return new List<long>();\n        var min =\
    \ evens.Min();\n        var index = evens.IndexOf(min);\n        if (index ==\
    \ 0)\n            return new List<long>();\n        var min = evens.Min();\n \
    \       var index = evens.IndexOf(min);\n        if (index == 0)\n           \
    \ return new List<long>();\n        var min = evens.Min();\n        var index\
    \ = evens.IndexOf(min);\n        if (index == 0)\n            return new List<long>();\n\
    \        var min = evens.Min();\n        var index = evens.IndexOf(min);\n   \
    \     if (index == 0)\n            return new List<long>();\n        var min =\
    \ evens.Min();\n        var index = evens.Index\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqaqld9q_.cs(109,32): error CS1002: ; expected

    '
  timestamp: 1659823967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        if (arr.Count > 0) {\n            long smallest_even_value\
    \ = arr.Min();\n            long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \            long smallest_even_value_plus_one = smallest_even_value + 1;\n  \
    \          long smallest_even_index_plus_one = smallest_even_index + 1;\n    \
    \        bool found_even_value = false;\n            bool found_even_index = false;\n\
    \            bool found_even_value_plus_one = false;\n            bool found_even_index_plus_one\
    \ = false;\n            bool found_smallest_even_value = false;\n            bool\
    \ found_smallest_even_index = false;\n            bool found_smallest_even_value_plus_one\
    \ = false;\n            bool found_smallest_even_index_plus_one = false;\n   \
    \         foreach (long node in arr) {\n                if (node == smallest_even_value)\
    \ {\n                    found_even_value = true;\n                }\n       \
    \         if (node == smallest_even_index) {\n                    found_even_index\
    \ = true;\n                }\n                if (node == smallest_even_value_plus_one)\
    \ {\n                    found_even_value_plus_one = true;\n                }\n\
    \                if (node == smallest_even_index_plus_one) {\n               \
    \     found_even_index_plus_one = true;\n                }\n                if\
    \ (node == smallest_even_value) {\n                    found_smallest_even_value\
    \ = true;\n                }\n                if (node == smallest_even_index)\
    \ {\n                    found_smallest_even_index = true;\n                }\n\
    \                if (node == smallest_even_value_plus_one) {\n               \
    \     found_smallest_even_value_plus_one = true;\n                }\n        \
    \        if (node == smallest_even_index_plus_one) {\n                    found_smallest_even_index_plus_one\
    \ = true;\n                }\n            }\n            if (found_even_value)\
    \ {\n                if (found_even_index) {\n                    if (found_even_value_plus_one)\
    \ {\n                        if (found_even_index_plus_one) {\n              \
    \              if (found_smallest_even_value) {\n                            \
    \    if (found_smallest_even_index) {\n                                    if\
    \ (found_smallest_even_value_plus_one) {\n                                   \
    \     if (found_smallest_even_index_plus_one) {\n                            \
    \                result.Add(smallest_even_value);\n                          \
    \                  result.Add(smallest_even_index);\n                        \
    \                    result.Add(smallest_even_value_plus_one);\n             \
    \                               result.Add(smallest_even_index_plus_one);\n  \
    \                                      }\n                                   \
    \ }\n                                }\n                            }\n      \
    \                  }\n                    }\n                }\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c308c196204947848d12d61a9aed8fa9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c308c196204947848d12d61a9aed8fa9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_even_value = 0;\n        long smallest_even_index\
    \ = 0;\n        bool found = false;\n        foreach (long node in arr) {\n  \
    \          if (node % 2 == 0) {\n                if (smallest_value == 0) {\n\
    \                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                    smallest_even_value = node % 2;\n\
    \                    smallest_even_index = arr.IndexOf(node) % 2;\n          \
    \          found = true;\n                }\n                else if (smallest_value\
    \ == node % 2) {\n                    smallest_even_value = smallest_even_value;\n\
    \                    smallest_even_index = smallest_even_index;\n            \
    \        found = true;\n                }\n                else if (smallest_value\
    \ == node % 2 && smallest_even_index < smallest_index) {\n                   \
    \ smallest_even_value = smallest_value;\n                    smallest_even_index\
    \ = smallest_index;\n                    found = true;\n                }\n  \
    \              else if (smallest_value == node % 2 && smallest_even_index == smallest_index)\
    \ {\n                    smallest_even_value = smallest_value;\n             \
    \       smallest_even_index = smallest_index;\n                    found = true;\n\
    \                }\n                else if (smallest_value == node % 2 && smallest_even_index\
    \ > smallest_index) {\n                    smallest_even_value = smallest_value;\n\
    \                    smallest_even_index = smallest_index;\n                 \
    \   found = true;\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        else {\n            result.Add(0);\n            result.Add(0);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d13c5c1f2a4b4ddda57ad365af7b866f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d13c5c1f2a4b4ddda57ad365af7b866f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_value = 0;\n        bool found = false;\n      \
    \  foreach (long value in arr) {\n            if (value % 2 == 0) {\n        \
    \        smallest_even_value = value;\n                smallest_index = arr.IndexOf(value);\n\
    \                smallest_value = value;\n                found = true;\n    \
    \            break;\n            }\n        }\n        if (found) {\n        \
    \    result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        } else {\n            result.Add(smallest_value);\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dff82c745c744dfdb8dc6e3e9219dd98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dff82c745c744dfdb8dc6e3e9219dd98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0)\n            return new List<long>();\n        long smalest_value = arr.Min();\n\
    \        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long node in arr) {\n            if (node % 2 == 0) {\n    \
    \            if (node < smalest_value) {\n                    smalest_value =\
    \ node;\n                    smalest_index = arr.IndexOf(node);\n            \
    \    }\n            }\n        }\n        if (smalest_index != 0)\n          \
    \  result.Add(smalest_value);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <946472c66d734fd38aebe44db9785328>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <946472c66d734fd38aebe44db9785328>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        bool found = false;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n          \
    \      smallest_value = arr[i];\n                smallest_index = i;\n       \
    \         found = true;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d734e61bb7da4317addd855230881245>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d734e61bb7da4317addd855230881245>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        long smallest_value\
    \ = smallest_even_value;\n        long smallest_index = smallest_even_index;\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           if (smallest_value % 2 == 0) {\n                    smallest_value\
    \ = item;\n                    smallest_index = arr.IndexOf(item);\n         \
    \       }\n                else {\n                    smallest_value = smallest_value\
    \ + item;\n                    smallest_index = arr.IndexOf(smallest_value);\n\
    \                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65bfe1afa2204b39bed280d1834e6fc5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65bfe1afa2204b39bed280d1834e6fc5>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <65bfe1afa2204b39bed280d1834e6fc5>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        long smallest_value\
    \ = smallest_even_value;\n        long smallest_index = smallest_even_index;\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              if (smallest_value < value) {\n                    smallest_even_value\
    \ = value;\n                    smallest_even_index = arr.IndexOf(value);\n  \
    \                  smallest_value = value;\n                    smallest_index\
    \ = arr.IndexOf(value);\n                }\n            }\n        }\n       \
    \ result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e12fc139f57496bba0b9cec52f2cbed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e12fc139f57496bba0b9cec52f2cbed>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <0e12fc139f57496bba0b9cec52f2cbed>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (!found) {\n   \
    \         return result;\n        }\n        List<long> even_values = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                even_values.Add(arr[i]);\n            }\n        }\n \
    \       long smallest_even_value = even_values.Min();\n        long smallest_even_index\
    \ = even_values.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = even_values[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                result.Add(arr[i]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_7ysnbaz.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_7ysnbaz.cs(59,14): error CS0128: A local variable or function named ''smallest_even_value''
    is already defined in this scope

    /tmp/tmp_7ysnbaz.cs(60,14): error CS0128: A local variable or function named ''smallest_even_index''
    is already defined in this scope

    /tmp/tmp_7ysnbaz.cs(64,14): error CS0128: A local variable or function named ''smallest_value''
    is already defined in this scope

    /tmp/tmp_7ysnbaz.cs(64,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp_7ysnbaz.cs(65,14): error CS0128: A local variable or function named ''smallest_index''
    is already defined in this scope

    '
  timestamp: 1659823967
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        long smalest_value\
    \ = 0;\n        int smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           if (item < smalest_value) {\n                    smalest_value = item;\n\
    \                    smalest_index = arr.IndexOf(item);\n                }\n \
    \           }\n        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ab70fef4ebc4f7c99beecd7bdff7a48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ab70fef4ebc4f7c99beecd7bdff7a48>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823968
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool has_even_value = false;\n        foreach (long node in arr)\
    \ {\n            if (node % 2 == 0) {\n                has_even_value = true;\n\
    \            }\n            if (has_even_value) {\n                if (smallest_value\
    \ < node) {\n                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smallest_value == 0) {\n            return new List<long>();\n        }\n \
    \       result.Add(smallest_value);\n        result.Add(smallest_index);\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4800f38342740ecb0aa6c782a877479>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4800f38342740ecb0aa6c782a877479>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823968
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_even_value = 0;\n        long smallest_even_index\
    \ = 0;\n        bool found = false;\n        foreach (var node in arr) {\n   \
    \         if (node % 2 == 0) {\n                if (smallest_value == 0) {\n \
    \                   smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                    found = true;\n                }\n\
    \                else {\n                    smallest_even_value = node;\n   \
    \                 smallest_even_index = arr.IndexOf(node);\n                }\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        else {\n   \
    \         result.Add(smallest_value);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52022c4204c64c58b279778734dd373b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52022c4204c64c58b279778734dd373b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        bool has_even_value = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       has_even_value = true;\n            }\n            if (arr[i] == smallest_value)\
    \ {\n                smallest_index = i;\n            }\n        }\n        if\
    \ (has_even_value) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        } else {\n            result.Add(smallest_value);\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8940a48a23004ac49e084da0743e4fc1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8940a48a23004ac49e084da0743e4fc1>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <8940a48a23004ac49e084da0743e4fc1>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (smallestEvenValue % 2 == 0) {\n\
    \                    if (smallestIndex < i) {\n                        smallestEvenValue\
    \ = arr[i];\n                        smallestIndex = i;\n                    }\n\
    \                } else {\n                    if (smallestEvenValue < arr[i])\
    \ {\n                        smallestEvenValue = arr[i];\n                   \
    \     smallestIndex = i;\n                    }\n                }\n         \
    \   }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6ce883411ed419c87256e82061aab54>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e6ce883411ed419c87256e82061aab54>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <e6ce883411ed419c87256e82061aab54>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (smallestEvenValue < arr[i]) {\n\
    \                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa52cf14572d4ff79c799a8814f18cd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa52cf14572d4ff79c799a8814f18cd0>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <aa52cf14572d4ff79c799a8814f18cd0>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min(x => x % 2 ==\
    \ 0 ? x : 0);\n        long smallest_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_index != -1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <106784640e8e43b7886612053851d56c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <106784640e8e43b7886612053851d56c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ selector) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck\
    \ (System.Collections.Generic.List`1[T] arr) [0x00007] in <10"
  stdout: ''
  timestamp: 1659823968
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        long smalest_value\
    \ = 0;\n        long smalest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           if (item < smalest_value) {\n                    smalest_value = item;\n\
    \                    smalest_index = arr.IndexOf(item);\n                }\n \
    \           }\n        }\n        if (smalest_index != arr.Count - 1) {\n    \
    \        result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f8648c643044ab8f214f586addf743>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b5f8648c643044ab8f214f586addf743>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823968
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long node in arr) {\n  \
    \          if (node % 2 == 0) {\n                if (smallest_value == 0) {\n\
    \                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                    found = true;\n                } else\
    \ if (smallest_value < node) {\n                    smallest_value = node;\n \
    \                   smallest_index = arr.IndexOf(node);\n                    found\
    \ = true;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49bb304f8c91445b932a53d24f8a9239>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49bb304f8c91445b932a53d24f8a9239>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_even_value = 0;\n        long smallest_even_index\
    \ = 0;\n        long smallest_odd_value = 0;\n        long smallest_odd_index\
    \ = 0;\n        bool odd_found = false;\n        bool even_found = false;\n  \
    \      bool even_found2 = false;\n        bool even_found3 = false;\n        bool\
    \ even_found4 = false;\n        bool even_found5 = false;\n        bool even_found6\
    \ = false;\n        bool even_found7 = false;\n        bool even_found8 = false;\n\
    \        bool even_found9 = false;\n        bool even_found10 = false;\n     \
    \   bool even_found11 = false;\n        bool even_found12 = false;\n        bool\
    \ even_found13 = false;\n        bool even_found14 = false;\n        bool even_found15\
    \ = false;\n        bool even_found16 = false;\n        bool even_found17 = false;\n\
    \        bool even_found18 = false;\n        bool even_found19 = false;\n    \
    \    bool even_found20 = false;\n        bool even_found21 = false;\n        bool\
    \ even_found22 = false;\n        bool even_found23 = false;\n        bool even_found24\
    \ = false;\n        bool even_found25 = false;\n        bool even_found26 = false;\n\
    \        bool even_found27 = false;\n        bool even_found28 = false;\n    \
    \    bool even_found29 = false;\n        bool even_found30 = false;\n        bool\
    \ even_found31 = false;\n        bool even_found32 = false;\n        bool even_found33\
    \ = false;\n        bool even_found34 = false;\n        bool even_found35 = false;\n\
    \        bool even_found36 = false;\n        bool even_found37 = false;\n    \
    \    bool even_found38 = false;\n        bool even_found39 = false;\n        bool\
    \ even_found40 = false;\n        bool even_found41 = false;\n        bool even_found42\
    \ = false;\n        bool even_found43 = false;\n        bool even_found44 = false;\n\
    \        bool even_found45 = false;\n        bool even_found46 = false;\n    \
    \    bool even_found47 = false;\n        bool even_found48 = false;\n        bool\
    \ even_found49 = false;\n        bool even_found50 = false;\n        bool even_found51\
    \ = false;\n        bool even_found52 = false;\n        bool even_found53 = false;\n\
    \        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqsrsrmgb.cs(39,14): warning CS0219: The variable ''smallest_value'' is
    assigned but its value is never used

    /tmp/tmpqsrsrmgb.cs(40,14): warning CS0219: The variable ''smallest_index'' is
    assigned but its value is never used

    /tmp/tmpqsrsrmgb.cs(41,14): warning CS0219: The variable ''smallest_even_value''
    is assigned but its value is never used

    /tmp/tmpqsrsrmgb.cs(42,14): warning CS0219: The variable ''smallest_even_index''
    is assigned but its value is never used

    /tmp/tmpqsrsrmgb.cs(43,14): warning CS0219: The variable ''smallest_odd_value''
    is assigned but its value is never used

    /tmp/tmpqsrsrmgb.cs(44,14): warning CS0219: The variable ''smallest_odd_index''
    is assigned but its value is never used

    /tmp/tmpqsrsrmgb.cs(45,14): warning CS0219: The variable ''odd_found'' is assigned
    but its value is never used

    /tmp/tmpqsrsrmgb.cs(46,14): warning CS0219: The variable ''even_found'' is assigned
    but its value is never used

    /tmp/tmpqsrsrmgb.cs(47,14): warning CS0219: The variable ''even_found2'' is assigned
    but its value is never used

    /tmp/tmpqsrsrmgb.cs(48,14): warning CS0219: The variable ''even_found3'' is assigned
    but its value is never used

    /tmp/tmpqsrsrmgb.cs(49,14): warning CS0219: The variable ''even_found4'' is assigned
    but its value is never used

    /tmp/tmpqsrsrmgb.cs(50,14): warning CS0219: The variable ''even_found5'' is assigned
    but its value is never used

    /tmp/tmpqsrsrmgb.cs(51,14): warning CS0219: The variable ''even_found6'' is assigned
    but its value is never used

    /tmp/tmpqsrsrmgb.cs(52,14): warning CS0219: The variable ''even_found7'' is assigned
    but its value is never used

    /tmp/tmpqsrsrmgb.cs(53,14): warning CS0219: The variable ''even_found8'' is assigned
    but its value is never used

    /tmp/tmpqsrsrmgb.cs(54,14): warning CS0219: The variable ''even_found9'' is assigned
    but its value is never used

    /tmp/tmpqsrsrmgb.cs(55,14): warning CS0219: The variable ''even_found10'' is assigned
    but its value is never used

    '
  timestamp: 1659823968
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        if (arr.Count > 0) {\n            long smallest_value\
    \ = arr.Min();\n            long smallest_index = 0;\n            bool found =\
    \ false;\n            for (int i = 0; i < arr.Count; i++) {\n                if\
    \ (arr[i] == smallest_value) {\n                    found = true;\n          \
    \          smallest_index = i;\n                }\n            }\n           \
    \ if (found) {\n                result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad934062c0b8428bb5982695271a6390>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad934062c0b8428bb5982695271a6390>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        int smallest_index\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ < smallest_value) {\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2638c14406b54004bfb771dc10852548>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2638c14406b54004bfb771dc10852548>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <2638c14406b54004bfb771dc10852548>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        bool isSmallestEvenValue = true;\n        foreach\
    \ (long node in arr) {\n            if (node % 2 == 0) {\n                if (smallestEvenValue\
    \ % 2 == 0) {\n                    isSmallestEvenValue = true;\n             \
    \       smallestEvenValue = node;\n                    smallestIndex = arr.IndexOf(node);\n\
    \                } else {\n                    isSmallestEvenValue = false;\n\
    \                }\n            }\n        }\n        if (isSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b207fd9858e54b3cbf7602c5ac517575>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b207fd9858e54b3cbf7602c5ac517575>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <b207fd9858e54b3cbf7602c5ac517575>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min(x => x % 2 ==\
    \ 0 ? x : 0);\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        List<long> even_values = new List<long>();\n        foreach (long\
    \ value in arr) {\n            if (value % 2 == 0) {\n                even_values.Add(value);\n\
    \            }\n        }\n        if (even_values.Count > 0) {\n            smallest_even_value\
    \ = even_values.Min(x => x);\n            smallest_even_index = even_values.IndexOf(smallest_even_value);\n\
    \        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7b92537259048a8bf87138b1d1cc629>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b7b92537259048a8bf87138b1d1cc629>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ selector) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck\
    \ (System.Collections.Generic.List`1[T] arr) [0x00007] in <b7"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ int smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        for (int i = smallest_even_index + 1; i < arr.Count; i++) {\n       \
    \     if (arr[i] % 2 == 0) {\n                smallest_value = arr[i];\n     \
    \           smallest_index = i;\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59f7ed7d668348b297d6689d768ee302>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59f7ed7d668348b297d6689d768ee302>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <59f7ed7d668348b297d6689d768ee302>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        long smallest_value\
    \ = smallest_even_value;\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smallest_value == smallest_even_value)\
    \ {\n                    smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                    found = true;\n                }\n               \
    \ else if (smallest_value < arr[i]) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (found) {\n            result.Add(smallest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff35bcc6da1d496489f50b4a4e87a3b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff35bcc6da1d496489f50b4a4e87a3b3>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ff35bcc6da1d496489f50b4a4e87a3b3>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEven = arr.Min(x => x % 2 == 0 ? x\
    \ : 0);\n        int smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < smallestEven) {\n      \
    \          smallestEven = arr[i];\n                smallestIndex = i;\n      \
    \      }\n        }\n        result.Add(smallestEven);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ad6008a6bea4ab5a1d29aae47c30606>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ad6008a6bea4ab5a1d29aae47c30606>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ selector) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck\
    \ (System.Collections.Generic.List`1[T] arr) [0x00007] in <4a"
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min(x => x % 2 ==\
    \ 0 ? x : 0);\n        long smallestIndex = arr.FindIndex(x => x % 2 == 0 ? x\
    \ : 0);\n        if (smallestEvenValue == 0) {\n            return result;\n \
    \       }\n        if (smallestIndex == 0) {\n            result.Add(smallestEvenValue);\n\
    \            return result;\n        }\n        long smallestEvenValueIndex =\
    \ arr.FindIndex(x => x % 2 == 0 ? x : 0);\n        if (smallestEvenValueIndex\
    \ == 0) {\n            result.Add(smallestEvenValue);\n            return result;\n\
    \        }\n        long smallestEvenValueIndex2 = arr.FindIndex(x => x % 2 ==\
    \ 0 ? x : 0);\n        if (smallestEvenValueIndex2 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            return result;\n        }\n        long smallestEvenValueIndex3 =\
    \ arr.FindIndex(x => x % 2 == 0 ? x : 0);\n        if (smallestEvenValueIndex3\
    \ == 0) {\n            result.Add(smallestEvenValue);\n            return result;\n\
    \        }\n        long smallestEvenValueIndex4 = arr.FindIndex(x => x % 2 ==\
    \ 0 ? x : 0);\n        if (smallestEvenValueIndex4 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            return result;\n        }\n        long smallestEvenValueIndex5 =\
    \ arr.FindIndex(x => x % 2 == 0 ? x : 0);\n        if (smallestEvenValueIndex5\
    \ == 0) {\n            result.Add(smallestEvenValue);\n            return result;\n\
    \        }\n        long smallestEvenValueIndex6 = arr.FindIndex(x => x % 2 ==\
    \ 0 ? x : 0);\n        if (smallestEvenValueIndex6 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            return result;\n        }\n        long smallestEvenValueIndex7 =\
    \ arr.FindIndex(x => x % 2 == 0 ? x : 0);\n        if (smallestEvenValueIndex7\
    \ == 0) {\n            result.Add(smallestEvenValue);\n            return result;\n\
    \        }\n        long smallestEvenValueIndex8 = arr.FindIndex(x => x % 2 ==\
    \ 0 ? x : 0);\n        if (smallestEvenValueIndex8 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            return result;\n        }\n        long smallestEvenValueIndex9 =\
    \ arr.FindIndex(x => x % 2 == 0 ? x : 0);\n        if (smallestEvenValueIndex9\
    \ == 0) {\n            result.Add(smallestEvenValue);\n            return result;\n\
    \        }\n        long smallestEvenValueIndex10 = arr.FindIndex(x => x % 2 ==\
    \ 0 ? x : 0);\n        if (smallestEvenValueIndex10 == 0) {\n            result.Add(smallestEvenValue);\n\
    \            return result;\n        }\n        long smallestEvenValueIndex11\
    \ = arr.FindIndex(x => x % 2 == 0 ? x : 0);\n        if (smallestEvenValueIndex11\
    \ == 0) {\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8ae2rvdy.cs(98,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp8ae2rvdy.cs(109,2): error CS1513: } expected

    '
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (smallestEvenValue < arr[i]) {\n\
    \                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa52cf14572d4ff79c799a8814f18cd0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa52cf14572d4ff79c799a8814f18cd0>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <aa52cf14572d4ff79c799a8814f18cd0>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823968
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var item in arr) {\n   \
    \         if (item % 2 == 0) {\n                smallest_even_value = item;\n\
    \                smallest_index = arr.IndexOf(item);\n                found =\
    \ true;\n                break;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a026839ac44e45d48645f1c2a0fe421d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a026839ac44e45d48645f1c2a0fe421d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        long smallest_value\
    \ = smallest_even_value;\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        foreach (var item in arr) {\n          \
    \  if (item % 2 == 0) {\n                if (smallest_value == smallest_even_value)\
    \ {\n                    smallest_value = item;\n                    smallest_index\
    \ = arr.IndexOf(item);\n                    found = true;\n                }\n\
    \                else if (smallest_value < item) {\n                    smallest_value\
    \ = item;\n                    smallest_index = arr.IndexOf(item);\n         \
    \           found = true;\n                }\n            }\n        }\n     \
    \   if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b58f5ca2714e40898635224d3adf9243>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b58f5ca2714e40898635224d3adf9243>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <b58f5ca2714e40898635224d3adf9243>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823968
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        foreach (var item in arr) {\n            if (item % 2 == 0) {\n\
    \                if (smallest_value == 0) {\n                    smallest_value\
    \ = item;\n                    smallest_index = arr.IndexOf(item);\n         \
    \       } else {\n                    if (smallest_value < item) {\n         \
    \               smallest_value = item;\n                        smallest_index\
    \ = arr.IndexOf(item);\n                    }\n                }\n           \
    \ }\n        }\n        if (smallest_value != 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7afb74bf51b44bf68b89e2080683e9cb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7afb74bf51b44bf68b89e2080683e9cb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min(x => x % 2 ==\
    \ 0);\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == arr.Count - 1) {\n            return result;\n\
    \        }\n        long smallest_value = arr[smallest_even_index];\n        long\
    \ smallest_index = smallest_even_index;\n        while (smallest_value % 2 ==\
    \ 0) {\n            smallest_value /= 2;\n            smallest_index++;\n    \
    \    }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptcafwxvz.cs(36,36): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    /tmp/tmptcafwxvz.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823968
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           smallest_even_value = item;\n                smallest_index = arr.IndexOf(item);\n\
    \            }\n        }\n        if (smallest_even_value == 0) {\n         \
    \   return result;\n        }\n        List<long> result_list = new List<long>();\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           if (item < smallest_even_value) {\n                    result_list.Add(item);\n\
    \                }\n            }\n        }\n        if (result_list.Count >\
    \ 0) {\n            result_list.Sort();\n            result.Add(result_list[0]);\n\
    \            result.Add(result_list[1]);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fd0d38ac30d44d24901a16cb0b851444>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fd0d38ac30d44d24901a16cb0b851444>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823968
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        bool has_even_value = false;\n        foreach (long\
    \ value in arr) {\n            if (value % 2 == 0) {\n                has_even_value\
    \ = true;\n            }\n            if (value < smallest_value) {\n        \
    \        smallest_value = value;\n                smallest_index = arr.IndexOf(value);\n\
    \            }\n        }\n        if (has_even_value) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            result.Add(smallest_value);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f68f69513cbe4cb1b8432fe252b27927>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f68f69513cbe4cb1b8432fe252b27927>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f68f69513cbe4cb1b8432fe252b27927>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823968
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long node in arr) {\n  \
    \          if (node % 2 == 0) {\n                found = true;\n             \
    \   if (smallest_value == 0) {\n                    smallest_value = node;\n \
    \                   smallest_index = arr.IndexOf(node);\n                } else\
    \ {\n                    if (node < smallest_value) {\n                      \
    \  smallest_value = node;\n                        smallest_index = arr.IndexOf(node);\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be06bcb865524c3ebe73d3c2fc8c4c3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be06bcb865524c3ebe73d3c2fc8c4c3c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = -1;\n        bool found = false;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n          \
    \      smallest_value = arr[i];\n                smallest_index = i;\n       \
    \         found = true;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef8532fa9f1646c891cf202706f11b22>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef8532fa9f1646c891cf202706f11b22>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ef8532fa9f1646c891cf202706f11b22>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = -1;\n        bool found = false;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            long value = arr[i];\n            if (value\
    \ == smallest_value) {\n                found = true;\n                smallest_index\
    \ = i;\n            }\n            if (found && value < smallest_value) {\n  \
    \              smallest_value = value;\n                smallest_index = i;\n\
    \            }\n        }\n        if (smallest_index != -1) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c74d283719434ae1a4f027f2f73fc8ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c74d283719434ae1a4f027f2f73fc8ca>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <c74d283719434ae1a4f027f2f73fc8ca>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        long smallest_value\
    \ = smallest_even_value;\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n                found = true;\n        \
    \    }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            result.Add(smallest_value);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a3bd42a5585422ea15584cb250ac507>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a3bd42a5585422ea15584cb250ac507>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <2a3bd42a5585422ea15584cb250ac507>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823969
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        foreach (long node in arr) {\n            if (node % 2 == 0) {\n\
    \                if (smallest_value < node) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       }\n            }\n        }\n        result.Add(smallest_value);\n   \
    \     result.Add(smallest_index);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <310f61c9672f4bb3a577d30ce985727b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <310f61c9672f4bb3a577d30ce985727b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823969
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        foreach (long node in arr) {\n            if (node % 2 == 0) {\n\
    \                if (smallest_value == 0) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       } else if (smallest_value < node) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       }\n            }\n        }\n        if (smallest_value == 0) {\n    \
    \        return new List<long>();\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3aac97475ce443c79f0ad646ff4a343e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3aac97475ce443c79f0ad646ff4a343e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        bool isSmallestEvenValueFound = false;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallestEvenValue)\
    \ {\n                isSmallestEvenValueFound = true;\n                smallestIndex\
    \ = i;\n            }\n        }\n        if (isSmallestEvenValueFound) {\n  \
    \          result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a60a1d34f82641278d6d7463389d5ac6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a60a1d34f82641278d6d7463389d5ac6>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <a60a1d34f82641278d6d7463389d5ac6>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        bool has_even = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                has_even\
    \ = true;\n            }\n            if (arr[i] == smallest_value) {\n      \
    \          smallest_index = i;\n            }\n        }\n        if (has_even)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        } else {\n            if (smallest_index == 0) {\n                result.Add(smallest_value);\n\
    \            } else {\n                result.Add(smallest_index);\n         \
    \   }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58a043c6c56844b3a7dbfb7cd0b93dc8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <58a043c6c56844b3a7dbfb7cd0b93dc8>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <58a043c6c56844b3a7dbfb7cd0b93dc8>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        long smalest_value\
    \ = arr.Min();\n        List<long> result = new List<long>();\n        long smalest_index\
    \ = 0;\n        foreach (var item in arr) {\n            if (item % 2 == 0) {\n\
    \                if (item < smalest_value) {\n                    smalest_value\
    \ = item;\n                    smalest_index = arr.IndexOf(item);\n          \
    \      }\n            }\n        }\n        if (smalest_index > 0) {\n       \
    \     result.Add(smalest_value);\n            result.Add(smalest_index);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <085ee5729e254857b2a27cec46e92496>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <085ee5729e254857b2a27cec46e92496>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <085ee5729e254857b2a27cec46e92496>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823969
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long smallest_value = arr.Min();\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long value = arr[i];\n            if (value % 2 == 0) {\n   \
    \             if (smallest_value < value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                    found\
    \ = true;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <932daa749ac54d99a1100d8c40358a65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <932daa749ac54d99a1100d8c40358a65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min(x => x % 2 ==\
    \ 0);\n        long smallest_index = arr.FindIndex(x => x % 2 == 0);\n       \
    \ if (smallest_even_value == 0) return result;\n        if (smallest_index ==\
    \ -1) return result;\n        bool found = false;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i]\
    \ < smallest_even_value) {\n                    smallest_even_value = arr[i];\n\
    \                    smallest_index = i;\n                    found = true;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp19bwnr_j.cs(36,36): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    '
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (!found) {\n   \
    \         return result;\n        }\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] != smallest_value) {\n                continue;\n\
    \            }\n            long value = arr[i];\n            if (value % 2 ==\
    \ 0) {\n                smallest_value = value;\n                smallest_index\
    \ = i;\n            }\n        }\n        result.Add(smallest_value);\n      \
    \  result.Add(smallest_index);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp42abfq4n.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == arr.Count - 1) {\n            result.Add(smallest_even_value);\n        \
    \    return result;\n        }\n        long smallest_value = arr[smallest_even_index\
    \ + 1];\n        long smallest_index = smallest_even_index + 1;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (value < smallest_value) {\n                    smallest_value = value;\n  \
    \                  smallest_index = arr.IndexOf(value);\n                }\n \
    \           }\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgcmpe3xi.cs(42,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smalest_value = arr.Min();\n        int smalest_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smalest_value < arr[i]) {\n               \
    \     smalest_value = arr[i];\n                    smalest_index = i;\n      \
    \          }\n            }\n        }\n        if (smalest_index != 0) {\n  \
    \          result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <539623e0f17447dba3f177751a094c98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <539623e0f17447dba3f177751a094c98>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <539623e0f17447dba3f177751a094c98>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min(x => x % 2 ==\
    \ 0);\n        int smallest_even_index = arr.IndexOf(smallest_even_value);\n \
    \       if (smallest_even_index == -1) {\n            return result;\n       \
    \ }\n        long smallest_value = arr[smallest_even_index];\n        int smallest_index\
    \ = smallest_even_index;\n        for (int i = smallest_even_index + 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n            }\n        }\n   \
    \     result.Add(smallest_value);\n        result.Add(smallest_index);\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqt6n4szt.cs(36,36): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    '
  timestamp: 1659823969
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        int smallest_index\
    \ = 0;\n        foreach (long node in arr) {\n            if (node % 2 == 0) {\n\
    \                smallest_even_value = node;\n                smallest_index =\
    \ arr.IndexOf(node);\n            }\n        }\n        if (smallest_even_value\
    \ != 0) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a14ec00a5bc461fa2d93d6a17013dad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a14ec00a5bc461fa2d93d6a17013dad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        long smallest_value\
    \ = smallest_even_value;\n        long smallest_index = smallest_even_index;\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              if (smallest_value == smallest_even_value) {\n                \
    \    smallest_value = value;\n                    smallest_index = arr.IndexOf(value);\n\
    \                }\n                else {\n                    if (smallest_value\
    \ < smallest_even_value) {\n                        smallest_value = value;\n\
    \                        smallest_index = arr.IndexOf(value);\n              \
    \      }\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c73fd3209eeb44a195dbe975367570d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c73fd3209eeb44a195dbe975367570d8>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <c73fd3209eeb44a195dbe975367570d8>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = arr.IndexOf(smallest_value);\n        long smallest_even_value\
    \ = smallest_value % 2 == 0 ? smallest_value : smallest_value - 1;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] == smallest_even_value) {\n                found = true;\n         \
    \       break;\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            result.Add(smallest_value);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a95eacae0054d399061c00949eab611>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a95eacae0054d399061c00949eab611>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <5a95eacae0054d399061c00949eab611>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_value = 0;\n        bool found = false;\n      \
    \  foreach (var node in arr) {\n            if (node.Value % 2 == 0) {\n     \
    \           smallest_even_value = node.Value;\n                smallest_index\
    \ = arr.IndexOf(node);\n                smallest_value = node.Value;\n       \
    \         found = true;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpba23ibwt.cs(41,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpba23ibwt.cs(42,44): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpba23ibwt.cs(44,39): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min(x => x % 2 ==\
    \ 0);\n        int smallest_even_index = arr.IndexOf(smallest_even_value);\n \
    \       if (smallest_even_index > 0) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9w0n5c2e.cs(36,36): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    '
  timestamp: 1659823969
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        bool has_even_values = false;\n        foreach (long node in arr)\
    \ {\n            if (node % 2 == 0) {\n                has_even_values = true;\n\
    \                smallest_even_value = node;\n                smallest_index =\
    \ arr.IndexOf(node);\n            }\n        }\n        if (has_even_values) {\n\
    \            int smallest_even_value_index = arr.IndexOf(smallest_even_value);\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_even_value_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <138b5cec39b34473a7b51e514167bc29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <138b5cec39b34473a7b51e514167bc29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min(x => x % 2 ==\
    \ 0);\n        long smallest_even_index = arr.FindIndex(x => x % 2 == 0);\n  \
    \      if (smallest_even_value == 0) {\n            return result;\n        }\n\
    \        long smallest_value = arr.Min(x => x);\n        long smallest_index =\
    \ arr.FindIndex(x => x == smallest_value);\n        if (smallest_value == 0) {\n\
    \            return result;\n        }\n        if (smallest_index == -1) {\n\
    \            return result;\n        }\n        if (smallest_even_value == 1)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        long smallest_even_value_plus_one\
    \ = smallest_even_value + 1;\n        long smallest_even_index_plus_one = smallest_even_index\
    \ + 1;\n        List<long> even_values = new List<long>();\n        List<long>\
    \ even_indexes = new List<long>();\n        foreach (long value in arr) {\n  \
    \          if (value % 2 == 0) {\n                even_values.Add(value);\n  \
    \              even_indexes.Add(arr.FindIndex(x => x == value));\n           \
    \ }\n        }\n        if (even_values.Count == 1) {\n            result.Add(even_values[0]);\n\
    \            result.Add(even_indexes[0]);\n            return result;\n      \
    \  }\n        List<long> even_values_plus_one = new List<long>();\n        List<long>\
    \ even_indexes_plus_one = new List<long>();\n        foreach (long value in even_values)\
    \ {\n            even_values_plus_one.Add(value + 1);\n            even_indexes_plus_one.Add(even_indexes[even_values.FindIndex(x\
    \ => x == value)] + 1);\n        }\n        if (even_values_plus_one.Count ==\
    \ 1) {\n            result.Add(even_values_plus_one[0]);\n            result.Add(even_indexes_plus_one[0]);\n\
    \            return result;\n        }\n        List<long> even_values_plus_one_plus_one\
    \ = new List<long>();\n        List<long> even_indexes_plus_one_plus_one = new\
    \ List<long>();\n        foreach (long value in even_values_plus_one) {\n    \
    \        even_values_plus_one_plus_one.Add(value + 1);\n            even_indexes_plus_one_plus_one.Add(even_indexes_plus_one[even_values_plus_one.FindIndex(x\
    \ => x == value)] + 1);\n        }\n        if (even_values_plus_one_plus_one.Count\
    \ == 1) {\n            result.Add(even_values_plus_one_plus_one[0]);\n       \
    \     result.Add(even_indexes_plus_one_plus_one[0]);\n            return result;\n\
    \        }\n        List<long> even_values_plus_one_plus_one_plus_one = new List<long>();\n\
    \        List<long> even_indexes_plus_one_plus_one_plus_\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj0wxjdpd.cs(92,56): error CS1002: ; expected

    '
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smalest_value = arr.Min();\n        long smalest_index\
    \ = 0;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                found = true;\n     \
    \           smalest_value = arr[i];\n                smalest_index = i;\n    \
    \        }\n        }\n        if (found) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ef521ba509b4ed1a5e68927c76625af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ef521ba509b4ed1a5e68927c76625af>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <5ef521ba509b4ed1a5e68927c76625af>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823969
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        int smallest_index\
    \ = 0;\n        foreach (long node in arr) {\n            if (node % 2 == 0) {\n\
    \                if (smallest_even_value < node) {\n                    smallest_even_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       }\n            }\n        }\n        if (smallest_even_value == 0) {\n\
    \            return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27ff686cb41d46759f6b2ef5ebef8d30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27ff686cb41d46759f6b2ef5ebef8d30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (!found) {\n   \
    \         return result;\n        }\n        long smallest_index = smallest_even_index;\n\
    \        for (int i = smallest_even_index + 1; i < arr.Count; i++) {\n       \
    \     if (arr[i] % 2 == 0) {\n                smallest_value = arr[i];\n     \
    \           smallest_index = i;\n                found = true;\n             \
    \   break;\n            }\n        }\n        if (!found) {\n            return\
    \ result;\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprx01g7cp.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmprx01g7cp.cs(53,14): error CS0128: A local variable or function named ''smallest_index''
    is already defined in this scope

    /tmp/tmprx01g7cp.cs(54,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823969
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        long smallest_value\
    \ = smallest_even_value;\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            long value = arr[i];\n            if (value % 2 == 0) {\n       \
    \         if (smallest_value == smallest_even_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                    found\
    \ = true;\n                }\n                else {\n                    if (smallest_value\
    \ < value) {\n                        smallest_value = value;\n              \
    \          smallest_index = i;\n                        found = true;\n      \
    \              }\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2265babde73c4dad917ff1a20c6fe1bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2265babde73c4dad917ff1a20c6fe1bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        int\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (arr[i] < smallestEvenValue) {\n\
    \                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfe9dfa3ef4f41b8b28f08677f0c3172>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfe9dfa3ef4f41b8b28f08677f0c3172>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <bfe9dfa3ef4f41b8b28f08677f0c3172>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var node in arr) {\n            if (smallest_value == 0) {\n\
    \                smallest_value = node;\n                smallest_index = arr.IndexOf(node);\n\
    \            } else if (smallest_value == node) {\n                smallest_index\
    \ = arr.IndexOf(node);\n            } else if (smallest_value % 2 == 0) {\n  \
    \              smallest_value = node;\n                smallest_index = arr.IndexOf(node);\n\
    \            }\n        }\n        if (smallest_value == 0) {\n            return\
    \ new List<long>();\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb491838c5f84b05bb05d52f2838d39b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb491838c5f84b05bb05d52f2838d39b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        int\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0 && arr[i] < smallestEvenValue) {\n                smallestEvenValue\
    \ = arr[i];\n                smallestIndex = i;\n            }\n        }\n  \
    \      result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8090767b2c7141da9adec00e04c5b0cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8090767b2c7141da9adec00e04c5b0cd>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <8090767b2c7141da9adec00e04c5b0cd>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        bool found = false;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n          \
    \      smallest_value = arr[i];\n                smallest_index = i;\n       \
    \         found = true;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ece32ea7ca84f849f6e18e6dfd24d1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ece32ea7ca84f849f6e18e6dfd24d1d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <4ece32ea7ca84f849f6e18e6dfd24d1d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        int smallest_even_index\
    \ = 0;\n        bool found = false;\n        foreach (long node in arr) {\n  \
    \          if (node % 2 == 0) {\n                smallest_even_value = node;\n\
    \                smallest_even_index = arr.IndexOf(node);\n                found\
    \ = true;\n                break;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dce9113809f3401cabc896bceef58b12>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dce9113809f3401cabc896bceef58b12>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_even_value = 0;\n        long smallest_even_index\
    \ = 0;\n        foreach (var item in arr) {\n            if (item % 2 == 0) {\n\
    \                smallest_even_value = item;\n                smallest_even_index\
    \ = arr.IndexOf(item);\n            }\n            if (item < smallest_value)\
    \ {\n                smallest_value = item;\n                smallest_index =\
    \ arr.IndexOf(item);\n            }\n        }\n        if (smallest_even_index\
    \ == arr.Count - 1) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        if (smallest_even_index > 0) {\n\
    \            smallest_value = arr[smallest_even_index];\n            smallest_index\
    \ = smallest_even_index;\n        }\n        smallest_value = arr[smallest_index];\n\
    \        smallest_index = smallest_index;\n        smallest_even_value = arr[smallest_even_index];\n\
    \        smallest_even_index = smallest_even_index;\n        foreach (var item\
    \ in arr.Skip(smallest_even_index + 1)) {\n            if (item % 2 == 0) {\n\
    \                smallest_even_value = item;\n                smallest_even_index\
    \ = arr.IndexOf(item);\n            }\n            if (item < smallest_value)\
    \ {\n                smallest_value = item;\n                smallest_index =\
    \ arr.IndexOf(item);\n            }\n        }\n        if (smallest_even_index\
    \ == arr.Count - 1) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        if (smallest_even_index > 0) {\n\
    \            smallest_value = arr[smallest_even_index];\n            smallest_index\
    \ = smallest_even_index;\n        }\n        smallest_value = arr[smallest_index];\n\
    \        smallest_index = smallest_index;\n        smallest_even_value = arr[smallest_even_index];\n\
    \        smallest_even_index = smallest_even_index;\n        foreach (var item\
    \ in arr.Skip(smallest_even_index + 1)) {\n            if (item % 2 == 0) {\n\
    \                smallest_even_value = item;\n                smallest_even_index\
    \ = arr.IndexOf(item);\n            }\n            if (item < smallest_value)\
    \ {\n                smallest_value = item;\n                smallest_index =\
    \ arr.IndexOf(item);\n            }\n        }\n        if (smallest_even_index\
    \ == arr.Count - 1) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        if (smallest_even_index > 0) {\n\
    \            smallest_value = arr[smallest_even_index];\n            smallest_index\
    \ = smallest_even_index;\n        }\n        smallest_value = arr[smallest_index];\n\
    \        smallest_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwt8_24vx.cs(106,18): error CS1002: ; expected

    '
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        int smallest_index\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ < smallest_value) {\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2638c14406b54004bfb771dc10852548>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2638c14406b54004bfb771dc10852548>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <2638c14406b54004bfb771dc10852548>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823968
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = arr.IndexOf(smallest_value);\n        bool found = false;\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              found = true;\n                result.Add(value);\n           \
    \     if (smallest_value == value) {\n                    smallest_index = arr.IndexOf(value);\n\
    \                }\n            }\n        }\n        if (!found || arr.Count\
    \ == 0) {\n            return result;\n        }\n        List<long> evens = new\
    \ List<long>();\n        foreach (long value in arr) {\n            if (value\
    \ % 2 == 0) {\n                evens.Add(value);\n            }\n        }\n \
    \       List<long> evens_pluck_result = Pluck(evens);\n        if (evens_pluck_result.Count\
    \ > 0) {\n            evens_pluck_result.Insert(0, smallest_value);\n        \
    \    evens_pluck_result.Insert(0, smallest_index);\n            return evens_pluck_result;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659823975
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        bool found = false;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            long value = arr[i];\n            if (value\
    \ == smallest_value) {\n                found = true;\n                result.Add(value);\n\
    \                result.Add(i);\n            }\n            if (value == smallest_value\
    \ && found == true) {\n                smallest_index = i;\n            }\n  \
    \      }\n        if (smallest_index == 0) {\n            return result;\n   \
    \     }\n        List<long> temp = new List<long>();\n        for (int i = 0;\
    \ i < smallest_index; i++) {\n            temp.Add(arr[i]);\n        }\n     \
    \   temp.Add(smallest_value);\n        temp.Add(smallest_index);\n        return\
    \ temp;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <16524031052947dbbad8f95b41b4af5d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <16524031052947dbbad8f95b41b4af5d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <16524031052947dbbad8f95b41b4af5d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        for (int i = 0; i < arr.Count; i++) {\n                if (arr[i] ==\
    \ smallest_value) {\n                    result.Add(smallest_value);\n       \
    \             result.Add(smallest_index);\n                    break;\n      \
    \          }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgb6956js.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var node in arr) {\n   \
    \         if (found == true) {\n                if (smallest_even_value < node.Value)\
    \ {\n                    smallest_even_value = node.Value;\n                 \
    \   smallest_index = node.Index;\n                }\n            }\n         \
    \   if (node.Value % 2 == 0) {\n                found = true;\n              \
    \  if (smallest_even_value < node.Value) {\n                    smallest_even_value\
    \ = node.Value;\n                    smallest_index = node.Index;\n          \
    \      }\n            }\n        }\n        if (smallest_even_value == 0) {\n\
    \            return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqk3w_x2x.cs(41,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpqk3w_x2x.cs(42,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpqk3w_x2x.cs(43,43): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpqk3w_x2x.cs(46,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpqk3w_x2x.cs(48,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpqk3w_x2x.cs(49,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpqk3w_x2x.cs(50,43): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        bool found = false;\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                if (smallest_value\
    \ < value) {\n                    smallest_value = value;\n                  \
    \  smallest_index = arr.IndexOf(value);\n                    found = true;\n \
    \               }\n            }\n        }\n        if (found) {\n          \
    \  result.Add(smallest_value);\n            result.Add(smallest_index);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4db7e7c024d042e6ad7baa4f6e59b1af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4db7e7c024d042e6ad7baa4f6e59b1af>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <4db7e7c024d042e6ad7baa4f6e59b1af>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        foreach (var item in arr) {\n            if (item % 2 == 0) {\n\
    \                if (smallest_even_value < item) {\n                    smallest_even_value\
    \ = item;\n                    smallest_index = arr.IndexOf(item);\n         \
    \       }\n            }\n        }\n        if (smallest_even_value == 0) {\n\
    \            return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <548a5f3855ff4fc48bf01d1abc994ad6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <548a5f3855ff4fc48bf01d1abc994ad6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n        bool\
    \ foundSmallestIndex = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue ==\
    \ arr[i]) {\n                    foundSmallestEvenValue = true;\n            \
    \        smallestIndex = i;\n                }\n            }\n        }\n   \
    \     if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8802fe0f5a409f9b638014f458d053>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe8802fe0f5a409f9b638014f458d053>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <fe8802fe0f5a409f9b638014f458d053>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        foreach (var node in arr) {\n            if (smallest_value ==\
    \ 0) {\n                smallest_value = node;\n                smallest_index\
    \ = arr.IndexOf(node);\n            } else if (smallest_value == node) {\n   \
    \             smallest_index++;\n            } else if (smallest_value < node)\
    \ {\n                smallest_value = node;\n                smallest_index =\
    \ arr.IndexOf(node);\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <068210c799b943478c5342b967a33149>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <068210c799b943478c5342b967a33149>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0)\n            return new List<long>();\n        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] < smallest_value) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n                found = true;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f621f76d5deb4714966666315f9210d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f621f76d5deb4714966666315f9210d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == arr.Count - 1) {\n            result.Add(smallest_even_value);\n        \
    \    return result;\n        }\n        long smallest_odd_value = arr[smallest_even_index\
    \ + 1];\n        long smallest_odd_index = arr.IndexOf(smallest_odd_value);\n\
    \        if (smallest_odd_index == arr.Count - 1) {\n            result.Add(smallest_odd_value);\n\
    \            return result;\n        }\n        long smallest_odd_value_2 = arr[smallest_odd_index\
    \ + 1];\n        long smallest_odd_index_2 = arr.IndexOf(smallest_odd_value_2);\n\
    \        if (smallest_odd_index_2 == arr.Count - 1) {\n            result.Add(smallest_odd_value_2);\n\
    \            return result;\n        }\n        long smallest_odd_value_3 = arr[smallest_odd_index_2\
    \ + 1];\n        long smallest_odd_index_3 = arr.IndexOf(smallest_odd_value_3);\n\
    \        if (smallest_odd_index_3 == arr.Count - 1) {\n            result.Add(smallest_odd_value_3);\n\
    \            return result;\n        }\n        long smallest_odd_value_4 = arr[smallest_odd_index_3\
    \ + 1];\n        long smallest_odd_index_4 = arr.IndexOf(smallest_odd_value_4);\n\
    \        if (smallest_odd_index_4 == arr.Count - 1) {\n            result.Add(smallest_odd_value_4);\n\
    \            return result;\n        }\n        long smallest_odd_value_5 = arr[smallest_odd_index_4\
    \ + 1];\n        long smallest_odd_index_5 = arr.IndexOf(smallest_odd_value_5);\n\
    \        if (smallest_odd_index_5 == arr.Count - 1) {\n            result.Add(smallest_odd_value_5);\n\
    \            return result;\n        }\n        long smallest_odd_value_6 = arr[smallest_odd_index_5\
    \ + 1];\n        long smallest_odd_index_6 = arr.IndexOf(smallest_odd_value_6);\n\
    \        if (smallest_odd_index_6 == arr.Count - 1) {\n            result.Add(smallest_odd_value_6);\n\
    \            return result;\n        }\n        long smallest_odd_value_7 = arr[smallest_odd_index_6\
    \ + 1];\n        long smallest_odd_index_7 = arr.IndexOf(smallest_odd_value_7);\n\
    \        if (smallest_odd_index_7 == arr.Count - 1) {\n            result.Add(smallest_odd_value_7);\n\
    \            return result;\n        }\n        long smallest_odd_value_8 = arr[smallest_odd_index_7\
    \ + 1];\n        long smallest_od\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw_sps432.cs(85,25): error CS1002: ; expected

    '
  timestamp: 1659823969
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ != -1) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        if (arr.Count > 0) {\n            foreach (var item in arr.Skip(smallest_even_index))\
    \ {\n                if (item % 2 == 0) {\n                    result.Add(item);\n\
    \                    result.Add(arr.IndexOf(item));\n                }\n     \
    \       }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgj5qjjrt.cs(43,43): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (smallestEvenValue % 2 == 0) {\n\
    \                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3d53dc728804319b8de4c79f04a51ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3d53dc728804319b8de4c79f04a51ac>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <c3d53dc728804319b8de4c79f04a51ac>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long minValue = arr.Min();\n        long minIndex = 0;\n \
    \       long minEvenValue = minValue / 2;\n        long minEvenIndex = 0;\n  \
    \      bool isEven = true;\n        for (int i = 0; i < arr.Count; i++) {\n  \
    \          long value = arr[i];\n            if (isEven) {\n                if\
    \ (value == minEvenValue) {\n                    minEvenIndex = i;\n         \
    \       }\n                isEven = false;\n            } else {\n           \
    \     if (value == minEvenValue) {\n                    minEvenIndex = i;\n  \
    \              }\n                isEven = true;\n            }\n        }\n \
    \       result.Add(minValue);\n        result.Add(minIndex);\n        if (minEvenIndex\
    \ != 0) {\n            result.Add(minEvenValue);\n            result.Add(minEvenIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd47f86ed59541d59851de11ff2035c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd47f86ed59541d59851de11ff2035c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        bool found\
    \ = false;\n        foreach (long value in arr) {\n            if (value % 2 ==\
    \ 0) {\n                if (smallest_even_value == value) {\n                \
    \    found = true;\n                    break;\n                }\n          \
    \      if (smallest_even_index < arr.IndexOf(value)) {\n                    smallest_even_value\
    \ = value;\n                    smallest_even_index = arr.IndexOf(value);\n  \
    \              }\n            }\n        }\n        if (found) {\n           \
    \ result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff7816a73ada4d7eb3ae6db01885ae8c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff7816a73ada4d7eb3ae6db01885ae8c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ff7816a73ada4d7eb3ae6db01885ae8c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] != smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        for (int i = 0; i < arr.Count; i++) {\n                if (arr[i] ==\
    \ smallest_value) {\n                    smallest_index = i;\n               \
    \     break;\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph2ev7s83.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min(x => x % 2 ==\
    \ 0 ? x : 0);\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenValue == 0) {\n            return result;\n        }\n\
    \        if (smallestIndex != -1) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197da3d7303c454daf566edd99997bdc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <197da3d7303c454daf566edd99997bdc>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ selector) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck\
    \ (System.Collections.Generic.List`1[T] arr) [0x00007] in <19"
  stdout: ''
  timestamp: 1659823970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0) return new List<long>();\n        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n\
    \        long smallest_even_value = smallest_value % 2 == 0 ? smallest_value :\
    \ smallest_value - 1;\n        bool found = false;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            long value = arr[i];\n            if (value\
    \ == smallest_even_value) {\n                found = true;\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                break;\n       \
    \     }\n            if (value == smallest_value) {\n                found = true;\n\
    \                result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \                break;\n            }\n            if (value < smallest_value)\
    \ {\n                found = true;\n                result.Add(value);\n     \
    \           result.Add(smallest_index);\n                break;\n            }\n\
    \        }\n        if (!found) return new List<long>();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bff8e3557a2c449383548e566174a34b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bff8e3557a2c449383548e566174a34b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        long smallest_value = smallest_even_value;\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                found = true;\n                if (smallest_value == smallest_even_value)\
    \ {\n                    smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if (found) {\n  \
    \          result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ea0b47539e543fb8c1b4bdf9b2ba3a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ea0b47539e543fb8c1b4bdf9b2ba3a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (smallestEvenValue % 2 == 0) {\n\
    \                    if (smallestEvenValue < arr[i]) {\n                     \
    \   smallestEvenValue = arr[i];\n                        smallestIndex = i;\n\
    \                    }\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93b58640c06949c2a8f21a606e751a2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93b58640c06949c2a8f21a606e751a2c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <93b58640c06949c2a8f21a606e751a2c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        long smallest_value\
    \ = smallest_even_value;\n        long smallest_index = smallest_even_index;\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              if (smallest_value == smallest_even_value) {\n                \
    \    if (smallest_index == arr.IndexOf(value)) {\n                        result.Add(smallest_value);\n\
    \                        result.Add(smallest_index);\n                       \
    \ break;\n                    }\n                    else {\n                \
    \        smallest_value = value;\n                        smallest_index = arr.IndexOf(value);\n\
    \                    }\n                }\n                else {\n          \
    \          smallest_even_value = value;\n                    smallest_even_index\
    \ = arr.IndexOf(value);\n                }\n            }\n        }\n       \
    \ if (result.Count == 0) {\n            return new List<long>();\n        }\n\
    \        else {\n            return result;\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a6c99ed5ab474d2e96fe5af3ac0d122b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a6c99ed5ab474d2e96fe5af3ac0d122b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <a6c99ed5ab474d2e96fe5af3ac0d122b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823971
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallest_even_value < arr[i]) {\n         \
    \           smallest_even_value = arr[i];\n                    smallest_even_index\
    \ = i;\n                    found = true;\n                }\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <483e74a541ac40438cb44d05933462f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <483e74a541ac40438cb44d05933462f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ != -1) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <796001c138dd411dae85492183caa31c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <796001c138dd411dae85492183caa31c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <796001c138dd411dae85492183caa31c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        while (smallest_value % 2 == 0) {\n                smallest_value /=\
    \ 2;\n                smallest_even_index++;\n            }\n            smallest_value\
    \ = arr[smallest_even_index];\n            smallest_index = smallest_even_index;\n\
    \        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxdpe_gqk.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxdpe_gqk.cs(55,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = arr.IndexOf(smallest_value);\n        long smallest_even_value\
    \ = smallest_value % 2 == 0 ? smallest_value : smallest_value - 1;\n        bool\
    \ found = false;\n        foreach (long value in arr) {\n            if (value\
    \ % 2 == 0) {\n                if (smallest_even_value == value) {\n         \
    \           found = true;\n                    break;\n                }\n   \
    \             else if (smallest_even_value < value) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \         }\n            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37de3ebbef1e41aa865ddf5fd5beb4ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37de3ebbef1e41aa865ddf5fd5beb4ea>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <37de3ebbef1e41aa865ddf5fd5beb4ea>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ int smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        List<long> even_values = new List<long>();\n\
    \        List<long> even_indexes = new List<long>();\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                even_values.Add(arr[i]);\n\
    \                even_indexes.Add(i);\n            }\n        }\n        even_values.Sort();\n\
    \        even_indexes.Sort();\n        bool found = false;\n        for (int i\
    \ = 0; i < even_values.Count; i++) {\n            if (even_values[i] == smallest_even_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            int index = even_indexes[even_values.Count\
    \ - 1];\n            result.Add(smallest_value);\n            result.Add(index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5xsd4ibi.cs(60,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = -1;\n        List<long> result =\
    \ new List<long>();\n        foreach (long node in arr) {\n            if (node\
    \ % 2 == 0) {\n                if (smallest_value == 0 || node < smallest_value)\
    \ {\n                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smallest_index == -1) {\n            return new List<long>();\n        }\n\
    \        result.Add(smallest_value);\n        result.Add(smallest_index);\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86d1e8a2167942c29a433acc286c8d32>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <86d1e8a2167942c29a433acc286c8d32>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <86d1e8a2167942c29a433acc286c8d32>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823971
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        int smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long node in arr) {\n  \
    \          if (node % 2 == 0) {\n                smallest_even_value = node;\n\
    \                smallest_index = arr.IndexOf(node);\n                found =\
    \ true;\n                break;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3a3b67bc11842a0878b930873f9dfdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3a3b67bc11842a0878b930873f9dfdf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        bool has_even_value = false;\n        foreach (var node in arr)\
    \ {\n            if (node.Value % 2 == 0) {\n                has_even_value =\
    \ true;\n            }\n            if (node.Value < smallest_value) {\n     \
    \           smallest_value = node.Value;\n                smallest_index = arr.IndexOf(node);\n\
    \            }\n        }\n        if (has_even_value) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbf8mnid2.cs(40,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpbf8mnid2.cs(43,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpbf8mnid2.cs(44,39): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659823970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long smallest_value = arr.Min();\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n                found = true;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aedefefa1e2c4d388926d8de755677aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aedefefa1e2c4d388926d8de755677aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smalest_value = 0;\n        long smalest_index\
    \ = 0;\n        long smalest_even_value = 0;\n        long smalest_even_index\
    \ = 0;\n        long smalest_even_index_in_array = 0;\n        long smalest_even_index_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array = 0;\n    \
    \    long smalest_even_index_in_array_in_array_in_array_in_array = 0;\n      \
    \  long smalest_even_index_in_array_in_array_in_array_in_array_in_array = 0;\n\
    \        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n        long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_js70pi2.cs(57,87): error CS1002: ; expected

    '
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        for (int i = 0; i < arr.Count; i++) {\n                if (arr[i] ==\
    \ smallest_value) {\n                    result.Add(smallest_value);\n       \
    \             result.Add(smallest_index);\n                    break;\n      \
    \          }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgb6956js.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823970
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long n in arr) {\n     \
    \       if (n % 2 == 0) {\n                smallest_even_value = n;\n        \
    \        smallest_index = arr.IndexOf(n);\n                found = true;\n   \
    \             break;\n            }\n        }\n        if (found) {\n       \
    \     result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        } else {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0d62d251c5d4139b64c17a0a6be12d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0d62d251c5d4139b64c17a0a6be12d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        bool isSmallestEvenValue = true;\n        bool isSmallestIndex\
    \ = true;\n        foreach (long value in arr) {\n            if (value % 2 ==\
    \ 0) {\n                if (smallestEvenValue < value) {\n                   \
    \ smallestEvenValue = value;\n                    smallestIndex = arr.IndexOf(value);\n\
    \                    isSmallestEvenValue = true;\n                    isSmallestIndex\
    \ = true;\n                } else if (smallestEvenValue == value) {\n        \
    \            isSmallestEvenValue = true;\n                    isSmallestIndex\
    \ = true;\n                } else if (smallestEvenValue > value) {\n         \
    \           isSmallestEvenValue = true;\n                    isSmallestIndex =\
    \ false;\n                }\n            } else {\n                if (smallestEvenValue\
    \ < value) {\n                    smallestEvenValue = value;\n               \
    \     smallestIndex = arr.IndexOf(value);\n                    isSmallestEvenValue\
    \ = false;\n                    isSmallestIndex = true;\n                } else\
    \ if (smallestEvenValue == value) {\n                    isSmallestEvenValue =\
    \ true;\n                    isSmallestIndex = true;\n                } else if\
    \ (smallestEvenValue > value) {\n                    isSmallestEvenValue = true;\n\
    \                    isSmallestIndex = false;\n                }\n           \
    \ }\n        }\n        if (isSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        } else {\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e90828ae8c845c59d631db440a00a70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e90828ae8c845c59d631db440a00a70>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <1e90828ae8c845c59d631db440a00a70>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] != smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        smallest_value = arr[smallest_even_index];\n            smallest_index\
    \ = smallest_even_index;\n        }\n        bool found2 = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallest_value)\
    \ {\n                found2 = true;\n                break;\n            }\n \
    \       }\n        if (found2) {\n            smallest_value = arr[smallest_even_index];\n\
    \            smallest_index = smallest_even_index;\n        }\n        if (smallest_even_index\
    \ == arr.Count - 1) {\n            return result;\n        }\n        long smallest_value2\
    \ = arr[smallest_even_index + 1];\n        long smallest_index2 = smallest_even_index\
    \ + 1;\n        bool found3 = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] != smallest_value2) {\n                found3 = true;\n\
    \                break;\n            }\n        }\n        if (found3) {\n   \
    \         smallest_value2 = arr[smallest_even_index + 1];\n            smallest_index2\
    \ = smallest_even_index + 1;\n        }\n        if (smallest_even_index == arr.Count\
    \ - 2) {\n            return result;\n        }\n        long smallest_value3\
    \ = arr[smallest_even_index + 2];\n        long smallest_index3 = smallest_even_index\
    \ + 2;\n        bool found4 = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] != smallest_value3) {\n                found4 = true;\n\
    \                break;\n            }\n        }\n        if (found4) {\n   \
    \         smallest_value3 = arr[smallest_even_index + 2];\n            smallest_index3\
    \ = smallest_even_index + 2;\n        }\n        if (smallest_even_index == arr.Count\
    \ - 3) {\n            return result;\n        }\n        long smallest_value4\
    \ = arr[smallest_even_index + 3];\n        long smallest_index4 = smallest_even_index\
    \ + 3;\n        bool found5 = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] != smallest_value4) {\n                found5 = true;\n\
    \                break;\n            }\n        }\n        if (found5) {\n   \
    \         smallest_value4 = arr[smallest_even_index + 3];\n            smallest_index4\
    \ = smallest_even_index + 3;\n        }\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptfceqw8w.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptfceqw8w.cs(51,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptfceqw8w.cs(62,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptfceqw8w.cs(68,36): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptfceqw8w.cs(78,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptfceqw8w.cs(84,36): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptfceqw8w.cs(94,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptfceqw8w.cs(100,36): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptfceqw8w.cs(110,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptfceqw8w.cs(34,30): error CS0161: ''Problem.Pluck(List<long>)'': not all
    code paths return a value

    '
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEven = arr.Min();\n        int smallestIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < smallestEven) {\n                smallestEven = arr[i];\n\
    \                smallestIndex = i;\n            }\n        }\n        result.Add(smallestEven);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a661fc80ef947738fedb4667d53b86d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a661fc80ef947738fedb4667d53b86d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <5a661fc80ef947738fedb4667d53b86d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823971
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long value in arr) {\n \
    \           if (value % 2 == 0) {\n                if (smallest_value == 0) {\n\
    \                    smallest_value = value;\n                    smallest_index\
    \ = arr.IndexOf(value);\n                    found = true;\n                }\
    \ else if (smallest_value < value) {\n                    smallest_value = value;\n\
    \                    smallest_index = arr.IndexOf(value);\n                  \
    \  found = true;\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0bf6556bc864c4aa3bb3a6f700b4e14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0bf6556bc864c4aa3bb3a6f700b4e14>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f81ca8744b83467db40356867b6713c5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f81ca8744b83467db40356867b6713c5>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f81ca8744b83467db40356867b6713c5>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823967
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] != smallest_value) {\n                continue;\n    \
    \        }\n            found = true;\n            long value = arr[i];\n    \
    \        if (value % 2 == 0) {\n                smallest_value = value;\n    \
    \            smallest_index = i;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplhr1jeqp.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823971
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var item in arr) {\n   \
    \         if (item % 2 == 0) {\n                found = true;\n              \
    \  smallest_value = item;\n                smallest_index = arr.IndexOf(item);\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7267e16631eb43f8829671456f84a605>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7267e16631eb43f8829671456f84a605>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ int smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n  \
    \              found = true;\n                break;\n            }\n        }\n\
    \        if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d58f6a3a5954f75a75e052a6ad06e6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d58f6a3a5954f75a75e052a6ad06e6b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <6d58f6a3a5954f75a75e052a6ad06e6b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823971
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        bool found = false;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n         \
    \       found = true;\n                result.Add(smallest_value);\n         \
    \       result.Add(smallest_index);\n                break;\n            }\n \
    \           if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n        if (!found)\
    \ {\n            return new List<long>();\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25ff08e5dbef49d882627d419b7ecd08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25ff08e5dbef49d882627d419b7ecd08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var node in arr) {\n   \
    \         if (node.Value % 2 == 0) {\n                smallest_even_value = node.Value;\n\
    \                smallest_index = arr.IndexOf(node);\n                found =\
    \ true;\n            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5_2zuiz4.cs(40,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp5_2zuiz4.cs(41,44): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = -1;\n        bool found = false;\n        foreach (long n in\
    \ arr) {\n            if (n % 2 == 0) {\n                if (smallest_value ==\
    \ n) {\n                    found = true;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                }\n                else if (smallest_value\
    \ < n) {\n                    smallest_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14aa3b42649144919a6dd9715fd64ad9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14aa3b42649144919a6dd9715fd64ad9>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <14aa3b42649144919a6dd9715fd64ad9>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min(x => x % 2 ==\
    \ 0 ? x : 0);\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <92fa791e33444708894d21cc716247a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <92fa791e33444708894d21cc716247a1>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ selector) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck\
    \ (System.Collections.Generic.List`1[T] arr) [0x00007] in <92"
  stdout: ''
  timestamp: 1659798899
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0)\n            return new List<long>();\n        var minValue = arr.Min();\n\
    \        var minIndex = arr.FindIndex(x => x == minValue);\n        if (minIndex\
    \ == -1)\n            return new List<long>();\n        var minEvenIndex = minIndex\
    \ - 1;\n        var minEvenValue = arr[minEvenIndex];\n        var minEvenIndexList\
    \ = arr.FindIndex(x => x == minEvenValue);\n        if (minEvenIndexList == -1)\n\
    \            return new List<long>();\n        var minEvenIndexListCount = minEvenIndexList.Count;\n\
    \        if (minEvenIndexListCount > 1)\n            return new List<long>();\n\
    \        var minEvenIndexListMinValue = minEvenIndexList.Min();\n        var minEvenIndexListMinIndex\
    \ = minEvenIndexList.FindIndex(x => x == minEvenIndexListMinValue);\n        if\
    \ (minEvenIndexListMinIndex == -1)\n            return new List<long>();\n   \
    \     var minEvenIndexListMinIndexCount = minEvenIndexListMinIndex.Count;\n  \
    \      if (minEvenIndexListMinIndexCount > 1)\n            return new List<long>();\n\
    \        var minEvenIndexListMinIndexMinValue = minEvenIndexListMinIndex.Min();\n\
    \        var minEvenIndexListMinIndexMinIndex = minEvenIndexListMinIndex.FindIndex(x\
    \ => x == minEvenIndexListMinIndexMinValue);\n        if (minEvenIndexListMinIndexMinIndex\
    \ == -1)\n            return new List<long>();\n        var minEvenIndexListMinIndexMinIndexCount\
    \ = minEvenIndexListMinIndexMinIndex.Count;\n        if (minEvenIndexListMinIndexMinIndexCount\
    \ > 1)\n            return new List<long>();\n        var minEvenIndexListMinIndexMinIndexMinValue\
    \ = minEvenIndexListMinIndexMinIndex.Min();\n        var minEvenIndexListMinIndexMinIndexMinIndex\
    \ = minEvenIndexListMinIndexMinIndex.FindIndex(x => x == minEvenIndexListMinIndexMinIndexMinValue);\n\
    \        if (minEvenIndexListMinIndexMinIndexMinIndex == -1)\n            return\
    \ new List<long>();\n        var minEvenIndexListMinIndexMinIndexMinIndexCount\
    \ = minEvenIndexListMinIndexMinIndexMinIndex.Count;\n        if (minEvenIndexListMinIndexMinIndexMinIndexCount\
    \ > 1)\n            return new List<long>();\n        var minEvenIndexListMinIndexMinIndexMinIndexMinValue\
    \ = minEvenIndexListMinIndexMinIndexMinIndex.Min();\n        var minEvenIndexListMinIndexMinIndexMinIndexMinIndex\
    \ = minEvenIndexListMinIndexMinIndexMinIndex.FindIndex(x => x == minEvenIndexListMinIndexMinIndexMinIndexMinValue);\n\
    \        if (min\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp11axaouj.cs(72,16): error CS1026: ) expected

    /tmp/tmp11axaouj.cs(72,16): error CS1525: Invalid expression term ''}''

    /tmp/tmp11axaouj.cs(72,16): error CS1002: ; expected

    '
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] != smallest_value) {\n                continue;\n    \
    \        }\n            found = true;\n            long value = arr[i];\n    \
    \        long index = i;\n            while (index > 0 && arr[index / 2] != value)\
    \ {\n                index = (index / 2);\n            }\n            if (index\
    \ == arr.Count - 1) {\n                result.Add(value);\n            } else\
    \ {\n                result.Add(value);\n                result.Add(index);\n\
    \            }\n        }\n        if (!found) {\n            return result;\n\
    \        }\n        if (result.Count > 1) {\n            int smallest_index =\
    \ result.Min();\n            int smallest_value = result[smallest_index];\n  \
    \          int smallest_even_index = smallest_index / 2;\n            int smallest_even_value\
    \ = arr[smallest_even_index];\n            if (smallest_even_value == smallest_value)\
    \ {\n                result.Remove(smallest_even_index);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqgfjehoq.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpqgfjehoq.cs(51,37): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpqgfjehoq.cs(65,17): error CS0136: A local or parameter named ''smallest_index''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqgfjehoq.cs(65,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqgfjehoq.cs(66,17): error CS0136: A local or parameter named ''smallest_value''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqgfjehoq.cs(66,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqgfjehoq.cs(67,17): error CS0136: A local or parameter named ''smallest_even_index''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqgfjehoq.cs(68,17): error CS0136: A local or parameter named ''smallest_even_value''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqgfjehoq.cs(68,39): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallest_even_value == arr[i]) {\n        \
    \            found = true;\n                    break;\n                }\n  \
    \              if (smallest_even_index < i) {\n                    smallest_even_value\
    \ = arr[i];\n                    smallest_even_index = i;\n                }\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb83cae79bb64cf7ba277f442562c4bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb83cae79bb64cf7ba277f442562c4bd>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <cb83cae79bb64cf7ba277f442562c4bd>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==\
    \ 0) {\n            return new List<long>();\n        }\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                found = true;\n                result.Add(arr[i]);\n\
    \                break;\n            }\n        }\n        if (!found) {\n   \
    \         return new List<long>();\n        }\n        if (result.Count > 1) {\n\
    \            int smallest_index = smallest_even_index;\n            int smallest_value_index\
    \ = smallest_even_index;\n            for (int i = 0; i < result.Count; i++) {\n\
    \                if (result[i] < smallest_value) {\n                    smallest_value_index\
    \ = i;\n                    smallest_value = result[i];\n                }\n \
    \               if (result[i] < smallest_index) {\n                    smallest_index\
    \ = result[i];\n                }\n            }\n            result.RemoveAt(smallest_value_index);\n\
    \            result.Insert(smallest_index, smallest_value);\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpywtf7u0z.cs(53,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpywtf7u0z.cs(54,40): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpywtf7u0z.cs(56,33): error CS0103: The name ''smallest_value'' does not
    exist in the current context

    /tmp/tmpywtf7u0z.cs(58,21): error CS0103: The name ''smallest_value'' does not
    exist in the current context

    /tmp/tmpywtf7u0z.cs(61,38): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpywtf7u0z.cs(65,43): error CS0103: The name ''smallest_value'' does not
    exist in the current context

    '
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        bool found_even_value\
    \ = false;\n        foreach (long value in arr) {\n            if (value % 2 ==\
    \ 0) {\n                found_even_value = true;\n                if (value <\
    \ smallest_even_value) {\n                    smallest_even_value = value;\n \
    \                   smallest_even_index = arr.IndexOf(value);\n              \
    \  }\n            }\n        }\n        if (found_even_value) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ca20d9fe5154fb0a9b7b4fb3930f750>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ca20d9fe5154fb0a9b7b4fb3930f750>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <8ca20d9fe5154fb0a9b7b4fb3930f750>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ int smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_even_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (!found) {\n            return result;\n        }\n     \
    \   long smallest_value = arr[smallest_even_index];\n        for (int i = smallest_even_index\
    \ + 1; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n   \
    \             smallest_value = arr[i];\n                smallest_even_index =\
    \ i;\n            }\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_even_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b012970219d49a7a792089846e8bc4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b012970219d49a7a792089846e8bc4f>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <2b012970219d49a7a792089846e8bc4f>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823972
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == arr.Count - 1) {\n            return new List<long>();\n\
    \        }\n        long smallest_value = arr[smallest_even_index + 1];\n    \
    \    List<long> result = new List<long>();\n        bool found = false;\n    \
    \    for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallest_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smallest_value);\n    \
    \        result.Add(smallest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzirsa9m9.cs(40,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value\
    \ = arr[smallest_even_index];\n        long smallest_index = smallest_even_index;\n\
    \        bool found = false;\n        for (int i = smallest_even_index + 1; i\
    \ < arr.Count; i++) {\n            long value = arr[i];\n            if (value\
    \ % 2 == 0) {\n                if (value < smallest_value) {\n               \
    \     smallest_value = value;\n                    smallest_index = i;\n     \
    \               found = true;\n                }\n            }\n        }\n \
    \       if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpai7u5san.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpai7u5san.cs(44,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        bool found = false;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n          \
    \      smallest_value = arr[i];\n                smallest_index = i;\n       \
    \         found = true;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ece32ea7ca84f849f6e18e6dfd24d1d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ece32ea7ca84f849f6e18e6dfd24d1d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <4ece32ea7ca84f849f6e18e6dfd24d1d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823970
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        int\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (smallestEvenValue < arr[i]) {\n\
    \                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea760aa7bd454a83875773f8ab0eb831>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea760aa7bd454a83875773f8ab0eb831>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ea760aa7bd454a83875773f8ab0eb831>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823966
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long n in arr) {\n     \
    \       if (n % 2 == 0) {\n                smallest_value = n;\n             \
    \   smallest_index = arr.IndexOf(n);\n                found = true;\n        \
    \    }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abfaf0025ac64bfe805fb1a13026eef1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abfaf0025ac64bfe805fb1a13026eef1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823972
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var node in arr) {\n   \
    \         if (found == true) {\n                if (smallest_even_value < node.Value)\
    \ {\n                    smallest_even_value = node.Value;\n                 \
    \   smallest_index = node.Index;\n                }\n            }\n         \
    \   if (node.Value % 2 == 0) {\n                found = true;\n            }\n\
    \        }\n        if (found == true) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk7tiaqg_.cs(41,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpk7tiaqg_.cs(42,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpk7tiaqg_.cs(43,43): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpk7tiaqg_.cs(46,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659823971
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long n in arr) {\n     \
    \       if (n % 2 == 0) {\n                smallest_even_value = n;\n        \
    \        smallest_index = arr.IndexOf(n);\n                found = true;\n   \
    \         }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e411eb6ef34147cdb94ca8d74aa4d81c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e411eb6ef34147cdb94ca8d74aa4d81c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823972
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min(x => x % 2 ==\
    \ 0);\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpibqzicmz.cs(36,36): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    '
  timestamp: 1659823972
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        long smalest_value\
    \ = arr.Min();\n        long smalest_index = 0;\n        List<long> result = new\
    \ List<long>();\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                if (smalest_value < arr[i]) {\n       \
    \             smalest_value = arr[i];\n                    smalest_index = i;\n\
    \                }\n            }\n        }\n        if (smalest_index != 0)\
    \ {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <44002860516f4e85b94f80c083c26364>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <44002860516f4e85b94f80c083c26364>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <44002860516f4e85b94f80c083c26364>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823972
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = arr.Min();\n        long\
    \ smallest_index = 0;\n        bool is_even = true;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n          \
    \      smallest_value = arr[i];\n                smallest_index = i;\n       \
    \     }\n            if (arr[i] % 2 == 0) {\n                is_even = false;\n\
    \            }\n        }\n        if (is_even) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d248359666c41bbadc5e0c6d28b2ee8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d248359666c41bbadc5e0c6d28b2ee8>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <6d248359666c41bbadc5e0c6d28b2ee8>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823972
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEven = arr.Min();\n        int smallestIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallestEven == arr[i]) {\n               \
    \     smallestIndex = i;\n                }\n                else {\n        \
    \            smallestEven = arr[i];\n                    smallestIndex = i;\n\
    \                }\n            }\n        }\n        if (smallestIndex != -1)\
    \ {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ebc32958f2940bf96c328bf56b68234>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ebc32958f2940bf96c328bf56b68234>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <9ebc32958f2940bf96c328bf56b68234>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823972
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        if (arr.Count > 0) {\n            long smallestEvenValue\
    \ = arr.Min();\n            long smallestIndex = 0;\n            for (int i =\
    \ 0; i < arr.Count; i++) {\n                if (arr[i] % 2 == 0 && arr[i] < smallestEvenValue)\
    \ {\n                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4fa47ce287184242b0104b34ca333afe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4fa47ce287184242b0104b34ca333afe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823972
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var item in arr) {\n   \
    \         if (item % 2 == 0) {\n                smallest_even_value = item;\n\
    \                smallest_index = arr.IndexOf(item);\n                found =\
    \ true;\n            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3d6ff347355641fe83eae187517338b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3d6ff347355641fe83eae187517338b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823972
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_value = 0;\n        long smallest_index2 = 0;\n\
    \        long smallest_value2 = 0;\n        bool found = false;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                smallest_even_value\
    \ = item;\n                smallest_index = arr.IndexOf(item);\n             \
    \   found = true;\n            }\n        }\n        if (found) {\n          \
    \  smallest_value = smallest_even_value;\n            smallest_index2 = smallest_index;\n\
    \            smallest_value2 = smallest_even_value;\n            foreach (var\
    \ item in arr) {\n                if (item % 2 == 0) {\n                    if\
    \ (smallest_value <= item) {\n                        smallest_value = item;\n\
    \                        smallest_index2 = arr.IndexOf(item);\n              \
    \          smallest_value2 = item;\n                    }\n                }\n\
    \            }\n            result.Add(smallest_value);\n            result.Add(smallest_index2);\n\
    \            result.Add(smallest_value2);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10be09cbc64a45138ddf4909c765f588>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10be09cbc64a45138ddf4909c765f588>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823972
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                smallest_even_value =\
    \ arr[i];\n                smallest_index = i;\n                found = true;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83dd375c178d4bbb9a16ca481a5a0b76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83dd375c178d4bbb9a16ca481a5a0b76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823972
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallest_value == 0) {\n                  \
    \  smallest_value = arr[i];\n                    smallest_index = i;\n       \
    \         } else if (arr[i] < smallest_value) {\n                    smallest_value\
    \ = arr[i];\n                    smallest_index = i;\n                }\n    \
    \        }\n        }\n        if (smallest_value != 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <837baec6c040422b867e35a2b5b269f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <837baec6c040422b867e35a2b5b269f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823972
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index\
    \ != -1) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        else {\n            result.Add(smallest_even_value);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <590e2a19dad64aa794ff76435c967897>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <590e2a19dad64aa794ff76435c967897>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <590e2a19dad64aa794ff76435c967897>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823972
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = arr.Min();\n       \
    \ long smallest_even_index = arr.IndexOf(smallest_even_value);\n        long smallest_even_index_plus_one\
    \ = smallest_even_index + 1;\n        long smallest_even_value_plus_one = smallest_even_value\
    \ + 1;\n        bool found = false;\n        foreach (long value in arr) {\n \
    \           if (value % 2 == 0) {\n                if (smallest_even_value ==\
    \ value) {\n                    found = true;\n                }\n           \
    \     else {\n                    smallest_even_value = value;\n             \
    \       smallest_even_index = arr.IndexOf(value);\n                    smallest_even_index_plus_one\
    \ = smallest_even_index + 1;\n                    smallest_even_value_plus_one\
    \ = smallest_even_value + 1;\n                }\n            }\n        }\n  \
    \      if (found) {\n            result.Add(smallest_even_value);\n          \
    \  result.Add(smallest_even_index_plus_one);\n        }\n        else {\n    \
    \        result.Add(smallest_even_value_plus_one);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69fd9dcd9ef94abb993dbaea814760b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69fd9dcd9ef94abb993dbaea814760b2>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <69fd9dcd9ef94abb993dbaea814760b2>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823972
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        int\
    \ smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n        \
    \    if (arr[i] % 2 == 0) {\n                if (smallestEvenValue < arr[i]) {\n\
    \                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea760aa7bd454a83875773f8ab0eb831>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea760aa7bd454a83875773f8ab0eb831>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ea760aa7bd454a83875773f8ab0eb831>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823966
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = 0;\n        long smallestIndex\
    \ = 0;\n        foreach (var node in arr) {\n            if (smallestEvenValue\
    \ == 0) {\n                smallestEvenValue = node;\n                smallestIndex\
    \ = arr.IndexOf(node);\n            }\n            if (node % 2 == 0) {\n    \
    \            if (smallestEvenValue < node) {\n                    smallestEvenValue\
    \ = node;\n                    smallestIndex = arr.IndexOf(node);\n          \
    \      }\n            }\n        }\n        result.Add(smallestEvenValue);\n \
    \       result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ea9ab2638b54d7aa8629e7bff1fa0f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ea9ab2638b54d7aa8629e7bff1fa0f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823972
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (!foundSmallestEvenValue) {\n                    foundSmallestEvenValue\
    \ = true;\n                    smallestEvenValue = arr[i];\n                 \
    \   smallestIndex = i;\n                }\n            }\n        }\n        if\
    \ (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n   \
    \         result.Add(smallestIndex);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <983e0bd3be844d39bfb708e30769ecc4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <983e0bd3be844d39bfb708e30769ecc4>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <983e0bd3be844d39bfb708e30769ecc4>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823972
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long smallest_value = arr.Min();\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n                found = true;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aedefefa1e2c4d388926d8de755677aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aedefefa1e2c4d388926d8de755677aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823971
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEven = arr.Min();\n        long smallestIndex\
    \ = arr.IndexOf(smallestEven);\n        bool foundSmallestEven = false;\n    \
    \    foreach (long n in arr) {\n            if (n % 2 == 0) {\n              \
    \  if (smallestEven < n) {\n                    smallestEven = n;\n          \
    \          smallestIndex = arr.IndexOf(n);\n                    foundSmallestEven\
    \ = true;\n                }\n            }\n        }\n        if (foundSmallestEven)\
    \ {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f2b18f2b3534d47bce9d30a4f04c34d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f2b18f2b3534d47bce9d30a4f04c34d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <7f2b18f2b3534d47bce9d30a4f04c34d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823972
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEven = arr.Min();\n        long smallestIndex\
    \ = arr.IndexOf(smallestEven);\n        if (smallestIndex != -1) {\n         \
    \   result.Add(smallestEven);\n            result.Add(smallestIndex);\n      \
    \  }\n        else {\n            result.Add(smallestEven);\n            result.Add(0);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5bfc4f17d2df43928ec44a8420a3f94d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5bfc4f17d2df43928ec44a8420a3f94d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <5bfc4f17d2df43928ec44a8420a3f94d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823972
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        foreach (long node in arr) {\n            if (node\
    \ % 2 == 0) {\n                if (smallestEvenValue < node) {\n             \
    \       smallestEvenValue = node;\n                    smallestIndex = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96e1847b33314e73b11b31c624f6338d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96e1847b33314e73b11b31c624f6338d>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <96e1847b33314e73b11b31c624f6338d>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659823972
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n    // your task is to pluck one of the nodes\
    \ and return it.\n    // The plucked node should be the node with the smallest\
    \ even value.\n    // If multiple nodes with the same smallest even value are\
    \ found return the node that has smallest index.\n    // The plucked node should\
    \ be returned in a list, [ smalest_value, its index ],\n    // If there are no\
    \ even values or the given array is empty, return [].\n    // Example 1:\n   \
    \ // >>> Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n \
    \   // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2\
    \ has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
    \    // >>> Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n\
    \    // (new List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example\
    \ 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n    //\
    \ Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
    \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
    \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two\
    \ zeros,\n    // so we will choose the first zero, which has the smallest index.\n\
    \    // Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
    \    public static List<long> Pluck(List<long> arr) {\n        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n   \
    \             if (smallest_even_value < n) {\n                    smallest_even_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \ }\n            }\n        }\n        if (smallest_even_value == 0) {\n     \
    \       return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d57fca54264493fa1736487bf2fa3c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d57fca54264493fa1736487bf2fa3c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823972
