language: cs
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, new Comparison<long>((x, y) => { return SumOfDigits(x)\
    \ - SumOfDigits(y); }));\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb5t9nehd.cs(25,68): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmpb5t9nehd.cs(25,85): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659798063
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, new Comparison<long>((x, y) => sum - x - y));\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn2_7ub5e.cs(25,59): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpn2_7ub5e.cs(25,59): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n\
    \        long maxSumIndex = 0;\n        long maxSumDigit = 0;\n        long maxSumDigitIndex\
    \ = 0;\n        long maxSumDigitDigit = 0;\n        long maxSumDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigit = 0;\n        long maxSumDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigit\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8ayfe_vb.cs(68,35): error CS1002: ; expected

    '
  timestamp: 1659798062
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - b);\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu9m3_nh8.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpu9m3_nh8.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr50wtm6m.cs(25,59): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmpr50wtm6m.cs(25,76): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4i6fxp8x.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp4i6fxp8x.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, delegate(long x, long y) {\n            return sum\
    \ - x - y;\n        });\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0977td8y.cs(26,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0977td8y.cs(26,20): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659798063
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuclakgn.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphuclakgn.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0) {\n            return nums;\n        }\n        List<long> numsCopy =\
    \ new List<long>(nums);\n        long sum = 0;\n        long maxSum = numsCopy.Max();\n\
    \        long minSum = numsCopy.Min();\n        long maxSumIndex = 0;\n      \
    \  long minSumIndex = 0;\n        long maxSumPoint = 0;\n        long minSumPoint\
    \ = 0;\n        long maxSumPointIndex = 0;\n        long minSumPointIndex = 0;\n\
    \        foreach (long num in numsCopy) {\n            sum += num;\n         \
    \   if (sum > maxSum) {\n                maxSum = sum;\n                maxSumIndex\
    \ = numsCopy.IndexOf(num);\n                maxSumPoint = num;\n             \
    \   maxSumPointIndex = numsCopy.IndexOf(num);\n            }\n            if (sum\
    \ < minSum) {\n                minSum = sum;\n                minSumIndex = numsCopy.IndexOf(num);\n\
    \                minSumPoint = num;\n                minSumPointIndex = numsCopy.IndexOf(num);\n\
    \            }\n        }\n        List<long> result = new List<long>();\n   \
    \     foreach (long num in numsCopy) {\n            if (num == maxSumPoint) {\n\
    \                result.Add(maxSumPointIndex);\n            } else if (num ==\
    \ minSumPoint) {\n                result.Add(minSumPointIndex);\n            }\
    \ else {\n                result.Add(numsCopy.IndexOf(num));\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b6d9c9d4bf940fda221b07934162b0d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b6d9c9d4bf940fda221b07934162b0d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798063
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, new Comparison<long>((x, y) => { return SumDigits(x) -\
    \ SumDigits(y); }));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmrwsfdqw.cs(25,68): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpmrwsfdqw.cs(25,83): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659798063
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, new Comparison<long>((x, y) => SumDigits(x) - SumDigits(y)));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyveay7kx.cs(25,59): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpyveay7kx.cs(25,74): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0) return nums;\n        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdtn4uv72.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpdtn4uv72.cs(26,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659798063
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, delegate(long a, long b) {\n            return sum\
    \ - a - b;\n        });\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkpd09f4i.cs(26,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkpd09f4i.cs(26,20): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgu_2r56i.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpgu_2r56i.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptvzdqd4_.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmptvzdqd4_.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, delegate(long x, long y) {\n            return sum\
    \ - x - y;\n        });\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0977td8y.cs(26,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp0977td8y.cs(26,20): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659798063
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => SumDigits(a) - SumDigits(b));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfo9bip2h.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfo9bip2h.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0) return nums;\n        List<long> result = new List<long>();\n        long\
    \ sum = 0;\n        foreach (long num in nums) {\n            sum += num;\n  \
    \          result.Add(num);\n        }\n        Array.Sort(result, (a, b) => sum\
    \ - a - b);\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5rb5f46i.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5rb5f46i.cs(26,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, delegate(long x, long y) { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg9k2czzo.cs(25,62): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpg9k2czzo.cs(25,77): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659823785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n\
    \        long maxSumIndex = 0;\n        foreach (long n in nums) {\n         \
    \   sum += n;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = nums.IndexOf(n);\n            }\n        }\n  \
    \      foreach (long n in nums) {\n            if (sum == maxSum) {\n        \
    \        result.Add(n);\n            }\n            sum -= n;\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54458b0fb16a48a2b27bf2b5c26feb93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54458b0fb16a48a2b27bf2b5c26feb93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdwl5ino5.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpdwl5ino5.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long max = 0;\n \
    \       foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum > max) {\n                max = sum;\n            }\n        }\n      \
    \  foreach (long num in nums) {\n            sum += num;\n            if (sum\
    \ > max) {\n                max = sum;\n            }\n        }\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            if (sum > max) {\n\
    \                max = sum;\n            }\n        }\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            if (sum > max) {\n        \
    \        max = sum;\n            }\n        }\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > max) {\n                max\
    \ = sum;\n            }\n        }\n        foreach (long num in nums) {\n   \
    \         sum += num;\n            if (sum > max) {\n                max = sum;\n\
    \            }\n        }\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            if (sum > max) {\n                max = sum;\n        \
    \    }\n        }\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \     }\n        foreach (long num in nums) {\n            sum += num;\n     \
    \       if (sum > max) {\n                max = sum;\n            }\n        }\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum > max) {\n                max = sum;\n            }\n        }\n      \
    \  foreach (long num in nums) {\n            sum += num;\n            if (sum\
    \ > max) {\n                max = sum;\n            }\n        }\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            if (sum > max) {\n\
    \                max = sum;\n            }\n        }\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            if (sum > max) {\n        \
    \        max = sum;\n            }\n        }\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > max) {\n                max\
    \ = sum;\n            }\n        }\n        foreach (long num in nums) {\n   \
    \         sum += num;\n            if (sum > max) {\n                max = sum;\n\
    \            }\n        }\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            if (sum > max) {\n                max = sum;\n        \
    \    }\n        }\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \     }\n        foreach (long num in nums) {\n            sum += num;\n     \
    \       if (sum > \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp_3_srdn.cs(126,22): error CS1525: Invalid expression term ''}''

    /tmp/tmpp_3_srdn.cs(126,22): error CS1026: ) expected

    /tmp/tmpp_3_srdn.cs(126,22): error CS1002: ; expected

    /tmp/tmpp_3_srdn.cs(128,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpp_3_srdn.cs(137,2): error CS1513: } expected

    '
  timestamp: 1659823784
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, new Comparison<long>((x, y) => sum - x - y));\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5axoy3xl.cs(25,59): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp5axoy3xl.cs(25,59): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4i6fxp8x.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp4i6fxp8x.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbw74o3aa.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpbw74o3aa.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long max = 0;\n \
    \       foreach (long n in nums) {\n            sum += n;\n            if (sum\
    \ > max) {\n                max = sum;\n            }\n            result.Add(n);\n\
    \        }\n        List<long> sortedResult = new List<long>();\n        foreach\
    \ (long n in result) {\n            sortedResult.Add(n);\n        }\n        sortedResult.Sort((x,\
    \ y) => { return SumDigits(x) - SumDigits(y); });\n        return sortedResult;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpig232rx4.cs(33,46): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpig232rx4.cs(33,61): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => SumOfDigits(x) - SumOfDigits(y));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp88mtf7od.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp88mtf7od.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpste__dau.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpste__dau.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplbpbkr3i.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmplbpbkr3i.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuclakgn.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphuclakgn.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuclakgn.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphuclakgn.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x);\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwq_jjdah.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpwq_jjdah.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0) return nums;\n        long sum = 0;\n        long maxSum = nums.Max();\n\
    \        long minSum = nums.Min();\n        foreach (long num in nums) {\n   \
    \         sum += num;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n            }\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        long currentSum = sum;\n        long currentMaxSum = maxSum;\n      \
    \  long currentMinSum = minSum;\n        foreach (long num in nums) {\n      \
    \      currentSum += num;\n            if (currentSum > currentMaxSum) {\n   \
    \             currentMaxSum = currentSum;\n            }\n            if (currentSum\
    \ < currentMinSum) {\n                currentMinSum = currentSum;\n          \
    \  }\n            result.Add(num);\n        }\n        result.Sort();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccf69be60c5f44a1bec94c2edffceb21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccf69be60c5f44a1bec94c2edffceb21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptz5ezo_w.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmptz5ezo_w.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, new Comparison<long>((x, y) => { return SumDigits(x)\
    \ - SumDigits(y); }));\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk8ej2ewj.cs(25,68): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpk8ej2ewj.cs(25,83): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpesd1k675.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpesd1k675.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - b);\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu9m3_nh8.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpu9m3_nh8.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        foreach (long n in nums) {\n            sum += n;\n        }\n\
    \        List<long> result = new List<long>();\n        foreach (long n in nums)\
    \ {\n            int digit = n % 10;\n            int index = sum - digit;\n \
    \           if (index >= 0) {\n                result.Add(nums[index]);\n    \
    \        }\n            sum -= digit;\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb1gyq7sb.cs(25,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpb1gyq7sb.cs(26,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9fceeq44.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp9fceeq44.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, (x, y) => sum - x);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3uau9q5h.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp3uau9q5h.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplxqjkcq7.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmplxqjkcq7.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => SumOfDigits(x) - SumOfDigits(y));\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L, (long)-1L,\
    \ (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L, (long)-11L,\
    \ (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L, (long)423L,\
    \ (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L, (long)56L,\
    \ (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L, (long)2L,\
    \ (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,\
    \ (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps4n4s4tv.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmps4n4s4tv.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpste__dau.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpste__dau.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgx89g6n5.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpgx89g6n5.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdwl5ino5.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpdwl5ino5.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5g3nxs39.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5g3nxs39.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdwl5ino5.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpdwl5ino5.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptvzdqd4_.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmptvzdqd4_.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbw74o3aa.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpbw74o3aa.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp107me3n4.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp107me3n4.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpesd1k675.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpesd1k675.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0) return nums;\n        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_zwzejje.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp_zwzejje.cs(26,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpste__dau.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpste__dau.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4i6fxp8x.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp4i6fxp8x.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0) return nums;\n        long sum = 0;\n        long maxSum = nums.Max();\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > maxSum) {\n              \
    \  result.Add(num);\n                sum -= num;\n            }\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <870aefbd39be433b94ea6cb3018b49e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <870aefbd39be433b94ea6cb3018b49e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => sum - x);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpum1k7us9.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpum1k7us9.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbw74o3aa.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpbw74o3aa.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4i6fxp8x.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp4i6fxp8x.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5g3nxs39.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5g3nxs39.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgu_2r56i.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpgu_2r56i.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, delegate(long x, long y) {\n            return sum\
    \ - x - y;\n        });\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq9ktj1lt.cs(26,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpq9ktj1lt.cs(26,20): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuclakgn.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphuclakgn.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0) {\n            return nums;\n        }\n        List<long> numsCopy =\
    \ new List<long>(nums);\n        long sum = 0;\n        foreach (long num in numsCopy)\
    \ {\n            sum += num;\n        }\n        long maxSum = sum;\n        List<long>\
    \ result = new List<long>();\n        foreach (long num in numsCopy) {\n     \
    \       long newSum = sum - num;\n            if (newSum > maxSum) {\n       \
    \         maxSum = newSum;\n            }\n            result.Add(num);\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5744a080d3b4b548b0873d535fde9ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5744a080d3b4b548b0873d535fde9ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n\
    \        long maxSumIndex = 0;\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = num;\n            }\n        }\n        foreach\
    \ (long num in nums) {\n            if (num == maxSumIndex) {\n              \
    \  result.Add(num);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <735cdff1c4f74a898da270bdc193baa0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <735cdff1c4f74a898da270bdc193baa0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdwl5ino5.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpdwl5ino5.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgu_2r56i.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpgu_2r56i.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdwl5ino5.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpdwl5ino5.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0) return nums;\n        List<long> result = new List<long>();\n        long\
    \ sum = 0;\n        long maxSum = 0;\n        long maxSumIndex = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            if (sum > maxSum) {\n\
    \                maxSum = sum;\n                maxSumIndex = nums.IndexOf(n);\n\
    \            }\n        }\n        foreach (long n in nums) {\n            sum\
    \ += n;\n            if (sum == maxSum) {\n                result.Add(n);\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a4588f724084158863d4f071fb60544>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a4588f724084158863d4f071fb60544>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpesd1k675.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpesd1k675.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, delegate(long a, long b) {\n            return sum\
    \ - a - b;\n        });\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkpd09f4i.cs(26,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkpd09f4i.cs(26,20): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n\
    \        long maxIndex = 0;\n        foreach (long num in nums) {\n          \
    \  sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxIndex = num;\n            }\n        }\n        result.Add(maxIndex);\n\
    \        foreach (long num in nums) {\n            sum -= num;\n            if\
    \ (sum > maxSum) {\n                maxSum = sum;\n                maxIndex =\
    \ num;\n            }\n        }\n        result.Add(maxIndex);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a6d1387eb244c148539ee422d2db71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a6d1387eb244c148539ee422d2db71a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuclakgn.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphuclakgn.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n\
    \        long maxIndex = -1;\n        foreach (long num in nums) {\n         \
    \   sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxIndex = num;\n            }\n        }\n        foreach (long\
    \ num in nums) {\n            if (num == maxIndex) {\n                result.Add(num);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f835ba407bc4a969421c1213fb87cdd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f835ba407bc4a969421c1213fb87cdd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, new Comparison<long>((x, y) => { return SumDigits(x)\
    \ - SumDigits(y); }));\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk8ej2ewj.cs(25,68): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpk8ej2ewj.cs(25,83): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9fceeq44.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp9fceeq44.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdwl5ino5.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpdwl5ino5.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm0g7rqcc.cs(25,59): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmpm0g7rqcc.cs(25,76): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr50wtm6m.cs(25,59): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmpr50wtm6m.cs(25,76): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0) {\n            return nums;\n        }\n        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(num);\n        }\n        List<long>\
    \ sorted = new List<long>();\n        long curSum = 0;\n        long curSum2 =\
    \ 0;\n        foreach (long num in nums) {\n            curSum += num;\n     \
    \       curSum2 += num * num;\n            if (curSum2 > sum) {\n            \
    \    sorted.Add(num);\n                curSum2 = sum;\n            }\n       \
    \ }\n        return sorted;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c590ac1124849eeb91d555ef11ba62f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c590ac1124849eeb91d555ef11ba62f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum > maxSum) {\n                maxSum = sum;\n            }\n           \
    \ result.Add(num);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e097b2a90a1841e0b998f83090179934>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e097b2a90a1841e0b998f83090179934>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => { return a - b; });\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxu0kb8sa.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpxu0kb8sa.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuclakgn.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphuclakgn.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n\
    \        long maxSumIndex = 0;\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = num;\n            }\n        }\n        foreach\
    \ (long num in nums) {\n            if (num == maxSumIndex) {\n              \
    \  result.Add(num);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <735cdff1c4f74a898da270bdc193baa0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <735cdff1c4f74a898da270bdc193baa0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => SumOfDigits(a) - SumOfDigits(b));\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L, (long)-1L,\
    \ (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L, (long)-11L,\
    \ (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L, (long)423L,\
    \ (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L, (long)56L,\
    \ (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L, (long)2L,\
    \ (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,\
    \ (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl0qukjaa.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpl0qukjaa.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, new Comparison<long>((x, y) => { return SumDigits(x)\
    \ - SumDigits(y); }));\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk8ej2ewj.cs(25,68): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpk8ej2ewj.cs(25,83): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpesd1k675.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpesd1k675.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        foreach (long num in nums) {\n            sum += num;\n      \
    \  }\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            int digit = num % 10;\n            int index = sum -\
    \ digit;\n            if (index >= 0) {\n                result.Insert(index,\
    \ num);\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9jfnrynq.cs(25,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp9jfnrynq.cs(26,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpste__dau.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpste__dau.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0)\n            return nums;\n        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => SumDigits(a) - SumDigits(b));\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjjylrc4n.cs(27,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpjjylrc4n.cs(27,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0) return nums;\n        long sum = 0;\n        long maxSum = nums.Max();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            if (sum\
    \ > maxSum) maxSum = sum;\n        }\n        List<long> result = new List<long>();\n\
    \        long curSum = 0;\n        long curMaxSum = maxSum;\n        foreach (long\
    \ n in nums) {\n            curSum += n;\n            if (curSum > curMaxSum)\
    \ {\n                result.Add(n);\n                curSum = n;\n           \
    \     curMaxSum = maxSum;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68621cfe1d7b436db66e969c51e8ba55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68621cfe1d7b436db66e969c51e8ba55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n\
    \        long maxSumIndex = 0;\n        foreach (long num in nums) {\n       \
    \     sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = nums.IndexOf(num);\n            }\n        }\n\
    \        foreach (long num in nums) {\n            if (num == maxSumIndex) {\n\
    \                result.Add(num);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <759f24ead3144b3785bb4dc7f299e550>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <759f24ead3144b3785bb4dc7f299e550>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgu_2r56i.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpgu_2r56i.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, delegate(long x, long y) { return (sum - x + y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphfj5_r_l.cs(25,63): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmphfj5_r_l.cs(25,63): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdwl5ino5.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpdwl5ino5.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuclakgn.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphuclakgn.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplxqjkcq7.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmplxqjkcq7.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdwl5ino5.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpdwl5ino5.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n\
    \        long maxSumIndex = 0;\n        foreach (long n in nums) {\n         \
    \   sum += n;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = nums.IndexOf(n);\n            }\n        }\n  \
    \      foreach (long n in nums) {\n            sum += n;\n            if (sum\
    \ == maxSum) {\n                result.Add(n);\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f84729e3328f42a4a6ceea8aa46b4229>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f84729e3328f42a4a6ceea8aa46b4229>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x);\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwq_jjdah.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpwq_jjdah.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9fceeq44.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp9fceeq44.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0) {\n            return nums;\n        }\n        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        long maxSum = nums.Max();\n  \
    \      long minSum = nums.Min();\n        foreach (long num in nums) {\n     \
    \       sum += num;\n            if (sum > maxSum) {\n                maxSum =\
    \ sum;\n            }\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n            }\n        }\n        long maxSumIndex = nums.FindIndex(n\
    \ => n == maxSum);\n        long minSumIndex = nums.FindIndex(n => n == minSum);\n\
    \        long maxSumSum = maxSumIndex == nums.Count ? 0 : nums[maxSumIndex];\n\
    \        long minSumSum = minSumIndex == nums.Count ? 0 : nums[minSumIndex];\n\
    \        long maxSumSumIndex = 0;\n        long minSumSumIndex = 0;\n        long\
    \ maxSumSumIndex2 = 0;\n        long minSumSumIndex2 = 0;\n        long maxSumSumIndex3\
    \ = 0;\n        long minSumSumIndex3 = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > maxSum) {\n              \
    \  maxSum = sum;\n                maxSumIndex = num;\n                maxSumSum\
    \ = num;\n                maxSumSumIndex = num;\n                maxSumSumIndex2\
    \ = num;\n                maxSumSumIndex3 = num;\n            }\n            if\
    \ (sum < minSum) {\n                minSum = sum;\n                minSumIndex\
    \ = num;\n                minSumSum = num;\n                minSumSumIndex = num;\n\
    \                minSumSumIndex2 = num;\n                minSumSumIndex3 = num;\n\
    \            }\n            if (sum == maxSum) {\n                maxSumSumIndex2\
    \ = num;\n                maxSumSumIndex3 = num;\n            }\n            if\
    \ (sum == minSum) {\n                minSumSumIndex2 = num;\n                minSumSumIndex3\
    \ = num;\n            }\n        }\n        long maxSumSumIndex4 = nums.FindIndex(n\
    \ => n == maxSumSum);\n        long minSumSumIndex4 = nums.FindIndex(n => n ==\
    \ minSumSum);\n        long maxSumSumIndex5 = nums.FindIndex(n => n == maxSumSumIndex4);\n\
    \        long minSumSumIndex5 = nums.FindIndex(n => n == minSumSumIndex4);\n \
    \       long maxSumSumIndex6 = nums.FindIndex(n => n == maxSumSumIndex5);\n  \
    \      long minSumSumIndex6 = nums.FindIndex(n => n == \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpom8l7smk.cs(77,56): error CS1525: Invalid expression term ''}''

    /tmp/tmpom8l7smk.cs(77,56): error CS1026: ) expected

    /tmp/tmpom8l7smk.cs(77,56): error CS1002: ; expected

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplbpbkr3i.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmplbpbkr3i.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9fceeq44.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp9fceeq44.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, delegate(long a, long b) {\n            return sum\
    \ - a - b;\n        });\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwp3wa9k2.cs(26,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpwp3wa9k2.cs(26,20): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplxqjkcq7.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmplxqjkcq7.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp107me3n4.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp107me3n4.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpesd1k675.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpesd1k675.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0) {\n            return nums;\n        }\n        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        long maxSum = nums.Max();\n  \
    \      long minSum = nums.Min();\n        foreach (long n in nums) {\n       \
    \     sum += n;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \            }\n            if (sum < minSum) {\n                minSum = sum;\n\
    \            }\n        }\n        long maxSumIndex = 0;\n        long minSumIndex\
    \ = 0;\n        long maxSumSum = maxSum;\n        long minSumSum = minSum;\n \
    \       foreach (long n in nums) {\n            sum += n;\n            if (sum\
    \ > maxSum) {\n                maxSum = sum;\n                maxSumIndex = n;\n\
    \            }\n            if (sum < minSum) {\n                minSum = sum;\n\
    \                minSumIndex = n;\n            }\n        }\n        bool swap\
    \ = false;\n        long maxSumSumIndex = 0;\n        long minSumSumIndex = 0;\n\
    \        foreach (long n in nums) {\n            sum += n;\n            if (sum\
    \ > maxSum) {\n                maxSum = sum;\n                maxSumSumIndex =\
    \ n;\n            }\n            if (sum < minSum) {\n                minSum =\
    \ sum;\n                minSumSumIndex = n;\n            }\n        }\n      \
    \  if (maxSumSumIndex == minSumSumIndex) {\n            swap = true;\n       \
    \ }\n        if (swap) {\n            long temp = maxSumSumIndex;\n          \
    \  maxSumSumIndex = minSumSumIndex;\n            minSumSumIndex = temp;\n    \
    \    }\n        long maxSumSum = maxSum;\n        long minSumSum = minSum;\n \
    \       long maxSumIndex = maxSumIndex;\n        long minSumIndex = minSumIndex;\n\
    \        long maxSum = maxSum;\n        long minSum = minSum;\n        long maxSumSumIndex\
    \ = 0;\n        long minSumSumIndex = 0;\n        foreach (long n in nums) {\n\
    \            sum += n;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n                maxSumSumIndex = n;\n            }\n            if (sum\
    \ < minSum) {\n                minSum = sum;\n                minSumSumIndex =\
    \ n;\n            }\n        }\n        if (maxSumSumIndex == minSumSumIndex)\
    \ {\n            swap = true;\n        }\n        if (swap) {\n            long\
    \ temp = maxSumSumIndex;\n            maxSumSumIndex = minSumSumIndex;\n     \
    \       minSumSumIndex = temp;\n        }\n        long maxSumSum = maxSum;\n\
    \        long minSumSum = minSum;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd0knb8_1.cs(72,14): error CS0128: A local variable or function named ''maxSumSum''
    is already defined in this scope

    /tmp/tmpd0knb8_1.cs(73,14): error CS0128: A local variable or function named ''minSumSum''
    is already defined in this scope

    /tmp/tmpd0knb8_1.cs(74,14): error CS0128: A local variable or function named ''maxSumIndex''
    is already defined in this scope

    /tmp/tmpd0knb8_1.cs(75,14): error CS0128: A local variable or function named ''minSumIndex''
    is already defined in this scope

    /tmp/tmpd0knb8_1.cs(76,14): error CS0128: A local variable or function named ''maxSum''
    is already defined in this scope

    /tmp/tmpd0knb8_1.cs(77,14): error CS0128: A local variable or function named ''minSum''
    is already defined in this scope

    /tmp/tmpd0knb8_1.cs(78,14): error CS0128: A local variable or function named ''maxSumSumIndex''
    is already defined in this scope

    /tmp/tmpd0knb8_1.cs(79,14): error CS0128: A local variable or function named ''minSumSumIndex''
    is already defined in this scope

    /tmp/tmpd0knb8_1.cs(99,14): error CS0128: A local variable or function named ''maxSumSum''
    is already defined in this scope

    /tmp/tmpd0knb8_1.cs(100,14): error CS0128: A local variable or function named
    ''minSumSum'' is already defined in this scope

    /tmp/tmpd0knb8_1.cs(78,14): warning CS0219: The variable ''maxSumSumIndex'' is
    assigned but its value is never used

    /tmp/tmpd0knb8_1.cs(79,14): warning CS0219: The variable ''minSumSumIndex'' is
    assigned but its value is never used

    /tmp/tmpd0knb8_1.cs(18,30): error CS0161: ''Problem.OrderByPoints(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, new Comparison<long>((x, y) => sum - x - y));\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe4w_s_pk.cs(25,59): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpe4w_s_pk.cs(25,59): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n\
    \        long maxIndex = 0;\n        foreach (long num in nums) {\n          \
    \  sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxIndex = num;\n            }\n        }\n        foreach (long\
    \ num in nums) {\n            if (num == maxIndex) {\n                result.Add(num);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2237ec1bde1a4d93a8782ba931add5c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2237ec1bde1a4d93a8782ba931add5c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4i6fxp8x.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp4i6fxp8x.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpste__dau.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpste__dau.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, new Comparison<long>((x, y) => SumDigits(x) - SumDigits(y)));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_u2q28qi.cs(25,59): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmp_u2q28qi.cs(25,74): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, delegate (long x, long y) {\n            return sum\
    \ - x - y;\n        });\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxg4zq745.cs(26,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxg4zq745.cs(26,20): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        foreach (long n in nums) {\n            sum += n;\n        }\n\
    \        List<long> result = new List<long>();\n        foreach (long n in nums)\
    \ {\n            int index = Convert.ToInt32(Math.Floor(Math.Log10(n)));\n   \
    \         long temp = sum - n;\n            if (temp > 0) {\n                result.Add(n);\n\
    \                result.Add(temp);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.OverflowException: Value was either too\
    \ large or too small for an Int32.\n  at System.Convert.ToInt32 (System.Double\
    \ value) [0x0007a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints\
    \ (System.Collections.Generic.List`1[T] nums) [0x0005e] in <7a95ef6a99ad4644bed913f75216eca5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00017] in <7a95ef6a99ad4644bed913f75216eca5>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.OverflowException: Value was either\
    \ too large or too small for an Int32.\n  at System.Convert.ToInt32 (System.Double\
    \ value) [0x0007a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints\
    \ (System.Collections.Generic.List`1[T] nums) [0x0005e] in <7a95ef6a99ad4644bed913f75216eca5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00017] in <7a95ef6a99ad4644bed913f75216eca5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4i6fxp8x.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp4i6fxp8x.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1r785hpa.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp1r785hpa.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, new Comparison<long>((x, y) => { return SumDigits(x) -\
    \ SumDigits(y); }));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmrwsfdqw.cs(25,68): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpmrwsfdqw.cs(25,83): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659798063
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, delegate (long a, long b) {\n            return sum\
    \ - a - b;\n        });\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk3il3fr7.cs(26,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpk3il3fr7.cs(26,20): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    long maxSum = sum;\n        List<long> maxSumIndexes = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            if (sum\
    \ > maxSum) {\n                maxSum = sum;\n                maxSumIndexes.Clear();\n\
    \                maxSumIndexes.Add(n);\n            } else if (sum == maxSum)\
    \ {\n                maxSumIndexes.Add(n);\n            }\n        }\n       \
    \ List<long> sortedNums = new List<long>();\n        foreach (long n in nums)\
    \ {\n            if (maxSumIndexes.Contains(n)) {\n                sortedNums.Add(n);\n\
    \            }\n        }\n        return sortedNums;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96af0da830ec446a8ceb8a55bea3a043>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <96af0da830ec446a8ceb8a55bea3a043>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, new Comparison<long>((x, y) => SumDigits(x) - SumDigits(y)));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp215559l7.cs(25,59): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmp215559l7.cs(25,74): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgnyfc13.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpfgnyfc13.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4i6fxp8x.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp4i6fxp8x.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => SumOfDigits(x) - SumOfDigits(y));\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp88mtf7od.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp88mtf7od.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm0g7rqcc.cs(25,59): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmpm0g7rqcc.cs(25,76): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659823785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0)\n            return nums;\n        long sum = 0;\n        long maxSum\
    \ = nums.Max();\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \        }\n        List<long> result = new List<long>();\n        long currentSum\
    \ = sum;\n        foreach (long num in nums) {\n            currentSum -= num;\n\
    \            if (currentSum > 0) {\n                result.Add(num);\n       \
    \     }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d7de781427d4850b327d1bdea40cd3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d7de781427d4850b327d1bdea40cd3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuclakgn.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphuclakgn.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        long sum\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in nums) {\n            sum += n;\n            result.Add(n);\n        }\n \
    \       Array.Sort(result, new Comparison<long>((x, y) => { return SumDigits(x)\
    \ - SumDigits(y); }));\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk8ej2ewj.cs(25,68): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpk8ej2ewj.cs(25,83): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659823785
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr50wtm6m.cs(25,59): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmpr50wtm6m.cs(25,76): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,\
    \ (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,\
    \ (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuclakgn.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphuclakgn.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count\
    \ == 0) return nums;\n        List<long> result = new List<long>();\n        long\
    \ sum = 0;\n        foreach (long num in nums) {\n            sum += num;\n  \
    \          result.Add(num);\n        }\n        long maxSum = sum;\n        long\
    \ maxIndex = -1;\n        for (int i = 0; i < nums.Count; i++) {\n           \
    \ sum += nums[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxIndex = i;\n            }\n        }\n        List<long> sortedResult\
    \ = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n      \
    \      if (i == maxIndex) sortedResult.Add(nums[i]);\n            else sortedResult.Add(nums[maxIndex]);\n\
    \        }\n        return sortedResult;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new\
    \ long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,\
    \ (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,\
    \ (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L,\
    \ (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)-11L,\
    \ (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkdipw0bb.cs(38,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function which sorts the given list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
    \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
    \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
    \    public static List<long> OrderByPoints(List<long> nums) {\n        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
    \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
    \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
    \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
    \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
    \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
    \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
    \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
    \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
    \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
    \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
    \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
    \ long[]{(long)0L, (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L,\
    \ (long)6L, (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
