name: HumanEval_152_compare
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // I think we all remember that feeling when the result of some\
  \ long-awaited\n    // event is finally known. The feelings and thoughts you have\
  \ at that moment are\n    // definitely worth noting down and comparing.\n    //\
  \ Your task is to determine if a person correctly guessed the results of a number\
  \ of matches.\n    // You are given two arrays of scores and guesses of equal length,\
  \ where each index shows a match. \n    // Return an array of the same length denoting\
  \ how far off each guess was. If they have guessed correctly,\n    // the value\
  \ is 0, and if not, the value is the absolute difference between the guess and the\
  \ score.\n    // example:\n    // >>> Compare((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})), (new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L})))\n    // (new List<long>(new\
  \ long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))\n    // >>>\
  \ Compare((new List<long>(new long[]{(long)0L, (long)5L, (long)0L, (long)0L, (long)0L,\
  \ (long)4L})), (new List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L,\
  \ (long)0L, (long)-2L})))\n    // (new List<long>(new long[]{(long)4L, (long)4L,\
  \ (long)1L, (long)0L, (long)0L, (long)6L}))\n    public static List<long> Compare(List<long>\
  \ game, List<long> guess) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Compare((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})),\
  \ (new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)2L, (long)-2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)0L, (long)0L, (long)0L, (long)3L, (long)3L}))));\n\
  \    Debug.Assert(Compare((new List<long>(new long[]{(long)0L, (long)0L, (long)0L,\
  \ (long)0L, (long)0L, (long)0L})), (new List<long>(new long[]{(long)0L, (long)0L,\
  \ (long)0L, (long)0L, (long)0L, (long)0L}))).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)0L, (long)0L, (long)0L, (long)0L}))));\n    Debug.Assert(Compare((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})), (new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
  \ (long)6L}))));\n    Debug.Assert(Compare((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)5L})), (new List<long>(new long[]{(long)-1L, (long)2L,\
  \ (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)0L, (long)0L,\
  \ (long)1L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long score =\
    \ 0;\n        long guess = 0;\n        foreach (var item in game) {\n        \
    \    score += item;\n        }\n        foreach (var item in guess) {\n      \
    \      guess += item;\n        }\n        guess = Math.Abs(guess);\n        if\
    \ (guess == score) {\n            result.Add(0);\n        }\n        else {\n\
    \            result.Add(guess - score);\n        }\n        return result;", " \
    \       var result = new List<long>(game.Count);\n        foreach (var item in\
    \ game) {\n            var diff = item - guess[game.IndexOf(item)]; // the difference\
    \ between the score and the guess\n            if (diff > 0) result.Add(diff);\n\
    \            else result.Add(Math.Abs(diff));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long score = 0;\n      \
    \  long diff = 0;\n        foreach (long g in game) {\n            score += g;\n\
    \        }\n        foreach (long g in guess) {\n            diff += g;\n    \
    \    }\n        if (diff == 0) {\n            result.Add(0);\n        } else {\n\
    \            result.Add(Math.Abs(diff - score));\n        }\n        return result;",
  "        List<long> result = new List<long>(game.Count);\n        long score = 0;\n\
    \        long diff = 0;\n        foreach (long g in game) {\n            score\
    \ += g;\n            foreach (long g in guess) {\n                diff += Math.Abs(g\
    \ - g);\n            }\n            result.Add(diff);\n            diff = 0;\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        game.ForEach(x => result.Add(x - guess[game.IndexOf(x)]));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long score\
    \ = 0;\n        long guess = 0;\n        long diff = 0;\n        bool correct\
    \ = false;\n        foreach (long g in game) {\n            score += g;\n    \
    \    }\n        foreach (long g in guess) {\n            guess += g;\n       \
    \ }\n        diff = score - guess;\n        if (diff < 0) {\n            diff\
    \ = -diff;\n        }\n        foreach (long g in guess) {\n            if (g\
    \ == diff) {\n                correct = true;\n            }\n            result.Add(g);\n\
    \        }\n        if (!correct) {\n            foreach (long g in game) {\n\
    \                if (g == diff) {\n                    correct = true;\n     \
    \           }\n                result.Add(g);\n            }\n        }\n    \
    \    return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score;\n        long guess;\n        long diff;\n        bool correct;\n\
    \        bool found;\n        bool found2;\n        bool found3;\n        bool\
    \ found4;\n        bool found5;\n        bool found6;\n        bool found7;\n\
    \        bool found8;\n        bool found9;\n        bool found10;\n        bool\
    \ found11;\n        bool found12;\n        bool found13;\n        bool found14;\n\
    \        bool found15;\n        bool found16;\n        bool found17;\n       \
    \ bool found18;\n        bool found19;\n        bool found20;\n        bool found21;\n\
    \        bool found22;\n        bool found23;\n        bool found24;\n       \
    \ bool found25;\n        bool found26;\n        bool found27;\n        bool found28;\n\
    \        bool found29;\n        bool found30;\n        bool found31;\n       \
    \ bool found32;\n        bool found33;\n        bool found34;\n        bool found35;\n\
    \        bool found36;\n        bool found37;\n        bool found38;\n       \
    \ bool found39;\n        bool found40;\n        bool found41;\n        bool found42;\n\
    \        bool found43;\n        bool found44;\n        bool found45;\n       \
    \ bool found46;\n        bool found47;\n        bool found48;\n        bool found49;\n\
    \        bool found50;\n        bool found51;\n        bool found52;\n       \
    \ bool found53;\n        bool found54;\n        bool found55;\n        bool found56;\n\
    \        bool found57;\n        bool found58;\n        bool found59;\n       \
    \ bool found60;\n        bool found61;\n        bool found62;\n        bool found63;\n\
    \        bool found64;\n        bool found65;\n        bool found66;\n       \
    \ bool found67;\n        bool found68;\n        bool found69;\n        bool found70;\n\
    \        bool found71;\n        bool found72;\n        bool found73;\n       \
    \ bool found74;\n        bool found75;\n        bool found76;\n        bool found77;\n\
    \        bool found78;\n        bool found79;\n        bool found80;\n       \
    \ bool found81;\n        bool found82;\n        bool found83;\n        ", "  \
    \      var result = new List<long>();\n        foreach (var item in game) {\n\
    \            var diff = item - guess[game.IndexOf(item)]; // the absolute difference\
    \ between the score and the guess\n            result.Add(diff);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long score = 0;\n        long guess = 0;\n        long difference = 0;\n\
    \        bool correct = false;\n        foreach (var item in guess) {\n      \
    \      guess = item;\n            foreach (var item2 in game) {\n            \
    \    score = item2;\n                difference = Math.Abs(guess - score);\n \
    \               if (difference == 0) {\n                    correct = true;\n\
    \                }\n                result.Add(difference);\n            }\n \
    \       }\n        if (!correct) {\n            foreach (var item in guess) {\n\
    \                guess = item;\n                foreach (var item2 in game) {\n\
    \                    score = item2;\n                    difference = Math.Abs(guess\
    \ - score);\n                    if (difference != 0) {\n                    \
    \    result.Add(difference);\n                    }\n                }\n     \
    \       }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        var gameScores = new List<long>(game.Count);\n        var guesses = new\
    \ List<long>(guess.Count);\n        var gameScore = 0;\n        var guess = 0;\n\
    \        var gameScoreIndex = 0;\n        var guesseIndex = 0;\n        while\
    \ (gameScoreIndex < game.Count && guesseIndex < guess.Count) {\n            gameScore\
    \ = game[gameScoreIndex];\n            guess = guess[guesseIndex];\n         \
    \   if (gameScore == guess) {\n                gameScores.Add(gameScore);\n  \
    \              guesses.Add(guess);\n                gameScoreIndex++;\n      \
    \          guesseIndex++;\n            } else if (gameScore < guess) {\n     \
    \           gameScores.Add(gameScore);\n                gameScoreIndex++;\n  \
    \          } else {\n                guesses.Add(guess);\n                guesseIndex++;\n\
    \            }\n        }\n        if (gameScoreIndex < game.Count) {\n      \
    \      gameScores.AddRange(game.Skip(gameScoreIndex).Take(game.Count - gameScoreIndex));\n\
    \        }\n        if (guesseIndex < guess.Count) {\n            guesses.AddRange(guess.Skip(guesseIndex).Take(guess.Count\
    \ - guesseIndex));\n        }\n        foreach (var gameScore in gameScores) {\n\
    \            result.Add(gameScore - guess);\n        }\n        foreach (var guess\
    \ in guesses) {\n            result.Add(guess - gameScore);\n        }\n     \
    \   return result;", "        // TODO: Implement this function\n        List<long>\
    \ result = new List<long>();\n        long score = 0;\n        long difference\
    \ = 0;\n        foreach (long g in game) {\n            foreach (long g in guess)\
    \ {\n                difference = Math.Abs(g - g);\n                if (difference\
    \ == 0) {\n                    score = 0;\n                } else {\n        \
    \            score = difference;\n                }\n            }\n         \
    \   result.Add(score);\n        }\n        return result;", "        var result\
    \ = new List<long>();\n        var scores = new List<long>(game.Count);\n    \
    \    var guesses = new List<long>(guess.Count);\n        var score = 0;\n    \
    \    var guess = 0;\n        var maxScore = game.Max();\n        var maxGuess\
    \ = guess.Max();\n        var maxScoreIndex = scores.FindIndex(x => x == maxScore);\n\
    \        var maxGuesses = guesses.FindIndex(x => x == maxGuess);\n        var\
    \ maxScoreIndex = scores.FindIndex(x => x == maxScore);\n        var maxGuesses\
    \ = guesses.FindIndex(x => x == maxGuess);\n        var maxScoreIndex = scores.FindIndex(x\
    \ => x == maxScore);\n        var maxGuesses = guesses.FindIndex(x => x == maxGuess);\n\
    \        var maxScoreIndex = scores.FindIndex(x => x == maxScore);\n        var\
    \ maxGuesses = guesses.FindIndex(x => x == maxGuess);\n        var maxScoreIndex\
    \ = scores.FindIndex(x => x == maxScore);\n        var maxGuesses = guesses.FindIndex(x\
    \ => x == maxGuess);\n        var maxScoreIndex = scores.FindIndex(x => x == maxScore);\n\
    \        var maxGuesses = guesses.FindIndex(x => x == maxGuess);\n        var\
    \ maxScoreIndex = scores.FindIndex(x => x == maxScore);\n        var maxGuesses\
    \ = guesses.FindIndex(x => x == maxGuess);\n        var maxScoreIndex = scores.FindIndex(x\
    \ => x == maxScore);\n        var maxGuesses = guesses.FindIndex(x => x == maxGuess);\n\
    \        var maxScoreIndex = scores.FindIndex(x => x == maxScore);\n        var\
    \ maxGuesses = guesses.FindIndex(x => x == maxGuess);\n        var maxScoreIndex\
    \ = scores.FindIndex(x => x == maxScore);\n        var maxGuesses = guesses.FindIndex(x\
    \ => x == maxGuess);\n        var maxScoreIndex = scores.FindIndex(x => x == maxScore);\n\
    \        var maxGuesses = guesses.FindIndex(x => x == maxGuess);\n        var\
    \ maxScoreIndex = scores.FindIndex(x => x == maxScore);\n        var maxGuesses\
    \ = guesses.FindIndex(x => x == maxGuess);\n        var maxScoreIndex = scores.FindIndex(x\
    \ => x == maxScore);\n        var maxGuesses = guesses.FindIndex(x => x == maxGuess);\n\
    \        var maxScoreIndex = scores.FindIndex(x => x == maxScore);\n        var\
    \ maxGuesses = guesses.FindIndex(x => x == ", "        List<long> result = new\
    \ List<long>(game.Count);\n        long score = 0;\n        long guess = 0;\n\
    \        foreach (long g in game) {\n            score += g;\n        }\n    \
    \    foreach (long g in guess) {\n            guess += g;\n        }\n       \
    \ if (score == guess) {\n            foreach (long g in guess) {\n           \
    \     result.Add(g);\n            }\n        }\n        else {\n            foreach\
    \ (long g in guess) {\n                result.Add(Math.Abs(g - score));\n    \
    \        }\n        }\n        return result;", "        // Your code goes here\n\
    \        List<long> result = new List<long>();\n        long score = 0;\n    \
    \    long difference = 0;\n        foreach (var item in game) {\n            score\
    \ = item;\n            foreach (var item2 in guess) {\n                difference\
    \ = Math.Abs(item - item2);\n                if (difference == 0) {\n        \
    \            result.Add(0);\n                }\n                else {\n     \
    \               result.Add(difference);\n                }\n            }\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long score = 0;\n        long difference = 0;\n        foreach (long\
    \ guess in guess) {\n            score = game.ElementAtOrDefault(guess);\n   \
    \         if (score == 0) {\n                difference = guess - score;\n   \
    \         } else {\n                difference = guess - score;\n            }\n\
    \            result.Add(difference);\n        }\n        return result;", "  \
    \      List<long> result = new List<long>(game.Count);\n        long score = 0;\n\
    \        long diff = 0;\n        foreach (var g in guess) {\n            score\
    \ += g;\n            diff = g - score;\n        }\n        foreach (var g in game)\
    \ {\n            score -= g;\n            diff += g - score;\n        }\n    \
    \    foreach (var g in guess) {\n            result.Add(Math.Abs(g - diff));\n\
    \        }\n        return result;", "        List<long> result = new List<long>(game.Count);\n\
    \        long score = 0;\n        long diff = 0;\n        foreach (long g in game)\
    \ {\n            score += g;\n            foreach (long g in guess) {\n      \
    \          diff += g - score;\n            }\n            result.Add(diff);\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var g in game) {\n            var gDiff = Math.Abs(g - guess.FirstOrDefault());\n\
    \            result.Add(gDiff);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long score;\n        long guess;\n\
    \        long diff;\n        bool correct = false;\n        bool correctGuess\
    \ = false;\n        bool correctScore = false;\n        bool correctGuesses =\
    \ false;\n        bool correctScores = false;\n        bool correctGuessess =\
    \ false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool correctGuessess\
    \ = false;\n        bool correctGuessess = false;\n        bool ", "        List<long>\
    \ result = new List<long>(game.Count);\n        long score = 0;\n        long\
    \ guess = 0;\n        long diff = 0;\n        foreach (long g in game) {\n   \
    \         score += g;\n        }\n        foreach (long g in guess) {\n      \
    \      guess += g;\n        }\n        diff = score - guess;\n        if (diff\
    \ < 0) {\n            foreach (long g in game) {\n                result += g;\n\
    \            }\n        } else {\n            foreach (long g in guess) {\n  \
    \              result += g;\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
