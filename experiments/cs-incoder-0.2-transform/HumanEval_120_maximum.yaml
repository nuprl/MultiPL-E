name: HumanEval_120_maximum
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
  \ Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
  \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n\
  \    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,\
  \ (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
  \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
  \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
  \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the array will be in\
  \ the range of [1, 1000].\n    // 2. The elements in the array will be in the range\
  \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
  \ Maximum(List<long> arr, long k) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
  \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
  \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
  \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
  \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
  \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
  \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
  \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
  \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
  \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
  \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
  \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
  \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
  \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
  \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
  \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
  \    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long max = 0;\n\
    \        long maxIndex = 0;\n        long maxValue = arr[0];\n        long maxValueIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > maxValue) {\n                maxValue = arr[i];\n                maxIndex\
    \ = i;\n            }\n        }\n        long currentValue = maxValue;\n    \
    \    long currentIndex = maxIndex;\n        while (currentIndex < arr.Count -\
    \ 1) {\n            currentValue = arr[currentIndex + 1];\n            if (currentValue\
    \ > maxValue) {\n                maxValue = currentValue;\n                maxIndex\
    \ = currentIndex + 1;\n            }\n            currentIndex++;\n        }\n\
    \        result.Add(maxValue);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long min = arr.Min();\n\
    \        long mid = 0;\n        long midMax = 0;\n        long midMin = 0;\n \
    \       long midMid = 0;\n        long midMidMax = 0;\n        long midMidMin\
    \ = 0;\n        long midMidMid = 0;\n        long midMidMidMax = 0;\n        long\
    \ midMidMidMin = 0;\n        long midMidMidMid = 0;\n        long midMidMidMidMax\
    \ = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n\
    \        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n      \
    \  long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long\
    \ midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax\
    \ = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n\
    \        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n      \
    \  long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long\
    \ midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax\
    \ = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n\
    \        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n      \
    \  long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long\
    \ midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax\
    \ = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n\
    \        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n      \
    \  long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long\
    \ midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax\
    \ = 0;\n        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n\
    \        long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n      \
    \  long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long\
    \ midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax\
    \ = 0;\n        long midMidMidMidMin = 0;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long temp = 0;\n        long sum = 0;\n      \
    \  foreach (long i in arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n        }\n        temp = k -\
    \ max;\n        if (temp < 0) {\n            temp = temp * -1;\n        }\n  \
    \      temp = temp / arr.Count;\n        foreach (long i in arr) {\n         \
    \   sum += i;\n            if (sum > max) {\n                max = sum;\n    \
    \        }\n        }\n        temp = k - max;\n        if (temp < 0) {\n    \
    \        temp = temp * -1;\n        }\n        temp = temp / arr.Count;\n    \
    \    foreach (long i in arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n        }\n        temp = k -\
    \ max;\n        if (temp < 0) {\n            temp = temp * -1;\n        }\n  \
    \      temp = temp / arr.Count;\n        foreach (long i in arr) {\n         \
    \   sum += i;\n            if (sum > max) {\n                max = sum;\n    \
    \        }\n        }\n        temp = k - max;\n        if (temp < 0) {\n    \
    \        temp = temp * -1;\n        }\n        temp = temp / arr.Count;\n    \
    \    foreach (long i in arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n        }\n        temp = k -\
    \ max;\n        if (temp < 0) {\n            temp = temp * -1;\n        }\n  \
    \      temp = temp / arr.Count;\n        foreach (long i in arr) {\n         \
    \   sum += i;\n            if (sum > max) {\n                max = sum;\n    \
    \        }\n        }\n        temp = k - max;\n        if (temp < 0) {\n    \
    \        temp = temp * -1;\n        }\n        temp = temp / arr.Count;\n    \
    \    foreach (long i in arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n        }\n        temp = k -\
    \ max;\n        if (temp < 0) {\n            temp = temp * -1;\n        }\n  \
    \      temp = temp / arr.Count;\n        foreach (long i in arr) {\n         \
    \   sum += i;\n            if (sum > max) {\n                max = sum;\n    \
    \        }\n        }\n        temp = k - max;\n        if (temp < 0) {\n    \
    \        temp = temp * -1;\n        }\n        temp = temp / arr.Count;\n    \
    \    foreach (long i in arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n        }\n        temp = k -\
    \ max;\n        if (temp < 0) {\n            temp = temp * -1;\n        }\n  \
    \      temp = temp / arr.Count;\n        foreach (long i in arr) {\n         \
    \   sum += i;", "        long max = arr[0];\n        List<long> result = new List<long>();\n\
    \        for (int i = 1; i < arr.Count; i++) {\n            if (arr[i] > max)\
    \ {\n                max = arr[i];\n            }\n        }\n        if (k ==\
    \ max) {\n            return arr;\n        }\n        List<long> maxList = new\
    \ List<long>();\n        List<long> minList = new List<long>();\n        long\
    \ minValue = max;\n        long maxValue = max;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] > maxValue) {\n                maxValue = arr[i];\n\
    \            }\n            if (arr[i] < minValue) {\n                minValue\
    \ = arr[i];\n            }\n        }\n        long midValue = maxValue + minValue\
    \ / 2;\n        long mid = midValue / 2;\n        long maxMidValue = mid;\n  \
    \      long minMidValue = mid;\n        long maxMid = maxValue + minValue / 2;\n\
    \        long minMid = minValue + maxValue / 2;\n        long maxMidValue = maxMid;\n\
    \        long minMidValue = minMid;\n        long maxMid = maxValue + minValue\
    \ / 2;\n        long minMid = minValue + maxValue / 2;\n        long maxMidValue\
    \ = maxMid;\n        long minMidValue = minMid;\n        long maxMid = maxValue\
    \ + minValue / 2;\n        long minMid = minValue + maxValue / 2;\n        long\
    \ maxMidValue = maxMid;\n        long minMidValue = minMid;\n        long maxMid\
    \ = maxValue + minValue / 2;\n        long minMid = minValue + maxValue / 2;\n\
    \        long maxMidValue = maxMid;\n        long minMidValue = minMid;\n    \
    \    long maxMid = maxValue + minValue / 2;\n        long minMid = minValue +\
    \ maxValue / 2;\n        long maxMidValue = maxMid;\n        long minMidValue\
    \ = minMid;\n        long maxMid = maxValue + minValue / 2;\n        long minMid\
    \ = minValue + maxValue / 2;\n        long maxMidValue = maxMid;\n        long\
    \ minMidValue = minMid;\n        long maxMid = maxValue + minValue / 2;\n    \
    \    long minMid = minValue + maxValue / 2;\n        long maxMidValue = maxMid;\n\
    \        long minMidValue = minMid;\n        long maxMid = maxValue + minValue\
    \ / 2;\n        long minMid = minValue + maxValue / 2;\n        long maxMidValue\
    \ = maxMid;\n        long minMid", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n            }\n   \
    \         if (min > i) {\n                min = i;\n            }\n        }\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   ", "        long max = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (max < i) {\n             \
    \   max = i;\n            }\n        }\n        long len = arr.Count;\n      \
    \  if (k > len) {\n            k = len;\n        }\n        long mid = len / 2;\n\
    \        long midMax = arr[mid];\n        long midMaxIndex = 0;\n        long\
    \ midMaxIndex2 = 0;\n        long midMaxIndex3 = 0;\n        long midMaxIndex4\
    \ = 0;\n        long midMaxIndex5 = 0;\n        long midMaxIndex6 = 0;\n     \
    \   long midMaxIndex7 = 0;\n        long midMaxIndex8 = 0;\n        long midMaxIndex9\
    \ = 0;\n        long midMaxIndex10 = 0;\n        long midMaxIndex11 = 0;\n   \
    \     long midMaxIndex12 = 0;\n        long midMaxIndex13 = 0;\n        long midMaxIndex14\
    \ = 0;\n        long midMaxIndex15 = 0;\n        long midMaxIndex16 = 0;\n   \
    \     long midMaxIndex17 = 0;\n        long midMaxIndex18 = 0;\n        long midMaxIndex19\
    \ = 0;\n        long midMaxIndex20 = 0;\n        long midMaxIndex21 = 0;\n   \
    \     long midMaxIndex22 = 0;\n        long midMaxIndex23 = 0;\n        long midMaxIndex24\
    \ = 0;\n        long midMaxIndex25 = 0;\n        long midMaxIndex26 = 0;\n   \
    \     long midMaxIndex27 = 0;\n        long midMaxIndex28 = 0;\n        long midMaxIndex29\
    \ = 0;\n        long midMaxIndex30 = 0;\n        long midMaxIndex31 = 0;\n   \
    \     long midMaxIndex32 = 0;\n        long midMaxIndex33 = 0;\n        long midMaxIndex34\
    \ = 0;\n        long midMaxIndex35 = 0;\n        long midMaxIndex36 = 0;\n   \
    \     long midMaxIndex37 = 0;\n        long midMaxIndex38 = 0;\n        long midMaxIndex39\
    \ = 0;\n        long midMaxIndex40 = 0;\n        long midMaxIndex41 = 0;\n   \
    \     long midMaxIndex42 = 0;\n        long midMaxIndex43 = 0;\n        long midMaxIndex44\
    \ = 0;\n        long midMaxIndex45 = 0;\n        long midMaxIndex46 = 0;\n   \
    \     long midMaxIndex47 = 0;\n        long midMaxIndex48 = 0;\n        long midMaxIndex49\
    \ = 0;\n        long midMaxIndex50 = 0;\n        long midMaxIndex51 = 0;\n   \
    \     long midMaxIndex52 = 0;\n        long midMaxIndex53 = 0;\n        long midMaxIndex54\
    \ = 0;\n        long midMaxIndex55 = 0;\n        long midMaxIndex56", "      \
    \  List<long> result = new List<long>();\n        long max = 0;\n        long\
    \ min = 1000;\n        foreach (long i in arr) {\n            if (max < i) {\n\
    \                max = i;\n            }\n            if (min > i) {\n       \
    \         min = i;\n            }\n        }\n        long mid = min + (max -\
    \ min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n   \
    \     long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6\
    \ = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n\
    \        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11\
    \ = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 /\
    \ 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n     \
    \   long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18\
    \ = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 /\
    \ 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n     \
    \   long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25\
    \ = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 /\
    \ 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n     \
    \   long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32\
    \ = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 /\
    \ 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n     \
    \   long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39\
    \ = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 /\
    \ 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n     \
    \   long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46\
    \ = mid45 / 2;\n        long mid47 = mid46 / 2;\n", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long i in arr) {\n            if (max < i) {\n                max = i;\n  \
    \              cur = i;\n            }\n            if (cur > k) {\n         \
    \       result.Add(max);\n                max = cur;\n                cur = i;\n\
    \            }\n        }\n        result.Add(max);\n        return result;",
  "        List<long> result = new List<long>();\n        long max = arr.Max();\n\
    \        long min = arr.Min();\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49\
    \ = mid48 / 2;\n        long mid50 = mid49 / ", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long cur = 0;\n        long max2\
    \ = 0;\n        long cur2 = 0;\n        long max3 = 0;\n        long cur3 = 0;\n\
    \        long max4 = 0;\n        long cur4 = 0;\n        long max5 = 0;\n    \
    \    long cur5 = 0;\n        long max6 = 0;\n        long cur6 = 0;\n        long\
    \ max7 = 0;\n        long cur7 = 0;\n        long max8 = 0;\n        long cur8\
    \ = 0;\n        long max9 = 0;\n        long cur9 = 0;\n        long max10 = 0;\n\
    \        long cur10 = 0;\n        long max11 = 0;\n        long cur11 = 0;\n \
    \       long max12 = 0;\n        long cur12 = 0;\n        long max13 = 0;\n  \
    \      long cur13 = 0;\n        long max14 = 0;\n        long cur14 = 0;\n   \
    \     long max15 = 0;\n        long cur15 = 0;\n        long max16 = 0;\n    \
    \    long cur16 = 0;\n        long max17 = 0;\n        long cur17 = 0;\n     \
    \   long max18 = 0;\n        long cur18 = 0;\n        long max19 = 0;\n      \
    \  long cur19 = 0;\n        long max20 = 0;\n        long cur20 = 0;\n       \
    \ long max21 = 0;\n        long cur21 = 0;\n        long max22 = 0;\n        long\
    \ cur22 = 0;\n        long max23 = 0;\n        long cur23 = 0;\n        long max24\
    \ = 0;\n        long cur24 = 0;\n        long max25 = 0;\n        long cur25 =\
    \ 0;\n        long max26 = 0;\n        long cur26 = 0;\n        long max27 = 0;\n\
    \        long cur27 = 0;\n        long max28 = 0;\n        long cur28 = 0;\n \
    \       long max29 = 0;\n        long cur29 = 0;\n        long max30 = 0;\n  \
    \      long cur30 = 0;\n        long max31 = 0;\n        long cur31 = 0;\n   \
    \     long max32 = 0;\n        long cur32 = 0;\n        long max33 = 0;\n    \
    \    long cur33 = 0;\n        long max34 = 0;\n        long cur34 = 0;\n     \
    \   long max35 = 0;\n        long cur35 = 0;\n        long max36 = 0;\n      \
    \  long cur36 = 0;\n        long max37 = 0;\n        long cur37 = 0;\n       \
    \ long max38 = 0;\n        long cur38 = 0;\n        long max39 = 0;\n        long\
    \ cur39 = 0;\n        long max40 = 0;\n        long cur40 = 0;\n        long max41\
    \ = 0;\n        long cur41 = 0;\n        long max42 = 0;\n        long cur42 =\
    \ 0;\n        long max43 = 0;\n        long ", "        List<long> result = new\
    \ List<long>();\n        Array.Sort(arr);\n        long max = 0;\n        long\
    \ maxIndex = 0;\n        long maxValue = arr[0];\n        long maxValueIndex =\
    \ -1;\n        foreach (long i in arr) {\n            if (i == maxValue) {\n \
    \               maxValueIndex = arr.IndexOf(i);\n            }\n            if\
    \ (i > maxValue) {\n                max = i;\n                maxValue = maxValue;\n\
    \                maxValueIndex = maxValueIndex;\n            }\n        }\n  \
    \      if (maxValueIndex == -1) {\n            result.Add(maxValue);\n       \
    \ } else {\n            result.Add(arr[maxValueIndex]);\n        }\n        for\
    \ (int i = 1; i < k; i++) {\n            long maxValueIndex = -1;\n          \
    \  long maxValue = arr[0];\n            long maxIndex = 0;\n            foreach\
    \ (long i in arr) {\n                if (i == maxValue) {\n                  \
    \  maxValueIndex = arr.IndexOf(i);\n                }\n                if (i >\
    \ maxValue) {\n                    max = i;\n                    maxValue = maxValue;\n\
    \                    maxValueIndex = maxValueIndex;\n                }\n     \
    \       }\n            if (maxValueIndex == -1) {\n                result.Add(maxValue);\n\
    \            } else {\n                result.Add(arr[maxValueIndex]);\n     \
    \       }\n        }\n        return result;", "        if (arr.Count <= k) {\n\
    \            return arr;\n        }\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > maxValue)\
    \ {\n                maxValue = arr[i];\n                maxIndex = i;\n     \
    \       }\n        }\n        max = maxValue;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] == max) {\n                res.Add(max);\n  \
    \              maxIndex++;\n            }\n        }\n        if (maxIndex < k)\
    \ {\n            List<long> newArr = new List<long>();\n            for (int i\
    \ = 0; i < k - maxIndex; i++) {\n                newArr.Add(0);\n            }\n\
    \            newArr.AddRange(arr.Skip(maxIndex));\n            res = Maximum(newArr,\
    \ k);\n        }\n        return res;", "        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        long\
    \ start = 0;\n        long end = arr.Count - 1;\n        while (start <= end)\
    \ {\n            long mid = (start + end) / 2;\n            if (arr[mid] > max)\
    \ {\n                end = mid - 1;\n            } else {\n                start\
    \ = mid + 1;\n            }\n        }\n        long mid = start;\n        while\
    \ (arr[mid] < k) {\n            mid += 1;\n        }\n        result.AddRange(arr.GetRange(mid,\
    \ arr.Count - mid));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long maxIndex = 0;\n        long\
    \ maxValue = arr[0];\n        long maxValueIndex = 0;\n        foreach (long i\
    \ in arr) {\n            if (i > maxValue) {\n                maxValue = i;\n\
    \                maxValueIndex = i;\n            }\n            if (i == maxValue)\
    \ {\n                maxIndex++;\n            }\n        }\n        long temp\
    \ = 0;\n        long tempIndex = 0;\n        long tempValue = arr[0];\n      \
    \  long tempValueIndex = 0;\n        long tempMax = 0;\n        long tempMaxIndex\
    \ = 0;\n        foreach (long i in arr) {\n            if (i > tempMax) {\n  \
    \              tempMax = i;\n                tempMaxIndex = i;\n            }\n\
    \            if (i == tempMax) {\n                tempIndex++;\n            }\n\
    \        }\n        long tempMaxValue = arr[0];\n        long tempMaxValueIndex\
    \ = 0;\n        long tempMaxIndex = arr[0];\n        long tempMaxValue = arr[0];\n\
    \        long tempMaxValueIndex = 0;\n        foreach (long i in arr) {\n    \
    \        if (i > tempMaxValue) {\n                tempMaxValue = i;\n        \
    \        tempMaxValueIndex = i;\n            }\n            if (i == tempMaxValue)\
    \ {\n                tempMaxIndex++;\n            }\n        }\n        long tempMaxValue2\
    \ = arr[0];\n        long tempMaxValueIndex2 = 0;\n        long tempMaxIndex2\
    \ = arr[0];\n        long tempMaxValue2 = arr[0];\n        long tempMaxValueIndex2\
    \ = 0;\n        foreach (long i in arr) {\n            if (i > tempMaxValue2)\
    \ {\n                tempMaxValue2 = i;\n                tempMaxValueIndex2 =\
    \ i;\n            }\n            if (i == tempMaxValue2) {\n                tempMaxIndex2++;\n\
    \            }\n        }\n        long tempMaxValue3 = arr[0];\n        long\
    \ tempMaxValueIndex3 = 0;\n        long tempMaxIndex3 = arr[0];\n        long\
    \ tempMaxValue3 = arr[0];\n        long tempMaxValueIndex3 = 0;\n        foreach\
    \ (long i in arr) {\n            if (i > tempMaxValue3) {\n                tempMaxValue3\
    \ = i;\n                tempMaxValueIndex3 = i;\n            }\n            if\
    \ (i == tempMaxValue3) {\n                tempMaxIndex3++;\n            }\n  \
    \      }\n        long tempMaxValue4 = arr[0];\n        long tempMaxValueIndex4\
    \ = 0;\n        long tempMaxIndex4 = arr[0];\n        long tempMaxValue4 = arr[0];\n\
    \        long tempMaxValueIndex4 = 0;\n        foreach (long i in arr) {\n   \
    \         if (i > tempMaxValue4) {\n                tempMaxValue4 = i;\n     \
    \           tempMaxValueIndex4 = i;\n            }\n            if (i == tempMaxValue4)\
    \ {\n                tempMaxIndex4++;\n", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        long maxIndexValue = arr[0];\n        long minIndexValue\
    \ = arr[0];\n        bool flag = false;\n        foreach (long i in arr) {\n \
    \           if (flag) {\n                if (i > maxValue) {\n               \
    \     maxValue = i;\n                    maxIndex = i;\n                    maxIndexValue\
    \ = i;\n                }\n                if (i < minValue) {\n             \
    \       minValue = i;\n                    minIndex = i;\n                   \
    \ minIndexValue = i;\n                }\n                if (maxIndexValue < minIndexValue)\
    \ {\n                    maxIndexValue = minIndexValue;\n                    maxIndex\
    \ = minIndex;\n                    maxValue = minValue;\n                }\n \
    \               if (minIndexValue > maxIndexValue) {\n                    minIndexValue\
    \ = maxIndexValue;\n                    minIndex = maxIndex;\n               \
    \     minValue = maxValue;\n                }\n                if (maxIndexValue\
    \ > minIndexValue) {\n                    maxIndexValue = minIndexValue;\n   \
    \                 maxIndex = minIndex;\n                    maxValue = minValue;\n\
    \                }\n                if (minIndexValue < maxIndexValue) {\n   \
    \                 minIndexValue = maxIndexValue;\n                    minIndex\
    \ = maxIndex;\n                    minValue = maxValue;\n                }\n \
    \           }\n            if (i == k) {\n                flag = true;\n     \
    \           result.Add(maxValue);\n                result.Add(maxIndex);\n   \
    \             result.Add(maxIndexValue);\n                result.Add(minValue);\n\
    \                result.Add(minIndex);\n                result.Add(minIndexValue);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        long min = 0;\n        long\
    \ sum = 0;\n        long count = 0;\n        long sum2 = 0;\n        long sum3\
    \ = 0;\n        long sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n\
    \        long sum7 = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n    \
    \    long sum10 = 0;\n        long sum11 = 0;\n        long sum12 = 0;\n     \
    \   long sum13 = 0;\n        long sum14 = 0;\n        long sum15 = 0;\n      \
    \  long sum16 = 0;\n        long sum17 = 0;\n        long sum18 = 0;\n       \
    \ long sum19 = 0;\n        long sum20 = 0;\n        long sum21 = 0;\n        long\
    \ sum22 = 0;\n        long sum23 = 0;\n        long sum24 = 0;\n        long sum25\
    \ = 0;\n        long sum26 = 0;\n        long sum27 = 0;\n        long sum28 =\
    \ 0;\n        long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n\
    \        long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n \
    \       long sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n  \
    \      long sum38 = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n   \
    \     long sum41 = 0;\n        long sum42 = 0;\n        long sum43 = 0;\n    \
    \    long sum44 = 0;\n        long sum45 = 0;\n        long sum46 = 0;\n     \
    \   long sum47 = 0;\n        long sum48 = 0;\n        long sum49 = 0;\n      \
    \  long sum50 = 0;\n        long sum51 = 0;\n        long sum52 = 0;\n       \
    \ long sum53 = 0;\n        long sum54 = 0;\n        long sum55 = 0;\n        long\
    \ sum56 = 0;\n        long sum57 = 0;\n        long sum58 = 0;\n        long sum59\
    \ = 0;\n        long sum60 = 0;\n        long sum61 = 0;\n        long sum62 =\
    \ 0;\n        long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n\
    \        long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n \
    \       long sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n  \
    \      long sum72 = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n   \
    \     long sum75 = 0;\n        long sum76 = 0;\n        long sum77 = 0;\n    \
    \    long sum78 = 0;\n        long sum79 = 0;\n        long sum80 = 0;\n     \
    \   long sum81 = 0;\n        long sum82 = 0;\n        ", "        if (k > arr.Count)\
    \ return new List<long>();\n        if (k == 0) return arr;\n        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long maxIndex = -1;\n\
    \        long maxValue = arr[0];\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] > maxValue) {\n                maxValue = arr[i];\n\
    \                maxIndex = i;\n            }\n        }\n        if (maxValue\
    \ > k) {\n            max = maxValue;\n            maxIndex = maxIndex;\n    \
    \    }\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == maxValue) {\n                result.Add(arr[i]);\n            }\n       \
    \ }\n        if (result.Count > k) {\n            List<long> newResult = new List<long>();\n\
    \            for (int i = 0; i < result.Count - k + 1; i++) {\n              \
    \  newResult.Add(result[i]);\n            }\n            return newResult;\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long temp = 0;\n        long temp2 = 0;\n    \
    \    long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n     \
    \   long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n      \
    \  long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n     \
    \   long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n   \
    \     long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n \
    \       long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n\
    \        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n\
    \        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n\
    \        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n\
    \        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n\
    \        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n\
    \        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n\
    \        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n\
    \        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n\
    \        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n\
    \        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n\
    \        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n\
    \        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n\
    \        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n\
    \        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n\
    \        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n\
    \        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n\
    \        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n\
    \        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n\
    \        long temp75 = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n\
    \        long temp78 = 0;\n        long temp79 = 0;\n        long temp80 = 0;\n\
    \        long temp81 = 0;\n        long temp82 = 0;\n        long temp83 = 0;\n\
    \        long temp84", "        if (k > arr.Count) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        long max = 0;\n        long\
    \ cur = 0;\n        foreach (long i in arr) {\n            if (i > cur) {\n  \
    \              max = i;\n                cur = i;\n            }\n           \
    \ if (i == cur) {\n                cur++;\n            }\n            if (cur\
    \ > k) {\n                res.Add(max);\n                cur = max;\n        \
    \        max = 0;\n            }\n        }\n        if (max > 0) res.Add(max);\n\
    \        return res;", "        List<long> res = new List<long>();\n        long\
    \ max = 0;\n        long min = 0;\n        long sum = 0;\n        long count =\
    \ 0;\n        foreach (long i in arr) {\n            sum += i;\n            if\
    \ (sum > max) {\n                max = sum;\n            }\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n            if (sum ==\
    \ max) {\n                res.Add(max);\n                count++;\n          \
    \  }\n        }\n        if (count > k) {\n            k = count;\n        }\n\
    \        if (k == 0) {\n            return res;\n        }\n        long mid =\
    \ max / 2;\n        long mid2 = min / 2;\n        long mid3 = sum / 2;\n     \
    \   List<long> left = new List<long>();\n        List<long> right = new List<long>();\n\
    \        List<long> left2 = new List<long>();\n        List<long> right2 = new\
    \ List<long>();\n        List<long> left3 = new List<long>();\n        List<long>\
    \ right3 = new List<long>();\n        List<long> left4 = new List<long>();\n \
    \       List<long> right4 = new List<long>();\n        List<long> left5 = new\
    \ List<long>();\n        List<long> right5 = new List<long>();\n        List<long>\
    \ left6 = new List<long>();\n        List<long> right6 = new List<long>();\n \
    \       List<long> left7 = new List<long>();\n        List<long> right7 = new\
    \ List<long>();\n        List<long> left8 = new List<long>();\n        List<long>\
    \ right8 = new List<long>();\n        List<long> left9 = new List<long>();\n \
    \       List<long> right9 = new List<long>();\n        List<long> left10 = new\
    \ List<long>();\n        List<long> right10 = new List<long>();\n        List<long>\
    \ left11 = new List<long>();\n        List<long> right11 = new List<long>();\n\
    \        List<long> left12 = new List<long>();\n        List<long> right12 = new\
    \ List<long>();\n        List<long> left13 = new List<long>();\n        List<long>\
    \ right13 = new List<long>();\n        List<long> left14 = new List<long>();\n\
    \        List<long> right14 = new List<long>();\n        List<long> left15 = new\
    \ List<long>();\n        List<long> right15 = new List<long>();\n        List<long>\
    \ left16 = new List<long>();\n        List<long> right16 = new List<long>();\n\
    \        List<long> left17 = new List<long>();\n        List<long> right17 = new\
    \ List<long>();\n        List<long> left18 = new List<long"]
stop_tokens:
- "\n    }\n"
