name: HumanEval_100_make_a_pile
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer n, you have to make a pile of n levels\
  \ of stones.\n    // The first level has n stones.\n    // The number of stones\
  \ in the next level is:\n    // - the next odd number if n is odd.\n    // - the\
  \ next even number if n is even.\n    // Return the number of stones in each level\
  \ in a list, where element at index\n    // i represents the number of stones in\
  \ the level (i+1).\n    // Examples:\n    // >>> MakeAPile((3L))\n    // (new List<long>(new\
  \ long[]{(long)3L, (long)5L, (long)7L}))\n    public static List<long> MakeAPile(long\
  \ n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MakeAPile((3L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)5L, (long)7L}))));\n    Debug.Assert(MakeAPile((4L)).Equals((new\
  \ List<long>(new long[]{(long)4L, (long)6L, (long)8L, (long)10L}))));\n    Debug.Assert(MakeAPile((5L)).Equals((new\
  \ List<long>(new long[]{(long)5L, (long)7L, (long)9L, (long)11L, (long)13L}))));\n\
  \    Debug.Assert(MakeAPile((6L)).Equals((new List<long>(new long[]{(long)6L, (long)8L,\
  \ (long)10L, (long)12L, (long)14L, (long)16L}))));\n    Debug.Assert(MakeAPile((8L)).Equals((new\
  \ List<long>(new long[]{(long)8L, (long)10L, (long)12L, (long)14L, (long)16L, (long)18L,\
  \ (long)20L, (long)22L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long nextOdd\
    \ = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n        long\
    \ nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = n / 2;\n\
    \        long nextEven = n % 2;\n        if (nextOdd > 0)\n            result.Add(nextOdd);\n\
    \        if (nextEven > 0)\n            result.Add(nextEven);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n        long\
    \ nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = n % 2 ==\
    \ 1 ? n : n + 1;\n        long nextEven = n % 2 == 0 ? n : n + 1;\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = n / 2;\n        long nextEven =\
    \ n % 2 == 0 ? n : n + 1;\n        if (n != 0) {\n            result.Add(nextOdd);\n\
    \            result.Add(nextEven);\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long nextOdd = 0;\n      \
    \  long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        if (n == 0)\n         \
    \   return result;\n        if (n % 2 == 0) {\n            result.Add(n);\n  \
    \          return result;\n        }\n        long nextEven = n / 2;\n       \
    \ long nextOdd = nextEven + 1;\n        result.Add(nextEven);\n        result.Add(nextOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = (n + 1) / 2;\n        long nextEven = (n + 1) - (nextOdd\
    \ * 2);\n        if (n % 2 == 0) {\n            result.Add(nextEven);\n      \
    \  } else {\n            result.Add(nextOdd);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long nextOdd = 0;\n    \
    \    long nextEven = 0;\n        long currentLevel = 1;\n        long nextLevel\
    \ = 1;\n        long nextLevelCount = 1;\n        long nextLevelCountEven = 1;\n\
    \        long nextLevelCountOdd = 1;\n        long nextLevelCountEvenOdd = 1;\n\
    \        long nextLevelCountEvenOddOdd = 1;\n        long nextLevelCountEvenOddEvenOdd\
    \ = 1;\n        long nextLevelCountEvenOddEvenOddOdd = 1;\n        long nextLevelCountEvenOddEvenOddEvenOdd\
    \ = 1;\n        long nextLevelCountEvenOddEvenOddEvenOddOdd = 1;\n        long\
    \ nextLevelCountEvenOddEvenOddEvenOddEvenOdd = 1;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddOdd\
    \ = 1;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOdd = 1;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 1;\n    \
    \    long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 1;\n    \
    \    long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 1;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 1;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 1;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 1;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 1;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 1;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven",
  "        List<long> result = new List<long>();\n        long nextOdd = n % 2 ==\
    \ 1 ? n : n + 1;\n        long nextEven = n % 2 == 0 ? n : n + 1;\n        long\
    \ nextOddEven = nextOdd + nextEven;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        result.Add(nextOddEven);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = (n + 1) / 2;\n        long\
    \ nextEven = (n + 1) % 2;\n        long nextLevel = nextOdd;\n        while (nextLevel\
    \ > 0) {\n            result.Add(nextLevel);\n            nextLevel = nextEven;\n\
    \            nextEven = (nextEven + 1) % 2;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long nextOdd = (n + 1) >>\
    \ 1;\n        long nextEven = (n + 1) >> 2;\n        if (n != 0) {\n         \
    \   result.Add(n);\n        }\n        if (n != 0) {\n            result.Add(nextOdd);\n\
    \        }\n        if (n != 0) {\n            result.Add(nextEven);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n % 2 == 0) {\n            long\
    \ nextEven = n / 2;\n            result.Add(nextEven);\n            return result;\n\
    \        }\n        long nextOdd = n - 1;\n        result.Add(nextOdd);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n\
    \        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n    \
    \    long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven =\
    \ 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = n / 2;\n\
    \        long nextEven = n % 2 == 0 ? n : n + 1;\n        if (nextOdd > 0)\n \
    \           result.Add(nextOdd);\n        if (nextEven > 0)\n            result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = n;\n        long nextEven = n;\n        while (nextEven >\
    \ 0 || nextOdd > 0) {\n            if (nextEven % 2 == 0) {\n                nextEven\
    \ = nextEven / 2;\n                result.Add(nextEven);\n            } else {\n\
    \                nextOdd = nextOdd / 2;\n                result.Add(nextOdd);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = n;\n        long nextEven = n;\n\
    \        while (nextEven > 0 || nextOdd > 0) {\n            long nextOddEven =\
    \ nextOdd % 2 == 0 ? nextOdd : nextOdd + 1;\n            long nextEvenOdd = nextEven\
    \ % 2 == 0 ? nextEven : nextEven + 1;\n            result.Add(nextOddEven);\n\
    \            result.Add(nextEvenOdd);\n            nextOdd = nextEven;\n     \
    \       nextEven = nextOddEven;\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long nextOdd = 0;\n        long\
    \ nextEven = 0;\n        long currentLevel = 1;\n        long currentStones =\
    \ n;\n        while (currentStones <= n) {\n            if (n % 2 == 0) {\n  \
    \              nextEven = nextEven + currentStones;\n            } else {\n  \
    \              nextOdd = nextOdd + currentStones;\n            }\n           \
    \ result.Add(nextOdd);\n            result.Add(nextEven);\n            currentStones\
    \ = currentStones << 1;\n            currentLevel++;\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\n\
    \            return result;\n        long nextOdd = (n % 2 == 0) ? n : n + 1;\n\
    \        long nextEven = (n % 2 == 0) ? n + 1 : n;\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = n;\n        long nextEven = n;\n\
    \        while (nextEven > nextOdd) {\n            result.Add(nextEven);\n   \
    \         nextEven = nextEven / 2;\n        }\n        result.Add(nextOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = 0;\n        long nextEven = 0;\n        long nextNextOdd\
    \ = 0;\n        long nextNextEven = 0;\n        long nextNextNextOdd = 0;\n  \
    \      long nextNextNextEven = 0;\n        long nextNextNextNextOdd = 0;\n   \
    \     long nextNextNextNextEven = 0;\n        long nextNextNextNextNextOdd = 0;\n\
    \        long nextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNext", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextEven = n;\n  \
    \      long nextOdd = n;\n        while (nextEven > 0 || nextOdd > 0) {\n    \
    \        if (nextEven % 2 == 0) {\n                nextEven = nextEven / 2;\n\
    \                result.Add(nextEven);\n            } else {\n               \
    \ nextOdd = nextOdd / 2;\n                result.Add(nextOdd);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextNextOdd\
    \ = 0;\n        long nextNextEven = 0;\n        long nextNextNextOdd = 0;\n  \
    \      long nextNextNextEven = 0;\n        long nextNextNextNextOdd = 0;\n   \
    \     long nextNextNextNextEven = 0;\n        long nextNextNextNextNextOdd = 0;\n\
    \        long nextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNext", "        List<long> result = new List<long>();\n\
    \        long nextOdd = n;\n        long nextEven = n;\n        while (nextEven\
    \ > 0 || nextOdd > 0) {\n            if (nextEven % 2 == 0) {\n              \
    \  nextEven = nextEven / 2;\n                result.Add(nextEven);\n         \
    \   } else {\n                nextOdd = nextOdd / 2;\n                result.Add(nextOdd);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd =\
    \ 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (n + 1)\
    \ >> 1;\n        long nextEven = (n + 1) >> 1;\n        if (n != 0) {\n      \
    \      result.Add(n);\n        }\n        if (nextOdd != 0) {\n            result.Add(nextOdd);\n\
    \        }\n        if (nextEven != 0) {\n            result.Add(nextEven);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = (n + 1) / 2;\n        long nextEven = (n + 2) / 2;\n \
    \       if (n % 2 == 0) {\n            result.Add(nextEven);\n        } else {\n\
    \            result.Add(nextOdd);\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        if (n == 0)\n            return\
    \ result;\n        long nextOdd = (n % 2 == 0) ? n : n + 1;\n        long nextEven\
    \ = (n % 2 == 0) ? n + 1 : n;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = (n%2 == 0) ? n : n + 1;\n        long nextEven = (n%2 ==\
    \ 0) ? n + 1 : n;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = (n + 1) / 2;\n        long nextEven = (n + 1) % 2;\n    \
    \    if (n % 2 == 0) {\n            result.Add(nextEven);\n        } else {\n\
    \            result.Add(nextOdd);\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long nextOdd = (long)Math.Ceiling(n);\n\
    \        long nextEven = (long)Math.Floor(n);\n        if (n % 2 == 0) {\n   \
    \         result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = n;\n        long nextEven = n;\n        while (nextEven\
    \ > 0 || nextOdd > 0) {\n            long nextEvenEven = nextEven;\n         \
    \   long nextOddOdd = nextOdd;\n            nextEven = nextEven / 2;\n       \
    \     nextOdd = nextOdd / 2;\n            if (nextEven > 0 && nextOdd > 0) {\n\
    \                result.Add(nextEvenEven);\n                result.Add(nextOddOdd);\n\
    \            } else if (nextEven > 0) {\n                result.Add(nextEven);\n\
    \            } else if (nextOdd > 0) {\n                result.Add(nextOdd);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = n;\n        long nextEven = n;\n\
    \        while (nextEven > 0 || nextOdd > 0) {\n            if (nextEven % 2 ==\
    \ 0) {\n                nextEven = nextEven / 2;\n                result.Add(nextEven);\n\
    \            } else {\n                nextOdd = nextOdd / 2;\n              \
    \  result.Add(nextOdd);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long nextEven = n;\n  \
    \      long nextOdd = n;\n        long nextOddNextEven = n;\n        long nextOddNextOdd\
    \ = n;\n        long nextOddNextOddNextEven = n;\n        long nextOddNextOddNextOdd\
    \ = n;\n        long nextOddNextOddNextOddNextEven = n;\n        long nextOddNextOddNextOddNextOdd\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextEven = n;\n        long nextOddNextOddNextOddNextOddNextOdd\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextEven = n;\n      \
    \  long nextOddNextOddNextOddNextOddNextOddNextOdd = n;\n        long nextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOdd = n;\n       \
    \ long nextOddNextOddNextOddNextOddNextOddNextOddNextEven = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOdd\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOdd\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOdd\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextOddNextEven\
    \ = n;\n        long nextO", "        List<long> result = new List<long>();\n\
    \        long nextOdd = (n % 2 == 1) ? n : n + 1;\n        long nextEven = (n\
    \ % 2 == 0) ? n : n + 1;\n        long nextOddEven = nextOdd + nextEven;\n   \
    \     result.Add(nextOdd);\n        result.Add(nextEven);\n        result.Add(nextOddEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0)\n            return result;\n        if (n % 2 == 0) {\n   \
    \         result.Add(n);\n            return result;\n        }\n        long\
    \ nextOdd = n;\n        long nextEven = n;\n        while (nextEven % 2 == 0)\
    \ {\n            nextEven = nextEven / 2;\n        }\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = (n + 1) >> 1;\n        long nextEven\
    \ = (n + 1) >> 1;\n        if (n & 1 == 0) {\n            result.Add(nextEven);\n\
    \        } else {\n            result.Add(nextOdd);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = n / 2;\n        long nextEven = n % 2 == 0 ? n : n + 1;\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd =\
    \ 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        long nextOdd = n % 2 == 0 ? n : n + 1;\n        long nextEven = n % 2\
    \ == 0 ? n + 1 : n;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = n;\n        long nextEven = n;\n        while (nextEven >\
    \ nextOdd) {\n            nextOdd = nextOdd / 2;\n            nextEven = nextEven\
    \ / 2;\n            result.Add(nextOdd);\n        }\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = (long)Math.Ceiling(n);\n        long nextEven = (long)Math.Floor(n);\n\
    \        if (n % 2 == 0) {\n            result.Add(nextEven);\n        } else\
    \ {\n            result.Add(nextOdd);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (long)Math.Ceiling(n);\n\
    \        long nextEven = (long)Math.Floor(n);\n        if (n % 2 == 0) {\n   \
    \         result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = (n + 1) / 2;\n        long nextEven = (n + 2) / 2;\n \
    \       if (n % 2 == 0) {\n            result.Add(nextEven);\n        } else {\n\
    \            result.Add(nextOdd);\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long nextOdd = n;\n       \
    \ long nextEven = n;\n        while (nextEven % 2 == 0) {\n            nextEven\
    \ /= 2;\n        }\n        while (nextOdd % 2 == 0) {\n            nextOdd /=\
    \ 2;\n        }\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextEven = n / 2;\n        long nextOdd = n % 2;\n        if (nextOdd\
    \ != 0) {\n            result.Add(nextOdd);\n        }\n        if (nextEven !=\
    \ 0) {\n            result.Add(nextEven);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long nextOdd = 0;\n    \
    \    long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = n / 2;\n\
    \        long nextEven = n % 2;\n        if (nextOdd > nextEven) {\n         \
    \   result.Add(nextOdd);\n            result.Add(nextEven);\n        } else {\n\
    \            result.Add(nextEven);\n            result.Add(nextOdd);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            return result;\n        if (n % 2 == 0) {\n\
    \            result.Add(n);\n            return result;\n        }\n        long\
    \ nextOdd = n;\n        long nextEven = n;\n        while (nextEven % 2 == 0)\
    \ {\n            nextEven = nextEven / 2;\n        }\n        while (nextOdd %\
    \ 2 == 1) {\n            nextOdd = nextOdd / 2;\n        }\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = n / 2;\n        long nextEven =\
    \ n % 2;\n        if (nextOdd > nextEven) {\n            result.Add(nextOdd);\n\
    \            result.Add(nextEven);\n        } else {\n            result.Add(nextEven);\n\
    \            result.Add(nextOdd);\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long nextOdd = n;\n       \
    \ long nextEven = n;\n        while (nextEven % 2 == 0) {\n            nextEven\
    \ = nextEven / 2;\n        }\n        while (nextOdd % 2 == 1) {\n           \
    \ nextOdd = nextOdd / 2;\n        }\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = n % 2 == 1 ? n : n + 1;\n        long nextEven = n % 2 ==\
    \ 0 ? n : n + 1;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd;\n        long nextEven;\n        if (n % 2 == 0) {\n     \
    \       nextEven = n;\n            nextOdd = n + 1;\n        } else {\n      \
    \      nextEven = n + 1;\n            nextOdd = n;\n        }\n        long currentLevel\
    \ = 1;\n        while (currentLevel <= n) {\n            result.Add(currentLevel);\n\
    \            currentLevel += nextOdd;\n            if (currentLevel % 2 == 0)\
    \ {\n                currentLevel += nextEven;\n            }\n        }\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long nextOdd = n;\n        long nextEven = n;\n        while (nextEven > 0\
    \ || nextOdd > 0) {\n            if (nextEven % 2 == 0) {\n                nextEven\
    \ = nextEven / 2;\n                result.Add(nextEven);\n            } else {\n\
    \                nextOdd = nextOdd / 2;\n                result.Add(nextOdd);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = (n + 1) / 2;\n        long nextEven\
    \ = (n + 2) / 2;\n        if (n % 2 == 0) {\n            result.Add(nextEven);\n\
    \        } else {\n            result.Add(nextOdd);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = n / 2;\n        long nextEven = n % 2 == 0 ? n : n - 1;\n        long nextLevel\
    \ = nextOdd;\n        long nextLevelCount = 1;\n        while (nextLevelCount\
    \ <= n) {\n            result.Add(nextLevelCount);\n            nextLevel += nextEven;\n\
    \            nextLevelCount += nextOdd;\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (long)Math.Ceiling((double)n\
    \ / 2);\n        long nextEven = (long)Math.Floor((double)n / 2);\n        if\
    \ (n % 2 == 0) {\n            result.Add(nextEven);\n        } else {\n      \
    \      result.Add(nextOdd);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n    \
    \    long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n \
    \       long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextEven = n % 2 ==\
    \ 0 ? n : n + 1;\n        long nextOdd = n % 2 == 1 ? n : n + 1;\n        for\
    \ (int i = 0; i < n; i++) {\n            result.Add(nextEven);\n            nextEven\
    \ = nextOdd;\n            nextOdd = nextEven % 2 == 0 ? nextEven : nextOdd + 1;\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = (n + 1) >> 1;\n        long nextEven = n >> 1;\n     \
    \   long nextOddEven = nextOdd + nextEven;\n        long nextOddEvenOdd = nextOddEven\
    \ + nextOdd;\n        long nextOddEvenOddEven = nextOddEvenOdd + nextEven;\n \
    \       long nextOddEvenOddEvenOdd = nextOddEvenOddEven + nextOdd;\n        long\
    \ nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddOdd + nextEven;\n        long\
    \ nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOdd + nextOdd;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEven\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ + nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ + nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd + nextOdd;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven", "      \
    \  List<long> result = new List<long>();\n        long nextOdd = 0;\n        long\
    \ nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd =\
    \ 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextEven = n / 2;\n\
    \        long nextOdd = n % 2;\n        if (nextOdd != 0) {\n            result.Add(nextOdd);\n\
    \        }\n        if (nextEven != 0) {\n            result.Add(nextEven);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = (n + 1) / 2;\n        long nextEven = (n + 1) % 2;\n \
    \       if (n % 2 == 0) {\n            result.Add(nextEven);\n        } else {\n\
    \            result.Add(nextOdd);\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long nextOdd;\n        long\
    \ nextEven;\n        if (n % 2 == 0) {\n            nextEven = n;\n          \
    \  nextOdd = n - 1;\n        } else {\n            nextEven = n + 1;\n       \
    \     nextOdd = n;\n        }\n        result.Add(nextEven);\n        result.Add(nextOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = (n%2 == 1) ? n : n + 1;\n        long nextEven = (n%2 ==\
    \ 0) ? n : n + 1;\n        long nextOddEven = nextOdd + nextEven;\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        result.Add(nextOddEven);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = (n + 1) >> 1;\n        long nextEven = n >> 1;\n        result.Add(nextOdd);\n\
    \        if (nextEven % 2 == 0) {\n            result.Add(nextEven);\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextEven = n;\n  \
    \      long nextOdd = n;\n        while (nextEven > 0 || nextOdd > 0) {\n    \
    \        if (nextEven % 2 == 0) {\n                result.Add(nextEven);\n   \
    \             nextEven = nextEven / 2;\n            } else {\n               \
    \ result.Add(nextOdd);\n                nextOdd = nextOdd / 2;\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = n % 2 == 1 ? n : n + 1;\n        long nextEven = n % 2\
    \ == 0 ? n : n + 1;\n        long nextOddEven = nextOdd * nextEven;\n        long\
    \ nextOddEvenNextOdd = nextOdd * nextOdd;\n        long nextOddEvenNextOddEven\
    \ = nextOdd * nextOdd * nextEven;\n        long nextOddEvenNextOddEvenNextOdd\
    \ = nextOdd * nextOdd * nextOdd * nextEven;\n        long nextOddEvenNextOddEvenNextOddEven\
    \ = nextOdd * nextOdd * nextOdd * nextOdd * nextEven;\n        long nextOddEvenNextOddEvenNextOddEvenNextOdd\
    \ = nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextEven;\n        long\
    \ nextOddEvenNextOddEvenNextOddEvenNextOddEven = nextOdd * nextOdd * nextOdd *\
    \ nextOdd * nextOdd * nextOdd * nextEven;\n        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd\
    \ = nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextEven;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEven = nextOdd\
    \ * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextEven;\n\
    \        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOdd =\
    \ nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd\
    \ * nextEven;\n        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEven\
    \ = nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd * nextOdd\
    \ * nextOdd * nextEven;\n        long nextOddEvenNextOddEvenNextOddEvenNextOddEvenNextOddEven",
  "        List<long> result = new List<long>();\n        long nextOdd = (long)Math.Ceiling((double)n\
    \ / 2);\n        long nextEven = (long)Math.Floor((double)n / 2);\n        if\
    \ (n % 2 == 0) {\n            result.Add(nextEven);\n        } else {\n      \
    \      result.Add(nextOdd);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = (n + 1) >> 1;\n        long\
    \ nextEven = (n + 1) >> 2;\n        long nextOddEven = nextOdd + nextEven;\n \
    \       long nextOddEvenOdd = nextOddEven + nextOdd;\n        long nextOddEvenOddEven\
    \ = nextOddEvenOdd + nextEven;\n        long nextOddEvenOddEvenOdd = nextOddEvenOddEven\
    \ + nextOdd;\n        long nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOdd\
    \ + nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEven\
    \ + nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven",
  "        List<long> result = new List<long>();\n        long nextOdd = n % 2 ==\
    \ 0 ? n : n + 1;\n        long nextEven = n % 2 == 0 ? n + 1 : n;\n        long\
    \ nextOddEven = nextOdd * nextEven;\n        long nextOddEvenOdd = nextOdd * nextOdd;\n\
    \        long nextOddEvenOddEven = nextOdd * nextEven * nextEven;\n        long\
    \ nextOddEvenOddEvenOdd = nextOdd * nextEven * nextOdd * nextEven;\n        long\
    \ nextOddEvenOddEvenOddEven = nextOdd * nextEven * nextOdd * nextEven * nextEven;\n\
    \        long nextOddEvenOddEvenOddEvenOdd = nextOdd * nextEven * nextOdd * nextEven\
    \ * nextOdd * nextEven;\n        long nextOddEvenOddEvenOddEvenOddEven = nextOdd\
    \ * nextEven * nextOdd * nextEven * nextOdd * nextEven * nextEven;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOdd = nextOdd * nextEven * nextOdd * nextEven\
    \ * nextOdd * nextEven * nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = nextOdd * nextEven * nextOdd * nextEven * nextOdd * nextEven * nextEven *\
    \ nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOdd\
    \ * nextEven * nextOdd * nextEven * nextOdd * nextEven * nextEven * nextOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOdd * nextEven\
    \ * nextOdd * nextEven * nextOdd * nextEven * nextEven * nextEven * nextOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOdd * nextEven\
    \ * nextOdd * nextEven * nextOdd * nextEven * nextEven * nextEven * nextOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOdd\
    \ * nextEven * nextO", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) return result;\n        if (n % 2 == 0) {\n            result.Add(n);\n\
    \            return result;\n        }\n        long nextOdd = n / 2;\n      \
    \  long nextEven = nextOdd * 2;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextEven = n;\n        long nextOdd = n;\n        while (nextEven >\
    \ 0 || nextOdd > 0) {\n            result.Add(nextEven);\n            if (nextEven\
    \ % 2 == 0) {\n                nextEven = nextEven / 2;\n            } else {\n\
    \                nextEven = nextEven + 1;\n            }\n            result.Add(nextOdd);\n\
    \            if (nextOdd % 2 == 0) {\n                nextOdd = nextOdd / 2;\n\
    \            } else {\n                nextOdd = nextOdd + 1;\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = n;\n        long nextEven = n;\n        while (nextEven\
    \ > 0 || nextOdd > 0) {\n            result.Add(nextOdd);\n            if (nextEven\
    \ % 2 == 0) {\n                nextEven = nextEven / 2;\n            } else {\n\
    \                nextOdd = nextOdd / 2;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\n\
    \            return result;\n        if (n % 2 == 0)\n            result.Add(n);\n\
    \        else {\n            long nextOdd = n;\n            long nextEven = n;\n\
    \            while (nextEven > 1) {\n                nextOdd += 2;\n         \
    \       nextEven -= 2;\n            }\n            result.Add(nextOdd);\n    \
    \        result.Add(nextEven);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = (long)Math.Ceiling(n);\n\
    \        long nextEven = (long)Math.Floor(n);\n        if (n % 2 == 0) {\n   \
    \         result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = n;\n        long nextEven = n;\n        while (nextEven\
    \ > 0 || nextOdd > 0) {\n            if (nextOdd % 2 == 0) {\n               \
    \ result.Add(nextEven);\n                nextEven = nextEven / 2;\n          \
    \  } else {\n                result.Add(nextOdd);\n                nextOdd = nextOdd\
    \ / 2;\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = 0;\n        long nextEven\
    \ = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n    \
    \    long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n \
    \       long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (long)Math.Ceiling(n);\n\
    \        long nextEven = (long)Math.Floor(n);\n        if (n % 2 == 0) {\n   \
    \         result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (n + 1)\
    \ / 2;\n        long nextEven = (n + 1) % 2;\n        long nextLevel = nextOdd;\n\
    \        long currentLevel = 1;\n        while (nextLevel <= n) {\n          \
    \  result.Add(nextLevel);\n            nextLevel += currentLevel;\n          \
    \  currentLevel = nextEven;\n            nextEven = nextOdd;\n            nextOdd\
    \ = nextLevel;\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         return result;\n        }\n        long nextOdd = n % 2 == 0 ? n : n\
    \ + 1;\n        long nextEven = n % 2 == 0 ? n + 1 : n;\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd =\
    \ 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long currentLevel = 1;\n        long nextLevel\
    \ = 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n             \
    \   nextEven = n;\n                nextLevel = nextEven / 2;\n            } else\
    \ {\n                nextOdd = n;\n                nextLevel = nextOdd / 2;\n\
    \            }\n            result.Add(nextLevel);\n            n -= nextLevel;\n\
    \            currentLevel += nextLevel;\n            nextLevel += nextEven;\n\
    \            nextEven = 0;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd;\n        long nextEven;\n\
    \        if (n % 2 == 0) {\n            nextEven = n;\n            nextOdd = n\
    \ - 1;\n        } else {\n            nextEven = n + 1;\n            nextOdd =\
    \ n;\n        }\n        long nextLevel = nextOdd;\n        long nextLevelCount\
    \ = 1;\n        while (nextLevel > 0) {\n            result.Add(nextLevelCount);\n\
    \            nextLevel = nextLevel - nextEven;\n            nextLevelCount = nextLevelCount\
    \ + nextEven;\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = n % 2 == 0 ? n : n + 1;\n      \
    \  long nextEven = n % 2 == 0 ? n + 1 : n;\n        result.Add(nextOdd);\n   \
    \     result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = n % 2 == 0 ? n : n + 1;\n      \
    \  long nextEven = n % 2 == 0 ? n + 1 : n;\n        long nextOddEven = nextOdd\
    \ * nextEven;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n \
    \       result.Add(nextOddEven);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = (long)Math.Ceiling(n);\n\
    \        long nextEven = (long)Math.Floor(n);\n        long nextNextOdd = (long)Math.Ceiling(nextOdd);\n\
    \        long nextNextEven = (long)Math.Floor(nextEven);\n        long nextNextNextOdd\
    \ = (long)Math.Ceiling(nextNextOdd);\n        long nextNextNextEven = (long)Math.Floor(nextNextEven);\n\
    \        long nextNextNextNextOdd = (long)Math.Ceiling(nextNextNextOdd);\n   \
    \     long nextNextNextNextEven = (long)Math.Floor(nextNextNextEven);\n      \
    \  long nextNextNextNextNextOdd = (long)Math.Ceiling(nextNextNextNextOdd);\n \
    \       long nextNextNextNextNextEven = (long)Math.Floor(nextNextNextNextEven);\n\
    \        long nextNextNextNextNextNextOdd = (long)Math.Ceiling(nextNextNextNextNextOdd);\n\
    \        long nextNextNextNextNextNextEven = (long)Math.Floor(nextNextNextNextNextEven);\n\
    \        long nextNextNextNextNextNextNextOdd = (long)Math.Ceiling(nextNextNextNextNextNextOdd);\n\
    \        long nextNextNextNextNextNextNextEven = (long)Math.Floor(nextNextNextNextNextNextNextEven);\n\
    \        long nextNextNextNextNextNextNextNextOdd = (long)Math.Ceiling(nextNextNextNextNextNextNextNextOdd);\n\
    \        long nextNextNextNextNextNextNextNextEven = (long)Math.Floor(nextNextNextNextNextNextNextNextEven);\n\
    \        long nextNextNextNextNextNextNextNextOdd = (long)Math.Ceiling(nextNextNextNextNextNextNextNextOdd);\n\
    \        long nextNextNextNextNextNextNextNextEven = (long)Math.Floor(nextNextNextNextNextNextNextNextEven);\n\
    \        long nextNextNextNextNextNextNextNextOdd = (long)Math.Ceiling(nextNextNextNextNextNextNextNextOdd);\n\
    \        long nextNextNextNextNextNextNextNextEven = (long)Math.Floor(nextNextNextNextNextNextNextNextNextEven);\n\
    \        long nextNextNextNextNextNextNextNextOdd = (long)Math.Ceiling(nextNextNextNextNextNextNextNextOdd);\n\
    \        long nextNextNextNext", "        List<long> result = new List<long>();\n\
    \        long nextOdd = (long)Math.Ceiling(n);\n        long nextEven = (long)Math.Floor(n);\n\
    \        if (n % 2 == 0) {\n            result.Add(nextEven);\n        } else\
    \ {\n            result.Add(nextOdd);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long nextOdd = n;\n   \
    \     long nextEven = n;\n        while (nextEven > 0 || nextOdd > 0) {\n    \
    \        result.Add(nextEven);\n            if (nextOdd % 2 == 0) {\n        \
    \        nextEven = nextOdd / 2;\n            } else {\n                nextOdd\
    \ = nextOdd / 2;\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long nextOdd = (n + 1) / 2;\n\
    \        long nextEven = (n + 1) % 2;\n        if (nextOdd > nextEven) {\n   \
    \         result.Add(nextOdd);\n            result.Add(nextEven);\n        } else\
    \ {\n            result.Add(nextEven);\n            result.Add(nextOdd);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = n;\n   \
    \     long nextEven = n;\n        long nextOddEven = n;\n        long nextOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEven = n;\n        long nextOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEven", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextOdd = n % 2 == 1 ? n : n + 1;\n        long nextEven\
    \ = n % 2 == 0 ? n : n + 1;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = n / 2;\n        long nextEven = n % 2;\n        if (nextOdd\
    \ > 0)\n            result.Add(nextOdd);\n        if (nextEven > 0)\n        \
    \    result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd =\
    \ 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        long nextOdd = n % 2 == 1 ? n : n + 1;\n        long nextEven = n % 2\
    \ == 0 ? n : n + 1;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = (long)Math.Ceiling(n);\n        long nextEven = (long)Math.Floor(n);\n\
    \        if (n % 2 == 0) {\n            result.Add(nextEven);\n        } else\
    \ {\n            result.Add(nextOdd);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (n + 1)\
    \ / 2;\n        long nextEven = (n + 2) / 2;\n        if (n % 2 == 0) {\n    \
    \        result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = (long)Math.Ceiling(n);\n        long nextEven = (long)Math.Floor(n);\n\
    \        if (n % 2 == 0) {\n            result.Add(nextEven);\n        } else\
    \ {\n            result.Add(nextOdd);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long nextOdd = n;\n   \
    \     long nextEven = n;\n        long nextOddEven = n;\n        long nextOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEven = n;\n        long nextOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenO", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd =\
    \ 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (long)Math.Ceiling(n);\n\
    \        long nextEven = (long)Math.Floor(n);\n        if (n % 2 == 0) {\n   \
    \         result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = (n + 1) / 2;\n        long nextEven = (n + 2) / 2;\n \
    \       if (n % 2 == 0) {\n            result.Add(nextEven);\n        } else {\n\
    \            result.Add(nextOdd);\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        long nextOdd = (n % 2 == 1) ? n : n + 1;\n        long nextEven = (n\
    \ % 2 == 0) ? n : n + 1;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (long)Math.Ceiling(n);\n\
    \        long nextEven = (long)Math.Floor(n);\n        if (n % 2 == 0) {\n   \
    \         result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextOdd = n % 2 == 0 ? n : n + 1;\n        long nextEven\
    \ = n % 2 == 0 ? n + 1 : n;\n        long nextOddEven = nextOdd * nextEven;\n\
    \        long nextOddEvenOdd = nextOddEven * nextOdd;\n        long nextOddEvenOddEven\
    \ = nextOddEvenOdd * nextEven;\n        long nextOddEvenOddEvenOdd = nextOddEvenOddEven\
    \ * nextOdd;\n        long nextOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEven\
    \ * nextEven;\n        long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEven\
    \ * nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven * nextOdd;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * nextEven;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n        long\
    \ nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = n / 2;\n\
    \        long nextEven = n % 2;\n        if (nextOdd > 0)\n            result.Add(nextOdd);\n\
    \        if (nextEven > 0)\n            result.Add(nextEven);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = n;\n        long nextEven = n;\n        while (nextEven > 0 || nextOdd > 0)\
    \ {\n            if (nextEven % 2 == 0) {\n                nextEven = nextEven\
    \ / 2;\n                result.Add(nextEven);\n            } else {\n        \
    \        nextOdd = nextOdd / 2;\n                result.Add(nextOdd);\n      \
    \      }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long nextOdd = n % 2 == 1 ? n : n + 1;\n        long\
    \ nextEven = n % 2 == 0 ? n : n + 1;\n        long nextOddEven = nextOdd + nextEven;\n\
    \        result.Add(nextOdd);\n        result.Add(nextEven);\n        result.Add(nextOddEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (n%2 ==\
    \ 0) ? n : n + 1;\n        long nextEven = (n%2 == 0) ? n + 1 : n;\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd =\
    \ 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = n / 2;\n\
    \        long nextEven = n % 2;\n        if (nextOdd % 2 == 0) {\n           \
    \ result.Add(nextOdd);\n        } else {\n            result.Add(nextEven);\n\
    \        }\n        long nextOdd2 = nextOdd / 2;\n        long nextEven2 = nextEven\
    \ % 2;\n        if (nextOdd2 % 2 == 0) {\n            result.Add(nextOdd2);\n\
    \        } else {\n            result.Add(nextEven2);\n        }\n        long\
    \ nextOdd3 = nextOdd / 2;\n        long nextEven3 = nextEven % 2;\n        if\
    \ (nextOdd3 % 2 == 0) {\n            result.Add(nextOdd3);\n        } else {\n\
    \            result.Add(nextEven3);\n        }\n        long nextOdd4 = nextOdd\
    \ / 2;\n        long nextEven4 = nextEven % 2;\n        if (nextOdd4 % 2 == 0)\
    \ {\n            result.Add(nextOdd4);\n        } else {\n            result.Add(nextEven4);\n\
    \        }\n        long nextOdd5 = nextOdd / 2;\n        long nextEven5 = nextEven\
    \ % 2;\n        if (nextOdd5 % 2 == 0) {\n            result.Add(nextOdd5);\n\
    \        } else {\n            result.Add(nextEven5);\n        }\n        long\
    \ nextOdd6 = nextOdd / 2;\n        long nextEven6 = nextEven % 2;\n        if\
    \ (nextOdd6 % 2 == 0) {\n            result.Add(nextOdd6);\n        } else {\n\
    \            result.Add(nextEven6);\n        }\n        long nextOdd7 = nextOdd\
    \ / 2;\n        long nextEven7 = nextEven % 2;\n        if (nextOdd7 % 2 == 0)\
    \ {\n            result.Add(nextOdd7);\n        } else {\n            result.Add(nextEven7);\n\
    \        }\n        long nextOdd8 = nextOdd / 2;\n        long nextEven8 = nextEven\
    \ % 2;\n        if (nextOdd8 % 2 == 0) {\n            result.Add(nextOdd8);\n\
    \        } else {\n            result.Add(nextEven8);\n        }\n        long\
    \ nextOdd9 = nextOdd / 2;\n        long nextEven9 = nextEven % 2;\n        if\
    \ (nextOdd9 % 2 == 0) {\n            result.Add(nextOdd9);\n        } else {\n\
    \            result.Add(nextEven9);\n        }\n        long nextOdd10 = nextOdd\
    \ / 2;\n        long nextEven10 = nextEven % 2;\n        if (nextOdd10 % 2 ==\
    \ 0) {\n            result.Add(nextOdd10);\n        } else {\n            result.Add(nextEven10);\n\
    \        }\n        long nextOdd11 = nextOdd / 2;\n        long nextEven11 = nextEven\
    \ % 2;\n        if (nextOdd11", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (n + 1)\
    \ >> 1;\n        long nextEven = n >> 1;\n        if (n != 0) {\n            result.Add(n);\n\
    \        }\n        if (nextOdd != 0) {\n            result.Add(nextOdd);\n  \
    \      }\n        if (nextEven != 0) {\n            result.Add(nextEven);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd;\n       \
    \ long nextEven;\n        if (n % 2 == 0) {\n            nextEven = n;\n     \
    \       nextOdd = n - 1;\n        } else {\n            nextEven = n + 1;\n  \
    \          nextOdd = n;\n        }\n        long nextLevel = nextOdd;\n      \
    \  while (nextLevel <= nextEven) {\n            result.Add(nextLevel);\n     \
    \       nextLevel += 2;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = (n + 1) >> 1;\n        long\
    \ nextEven = (n + 1) >> 1;\n        if (n & 1 == 0) {\n            result.Add(nextEven);\n\
    \        } else {\n            result.Add(nextOdd);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = (n + 1) / 2;\n        long nextEven = (n + 2) / 2;\n        if (n % 2 == 0)\
    \ {\n            result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextLevel = 0;\n        long currentLevel\
    \ = 0;\n        long currentStones = 0;\n        long nextLevelStones = 0;\n \
    \       long nextLevelStonesSum = 0;\n        long nextLevelSum = 0;\n       \
    \ long nextLevelSumSum = 0;\n        long nextLevelSumSumSum = 0;\n        long\
    \ nextLevelSumSumSumSum = 0;\n        long nextLevelSumSumSumSumSum = 0;\n   \
    \     long nextLevelSumSumSumSumSumSum = 0;\n        long nextLevelSumSumSumSumSumSumSum\
    \ = 0;\n        long nextLevelSumSumSumSumSumSumSumSum = 0;\n        long nextLevelSumSumSumSumSumSumSumSum\
    \ = 0;\n        long nextLevelSumSumSumSumSumSumSumSum = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSum\
    \ = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSum = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSum\
    \ = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSumSum = 0;\n        long\
    \ nextLevelSumSumSumSumSumSumSumSumSumSum = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSumSumSum\
    \ = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSumSum = 0;\n        long\
    \ nextLevelSumSumSumSumSumSumSumSumSumSum = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSumSum\
    \ = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSumSum = 0;\n        long\
    \ nextLevelSumSumSumSumSumSumSumSumSumSum = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSumSum\
    \ = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSumSumSum = 0;\n       \
    \ long nextLevelSumSumSumSumSumSumSumSumSumSumSum = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSumSum\
    \ = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSumSum = 0;\n        long\
    \ nextLevelSumSumSumSumSumSumSumSumSumSum = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSumSum\
    \ = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSumSum = 0;\n        long\
    \ nextLevelSumSumSumSumSumSumSumSumSumSumSum = 0;\n        long nextLevelSumSumSumSumSumSumSumSumSumSumSum\
    \ = 0;\n        long ", "        List<long> result = new List<long>();\n     \
    \   long nextOdd;\n        long nextEven;\n        if (n % 2 == 0) {\n       \
    \     nextEven = n;\n            nextOdd = n - 1;\n        } else {\n        \
    \    nextEven = n + 1;\n            nextOdd = n;\n        }\n        long nextLevel\
    \ = nextOdd;\n        while (nextLevel <= nextEven) {\n            result.Add(nextLevel);\n\
    \            nextLevel += 2;\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = (n + 1) / 2;\n        long\
    \ nextEven = (n + 1) % 2;\n        if (nextOdd > nextEven) {\n            result.Add(nextOdd);\n\
    \            result.Add(nextEven);\n        } else {\n            result.Add(nextEven);\n\
    \            result.Add(nextOdd);\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long nextOdd = (n + 1) / 2;\n\
    \        long nextEven = (n + 2) / 2;\n        if (n % 2 == 0) {\n           \
    \ result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextNextOdd = 0;\n        long nextNextEven\
    \ = 0;\n        long nextNextNextOdd = 0;\n        long nextNextNextEven = 0;\n\
    \        long nextNextNextNextOdd = 0;\n        long nextNextNextNextEven = 0;\n\
    \        long nextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNext",
  "        List<long> result = new List<long>();\n        long nextOdd = 0;\n    \
    \    long nextEven = 0;\n        long currentLevel = 1;\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) {\n                nextEven++;\n            }\
    \ else {\n                nextOdd++;\n            }\n            result.Add(currentLevel);\n\
    \            currentLevel += nextOdd + nextEven;\n            n /= 2;\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd;\n        long nextEven;\n        if (n % 2 == 0) {\n  \
    \          nextEven = n;\n            nextOdd = n - 1;\n        } else {\n   \
    \         nextEven = n + 1;\n            nextOdd = n;\n        }\n        for\
    \ (int i = 0; i < nextOdd / 2; i++) {\n            result.Add(nextOdd);\n    \
    \    }\n        for (int i = 0; i < nextEven / 2; i++) {\n            result.Add(nextEven);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        long nextOdd = n % 2 == 0 ? n : n\
    \ + 1;\n        long nextEven = n % 2 == 0 ? n + 1 : n;\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = n;\n        long nextEven = n;\n\
    \        while (nextEven > 0 || nextOdd > 0) {\n            if (nextEven % 2 ==\
    \ 0) {\n                result.Add(nextEven);\n                nextEven = nextEven\
    \ / 2;\n            } else {\n                result.Add(nextOdd);\n         \
    \       nextOdd = nextOdd / 2;\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long nextEven = n;\n   \
    \     long nextOdd = n;\n        long nextOddNextEven = n;\n        long nextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEven = n;\n        long nextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEven = n;\n    \
    \    long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd = n;\n        long\
    \ nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven = n;\n        long\
    \ nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd = n;\n \
    \       long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNextOdd\
    \ = n;\n        long nextOddNextEvenNextOddNextEvenNextOddNextEvenNextOddNextEvenNext",
  "        List<long> result = new List<long>();\n        long nextOdd = 0;\n    \
    \    long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (n + 1)\
    \ / 2;\n        long nextEven = (n + 1) % 2;\n        if (n % 2 == 0) {\n    \
    \        result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (long)Math.Ceiling((double)n\
    \ / 2.0d);\n        long nextEven = (long)Math.Floor((double)n / 2.0d);\n    \
    \    if (n % 2 == 0) {\n            result.Add(nextEven);\n        } else {\n\
    \            result.Add(nextOdd);\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long nextOdd = n;\n       \
    \ long nextEven = n;\n        while (nextEven % 2 == 0) {\n            nextEven\
    \ /= 2;\n        }\n        while (nextOdd % 2 == 1) {\n            nextOdd /=\
    \ 2;\n        }\n        result.Add(nextEven);\n        result.Add(nextOdd);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextEven = n / 2;\n        long nextOdd = n % 2;\n  \
    \      if (nextEven % 2 == 0) {\n            result.Add(nextEven);\n        }\n\
    \        if (nextOdd % 2 == 0) {\n            result.Add(nextOdd);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (n + 1)\
    \ >> 1;\n        long nextEven = n >> 1;\n        result.Add(nextOdd);\n     \
    \   result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd =\
    \ 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = n;\n   \
    \     long nextEven = n;\n        long nextOddEven = n;\n        long nextOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEven = n;\n        long nextOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEven", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        if (n == 1L) {\n      \
    \      result.Add(1L);\n            return result;\n        }\n        long nextOdd\
    \ = n % 2L;\n        long nextEven = n / 2L;\n        List<long> nextLevel = MakeAPile(nextEven);\n\
    \        List<long> nextLevel2 = MakeAPile(nextOdd);\n        List<long> nextLevel3\
    \ = MakeAPile(nextEven);\n        List<long> nextLevel4 = MakeAPile(nextOdd);\n\
    \        List<long> nextLevel5 = MakeAPile(nextEven);\n        List<long> nextLevel6\
    \ = MakeAPile(nextOdd);\n        List<long> nextLevel7 = MakeAPile(nextEven);\n\
    \        List<long> nextLevel8 = MakeAPile(nextOdd);\n        List<long> nextLevel9\
    \ = MakeAPile(nextEven);\n        List<long> nextLevel10 = MakeAPile(nextOdd);\n\
    \        List<long> nextLevel11 = MakeAPile(nextEven);\n        List<long> nextLevel12\
    \ = MakeAPile(nextOdd);\n        List<long> nextLevel13 = MakeAPile(nextEven);\n\
    \        List<long> nextLevel14 = MakeAPile(nextOdd);\n        List<long> nextLevel15\
    \ = MakeAPile(nextEven);\n        List<long> nextLevel16 = MakeAPile(nextOdd);\n\
    \        List<long> nextLevel17 = MakeAPile(nextEven);\n        List<long> nextLevel18\
    \ = MakeAPile(nextOdd);\n        List<long> nextLevel19 = MakeAPile(nextEven);\n\
    \        List<long> nextLevel20 = MakeAPile(nextOdd);\n        List<long> nextLevel21\
    \ = MakeAPile(nextEven);\n        List<long> nextLevel22 = MakeAPile(nextOdd);\n\
    \        List<long> nextLevel23 = MakeAPile(nextEven);\n        List<long> nextLevel24\
    \ = MakeAPile(nextOdd);\n        List<long> nextLevel25 = MakeAPile(nextEven);\n\
    \        List<long> nextLevel26 = MakeAPile(nextOdd);\n        List<long> nextLevel27\
    \ = MakeAPile(nextEven);\n        List<long> nextLevel28 = MakeAPile(nextOdd);\n\
    \        List<long> nextLevel29 = MakeAPile(next", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long nextNextOdd = 0;\n        long nextNextEven = 0;\n        long nextNextNextOdd\
    \ = 0;\n        long nextNextNextEven = 0;\n        long nextNextNextNextOdd =\
    \ 0;\n        long nextNextNextNextEven = 0;\n        long nextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextNextNextEven = 0;\n        long\
    \ nextNextNextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextNextNextOdd = 0;\n        long\
    \ nextNextNextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextNextNextEven = 0;\n        long\
    \ nextNextNextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextNextNextOdd = 0;\n        long\
    \ nextNextNextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextNextNextEven = 0;\n        long\
    \ nextNextNextNextNextNextNextNextNextOdd = 0;\n        long nextNextNextNextNextNextNextNextNextEven\
    \ = 0;\n        long nextNextNextNextNextNextNextNextNextOdd = 0;\n        long\
    \ nextNextNextNextNextNextNextNextNextEven = 0;\n        long nextNextNextNextNextNextNextNextNextOdd\
    \ = 0;\n        long nextNextNextNextNextNextNextNextNextEven", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = n / 2;\n        long nextEven\
    \ = n % 2;\n        if (nextOdd > nextEven) {\n            result.Add(nextOdd);\n\
    \            result.Add(nextEven);\n        } else {\n            result.Add(nextEven);\n\
    \            result.Add(nextOdd);\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long nextOdd = 0;\n       \
    \ long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = n % 2 ==\
    \ 0 ? n : n + 1;\n        long nextEven = n % 2 == 0 ? n + 1 : n;\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long nextLevel = 0;\n        long currentLevel = 0;\n        long currentCount\
    \ = 0;\n        long nextCount = 0;\n        long currentSum = 0;\n        long\
    \ nextSum = 0;\n        long currentSumOfSquares = 0;\n        long nextSumOfSquares\
    \ = 0;\n        long currentSumOfCubes = 0;\n        long nextSumOfCubes = 0;\n\
    \        long currentSumOfCubesSquare = 0;\n        long nextSumOfCubesSquare\
    \ = 0;\n        long currentSumOfCubesCube = 0;\n        long nextSumOfCubesCube\
    \ = 0;\n        long currentSumOfCubesCubeSquare = 0;\n        long nextSumOfCubesCubeSquare\
    \ = 0;\n        long currentSumOfCubesCubeCube = 0;\n        long nextSumOfCubesCubeCube\
    \ = 0;\n        long currentSumOfCubesCubeCubeSquare = 0;\n        long nextSumOfCubesCubeCubeSquare\
    \ = 0;\n        long currentSumOfCubesCubeCubeCube = 0;\n        long nextSumOfCubesCubeCubeCube\
    \ = 0;\n        long currentSumOfCubesCubeCubeCubeSquare = 0;\n        long nextSumOfCubesCubeCubeCubeSquare\
    \ = 0;\n        long currentSumOfCubesCubeCubeCubeCube = 0;\n        long nextSumOfCubesCubeCubeCubeCube\
    \ = 0;\n        long currentSumOfCubesCubeCubeCubeCube = 0;\n        long nextSumOfCubesCubeCubeCubeCube\
    \ = 0;\n        long currentSumOfCubesCubeCubeCubeCube = 0;\n        long nextSumOfCubesCubeCubeCubeCube\
    \ = 0;\n        long currentSumOfCubesCubeCubeCubeCube = 0;\n        long nextSumOfCubesCubeCubeCubeCube\
    \ = 0;\n        long currentSumOfCubesCubeCubeCubeCube = 0;\n        long nextSumOfCubesCubeCubeCubeCube\
    \ = 0;\n        long currentSumOfCubesCubeCubeCubeCube = 0;\n        long nextSumOfCubesCubeCubeCubeCube\
    \ = 0;\n        long currentSumOfCubesCubeCubeCubeCube = 0;\n        long nextSumOfCubesCubeCubeCubeCube\
    \ = 0;\n        long currentSumOfCubesCubeCubeCubeCube = 0;\n        long nextSumOfCubesCubeCubeCubeCube\
    \ = 0;\n        long currentSumOfCubesCubeCubeCubeCube = 0;\n        long nextSumOfCubesCubeCubeCubeCube\
    \ = 0;\n        long currentSumOfCubesCubeCubeCubeCube = 0;\n        long nextSumOfCubesCubeCubeCubeCube\
    \ = 0;\n        long current", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        long nextOdd = n % 2 == 1 ? n : n + 1;\n        long nextEven\
    \ = n % 2 == 0 ? n : n + 1;\n        long nextOddEven = nextOdd * nextEven;\n\
    \        long nextOddEvenOdd = nextOdd * nextOdd;\n        long nextOddEvenOddEven\
    \ = nextOdd * nextEven * nextEven;\n        long nextOddEvenOddEvenOdd = nextOdd\
    \ * nextEven * nextOdd * nextEven;\n        long nextOddEvenOddEvenOddEven = nextOdd\
    \ * nextEven * nextOdd * nextEven * nextEven;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = nextOdd * nextEven * nextOdd * nextEven * nextOdd * nextEven;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEven = nextOdd * nextEven * nextOdd * nextEven *\
    \ nextOdd * nextEven * nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOdd * nextEven * nextOdd * nextEven * nextOdd * nextEven * nextOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOdd * nextEven * nextOdd\
    \ * nextEven * nextOdd * nextEven * nextEven * nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = nextOdd * nextEven * nextOdd * nextEven * nextOdd * nextEven * nextEven *\
    \ nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOdd\
    \ * nextEven * nextOdd * nextEven * nextOdd * nextEven * nextEven * nextEven *\
    \ nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ nextOdd * nextEven * nextOdd * nextEven * nextOdd * nextEven * nextEven * nextEven\
    \ * nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (long)Math.Ceiling(n);\n\
    \        long nextEven = (long)Math.Floor(n);\n        if (n % 2 == 0) {\n   \
    \         result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = n;\n        long nextEven = n;\n        long nextOddEven\
    \ = n;\n        long nextOddEvenOdd = n;\n        long nextOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n     \
    \   long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven =\
    \ n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEven", "        List<long> result = new List<long>();\n\
    \        long nextOdd = n;\n        long nextEven = n;\n        while (nextEven\
    \ > 0 || nextOdd > 0) {\n            if (nextEven % 2 == 0) {\n              \
    \  nextEven = nextEven / 2;\n                result.Add(nextEven);\n         \
    \   } else {\n                nextOdd = nextOdd / 2;\n                result.Add(nextOdd);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd;\n        long nextEven;\n       \
    \ if (n <= 0) {\n            return result;\n        }\n        if (n % 2 == 0)\
    \ {\n            nextEven = n;\n            nextOdd = n - 1;\n        } else {\n\
    \            nextEven = n + 1;\n            nextOdd = n;\n        }\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = (n + 1) / 2;\n        long nextEven\
    \ = (n + 2) / 2;\n        if (n % 2 == 0) {\n            result.Add(nextEven);\n\
    \        } else {\n            result.Add(nextOdd);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = n;\n        long nextEven = n;\n        long nextOddEven = n;\n        long\
    \ nextOddEvenOdd = n;\n        long nextOddEvenOddEven = n;\n        long nextOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEven = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEven", "        List<long> result = new List<long>();\n\
    \        long nextOdd = (n % 2 == 0) ? n : n + 1;\n        long nextEven = (n\
    \ % 2 == 0) ? n + 1 : n;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = n / 2;\n        long nextEven = n % 2;\n        if (nextOdd\
    \ % 2 == 0) {\n            result.Add(nextOdd);\n        } else {\n          \
    \  result.Add(nextEven);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long nextOdd = (n + 1) >> 1;\n        long\
    \ nextEven = n >> 1;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long nextOdd = n / 2;\n        long nextEven = n % 2 == 0 ? n : n + 1;\n\
    \        long nextLevel = nextOdd;\n        while (nextLevel < nextEven) {\n \
    \           result.Add(nextLevel);\n            nextLevel += 2;\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long nextOdd = n % 2 == 1 ? n : n + 1;\n        long nextEven = n % 2 ==\
    \ 0 ? n : n + 1;\n        long nextOddEven = nextOdd + nextEven;\n        long\
    \ nextOddEvenOdd = nextOdd * nextEven;\n        long nextOddEvenOddEven = nextOddEven\
    \ * nextOdd;\n        long nextOddEvenOddEvenOdd = nextOddEvenOdd * nextEven;\n\
    \        long nextOddEvenOddEvenOddEven = nextOddEvenOddEven * nextOdd;\n    \
    \    long nextOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEven * nextEven;\n\
    \        long nextOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEven\
    \ * nextOdd;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ * nextEven;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO",
  "        List<long> result = new List<long>();\n        if (n == 0)\n          \
    \  return result;\n        if (n % 2 == 0)\n            result.Add(n);\n     \
    \   else {\n            long nextEven = n;\n            while (nextEven % 2 ==\
    \ 0) {\n                nextEven /= 2;\n            }\n            result.Add(nextEven);\n\
    \            long nextOdd = n;\n            while (nextOdd % 2 != 0) {\n     \
    \           nextOdd *= 2;\n            }\n            result.Add(nextOdd);\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = n;\n        long nextEven = n;\n        long nextOddEven\
    \ = n;\n        long nextOddEvenOdd = n;\n        long nextOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n     \
    \   long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven =\
    \ n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEven", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = 0;\n   \
    \     long nextEven = 0;\n        long nextOddEven = 0;\n        long nextOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (n + 1)\
    \ >> 1;\n        long nextEven = (n + 1) & 1;\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd =\
    \ 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (n + 1)\
    \ / 2;\n        long nextEven = (n + 1) - (nextOdd * 2);\n        if (n % 2 ==\
    \ 0) {\n            result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = n / 2;\n        long nextEven = n % 2 == 0 ? n : n + 1;\n\
    \        if (nextOdd % 2 == 0) {\n            result.Add(nextOdd);\n        }\n\
    \        else {\n            result.Add(nextEven);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = 0;\n        long nextEven = 0;\n        long nextOddEven = 0;\n        long\
    \ nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        if (n == 1L) {\n      \
    \      result.Add(n);\n            return result;\n        }\n        long nextOdd\
    \ = n % 2L;\n        long nextEven = n / 2L;\n        List<long> nextLevel = MakeAPile(nextEven);\n\
    \        List<long> nextLevel2 = MakeAPile(nextOdd);\n        result.AddRange(nextLevel);\n\
    \        result.AddRange(nextLevel2);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            return result;\n\
    \        }\n        long nextOdd = n % 2 == 1 ? n : n + 1;\n        long nextEven\
    \ = n % 2 == 0 ? n : n + 1;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        List<long> nextLevel = MakeAPile(nextEven);\n        if (nextLevel.Count\
    \ > 0) {\n            result.AddRange(nextLevel);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long nextOdd = 0;\n    \
    \    long nextEven = 0;\n        long currentLevel = 1;\n        long nextLevel\
    \ = 1;\n        long currentStones = 1;\n        long nextStones = 1;\n      \
    \  while (n > 0) {\n            if (n % 2 == 0) {\n                nextEven =\
    \ n;\n                nextStones = nextEven;\n            } else {\n         \
    \       nextOdd = n;\n                nextStones = nextOdd;\n            }\n \
    \           currentStones = nextStones;\n            currentLevel = nextLevel;\n\
    \            result.Add(currentStones);\n            n -= currentStones;\n   \
    \         nextStones = nextOdd;\n            nextLevel = nextEven;\n         \
    \   nextEven = nextOdd + nextEven;\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long nextOdd = (long)Math.Ceiling(n);\n\
    \        long nextEven = (long)Math.Floor(n);\n        if (n % 2 == 0) {\n   \
    \         result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = n;\n        long nextEven = n;\n        long nextOddEven\
    \ = n;\n        long nextOddEvenOdd = n;\n        long nextOddEvenOddEven = n;\n\
    \        long nextOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = n;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n     \
    \   long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = n;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = n;\n        long nextOddEvenOddEvenOddEvenOddEvenO", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = n / 2;\n        long nextEven =\
    \ n % 2;\n        if (nextOdd % 2 == 0) {\n            result.Add(nextOdd);\n\
    \        }\n        if (nextEven % 2 == 0) {\n            result.Add(nextEven);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd;\n        long nextEven;\n        if (n % 2 == 0) {\n  \
    \          nextEven = n;\n            nextOdd = n - 1;\n        } else {\n   \
    \         nextEven = n + 1;\n            nextOdd = n;\n        }\n        result.Add(nextOdd);\n\
    \        result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = 0;\n        long nextEven = 0;\n\
    \        long nextLevel = 0;\n        long nextLevelCount = 0;\n        long nextLevelCountEven\
    \ = 0;\n        long nextLevelCountOdd = 0;\n        long nextLevelCountTotal\
    \ = 0;\n        long nextLevelCountEvenTotal = 0;\n        long nextLevelCountOddTotal\
    \ = 0;\n        long nextLevelCountEvenOddTotal = 0;\n        long nextLevelCountEvenOddEvenTotal\
    \ = 0;\n        long nextLevelCountEvenOddOddTotal = 0;\n        long nextLevelCountEvenOddEvenOddTotal\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenTotal = 0;\n        long\
    \ nextLevelCountEvenOddEvenOddOddTotal = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddTotal\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenTotal = 0;\n     \
    \   long nextLevelCountEvenOddEvenOddEvenOddOddTotal = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddTotal\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenTotal = 0;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddOddTotal = 0;\n      \
    \  long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddTotal = 0;\n        long\
    \ nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenTotal = 0;\n        long\
    \ nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddTotal = 0;\n       \
    \ long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenTotal = 0;\n\
    \        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddTotal\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenTotal\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddTotal\
    \ = 0;\n        long nextLevelCountEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenTotal\
    \ = 0;\n        long nextLevelCountEvenOddEvenO", "        List<long> result =\
    \ new List<long>();\n        long nextOdd = 0;\n        long nextEven = 0;\n \
    \       long nextOddEven = 0;\n        long nextOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOdd = 0;\n        long\
    \ nextOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOdd =\
    \ 0;\n        long nextOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long\
    \ nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n      \
    \  long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n  \
    \      long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        long nextOdd = (n + 1)\
    \ >> 1;\n        long nextEven = (n + 1) >> 1;\n        long nextOddEven = nextOdd\
    \ + nextEven;\n        if (n & 1 == 0) {\n            result.Add(nextOdd);\n \
    \       } else {\n            result.Add(nextEven);\n        }\n        if (n\
    \ != 0) {\n            result.AddRange(MakeAPile(nextOddEven));\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    if (n == 0) return result;\n        long nextOdd = n / 2;\n        long nextEven\
    \ = n % 2;\n        if (nextOdd > 0) result.Add(nextOdd);\n        if (nextEven\
    \ == 0) result.Add(nextEven);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long nextOdd = (n + 1) / 2;\n        long nextEven\
    \ = (n + 2) / 2;\n        if (n % 2 == 0) {\n            result.Add(nextEven);\n\
    \        } else {\n            result.Add(nextOdd);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long nextOdd\
    \ = (n + 1) >> 1;\n        long nextEven = n >> 1;\n        if (n % 2 == 0) {\n\
    \            result.Add(nextEven);\n        } else {\n            result.Add(nextOdd);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long nextOdd = 0;\n        long nextEven = 0;\n        long nextOddEven\
    \ = 0;\n        long nextOddEvenOdd = 0;\n        long nextOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOdd = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n       \
    \ long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = 0;\n   \
    \     long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = 0;\n\
    \        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = 0;\n        long nextOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        long nextOdd = n % 2 == 0 ? n : n + 1;\n        long nextEven = n % 2\
    \ == 0 ? n + 1 : n;\n        result.Add(nextOdd);\n        result.Add(nextEven);\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
