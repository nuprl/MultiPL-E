language: cs
name: HumanEval_117_select_words
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        bool isConsonant = false;\n        bool isWord = false;\n\
    \        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n      \
    \          word += c;\n                isWord = true;\n            }\n       \
    \     else if (char.IsWhiteSpace(c)) {\n                if (isWord) {\n      \
    \              result.Add(word);\n                    isWord = false;\n      \
    \          }\n            }\n            else if (char.IsPunctuation(c)) {\n \
    \               if (isWord) {\n                    result.Add(word);\n       \
    \             isWord = false;\n                }\n            }\n            else\
    \ if (char.IsLetterOrDigit(c)) {\n                if (isWord) {\n            \
    \        result.Add(word);\n                    isWord = false;\n            \
    \    }\n            }\n            else if (char.IsWhiteSpace(c)) {\n        \
    \        if (isWord) {\n                    result.Add(word);\n              \
    \      isWord = false;\n                }\n            }\n            else {\n\
    \                isConsonant = true;\n            }\n        }\n        if (isWord)\
    \ {\n            result.Add(word);\n        }\n        if (s.Length == 0) {\n\
    \            return result;\n        }\n        if (result.Count < n) {\n    \
    \        long remain = n - result.Count;\n            while (result.Count < n)\
    \ {\n                result.Add(\"\");\n            }\n            while (result.Count\
    \ > remain) {\n                result.RemoveAt(result.Count - 1);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10eb44026017403098a0b5a41284e952>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <10eb44026017403098a0b5a41284e952>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805500
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") return result;\n        string word = \"\";\n        bool isConsonant\
    \ = false;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n                isConsonant = true;\n       \
    \     }\n            if (isConsonant) {\n                if (word.Length == n)\
    \ result.Add(word);\n                word = \"\";\n                isConsonant\
    \ = false;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <027df0807ea6451bbb29040695158d0c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <027df0807ea6451bbb29040695158d0c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805500
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        long maxCount = s.Length;\n\
    \        long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                count++;\n                if (count > maxCount) maxCount\
    \ = count;\n            }\n        }\n        if (maxCount != s.Length) {\n  \
    \          Console.WriteLine(\"Invalid input\");\n            return result;\n\
    \        }\n        long maxCount2 = n;\n        long count2 = 0;\n        foreach\
    \ (char c in s) {\n            if (char.IsLetter(c)) {\n                count2++;\n\
    \                if (count2 > maxCount2) maxCount2 = count2;\n            }\n\
    \        }\n        if (maxCount2 != n) {\n            Console.WriteLine(\"Invalid\
    \ input\");\n            return result;\n        }\n        long maxCount3 = n;\n\
    \        long count3 = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                count3++;\n                if (count3 > maxCount3) maxCount3\
    \ = count3;\n            }\n        }\n        if (maxCount3 != n) {\n       \
    \     Console.WriteLine(\"Invalid input\");\n            return result;\n    \
    \    }\n        long maxCount4 = n;\n        long count4 = 0;\n        foreach\
    \ (char c in s) {\n            if (char.IsLetter(c)) {\n                count4++;\n\
    \                if (count4 > maxCount4) maxCount4 = count4;\n            }\n\
    \        }\n        if (maxCount4 != n) {\n            Console.WriteLine(\"Invalid\
    \ input\");\n            return result;\n        }\n        long maxCount5 = n;\n\
    \        long count5 = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                count5++;\n                if (count5 > maxCount5) maxCount5\
    \ = count5;\n            }\n        }\n        if (maxCount5 != n) {\n       \
    \     Console.WriteLine(\"Invalid input\");\n            return result;\n    \
    \    }\n        long maxCount6 = n;\n        long count6 = 0;\n        foreach\
    \ (char c in s) {\n            if (char.IsLetter(c)) {\n                count6++;\n\
    \                if (count6 > maxCount6) maxCount6 = count6;\n            }\n\
    \        }\n        if (maxCount6 != n) {\n            Console.WriteLine(\"Invalid\
    \ input\");\n            return result;\n        }\n        long maxCount7 = n;\n\
    \        long count7 = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                count7++;\n                if (count7 > maxCount7) maxCount7\
    \ = count7;\n            }\n        }\n        if (maxCount7 != n) {\n       \
    \     Console.WriteLine(\"Invalid input\");\n            return result;\n    \
    \    }\n        long maxCount8 = n;\n        long count8 = 0;\n        foreach\
    \ (char c in s) {\n            if (char.IsLetter\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm9gr2t5a.cs(115,30): error CS1026: ) expected

    /tmp/tmpm9gr2t5a.cs(115,30): error CS1525: Invalid expression term ''}''

    /tmp/tmpm9gr2t5a.cs(115,30): error CS1002: ; expected

    /tmp/tmpm9gr2t5a.cs(117,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpm9gr2t5a.cs(127,2): error CS1513: } expected

    '
  timestamp: 1659805499
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        List<string>\
    \ words = new List<string>();\n        string word = \"\";\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                word +=\
    \ c;\n                if (word.Length == n) {\n                    words.Add(word);\n\
    \                    word = \"\";\n                }\n            }\n        }\n\
    \        if (word.Length > 0) {\n            words.Add(word);\n        }\n   \
    \     return words;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new\
    \ string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\"\
    , (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0d22ef6bb904359aa60c68f4a64f41c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0d22ef6bb904359aa60c68f4a64f41c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805500
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in s) {\n   \
    \         if (char.IsLetter(c)) {\n                word += c;\n              \
    \  count++;\n            }\n            if (count == n) {\n                result.Add(word);\n\
    \                word = \"\";\n                count = 0;\n            }\n   \
    \     }\n        if (word != \"\") {\n            result.Add(word);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        string lastWord = string.Empty;\n     \
    \   bool isConsonant = false;\n        bool isLastConsonant = false;\n       \
    \ bool isLastWord = false;\n        bool isLastLastWord = false;\n        bool\
    \ isLastLastLastWord = false;\n        bool isLastLastLastLastWord = false;\n\
    \        bool isLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastWord = false;\n        bool\
    \ isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n       \
    \ bool isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n       \
    \ bool isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastWord = false;\n   \
    \     bool isLastLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastWord = false;\n   \
    \     bool isLastLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastWord = false;\n   \
    \     bool isLastLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastWord = false;\n   \
    \     bool isLastLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastWord = false;\n   \
    \     bool isLastLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastWord = false;\n   \
    \     bool isLastLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastLastWord = false;\n\
    \        bool isLastLastLastLastLastLastLastLastLast\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxrhg9ulq.cs(68,52): error CS1002: ; expected

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string word2 = \"\";\n        string word3 = \"\";\n \
    \       string word4 = \"\";\n        string word5 = \"\";\n        string word6\
    \ = \"\";\n        string word7 = \"\";\n        string word8 = \"\";\n      \
    \  string word9 = \"\";\n        string word10 = \"\";\n        string word11\
    \ = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n    \
    \    string word14 = \"\";\n        string word15 = \"\";\n        string word16\
    \ = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n    \
    \    string word19 = \"\";\n        string word20 = \"\";\n        string word21\
    \ = \"\";\n        string word22 = \"\";\n        string word23 = \"\";\n    \
    \    string word24 = \"\";\n        string word25 = \"\";\n        string word26\
    \ = \"\";\n        string word27 = \"\";\n        string word28 = \"\";\n    \
    \    string word29 = \"\";\n        string word30 = \"\";\n        string word31\
    \ = \"\";\n        string word32 = \"\";\n        string word33 = \"\";\n    \
    \    string word34 = \"\";\n        string word35 = \"\";\n        string word36\
    \ = \"\";\n        string word37 = \"\";\n        string word38 = \"\";\n    \
    \    string word39 = \"\";\n        string word40 = \"\";\n        string word41\
    \ = \"\";\n        string word42 = \"\";\n        string word43 = \"\";\n    \
    \    string word44 = \"\";\n        string word45 = \"\";\n        string word46\
    \ = \"\";\n        string word47 = \"\";\n        string word48 = \"\";\n    \
    \    string word49 = \"\";\n        string word50 = \"\";\n        string word51\
    \ = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n    \
    \    string word54 = \"\";\n        string word55 = \"\";\n        string word56\
    \ = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n    \
    \    string word59 = \"\";\n        string word60 = \"\";\n        string word61\
    \ = \"\";\n        string word62 = \"\";\n        string word63 = \"\";\n    \
    \    string word64 = \"\";\n        string word65 = \"\";\n        string word66\
    \ = \"\";\n        string word67 = \"\";\n        string word68 = \"\";\n    \
    \    string word69 = \"\";\n        string word70 = \"\";\n        string word71\
    \ = \"\";\n        string word72 = \"\";\n        string word73 = \"\";\n    \
    \    string word74 = \"\";\n        string word75 = \"\";\n        string word76\
    \ = \"\";\n        string word77 = \"\";\n        string word78 = \"\";\n    \
    \    string word79 = \"\";\n        string word80 = \"\";\n        string word81\
    \ = \"\";\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkfqsyjzm.cs(27,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(28,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(29,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(30,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(31,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(32,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(33,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(34,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(35,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(36,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(37,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(38,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(39,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(40,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(41,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(42,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(43,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(44,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(45,'
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        bool isWord = false;\n        bool isConsonant = false;\n\
    \        bool isSpace = false;\n        bool isLetter = false;\n        bool isSpaceOrLetter\
    \ = false;\n        bool isWordStarted = false;\n        bool isWordEnded = false;\n\
    \        bool isWordStarting = false;\n        bool isWordEnding = false;\n  \
    \      bool isWordStartingOrEnding = false;\n        bool isWordStartingOrEndingOrSpace\
    \ = false;\n        bool isWordStartingOrEndingOrSpaceOrLetter = false;\n    \
    \    bool isWordStartingOrEndingOrSpaceOrLetterOrConsonant = false;\n        bool\
    \ isWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStarting = false;\n  \
    \      bool isWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordEnding = false;\n\
    \        bool isWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStartingOrEnding\
    \ = false;\n        bool isWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStartingOrEndingOrSpace\
    \ = false;\n        bool isWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStartingOrEndingOrSpaceOrLetter\
    \ = false;\n        bool isWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStartingOrEndingOrSpaceOrLetterOrConsonant\
    \ = false;\n        bool isWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStarting\
    \ = false;\n        bool isWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordEnding\
    \ = false;\n        bool isWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStartingOrEnding\
    \ = false;\n        bool isWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStartingOrEndingOrSpace\
    \ = false;\n        bool isWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStartingOrEndingOrSpaceOrLetter\
    \ = false;\n        \n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new\
    \ string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\"\
    , (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkrra0q6x.cs(27,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpkrra0q6x.cs(28,14): warning CS0219: The variable ''isWord'' is assigned
    but its value is never used

    /tmp/tmpkrra0q6x.cs(29,14): warning CS0219: The variable ''isConsonant'' is assigned
    but its value is never used

    /tmp/tmpkrra0q6x.cs(30,14): warning CS0219: The variable ''isSpace'' is assigned
    but its value is never used

    /tmp/tmpkrra0q6x.cs(31,14): warning CS0219: The variable ''isLetter'' is assigned
    but its value is never used

    /tmp/tmpkrra0q6x.cs(32,14): warning CS0219: The variable ''isSpaceOrLetter'' is
    assigned but its value is never used

    /tmp/tmpkrra0q6x.cs(33,14): warning CS0219: The variable ''isWordStarted'' is
    assigned but its value is never used

    /tmp/tmpkrra0q6x.cs(34,14): warning CS0219: The variable ''isWordEnded'' is assigned
    but its value is never used

    /tmp/tmpkrra0q6x.cs(35,14): warning CS0219: The variable ''isWordStarting'' is
    assigned but its value is never used

    /tmp/tmpkrra0q6x.cs(36,14): warning CS0219: The variable ''isWordEnding'' is assigned
    but its value is never used

    /tmp/tmpkrra0q6x.cs(37,14): warning CS0219: The variable ''isWordStartingOrEnding''
    is assigned but its value is never used

    /tmp/tmpkrra0q6x.cs(38,14): warning CS0219: The variable ''isWordStartingOrEndingOrSpace''
    is assigned but its value is never used

    /tmp/tmpkrra0q6x.cs(39,14): warning CS0219: The variable ''isWordStartingOrEndingOrSpaceOrLetter''
    is assigned but its value is never used

    /tmp/tmpkrra0q6x.cs(40,14): warning CS0219: The variable ''isWordStartingOrEndingOrSpaceOrLetterOrConsonant''
    is assigned but its value is never used

    /tmp/tmpkrra0q6x.cs(41,14): warning CS0219: The variable ''isWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordStarting''
    is assigned but its value is never used

    /tmp/tmpkrra0q6x.cs(42,14): warning CS0219: The variable ''isWordStartingOrEndingOrSpaceOrLetterOrConsonantOrWordEnding''
    is'
  timestamp: 1659805499
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        foreach (char c in s) {\n            if\
    \ (char.IsLetterOrDigit(c)) {\n                word += c;\n            }\n   \
    \     }\n        string word2 = \"\";\n        foreach (char c in word) {\n  \
    \          if (char.IsLetterOrDigit(c)) {\n                word2 += c;\n     \
    \       }\n        }\n        string word3 = \"\";\n        foreach (char c in\
    \ word2) {\n            if (char.IsLetterOrDigit(c)) {\n                word3\
    \ += c;\n            }\n        }\n        string word4 = \"\";\n        foreach\
    \ (char c in word3) {\n            if (char.IsLetterOrDigit(c)) {\n          \
    \      word4 += c;\n            }\n        }\n        string word5 = \"\";\n \
    \       foreach (char c in word4) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word5 += c;\n            }\n        }\n        string word6\
    \ = \"\";\n        foreach (char c in word5) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word6 += c;\n            }\n        }\n        string word7\
    \ = \"\";\n        foreach (char c in word6) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word7 += c;\n            }\n        }\n        string word8\
    \ = \"\";\n        foreach (char c in word7) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word8 += c;\n            }\n        }\n        string word9\
    \ = \"\";\n        foreach (char c in word8) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word9 += c;\n            }\n        }\n        string word10\
    \ = \"\";\n        foreach (char c in word9) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word10 += c;\n            }\n        }\n        string word11\
    \ = \"\";\n        foreach (char c in word10) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word11 += c;\n            }\n        }\n        string word12\
    \ = \"\";\n        foreach (char c in word11) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word12 += c;\n            }\n        }\n        string word13\
    \ = \"\";\n        foreach (char c in word12) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word13 += c;\n            }\n        }\n        string word14\
    \ = \"\";\n        foreach (char c in word13) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word14 += c;\n            }\n        }\n        string word15\
    \ = \"\";\n        foreach (char c in word14) {\n            if (char.Is\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl82n112d.cs(116,24): error CS1026: ) expected

    /tmp/tmpl82n112d.cs(116,24): error CS1525: Invalid expression term ''}''

    /tmp/tmpl82n112d.cs(116,24): error CS1002: ; expected

    /tmp/tmpl82n112d.cs(118,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpl82n112d.cs(128,2): error CS1513: } expected

    '
  timestamp: 1659805499
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word += c;\n            }\n        }\n        if (word.Length\
    \ == n) {\n            result.Add(word);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d276698af524ce397483b60537450af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d276698af524ce397483b60537450af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805500
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = string.Empty;\n\
    \        string lastWord = string.Empty;\n        bool isConsonant = false;\n\
    \        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n      \
    \          word += c;\n                isConsonant = true;\n            }\n  \
    \          else {\n                if (isConsonant) {\n                    if\
    \ (word.Length == n) {\n                        result.Add(word);\n          \
    \              word = string.Empty;\n                        isConsonant = false;\n\
    \                    }\n                    else {\n                        word\
    \ += c;\n                    }\n                }\n                else {\n  \
    \                  if (word.Length == n) {\n                        result.Add(word);\n\
    \                        word = string.Empty;\n                        isConsonant\
    \ = false;\n                    }\n                    else {\n              \
    \          word += c;\n                    }\n                }\n            }\n\
    \        }\n        if (word.Length > 0) {\n            result.Add(word);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88123f50dcf2462f9c4a29373eb8eb17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88123f50dcf2462f9c4a29373eb8eb17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805500
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        List<char> consonants = new List<char>();\n\
    \        foreach (char c in chars) {\n            if (char.IsLower(c)) {\n   \
    \             consonants.Add(c);\n            }\n        }\n        List<string>\
    \ words = new List<string>();\n        long count = 1;\n        foreach (char\
    \ c in consonants) {\n            while (count < n && chars.Contains(c)) {\n \
    \               words.Add(new string(chars, 0, chars.IndexOf(c)));\n         \
    \       chars[chars.IndexOf(c)] = ' ';\n                count++;\n           \
    \ }\n        }\n        result.AddRange(words);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpub9dbnsy.cs(41,54): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    /tmp/tmpub9dbnsy.cs(42,29): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659805499
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        long\
    \ count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                count++;\n            }\n        }\n        if (count ==\
    \ n) {\n            foreach (char c in s) {\n                if (char.IsLetter(c))\
    \ {\n                    result.Add(c.ToString());\n                }\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bea3c23cd82342edb1af149be5079fda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bea3c23cd82342edb1af149be5079fda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805500
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        char[]\
    \ charsCopy = chars.ToArray();\n        Array.Sort(charsCopy);\n        char[]\
    \ charsCopy2 = charsCopy.ToArray();\n        Array.Sort(charsCopy2);\n       \
    \ char[] charsCopy3 = charsCopy2.ToArray();\n        Array.Sort(charsCopy3);\n\
    \        char[] charsCopy4 = charsCopy3.ToArray();\n        Array.Sort(charsCopy4);\n\
    \        char[] charsCopy5 = charsCopy4.ToArray();\n        Array.Sort(charsCopy5);\n\
    \        char[] charsCopy6 = charsCopy5.ToArray();\n        Array.Sort(charsCopy6);\n\
    \        char[] charsCopy7 = charsCopy6.ToArray();\n        Array.Sort(charsCopy7);\n\
    \        char[] charsCopy8 = charsCopy7.ToArray();\n        Array.Sort(charsCopy8);\n\
    \        char[] charsCopy9 = charsCopy8.ToArray();\n        Array.Sort(charsCopy9);\n\
    \        char[] charsCopy10 = charsCopy9.ToArray();\n        Array.Sort(charsCopy10);\n\
    \        char[] charsCopy11 = charsCopy10.ToArray();\n        Array.Sort(charsCopy11);\n\
    \        char[] charsCopy12 = charsCopy11.ToArray();\n        Array.Sort(charsCopy12);\n\
    \        char[] charsCopy13 = charsCopy12.ToArray();\n        Array.Sort(charsCopy13);\n\
    \        char[] charsCopy14 = charsCopy13.ToArray();\n        Array.Sort(charsCopy14);\n\
    \        char[] charsCopy15 = charsCopy14.ToArray();\n        Array.Sort(charsCopy15);\n\
    \        char[] charsCopy16 = charsCopy15.ToArray();\n        Array.Sort(charsCopy16);\n\
    \        char[] charsCopy17 = charsCopy16.ToArray();\n        Array.Sort(charsCopy17);\n\
    \        char[] charsCopy18 = charsCopy17.ToArray();\n        Array.Sort(charsCopy18);\n\
    \        char[] charsCopy19 = charsCopy18.ToArray();\n        Array.Sort(charsCopy19);\n\
    \        char[] charsCopy20 = \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0wuveaik.cs(70,29): error CS1525: Invalid expression term ''}''

    /tmp/tmp0wuveaik.cs(70,29): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        long count\
    \ = 0;\n        long start = 0;\n        long end = 0;\n        bool isConsonant\
    \ = false;\n        bool isConsonant2 = false;\n        bool isConsonant3 = false;\n\
    \        bool isConsonant4 = false;\n        bool isConsonant5 = false;\n    \
    \    bool isConsonant6 = false;\n        bool isConsonant7 = false;\n        bool\
    \ isConsonant8 = false;\n        bool isConsonant9 = false;\n        bool isConsonant10\
    \ = false;\n        bool isConsonant11 = false;\n        bool isConsonant12 =\
    \ false;\n        bool isConsonant13 = false;\n        bool isConsonant14 = false;\n\
    \        bool isConsonant15 = false;\n        bool isConsonant16 = false;\n  \
    \      bool isConsonant17 = false;\n        bool isConsonant18 = false;\n    \
    \    bool isConsonant19 = false;\n        bool isConsonant20 = false;\n      \
    \  bool isConsonant21 = false;\n        bool isConsonant22 = false;\n        bool\
    \ isConsonant23 = false;\n        bool isConsonant24 = false;\n        bool isConsonant25\
    \ = false;\n        bool isConsonant26 = false;\n        bool isConsonant27 =\
    \ false;\n        bool isConsonant28 = false;\n        bool isConsonant29 = false;\n\
    \        bool isConsonant30 = false;\n        bool isConsonant31 = false;\n  \
    \      bool isConsonant32 = false;\n        bool isConsonant33 = false;\n    \
    \    bool isConsonant34 = false;\n        bool isConsonant35 = false;\n      \
    \  bool isConsonant36 = false;\n        bool isConsonant37 = false;\n        bool\
    \ isConsonant38 = false;\n        bool isConsonant39 = false;\n        bool isConsonant40\
    \ = false;\n        bool isConsonant41 = false;\n        bool isConsonant42 =\
    \ false;\n        bool isConsonant43 = false;\n        bool isConsonant44 = false;\n\
    \        bool isConsonant45 = false;\n        bool isConsonant46 = false;\n  \
    \      bool isConsonant47 = false;\n        bool isConsonant48 = false;\n    \
    \    bool isConsonant49 = false;\n        bool isConsonant50 = false;\n      \
    \  \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppws4tz8f.cs(32,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmppws4tz8f.cs(33,14): warning CS0219: The variable ''start'' is assigned
    but its value is never used

    /tmp/tmppws4tz8f.cs(34,14): warning CS0219: The variable ''end'' is assigned but
    its value is never used

    /tmp/tmppws4tz8f.cs(35,14): warning CS0219: The variable ''isConsonant'' is assigned
    but its value is never used

    /tmp/tmppws4tz8f.cs(36,14): warning CS0219: The variable ''isConsonant2'' is assigned
    but its value is never used

    /tmp/tmppws4tz8f.cs(37,14): warning CS0219: The variable ''isConsonant3'' is assigned
    but its value is never used

    /tmp/tmppws4tz8f.cs(38,14): warning CS0219: The variable ''isConsonant4'' is assigned
    but its value is never used

    /tmp/tmppws4tz8f.cs(39,14): warning CS0219: The variable ''isConsonant5'' is assigned
    but its value is never used

    /tmp/tmppws4tz8f.cs(40,14): warning CS0219: The variable ''isConsonant6'' is assigned
    but its value is never used

    /tmp/tmppws4tz8f.cs(41,14): warning CS0219: The variable ''isConsonant7'' is assigned
    but its value is never used

    /tmp/tmppws4tz8f.cs(42,14): warning CS0219: The variable ''isConsonant8'' is assigned
    but its value is never used

    /tmp/tmppws4tz8f.cs(43,14): warning CS0219: The variable ''isConsonant9'' is assigned
    but its value is never used

    /tmp/tmppws4tz8f.cs(44,14): warning CS0219: The variable ''isConsonant10'' is
    assigned but its value is never used

    /tmp/tmppws4tz8f.cs(45,14): warning CS0219: The variable ''isConsonant11'' is
    assigned but its value is never used

    /tmp/tmppws4tz8f.cs(46,14): warning CS0219: The variable ''isConsonant12'' is
    assigned but its value is never used

    /tmp/tmppws4tz8f.cs(47,14): warning CS0219: The variable ''isConsonant13'' is
    assigned but its value is never used

    /tmp/tmppws4tz8f.cs(48,14): warning CS0219: The variable ''isConsonant14'' is
    assigned but its value is never used

    /tmp/tmppws4tz8f.cs(49,14): warning '
  timestamp: 1659805499
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string vowels = \"aeiou\"\
    ;\n        string consonants = \"bcdfghjklmnpqrstvwxyz\";\n        string vowelsAndConsonants\
    \ = vowels + consonants;\n        string vowelsAndConsonantsString = vowelsAndConsonants.ToLower();\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        string vowelsAndConsonantsStringLength = vowelsAndConsonantsString.Length;\n\
    \        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5l_j9gzg.cs(32,50): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmp5l_j9gzg.cs(33,16): error CS0128: A local variable or function named ''vowelsAndConsonantsStringLength''
    is already defined in this scope

    /tmp/tmp5l_j9gzg.cs(33,50): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmp5l_j9gzg.cs(34,16): error CS0128: A local variable or function named ''vowelsAndConsonantsStringLength''
    is already defined in this scope

    /tmp/tmp5l_j9gzg.cs(34,50): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmp5l_j9gzg.cs(35,16): error CS0128: A local variable or function named ''vowelsAndConsonantsStringLength''
    is already defined in this scope

    /tmp/tmp5l_j9gzg.cs(35,50): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmp5l_j9gzg.cs(36,16): error CS0128: A local variable or function named ''vowelsAndConsonantsStringLength''
    is already defined in this scope

    /tmp/tmp5l_j9gzg.cs(36,50): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmp5l_j9gzg.cs(37,16): error CS0128: A local variable or function named ''vowelsAndConsonantsStringLength''
    is already defined in this scope

    /tmp/tmp5l_j9gzg.cs(37,50): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmp5l_j9gzg.cs(38,16): error CS0128: A local variable or function named ''vowelsAndConsonantsStringLength''
    is already defined in this scope

    /tmp/tmp5l_j9gzg.cs(38,50): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmp5l_j9gzg.cs(39,16): error CS0128: A local variable or function named ''vowelsAndConsonantsStringLength''
    is already defined in this scope

    /tmp/tmp5l_j9gzg.cs(39,50): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmp5l_j9gzg.cs(40,16): error CS0128: A local variable or function named ''vowelsAndConsonantsStringLength''
    is already defined in this scope

    /tmp/tmp5l_j9gzg.cs(40,50): error CS0029:'
  timestamp: 1659805499
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        char[] chars = s.ToCharArray();\n\
    \        Array.Sort(chars);\n        string word = \"\";\n        bool isWord\
    \ = false;\n        long count = 0;\n        foreach (char c in chars) {\n   \
    \         if (char.IsLetter(c)) {\n                isWord = true;\n          \
    \      word += c;\n                count++;\n            }\n            if (isWord\
    \ && count == n) {\n                result.Add(word);\n                isWord\
    \ = false;\n                word = \"\";\n                count = 0;\n       \
    \     }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e23de2cdc1d4bcc88a0e6d5d9403adf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e23de2cdc1d4bcc88a0e6d5d9403adf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805500
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        string word\
    \ = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        string lastWord2 = s.Substring(s.Length - 2, 1);\n       \
    \ string lastWord3 = s.Substring(s.Length - 3, 1);\n        string lastWord4 =\
    \ s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length\
    \ - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n       \
    \ string lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 =\
    \ s.Substring(s.Length - 8, 1);\n        string lastWord9 = s.Substring(s.Length\
    \ - 9, 1);\n        string lastWord10 = s.Substring(s.Length - 10, 1);\n     \
    \   string lastWord11 = s.Substring(s.Length - 11, 1);\n        string lastWord12\
    \ = s.Substring(s.Length - 12, 1);\n        string lastWord13 = s.Substring(s.Length\
    \ - 13, 1);\n        string lastWord14 = s.Substring(s.Length - 14, 1);\n    \
    \    string lastWord15 = s.Substring(s.Length - 15, 1);\n        string lastWord16\
    \ = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length\
    \ - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n    \
    \    string lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20\
    \ = s.Substring(s.Length - 20, 1);\n        string lastWord21 = s.Substring(s.Length\
    \ - 21, 1);\n        string lastWord22 = s.Substring(s.Length - 22, 1);\n    \
    \    string lastWord23 = s.Substring(s.Length - 23, 1);\n        string lastWord24\
    \ = s.Substring(s.Length - 24, 1);\n        string lastWord25 = s.Substring(s.Length\
    \ - 25, 1);\n        string lastWord26 = s.Substring(s.Length - 26, 1);\n    \
    \    string lastWord27 = s.Substring(s.Length - 27, 1);\n        string lastWord28\
    \ = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length\
    \ - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n    \
    \    string lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32\
    \ = s.Substring(s.Length - 32, 1);\n        string lastWord33 = s.Substring(s.Length\
    \ - \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnazzgicj.cs(63,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpnazzgicj.cs(63,51): error CS1026: ) expected

    /tmp/tmpnazzgicj.cs(63,51): error CS1002: ; expected

    '
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = string.Empty;\n\
    \        long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n                count++;\n            }\n   \
    \         if (count == n) result.Add(word);\n            word = string.Empty;\n\
    \            count = 0;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e5d91a70d8344d638563520939f0b8d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e5d91a70d8344d638563520939f0b8d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805500
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        char[] chars =\
    \ s.ToCharArray();\n        int[] count = new int[26];\n        for (int i = 0;\
    \ i < chars.Length; i++) {\n            int c = chars[i] - 'a';\n            count[c]++;\n\
    \        }\n        List<int> sortedCount = new List<int>(count);\n        sortedCount.Sort();\n\
    \        List<int> resultCount = new List<int>();\n        long total = 0;\n \
    \       for (int i = 0; i < sortedCount.Count; i++) {\n            int count =\
    \ sortedCount[i];\n            if (count > n) {\n                break;\n    \
    \        }\n            total += count;\n            resultCount.Add(count);\n\
    \        }\n        long remaining = total;\n        List<string> words = new\
    \ List<string>();\n        for (int i = 0; i < resultCount.Count; i++) {\n   \
    \         int count = resultCount[i];\n            if (count > remaining) {\n\
    \                break;\n            }\n            words.Add(s.Substring(0, i));\n\
    \            remaining -= count;\n        }\n        return words;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn9j5mnl0.cs(41,17): error CS0136: A local or parameter named ''count''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpn9j5mnl0.cs(51,17): error CS0136: A local or parameter named ''count''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659805499
