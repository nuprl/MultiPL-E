name: HumanEval_136_largest_smallest_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n\
  \    // the largest of negative integers, and 'b' is the smallest\n    // of positive\
  \ integers in a list.\n    // If there is no negative or positive integers, return\
  \ them as None.\n    // Examples:\n    // >>> LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L})))\n    //\
  \ Tuple.Create((Nullable<long>)null, 1L)\n    // >>> LargestSmallestIntegers((new\
  \ List<long>()))\n    // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n\
  \    // >>> LargestSmallestIntegers((new List<long>(new long[]{(long)0L})))\n  \
  \  // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    public static\
  \ Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L,\
  \ (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L,\
  \ (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L,\
  \ (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null,\
  \ (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L,\
  \ 1L)));\n    }\n\n}\n"
completions: ["        if (lst.Count == 0) {\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        }\n        long largest = lst.Max();\n     \
    \   long smallest = lst.Min();\n        if (largest < smallest) {\n          \
    \  return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n        }\n\
    \        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create(null, smallest);\n\
    \        }\n        if (largest == smallest) {\n            return Tuple.Create(null,\
    \ null);\n        }\n        List<long> negative = new List<long>();\n       \
    \ List<long> positive = new List<long>();\n        foreach (long n in lst) {\n\
    \            if (n < 0) {\n                negative.Add(n);\n            } else\
    \ {\n                positive.Add(n);\n            }\n        }\n        if (negative.Count\
    \ > 0 && positive.Count > 0) {\n            long largestNegative = negative.Max();\n\
    \            long smallestPositive = positive.Min();\n            if (largestNegative\
    \ < smallestPositive) {\n                return Tuple.Create(null, smallestPositive);\n\
    \            }\n            if (largestNegative == smallestPositive) {\n     \
    \           return Tuple.Create(null, null);\n            }\n            List<long>\
    \ negative2 = new List<long>();\n            List<long> positive2 = new List<long>();\n\
    \            foreach (long n in lst) {\n                if (n < 0) {\n       \
    \             negative2.Add(n);\n                } else {\n                  \
    \  positive2.Add(n);\n                }\n            }\n            if (negative2.Count\
    \ > 0 && positive2.Count > 0) {\n                long largestNegative2 = negative2.Max();\n\
    \                long smallestPositive2 = positive2.Min();\n                if\
    \ (largestNegative2 < smallestPositive2) {\n                    return Tuple.Create(null,\
    \ smallestPositive2);\n                }\n                if (largestNegative2\
    \ == smallestPositive2) {\n                    return Tuple.Create(null, null);\n\
    \                }\n            }\n        }\n        return Tuple.Create(null,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create((Nullable<long>)null, smallest);\n        }\n     \
    \   return Tuple.Create((Nullable<long>)null, largest);", "        long max =\
    \ 0;\n        long min = 0;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                max = Math.Max(max, i);\n            } else {\n \
    \               min = Math.Min(min, i);\n            }\n        }\n        return\
    \ Tuple.Create(max < min ? null : (Nullable<long>)max, min < 0 ? null : (Nullable<long>)min);",
  "        if (lst.Count == 0) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        long largest = lst.Max();\n        long smallest = lst.Min();\n     \
    \   if (largest < smallest) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        if (largest == smallest) return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);\n        long largestNegative = lst.Where(x => x\
    \ < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        if (largestNegative == smallestPositive) return\
    \ Tuple.Create((Nullable<long>)largestNegative, (Nullable<long>)smallestPositive);\n\
    \        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create(null, smallest);\n\
    \        }\n        if (largest == smallest) {\n            return Tuple.Create(largest,\
    \ largest);\n        }\n        List<long> negative = new List<long>();\n    \
    \    List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                negative.Add(i);\n            }\
    \ else {\n                positive.Add(i);\n            }\n        }\n       \
    \ if (negative.Count > 0 && positive.Count > 0) {\n            long largestNegative\
    \ = negative.Max();\n            long smallestPositive = positive.Min();\n   \
    \         if (largestNegative < smallestPositive) {\n                return Tuple.Create(null,\
    \ smallestPositive);\n            }\n            if (largestNegative == smallestPositive)\
    \ {\n                return Tuple.Create(largestNegative, largestNegative);\n\
    \            }\n            List<long> negativePositive = new List<long>();\n\
    \            List<long> negativeNegative = new List<long>();\n            List<long>\
    \ positivePositive = new List<long>();\n            List<long> positiveNegative\
    \ = new List<long>();\n            foreach (long i in lst) {\n               \
    \ if (i < 0) {\n                    if (i < smallestPositive) {\n            \
    \            negativePositive.Add(i);\n                    } else if (i < largestNegative)\
    \ {\n                        negativeNegative.Add(i);\n                    } else\
    \ {\n                        positivePositive.Add(i);\n                    }\n\
    \                } else {\n                    if (i < smallestPositive) {\n \
    \                       positivePositive.Add(i);\n                    } else if\
    \ (i < largestNegative) {\n                        positiveNegative.Add(i);\n\
    \                    } else {\n                        negativePositive.Add(i);\n\
    \                        negativeNegative.Add(i);\n                    }\n   \
    \             }\n            }\n            if (negativePositive.Count > 0 &&\
    \ negativeNegative.Count > 0) {\n                long largestNegativePositive\
    \ = negativePositive.Max();\n                long smallestNegativeNegative = negativeNegative.Min();\n\
    \                if (largestNegativePositive < smallestNegativeNegative) {\n \
    \                   return Tuple.Create(null, smallestNegativeNegative);\n   \
    \             }\n                if (largestNegativePositive == smallestNegativeNegative)\
    \ {\n                    return Tuple.Create(largestNegativePositive, largestNegativePositive);\n\
    \                }\n                List<long> negativePositiveNegative = new\
    \ List<long>();\n                List<long> negativePositivePositive = new List<long>();\n\
    \                List<long> negativeNegativePositive = new List<long>();\n   \
    \             List<long> negativeNegativeNegative = new List<long>();\n      \
    \          List<long> positivePositivePositive = new List<long>();\n         \
    \       List<long> positivePositiveNegative = new List<long>();\n            \
    \    List<long> positiveNegativePositive = new List<", "        long largest =\
    \ lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create(null, smallest);\n        }\n        if (largest\
    \ == smallest) {\n            return Tuple.Create(largest, largest);\n       \
    \ }\n        List<long> negative = new List<long>();\n        List<long> positive\
    \ = new List<long>();\n        foreach (long i in lst) {\n            if (i <\
    \ 0) {\n                negative.Add(i);\n            } else {\n             \
    \   positive.Add(i);\n            }\n        }\n        Tuple<Nullable<long>,\
    \ Nullable<long>> result = LargestSmallestIntegers(negative);\n        if (result.Item1\
    \ == null) {\n            return result;\n        }\n        return LargestSmallestIntegers(positive);",
  "        if (lst.Count == 0) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        long largest = lst.Max();\n        long smallest = lst.Min();\n     \
    \   if (largest < smallest) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        if (largest == smallest) return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create(null, smallest);\n\
    \        }\n        return Tuple.Create(largest, null);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        if (lst.Count == 0) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        long a = lst.FindIndex(x => x < 0);\n      \
    \  long b = lst.FindIndex(x => x >= 0);\n        if (a < b) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create((Nullable<long>)null, smallest);\n        }\n        if (largest\
    \ == smallest) {\n            return Tuple.Create((Nullable<long>)null, largest);\n\
    \        }\n        long largestNegative = lst.FindIndex(x => x < 0);\n      \
    \  long smallestPositive = lst.FindIndex(x => x > 0);\n        if (largestNegative\
    \ == -1 && smallestPositive == -1) {\n            return Tuple.Create((Nullable<long>)null,\
    \ largest);\n        }\n        if (largestNegative == -1 && smallestPositive\
    \ != -1) {\n            return Tuple.Create((Nullable<long>)null, smallest);\n\
    \        }\n        if (largestNegative != -1 && smallestPositive == -1) {\n \
    \           return Tuple.Create((Nullable<long>)null, largest);\n        }\n \
    \       if (largestNegative != -1 && smallestPositive != -1) {\n            return\
    \ Tuple.Create((Nullable<long>)null, smallest);\n        }\n        return Tuple.Create((Nullable<long>)null,\
    \ largest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == smallest) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest);\n\
    \        }\n        List<long> negative = new List<long>();\n        List<long>\
    \ positive = new List<long>();\n        foreach (long n in lst) {\n          \
    \  if (n < 0) negative.Add(n);\n            if (n > 0) positive.Add(n);\n    \
    \    }\n        if (negative.Count > 0 && positive.Count > 0) {\n            long\
    \ largestNegative = negative.Max();\n            long smallestPositive = positive.Min();\n\
    \            if (largestNegative < smallestPositive) {\n                return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n            }\n \
    \           if (largestNegative == smallestPositive) {\n                return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, largestNegative);\n     \
    \       }\n            long largestNegativeNegative = negative.Max(n => -(n));\n\
    \            long smallestPositivePositive = positive.Min(n => -(n));\n      \
    \      if (largestNegativeNegative < smallestPositivePositive) {\n           \
    \     return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n     \
    \       }\n            if (largestNegativeNegative == smallestPositivePositive)\
    \ {\n                return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ largestNegativeNegative);\n            }\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create(new Nullable<long>(), new Nullable<long>());\n        }\n     \
    \   return Tuple.Create(new Nullable<long>(largest), new Nullable<long>(smallest));",
  "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long max = 0;\n        long min = 0;\n        foreach\
    \ (var item in lst) {\n            if (item < 0) {\n                max = Math.Max(max,\
    \ item);\n            }\n            if (item > 0) {\n                min = Math.Min(min,\
    \ item);\n            }\n        }\n        return Tuple.Create(max < min ? null\
    \ : new Nullable<long>(max), min > 0 ? new Nullable<long>(min) : null);", "  \
    \      long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create((Nullable<long>)null, smallest);\n        }\n        return Tuple.Create((Nullable<long>)null,\
    \ largest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create(null, smallest);\n\
    \        else\n            return Tuple.Create(largest, null);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);", " \
    \       if (lst.Count == 0) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        long largest = lst.Min();\n        long smallest = lst.Max();\n     \
    \   bool isNegative = lst.All(x => x < 0);\n        bool isPositive = lst.All(x\
    \ => x > 0);\n        if (isNegative && isPositive) return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        if (isNegative) return Tuple.Create((Nullable<long>)null,\
    \ largest);\n        if (isPositive) return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>>(null, smallest);",
  "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        foreach (var item in lst) {\n            if (item < smallest)\
    \ {\n                smallest = item;\n            }\n            if (item > largest)\
    \ {\n                largest = item;\n            }\n        }\n        return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(largest, smallest);", "       \
    \ long largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest)\n           \
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if\
    \ (largest == 0L)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (smallest == 0L)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largestPositive = lst.Where(x =>\
    \ x >= 0L).Max();\n        long smallestNegative = lst.Where(x => x <= 0L).Min();\n\
    \        if (largest < smallestNegative)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallestNegative)\n   \
    \         return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n \
    \       if (largest == 0L)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (smallest == 0L)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largestPositiveNegative = lst.Where(x\
    \ => x >= 0L && x <= 0L).Max();\n        long smallestPositiveNegative = lst.Where(x\
    \ => x >= 0L && x <= 0L).Min();\n        if (largest < smallestPositiveNegative)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        if (largest == smallestPositiveNegative)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == 0L)\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if (smallest\
    \ == 0L)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largestPositiveNegativeNegative = lst.Where(x => x >= 0L\
    \ && x <= 0L).Max();\n        long smallestPositiveNegativeNegative = lst.Where(x\
    \ => x >= 0L && x <= 0L).Min();\n        if (largest < smallestPositiveNegativeNegative)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        if (largest == smallestPositiveNegativeNegative)\n            return\
    \ Tuple.Create<Nullable<", "        if (lst.Count == 0) {\n            return\
    \ Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n        }\n     \
    \   long largest = lst.Min();\n        long smallest = lst.Max();\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (largest < i)\
    \ {\n                    largest = i;\n                }\n            } else if\
    \ (i > 0) {\n                if (smallest > i) {\n                    smallest\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        if (lst.Count == 0) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   long largest = lst.Max();\n        long smallest = lst.Min();\n        if\
    \ (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largestNegative = lst.Where(x => x < 0).Max();\n\
    \        long smallestPositive = lst.Where(x => x >= 0).Min();\n        if (largestNegative\
    \ < smallestPositive) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ largest);\n        }\n        long largestNegative = lst.FindLast(x => x < 0);\n\
    \        long smallestPositive = lst.FindFirst(x => x > 0);\n        if (largestNegative\
    \ == smallestPositive) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ largest);\n        }\n        return Tuple.Create<Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest)\n            return Tuple.Create(null,\
    \ smallest);\n        else\n            return Tuple.Create(largest, null);",
  "        if (lst.Count == 0) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        long largest = lst.Max();\n        long smallest = lst.Min();\n     \
    \   if (largest < smallest) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        if (largest == smallest) return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);\n        long largestNegative = lst.FindLast(x =>\
    \ x < 0);\n        long smallestPositive = lst.FindFirst(x => x > 0);\n      \
    \  if (largestNegative < smallestPositive) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        if (largestNegative == smallestPositive) return\
    \ Tuple.Create((Nullable<long>)largestNegative, (Nullable<long>)smallestPositive);\n\
    \        return Tuple.Create((Nullable<long>)largestNegative, (Nullable<long>)smallestPositive);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest < 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);\n        if (smallest < 0)\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(largest, null);\n        return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(largest, smallest);", "       \
    \ long largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create(null, smallest);\n        }\n        return Tuple.Create(largest,\
    \ null);", "        long max = 0;\n        long min = 0;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (max < 0)\n      \
    \              max = i;\n            } else {\n                if (min > 0)\n\
    \                    min = i;\n            }\n        }\n        if (min == 0\
    \ && max == 0) {\n            return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        }\n        return Tuple.Create((Nullable<long>)max, (Nullable<long>)min);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x > 0).Min();\n\
    \        if (largest < smallestPositive)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallestPositive)\n   \
    \         return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest);\n\
    \        if (largest < largestNegative)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == largestNegative)\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest);\n\
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ largest);\n        }\n        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        long largestPositive = lst.Where(x => x >= 0).Max();\n\
    \        long smallestNegative = lst.Where(x => x <= 0).Min();\n        if (largestPositive\
    \ < smallestNegative) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        if (largestPositive == smallestNegative) {\n    \
    \        return Tuple.Create<Nullable<long>>(null, largestPositive);\n       \
    \ }\n        return Tuple.Create<Nullable<long>>(null, largestPositive);", " \
    \       if (lst.Count == 0) {\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        }\n        long largest = lst.Max();\n     \
    \   long smallest = lst.Min();\n        if (largest < smallest) {\n          \
    \  return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n        }\n\
    \        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        if (lst.Count == 0)\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        var largest = lst.Max();\n        var smallest\
    \ = lst.Min();\n        if (largest < smallest)\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        return Tuple.Create(largest, smallest);", " \
    \       long largest = lst.Max();\n        long smallest = lst.Min();\n      \
    \  if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        if (lst.Count == 0) {\n        \
    \    return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create(null, smallest);\n        }\n        return Tuple.Create(largest,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        else\n            return Tuple.Create((Nullable<long>)null,\
    \ largest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (lst.Count == 0) {\n   \
    \         return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n \
    \       }\n        if (lst.Count == 1) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(lst[0], null);\n        }\n        List<long> negative = new\
    \ List<long>();\n        List<long> positive = new List<long>();\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                negative.Add(i);\n\
    \            } else {\n                positive.Add(i);\n            }\n     \
    \   }\n        if (negative.Count > 0 && positive.Count > 0) {\n            long\
    \ largestNegative = negative.Max();\n            long smallestPositive = positive.Min();\n\
    \            if (largestNegative < smallestPositive) {\n                return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n            }\n \
    \       }\n        if (negative.Count > 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, negative.Max());\n        }\n        if (positive.Count\
    \ > 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ positive.Min());\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);\n        }\n        if (smallest == 0) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(largest, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long max = 0;\n        long min = 0;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                max = Math.Max(max,\
    \ i);\n            } else {\n                min = Math.Min(min, i);\n       \
    \     }\n        }\n        return Tuple.Create(max < min ? null : (Nullable<long>)max,\
    \ min < 0 ? null : (Nullable<long>)min);", "        if (lst.Count == 0)\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < 0)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (smallest > 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create(null, smallest);\n\
    \        else\n            return Tuple.Create(largest, null);", "        if (lst.Count\
    \ == 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largest = lst[0];\n        long smallest = lst[0];\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ smallest = i;\n            }\n            if (i > largest) {\n             \
    \   largest = i;\n            }\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestPositive = lst.Where(x\
    \ => x > 0).Max();\n        long smallestNegative = lst.Where(x => x < 0).Min();\n\
    \        if (largest < smallestNegative) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallestNegative) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestPositive, largestPositive);\n        long largestNegative\
    \ = lst.Where(x => x < 0).Max();\n        long smallestPositive = lst.Where(x\
    \ => x > 0).Min();\n        if (largest < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallestPositive) return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        long largestPositiveNegative = lst.Where(x => x > 0 && x < 0).Max();\n\
    \        long smallestNegativePositive = lst.Where(x => x < 0 && x > 0).Min();\n\
    \        if (largest < smallestNegativePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallestNegativePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositiveNegative,\
    \ largestPositiveNegative);\n        long largestNegativeNegative = lst.Where(x\
    \ => x < 0 && x < 0).Max();\n        long smallestPositivePositive = lst.Where(x\
    \ => x > 0 && x > 0).Min();\n        if (largest < smallestNegativePositive) return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if (largest\
    \ == smallestNegativePositive) return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegative,\
    \ largestNegativeNegative);\n        long largestNegativePositiveNegative = lst.Where(x\
    \ => x < 0 && x > 0).Max();\n        long smallestPositivePositiveNegative = lst.Where(x\
    \ => x > ", "        if (lst.Count == 0) {\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        }\n        long largest = lst.Max();\n     \
    \   long smallest = lst.Min();\n        if (largest < smallest) {\n          \
    \  return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n        }\n\
    \        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        if (lst.Count == 0) {\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        }\n        long largest = lst.Max();\n     \
    \   long smallest = lst.Min();\n        if (largest < smallest) {\n          \
    \  return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n        }\n\
    \        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        if (lst.Count == 0) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        long largest = lst.Max();\n        long smallest = lst.Min();\n     \
    \   if (largest < smallest) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        if (largest == smallest) return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        Tuple<Nullable<long>, Nullable<long>> result = LargestSmallestIntegers(negative);\n\
    \        if (result.Item1 == null) return result;\n        result = LargestSmallestIntegers(positive);\n\
    \        if (result.Item1 == null) return result;\n        if (result.Item1.HasValue\
    \ && result.Item1.Value < result.Item2.Value) return result;\n        if (result.Item1.HasValue\
    \ && result.Item1.Value > result.Item2.Value) return result;\n        return Tuple.Create((Nullable<long>)result.Item1,\
    \ (Nullable<long>)result.Item2);", "        long largest = lst.Max();\n      \
    \  long smallest = lst.Min();\n        if (largest < smallest)\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if (largest\
    \ == smallest)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest < 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);\n        if (smallest > 0)\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(largest, null);\n        return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(largest, smallest);", "       \
    \ long largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return Tuple.Create(Nullable<long>.None, Nullable<long>.None);\n\
    \        }\n        return Tuple.Create(Nullable<long>.None, smallest);", "  \
    \      long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        if (largest == smallest) {\n            return\
    \ Tuple.Create((Nullable<long>)null, largest);\n        }\n        long largestNegative\
    \ = lst.Max(x => x < 0);\n        long smallestPositive = lst.Min(x => x > 0);\n\
    \        if (largest < smallestPositive) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallestPositive);\n        }\n        if (largest == smallestPositive) {\n\
    \            return Tuple.Create((Nullable<long>)null, largest);\n        }\n\
    \        long largestNegativeNegative = lst.Max(x => x < 0 && x < 0);\n      \
    \  long smallestPositivePositive = lst.Min(x => x > 0 && x > 0);\n        if (largest\
    \ < smallestPositivePositive) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallestPositivePositive);\n        }\n        if (largest == smallestPositivePositive)\
    \ {\n            return Tuple.Create((Nullable<long>)null, largest);\n       \
    \ }\n        long largestNegativeNegativeNegative = lst.Max(x => x < 0 && x <\
    \ 0 && x < 0);\n        long smallestPositivePositivePositive = lst.Min(x => x\
    \ > 0 && x > 0 && x > 0);\n        if (largest < smallestPositivePositivePositive)\
    \ {\n            return Tuple.Create((Nullable<long>)null, smallestPositivePositivePositive);\n\
    \        }\n        if (largest == smallestPositivePositivePositive) {\n     \
    \       return Tuple.Create((Nullable<long>)null, largest);\n        }\n     \
    \   long largestNegativeNegativeNegativeNegative = lst.Max(x => x < 0 && x < 0\
    \ && x < 0 && x < 0);\n        long smallestPositivePositivePositivePositive =\
    \ lst.Min(x => x > 0 && x > 0 && x > 0 && x > 0);\n        if (largest < smallestPositivePositivePositivePositive)\
    \ {\n            return Tuple.Create((Nullable<long>)null, smallestPositivePositivePositivePositive);\n\
    \        }\n        if (largest == smallestPositivePositivePositivePositive) {\n\
    \            return Tuple.Create((Nullable<long>)null, largest);\n        }\n\
    \        long largestNegativeNegativeNegativeNegativeNegative = lst.Max(x => x\
    \ < 0 && x < 0 && x < 0 && x < 0 && x < 0);\n        long smallestPositivePositivePositivePositivePositive\
    \ = lst.Min(x => x > 0 && x > 0 && x > 0 && x > 0 && x > 0);\n        if (largest\
    \ < ", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        else\n            return Tuple.Create((Nullable<long>)null,\
    \ largest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        if (lst.Count == 0)\n          \
    \  return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n        var\
    \ largest = lst.Max();\n        var smallest = lst.Min();\n        if (largest\
    \ < 0)\n            return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        if (smallest > 0)\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        return Tuple.Create(largest, smallest);", " \
    \       if (lst.Count == 0) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        long largest = lst.Max();\n        long smallest = lst.Min();\n     \
    \   if (largest < smallest) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        if (largest == smallest) return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) largest = LargestSmallestIntegers(negative).Item1;\n\
    \        if (positive.Count > 0) smallest = LargestSmallestIntegers(positive).Item1;\n\
    \        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        if (lst.Count == 0)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        var largest = lst.Max();\n        var smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest)\n           \
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largest, largest);\n   \
    \     var largestNegative = lst.Where(x => x < 0).Max();\n        var smallestPositive\
    \ = lst.Where(x => x > 0).Min();\n        if (largestNegative < smallestPositive)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        if (largestNegative == smallestPositive)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestNegative, largestNegative);\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\n\
    \            return Tuple.Create<Nullable<long>>(null, null);\n        else\n\
    \            return Tuple.Create<Nullable<long>>(null, smallest);", "        if\
    \ (lst.Count == 0) {\n            return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        if (lst.Count == 0) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   long largest = lst.Max();\n        long smallest = lst.Min();\n        if\
    \ (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        if (largest == smallest) {\n            return\
    \ Tuple.Create((Nullable<long>)null, largest);\n        }\n        long largestNegative\
    \ = lst.FindAll(x => x < 0).Max();\n        long smallestPositive = lst.FindAll(x\
    \ => x > 0).Min();\n        if (largestNegative < smallestPositive) {\n      \
    \      return Tuple.Create((Nullable<long>)null, smallestPositive);\n        }\n\
    \        if (largestNegative == smallestPositive) {\n            return Tuple.Create((Nullable<long>)null,\
    \ largestNegative);\n        }\n        return Tuple.Create((Nullable<long>)null,\
    \ largest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create(null, smallest);\n\
    \        }\n        return Tuple.Create(largest, null);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest == 0) {\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        List<long> negative = new List<long>();\n        List<long>\
    \ positive = new List<long>();\n        foreach (long n in lst) {\n          \
    \  if (n < 0)\n                negative.Add(n);\n            else\n          \
    \      positive.Add(n);\n        }\n        if (negative.Count > 0)\n        \
    \    return LargestSmallestIntegers(negative);\n        if (positive.Count > 0)\n\
    \            return LargestSmallestIntegers(positive);\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x > 0).Min();\n\
    \        if (largest < smallestPositive) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largest);\n        if (largest < largestNegative) return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if (largest\
    \ == largestNegative) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ largest);\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest)\n           \
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        List<long>\
    \ negative = new List<long>();\n        List<long> positive = new List<long>();\n\
    \        foreach (long i in lst) {\n            if (i < 0)\n                negative.Add(i);\n\
    \            else\n                positive.Add(i);\n        }\n        if (negative.Count\
    \ > 0)\n            return LargestSmallestIntegers(negative);\n        if (positive.Count\
    \ > 0)\n            return LargestSmallestIntegers(positive);\n        return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create((Nullable<long>)null, smallest);\n      \
    \  }\n        if (largest == smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ largest);\n        }\n        long largestNegative = lst.Where(x => x < 0).Max();\n\
    \        long smallestPositive = lst.Where(x => x > 0).Min();\n        if (largest\
    \ < smallestPositive) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallestPositive);\n        }\n        if (largest == smallestPositive) {\n\
    \            return Tuple.Create((Nullable<long>)null, largest);\n        }\n\
    \        if (largest < largestNegative) {\n            return Tuple.Create((Nullable<long>)null,\
    \ largestNegative);\n        }\n        if (largest == largestNegative) {\n  \
    \          return Tuple.Create((Nullable<long>)null, largest);\n        }\n  \
    \      return Tuple.Create((Nullable<long>)null, largest);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n        return\
    \ new Tuple<Nullable<long>, Nullable<long>>(null, smallest);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create(null, smallest);\n        }\n        if (largest\
    \ == smallest) {\n            return Tuple.Create(largest, largest);\n       \
    \ }\n        long largestNegative = lst.FindLast(x => x < 0);\n        long smallestPositive\
    \ = lst.FindFirst(x => x > 0);\n        if (largestNegative < smallestPositive)\
    \ {\n            return Tuple.Create(largestNegative, smallestPositive);\n   \
    \     }\n        if (largestNegative == smallestPositive) {\n            return\
    \ Tuple.Create(largestNegative, largestNegative);\n        }\n        return Tuple.Create(largestNegative,\
    \ largest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create(Nullable<long>.None,\
    \ Nullable<long>.None);\n        }\n        if (largest == smallest) {\n     \
    \       return Tuple.Create(Nullable<long>.None, Nullable<long>.None);\n     \
    \   }\n        List<long> negative = new List<long>();\n        List<long> positive\
    \ = new List<long>();\n        foreach (long i in lst) {\n            if (i <\
    \ 0) {\n                negative.Add(i);\n            } else {\n             \
    \   positive.Add(i);\n            }\n        }\n        if (negative.Count > 0\
    \ && positive.Count > 0) {\n            long largestNegative = negative.Max();\n\
    \            long smallestPositive = positive.Min();\n            if (largestNegative\
    \ < smallestPositive) {\n                return Tuple.Create(Nullable<long>.None,\
    \ Nullable<long>.None);\n            }\n            if (largestNegative == smallestPositive)\
    \ {\n                return Tuple.Create(Nullable<long>.None, Nullable<long>.None);\n\
    \            }\n        }\n        return Tuple.Create(Nullable<long>.None, Nullable<long>.None);",
  "        if (lst.Count == 0) {\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        }\n        long largest = lst.Max();\n     \
    \   long smallest = lst.Min();\n        if (largest < smallest) {\n          \
    \  return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n        }\n\
    \        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largest);\n        }\n        List<long> negative = new\
    \ List<long>();\n        List<long> positive = new List<long>();\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                negative.Add(i);\n\
    \            } else {\n                positive.Add(i);\n            }\n     \
    \   }\n        if (negative.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (positive.Count == 0) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        long largestNegative = negative.Max();\n        long smallestPositive\
    \ = positive.Min();\n        if (largestNegative < smallestPositive) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (largestNegative == smallestPositive) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, largestNegative);\n     \
    \   }\n        long largestPositive = positive.Max();\n        long smallestNegative\
    \ = negative.Min();\n        if (largestPositive < smallestNegative) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (largestPositive == smallestNegative) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, largestPositive);\n     \
    \   }\n        long largest = positive.Max();\n        long smallest = negative.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == smallest) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest);\n\
    \        }\n        List<long> negative2 = new List<long>();\n        List<long>\
    \ positive2 = new List<long>();\n        foreach (long i in lst) {\n         \
    \   if (i < 0) {\n                negative2.Add(i);\n            } else {\n  \
    \              positive2.Add(i);\n            }\n", "        if (lst.Count ==\
    \ 0) {\n            return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        }\n        long largest = lst[0];\n        long smallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] > largest)\
    \ {\n                largest = lst[i];\n            }\n            if (lst[i]\
    \ < smallest) {\n                smallest = lst[i];\n            }\n        }\n\
    \        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ largest);\n        }\n        List<long> negative = new List<long>();\n    \
    \    List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                negative.Add(i);\n            }\
    \ else {\n                positive.Add(i);\n            }\n        }\n       \
    \ if (negative.Count > 0 && positive.Count > 0) {\n            long largestNegative\
    \ = negative.Max();\n            long smallestPositive = positive.Min();\n   \
    \         if (largestNegative < smallestPositive) {\n                return Tuple.Create<Nullable<long>>(null,\
    \ null);\n            }\n            if (largestNegative == smallestPositive)\
    \ {\n                return Tuple.Create<Nullable<long>>(null, largestNegative);\n\
    \            }\n            long largestNegativePositive = largestNegative + smallestPositive;\n\
    \            if (largestNegativePositive == largest) {\n                return\
    \ Tuple.Create<Nullable<long>>(null, largestNegative);\n            }\n      \
    \      if (largestNegativePositive == smallest) {\n                return Tuple.Create<Nullable<long>>(null,\
    \ largestNegative);\n            }\n        }\n        return Tuple.Create<Nullable<long>>(null,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < 0)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);\n        if (smallest > 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, null);\n        foreach (long i in lst)\n        {\n\
    \            if (i < 0)\n                return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);\n            if (i > 0)\n                return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        if (lst.Count == 0) {\n        \
    \    return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        }\n        long a = lst.FindIndex(x => x < 0);\n\
    \        long b = lst.FindIndex(x => x >= 0);\n        if (a < b) {\n        \
    \    return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n      \
    \  }\n        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.FindIndex(x\
    \ => x < 0);\n        long smallestPositive = lst.FindIndex(x => x > 0);\n   \
    \     if (largestNegative == -1 && smallestPositive == -1) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   if (largestNegative == -1 && smallestPositive != -1) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, lst.Min());\n        }\n\
    \        if (largestNegative != -1 && smallestPositive == -1) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(lst.Max(), null);\n        }\n\
    \        if (largestNegative != -1 && smallestPositive != -1) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(lst.Max(), lst.Min());\n      \
    \  }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);",
  "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (positive.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        Tuple<Nullable<long>, Nullable<long>>\
    \ largestSmallest = new Tuple<Nullable<long>, Nullable<long>>(null, null);\n \
    \       largestSmallest.Item1 = largest;\n        largestSmallest.Item2 = smallest;\n\
    \        largestSmallest.Item3 = largestSmallest.Item1 > largestSmallest.Item2\
    \ ? largestSmallest.Item1 : largestSmallest.Item2;\n        largestSmallest.Item4\
    \ = largestSmallest.Item3 > largestSmallest.Item4 ? largestSmallest.Item3 : largestSmallest.Item4;\n\
    \        return largestSmallest;", "        long largest = lst.Max();\n      \
    \  long smallest = lst.Min();\n        if (largest < smallest) {\n           \
    \ return Tuple.Create(null, smallest);\n        }\n        return Tuple.Create(largest,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create(null, smallest);\n\
    \        }\n        if (largest == smallest) {\n            return Tuple.Create(null,\
    \ largest);\n        }\n        List<long> negative = new List<long>();\n    \
    \    List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                negative.Add(i);\n            }\
    \ else {\n                positive.Add(i);\n            }\n        }\n       \
    \ if (negative.Count > 0 && positive.Count > 0) {\n            long largestNegative\
    \ = negative.Max();\n            long smallestPositive = positive.Min();\n   \
    \         if (largestNegative < smallestPositive) {\n                return Tuple.Create(null,\
    \ smallestPositive);\n            }\n            if (largestNegative == smallestPositive)\
    \ {\n                return Tuple.Create(null, largestNegative);\n           \
    \ }\n        }\n        if (negative.Count > 0) {\n            return Tuple.Create(null,\
    \ negative.Max());\n        }\n        if (positive.Count > 0) {\n           \
    \ return Tuple.Create(null, positive.Min());\n        }\n        return Tuple.Create(null,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest)\n           \
    \ return Tuple.Create((Nullable<long>)null, smallest);\n        else\n       \
    \     return Tuple.Create((Nullable<long>)null, largest);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        else\n            return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        long a = lst.FindIndex(x => x < 0);\n      \
    \  long b = lst.FindIndex(x => x > 0);\n        if (a >= 0 && b >= 0) {\n    \
    \        return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n  \
    \      }\n        if (a >= 0) return Tuple.Create((Nullable<long>)null, smallest);\n\
    \        if (b >= 0) return Tuple.Create(largest, (Nullable<long>)null);\n   \
    \     return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);", "   \
    \     if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largestNegative = lst.Where(x => x < 0).Max();\n      \
    \  long smallestPositive = lst.Where(x => x >= 0).Min();\n        if (largestNegative\
    \ < smallestPositive) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (smallest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  else\n            return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create(new Nullable<long>(),\
    \ new Nullable<long>());\n        }\n        return Tuple.Create(new Nullable<long>(largest),\
    \ new Nullable<long>(smallest));", "        long largest = lst.Max();\n      \
    \  long smallest = lst.Min();\n        if (largest < smallest) {\n           \
    \ return Tuple.Create((Nullable<long>)null, smallest);\n        }\n        return\
    \ Tuple.Create((Nullable<long>)null, largest);", "        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create((Nullable<long>)null, smallest);\n        }\n    \
    \    if (largest == smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ largest);\n        }\n        long largestNegative = lst.Max(x => x < 0);\n\
    \        long smallestPositive = lst.Min(x => x > 0);\n        if (largestNegative\
    \ < smallestPositive) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallestPositive);\n        }\n        if (largestNegative == smallestPositive)\
    \ {\n            return Tuple.Create((Nullable<long>)null, largestNegative);\n\
    \        }\n        long largestNegativeNegative = lst.Max(x => x < 0 && x < 0);\n\
    \        long smallestPositivePositive = lst.Min(x => x > 0 && x > 0);\n     \
    \   if (largestNegativeNegative < smallestPositivePositive) {\n            return\
    \ Tuple.Create((Nullable<long>)null, smallestPositivePositive);\n        }\n \
    \       if (largestNegativeNegative == smallestPositivePositive) {\n         \
    \   return Tuple.Create((Nullable<long>)null, largestNegativeNegative);\n    \
    \    }\n        long largestNegativeNegativeNegative = lst.Max(x => x < 0 && x\
    \ < 0 && x < 0);\n        long smallestPositivePositivePositive = lst.Min(x =>\
    \ x > 0 && x > 0 && x > 0);\n        if (largestNegativeNegativeNegative < smallestPositivePositivePositive)\
    \ {\n            return Tuple.Create((Nullable<long>)null, smallestPositivePositivePositive);\n\
    \        }\n        if (largestNegativeNegativeNegative == smallestPositivePositivePositive)\
    \ {\n            return Tuple.Create((Nullable<long>)null, largestNegativeNegativeNegative);\n\
    \        }\n        long largestNegativeNegativeNegativeNegative = lst.Max(x =>\
    \ x < 0 && x < 0 && x < 0 && x < 0);\n        long smallestPositivePositivePositivePositive\
    \ = lst.Min(x => x > 0 && x > 0 && x > 0 && x > 0);\n        if (largestNegativeNegativeNegativeNegative\
    \ < smallestPositivePositivePositivePositive) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallestPositivePositivePositivePositive);\n        }\n        if (largestNegativeNegativeNegativeNegative\
    \ == smallestPositivePositivePositivePositive) {\n            return Tuple.Create((Nullable<long>)null,\
    \ largestNegativeNegativeNegativeNegative);\n        }\n        throw new ArgumentException(\"\
    No negative or positive integers found\");", "        if (lst.Count == 0) return\
    \ Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n        if\
    \ (largest == smallest) return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);\n\
    \        List<long> negative = new List<long>();\n        List<long> positive\
    \ = new List<long>();\n        foreach (long i in lst) {\n            if (i <\
    \ 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n        }\n  \
    \      if (negative.Count > 0) return LargestSmallestIntegers(negative);\n   \
    \     if (positive.Count > 0) return LargestSmallestIntegers(positive);\n    \
    \    return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);", "    \
    \    if (lst.Count == 0)\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        long largest = lst[0];\n        long smallest\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < 0)\n     \
    \           smallest = i;\n            if (i > 0)\n                largest = i;\n\
    \        }\n        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        long max = 0;\n        long min = 0;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                max = Math.Max(max, i);\n         \
    \   } else {\n                min = Math.Min(min, i);\n            }\n       \
    \ }\n        return Tuple.Create(max < min ? null : (long?)max, min < 0 ? null\
    \ : (long?)min);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);", " \
    \       long largest = lst.Max();\n        long smallest = lst.Min();\n      \
    \  if (largest < smallest) {\n            return Tuple.Create(null, smallest);\n\
    \        }\n        return Tuple.Create(largest, null);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create((Nullable<long>)null, smallest);\n      \
    \  }\n        return Tuple.Create((Nullable<long>)null, largest);", "        if\
    \ (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        long largest = lst.Max();\n        long smallest = lst.Min();\n     \
    \   if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long a = lst.FindIndex(x => x < 0);\n        long b = lst.FindIndex(x\
    \ => x > 0);\n        if (a != -1 && b != -1 && a > b) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (a != -1 && b != -1 && a < b) return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if (a !=\
    \ -1 && b != -1 && a == b) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        var largest = lst.Max();\n        var\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        var largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        var smallestPositive = lst.Where(x => x > 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        else\n            return Tuple.Create((Nullable<long>)null,\
    \ largest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestPositive = lst.Where(x\
    \ => x >= 0).Max();\n        long smallestNegative = lst.Where(x => x <= 0).Min();\n\
    \        if (largest < smallestNegative) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallestNegative) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        if (largest < largestPositive) return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if (largest\
    \ == largestPositive) return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ largest);\n        if (largest < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallestPositive) return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(largest, largest);\n        return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create(null, smallest);\n        }\n        return\
    \ Tuple.Create(largest, null);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest)\n            return Tuple.Create(null,\
    \ smallest);\n        else\n            return Tuple.Create(largest, null);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create(null, smallest);\n        }\n        return Tuple.Create(largest,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create(null, smallest);\n\
    \        }\n        return Tuple.Create(largest, null);", "        if (lst.Count\
    \ == 0) {\n            return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        }\n        return Tuple.Create(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        else\n            return Tuple.Create((Nullable<long>)null,\
    \ largest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        if (lst.Count == 0) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        if (largest == smallest) return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);\n        long largestNegative = lst.Where(x => x\
    \ < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        if (largestNegative == smallestPositive) return\
    \ Tuple.Create((Nullable<long>)largestNegative, (Nullable<long>)smallestPositive);\n\
    \        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create(null, smallest);\n\
    \        }\n        return Tuple.Create(largest, null);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create((Nullable<long>)null, smallest);\n      \
    \  }\n        return Tuple.Create((Nullable<long>)null, largest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestPositive = lst.Max(x\
    \ => x > 0);\n        long smallestNegative = lst.Min(x => x < 0);\n        if\
    \ (largestPositive < smallestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (lst.Count == 1) {\n   \
    \         return Tuple.Create<Nullable<long>, Nullable<long>>(null, lst[0]);\n\
    \        }\n        long largestPositiveAndSmallestNegative = lst.Max(x => x >\
    \ 0 && x < 0);\n        long smallestPositiveAndLargestNegative = lst.Min(x =>\
    \ x > 0 && x < 0);\n        if (largestPositiveAndSmallestNegative < smallestPositiveAndLargestNegative)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositiveAndSmallestNegative,\
    \ smallestPositiveAndLargestNegative);", "        long max = 0;\n        long\
    \ min = 0;\n        foreach (long i in lst) {\n            if (i < 0) {\n    \
    \            max = Math.Max(max, i);\n            } else {\n                min\
    \ = Math.Min(min, i);\n            }\n        }\n        if (min == max) {\n \
    \           return Tuple.Create((Nullable<long>)null, min);\n        }\n     \
    \   return Tuple.Create((Nullable<long>)null, max);", "        long largest =\
    \ lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\n\
    \            return Tuple.Create((Nullable<long>)null, smallest);\n        else\n\
    \            return Tuple.Create((Nullable<long>)null, largest);", "        long\
    \ maxNegative = lst.Max(x => x < 0L ? 0L : x);\n        long minPositive = lst.Min(x\
    \ => x > 0L ? 0L : x);\n        return Tuple.Create(maxNegative, minPositive);",
  "        if (lst.Count == 0) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        long largest = lst.Max();\n        long smallest = lst.Min();\n     \
    \   if (largest < smallest) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        if (largest == smallest) return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);\n        long largestNegative = lst.FindAll(x =>\
    \ x < 0).Max();\n        long smallestPositive = lst.FindAll(x => x > 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        if (largestNegative == smallestPositive) return\
    \ Tuple.Create((Nullable<long>)largestNegative, (Nullable<long>)smallestPositive);\n\
    \        return Tuple.Create((Nullable<long>)largestNegative, (Nullable<long>)smallestPositive);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ largest);\n        }\n        long largestNegative = lst.Where(x => x < 0).Max();\n\
    \        long smallestPositive = lst.Where(x => x > 0).Min();\n        if (largest\
    \ < smallestPositive) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == smallestPositive) {\n            return\
    \ Tuple.Create<Nullable<long>>(null, largest);\n        }\n        if (largest\
    \ < largestNegative) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ largest);\n        }\n        if (largest == largestNegative) {\n          \
    \  return Tuple.Create<Nullable<long>>(null, smallest);\n        }\n        return\
    \ Tuple.Create<Nullable<long>>(null, smallest);", "        if (lst.Count == 0)\
    \ {\n            return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create((Nullable<long>)null, smallest);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ null);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create(Nullable<long>.None,\
    \ Nullable<long>.None);\n        }\n        return Tuple.Create(Nullable<long>.Create(largest),\
    \ Nullable<long>.Create(smallest));", "        long largest = lst.Max();\n   \
    \     long smallest = lst.Min();\n        if (largest < smallest) {\n        \
    \    return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create((Nullable<long>)null, smallest);\n        }\n        return\
    \ Tuple.Create((Nullable<long>)null, largest);", "        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        }\n        List<long> negative =\
    \ new List<long>();\n        List<long> positive = new List<long>();\n       \
    \ foreach (long i in lst) {\n            if (i < 0) {\n                negative.Add(i);\n\
    \            } else {\n                positive.Add(i);\n            }\n     \
    \   }\n        Tuple<Nullable<long>, Nullable<long>> largestSmallestIntegers =\
    \ LargestSmallestIntegers(negative);\n        if (largestSmallestIntegers == null)\
    \ {\n            return null;\n        }\n        Tuple<Nullable<long>, Nullable<long>>\
    \ smallestSmallestIntegers = LargestSmallestIntegers(positive);\n        if (smallestSmallestIntegers\
    \ == null) {\n            return null;\n        }\n        if (largestSmallestIntegers.Item1\
    \ == null) {\n            return smallestSmallestIntegers;\n        }\n      \
    \  if (smallestSmallestIntegers.Item1 == null) {\n            return largestSmallestIntegers;\n\
    \        }\n        if (largestSmallestIntegers.Item1 > smallestSmallestIntegers.Item1)\
    \ {\n            return largestSmallestIntegers;\n        }\n        return smallestSmallestIntegers;",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create(null, smallest);\n\
    \        }\n        if (largest == smallest) {\n            return Tuple.Create(largest,\
    \ null);\n        }\n        List<long> negative = new List<long>();\n       \
    \ List<long> positive = new List<long>();\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                negative.Add(i);\n            } else\
    \ {\n                positive.Add(i);\n            }\n        }\n        if (negative.Count\
    \ > 0 && positive.Count > 0) {\n            long largestNegative = negative.Max();\n\
    \            long smallestPositive = positive.Min();\n            if (largestNegative\
    \ < smallestPositive) {\n                return Tuple.Create(null, smallestPositive);\n\
    \            }\n            if (largestNegative == smallestPositive) {\n     \
    \           return Tuple.Create(largestNegative, null);\n            }\n     \
    \   }\n        if (negative.Count > 0) {\n            return Tuple.Create(null,\
    \ negative.Max());\n        }\n        if (positive.Count > 0) {\n           \
    \ return Tuple.Create(null, positive.Min());\n        }\n        return Tuple.Create(null,\
    \ null);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create(null,\
    \ smallest);\n        }\n        return Tuple.Create(largest, null);", "     \
    \   long largest = lst.Max();\n        long smallest = lst.Min();\n        if\
    \ (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        else\n            return Tuple.Create((Nullable<long>)null,\
    \ largest);", "        if (lst.Count == 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (smallest > 0)\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(null, smallest);",
  "        if (lst.Count == 0) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        long largest = lst.Max();\n        long smallest = lst.Min();\n     \
    \   if (largest < smallest) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        if (largest == smallest) return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);\n        long largestNegative = lst.Where(x => x\
    \ < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        if (largestNegative == smallestPositive) return\
    \ Tuple.Create((Nullable<long>)largestNegative, (Nullable<long>)smallestPositive);\n\
    \        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create((Nullable<long>)null, smallest);\n        }\n        return\
    \ Tuple.Create((Nullable<long>)null, largest);", "        if (lst.Count == 0)\
    \ return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        long largestPositive = lst.Where(x => x >= 0).Max();\n        long smallestNegative\
    \ = lst.Where(x => x <= 0).Min();\n        if (largestPositive < smallestNegative)\
    \ return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n        return\
    \ Tuple.Create(largest, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest)\n           \
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        else\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        if (lst.Count == 0) {\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        }\n        long largest = lst.Max();\n     \
    \   long smallest = lst.Min();\n        if (largest < smallest) {\n          \
    \  return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n        }\n\
    \        if (largest == smallest) {\n            return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);\n        }\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                negative.Add(i);\n            }\
    \ else {\n                positive.Add(i);\n            }\n        }\n       \
    \ if (negative.Count > 0 && positive.Count > 0) {\n            long a = negative.Max();\n\
    \            long b = positive.Min();\n            if (a < b) {\n            \
    \    return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n      \
    \      }\n            if (a == b) {\n                return Tuple.Create((Nullable<long>)a,\
    \ (Nullable<long>)b);\n            }\n        }\n        return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create(null,\
    \ smallest);\n        }\n        if (largest == smallest) {\n            return\
    \ Tuple.Create(largest, null);\n        }\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largest < smallestPositive) {\n            return Tuple.Create(largestNegative,\
    \ smallest);\n        }\n        if (largest == smallestPositive) {\n        \
    \    return Tuple.Create(largest, smallest);\n        }\n        long largestNegativeNegative\
    \ = lst.Where(x => x < 0 && x >= 0).Max();\n        long smallestPositivePositive\
    \ = lst.Where(x => x >= 0 && x <= 0).Min();\n        if (largest < smallestPositivePositive)\
    \ {\n            return Tuple.Create(largestNegativeNegative, smallestPositive);\n\
    \        }\n        if (largest == smallestPositivePositive) {\n            return\
    \ Tuple.Create(largest, smallestPositive);\n        }\n        long largestNegativePositive\
    \ = lst.Where(x => x < 0 && x <= 0).Max();\n        long smallestPositiveNegative\
    \ = lst.Where(x => x >= 0 && x < 0).Min();\n        if (largest < smallestPositiveNegative)\
    \ {\n            return Tuple.Create(largestNegativePositive, smallestPositiveNegative);\n\
    \        }\n        if (largest == smallestPositiveNegative) {\n            return\
    \ Tuple.Create(largest, smallestPositiveNegative);\n        }\n        long largestPositiveNegativeNegative\
    \ = lst.Where(x => x < 0 && x >= 0).Max();\n        long smallestPositivePositivePositive\
    \ = lst.Where(x => x >= 0 && x <= 0 && x < 0).Min();\n        if (largest < smallestPositivePositivePositive)\
    \ {\n            return Tuple.Create(largestPositiveNegativeNegative, smallestPositivePositivePositive);\n\
    \        }\n        if (largest == smallestPositivePositivePositive) {\n     \
    \       return Tuple.Create(largest, smallestPositivePositivePositive);\n    \
    \    }\n        long largestPositivePositiveNegativePositive = lst.Where(x =>\
    \ x < 0 && x >= 0 && x <= 0 && x < 0).Max();\n        long smallestPositivePositivePositivePositive\
    \ = lst.Where(x => x >= 0 && x <= 0 && x < 0 && x < 0).Min();\n        if (largest\
    \ < smallestPositivePositivePositivePositive) {\n            return Tuple.Create(largestPositivePositiveNegativePositive,\
    \ smallestPositivePositivePositivePositive);\n        }\n        if (largest ==\
    \ smallestPositivePositivePositivePositive) {\n            return Tuple.Create(largest,\
    \ smalle", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);\n        }\n        if (smallest == 0) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(largest, null);\n\
    \        }\n        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);\n        }\n        long largestPositive\
    \ = lst.Max(x => x > 0);\n        long smallestNegative = lst.Min(x => x < 0);\n\
    \        if (largest < smallestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallestNegative);\n        }\n        if (largest\
    \ < smallestPositive) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive,\
    \ smallest);\n        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestPositive, smallestPositive);\n        }\n        if (smallest\
    \ == 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive,\
    \ largest);\n        }\n        if (largest < smallestNegative) {\n          \
    \  return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive, smallestNegative);\n\
    \        }\n        if (largest < smallestPositive) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestPositive, smallestPositive);\n        }\n        if (largest\
    \ == 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive,\
    \ smallestPositive);\n        }\n        if (smallest == 0) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive, largest);\n  \
    \      }\n        if (largest < smallestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestPositive, smallestNegative);\n        }\n        if (largest\
    \ < smallestPositive) {\n            return Tuple.Create<Nullable<long>, Nullable",
  "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        List<long> negative = new List<long>();\n        List<long> positive\
    \ = new List<long>();\n        foreach (long i in lst) {\n            if (i <\
    \ 0) {\n                negative.Add(i);\n            } else {\n             \
    \   positive.Add(i);\n            }\n        }\n        if (negative.Count ==\
    \ 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (positive.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestNegative = negative.Max();\n\
    \        long smallestPositive = positive.Min();\n        if (largestNegative\
    \ < smallestPositive) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long max = 0;\n        long min\
    \ = 0;\n        foreach (var item in lst) {\n            if (item < 0) {\n   \
    \             max = Math.Max(max, item);\n            } else {\n             \
    \   min = Math.Min(min, item);\n            }\n        }\n        return Tuple.Create(max\
    \ < min ? null : new Nullable<long>(max), min > 0 ? new Nullable<long>(min) :\
    \ null);", "        long max = 0;\n        long min = 0;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                max = i;\n          \
    \  } else {\n                min = i;\n            }\n        }\n        return\
    \ Tuple.Create((Nullable<long>)null, min < max ? min : max);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create((Nullable<long>)null, smallest);\n      \
    \  }\n        if (largest == smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ largest);\n        }\n        long largestNegative = lst.FindLast(x => x < 0);\n\
    \        long smallestPositive = lst.FindFirst(x => x > 0);\n        if (largestNegative\
    \ < smallestPositive) {\n            return Tuple.Create((Nullable<long>)null,\
    \ largestNegative);\n        }\n        if (largestNegative == smallestPositive)\
    \ {\n            return Tuple.Create((Nullable<long>)null, smallestPositive);\n\
    \        }\n        return Tuple.Create((Nullable<long>)null, largest);", "  \
    \      if (lst.Count == 0) {\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        }\n        long largest = lst[0];\n        long\
    \ smallest = lst[0];\n        foreach (long i in lst) {\n            if (i < 0)\
    \ {\n                smallest = i;\n            }\n            if (i > largest)\
    \ {\n                largest = i;\n            }\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestPositive = lst.Where(x\
    \ => x >= 0).Max();\n        long smallestNegative = lst.Where(x => x <= 0).Min();\n\
    \        if (largest < smallestNegative) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallestNegative) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        if (largest < largestPositive) return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if (largest\
    \ == largestPositive) return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ largest);\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        long a = lst.FindIndex(x => x < 0);\n        long b = lst.FindIndex(x\
    \ => x >= 0);\n        if (a < b) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long max = 0;\n        long min\
    \ = 0;\n        foreach (var i in lst) {\n            if (i < 0) {\n         \
    \       max = Math.Max(max, i);\n            } else {\n                min = Math.Min(min,\
    \ i);\n            }\n        }\n        return Tuple.Create(max < min ? null\
    \ : new Nullable<long>(max), min > 0 ? new Nullable<long>(min) : null);", "  \
    \      long max = 0;\n        long min = 0;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                max = Math.Max(max, i);\n         \
    \   } else {\n                min = Math.Min(min, i);\n            }\n       \
    \ }\n        if (min == max) {\n            return Tuple.Create((Nullable<long>)null,\
    \ null);\n        }\n        return Tuple.Create((Nullable<long>)max, (Nullable<long>)min);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestPositive = lst.Where(x\
    \ => x >= 0).Max();\n        long smallestNegative = lst.Where(x => x <= 0).Min();\n\
    \        if (largest < smallestNegative) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallestNegative) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        if (largest < largestPositive) return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if (largest\
    \ == largestPositive) return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ largest);\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst[0];\n  \
    \      long smallest = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] > largest) {\n                largest = lst[i];\n    \
    \        }\n            if (lst[i] < smallest) {\n                smallest = lst[i];\n\
    \            }\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        if (largest == smallest) return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);", " \
    \       if (lst.Count == 0) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        long largest = lst.Max();\n        long smallest = lst.Min();\n     \
    \   if (largest < smallest) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        if (largest == smallest) return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);", " \
    \       if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        Nullable<long> a = null;\n        Nullable<long> b = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (a != null) {\n                    return Tuple.Create<Nullable<long>, Nullable<long>>(a,\
    \ null);\n                }\n                a = i;\n            }\n         \
    \   if (i > 0 && b != null) {\n                return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(b, null);\n            }\n            b = i;\n        }\n  \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(a, null);", "     \
    \   long max = 0;\n        long min = 0;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                max = Math.Max(max, i);\n         \
    \   } else {\n                min = Math.Min(min, i);\n            }\n       \
    \ }\n        if (min == max) {\n            return Tuple.Create((Nullable<long>)null,\
    \ null);\n        }\n        return Tuple.Create((Nullable<long>)max, (Nullable<long>)min);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        if (largest == smallest)\n            return Tuple.Create<Nullable<long>>(null,\
    \ largest);\n        if (lst.Count == 0)\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        long largestPositive = lst.Max(x => x > 0 ? x : 0);\n      \
    \  long smallestNegative = lst.Min(x => x < 0 ? x : 0);\n        if (largest <\
    \ smallestNegative)\n            return Tuple.Create<Nullable<long>>(null, null);\n\
    \        if (largest == smallestNegative)\n            return Tuple.Create<Nullable<long>>(null,\
    \ largest);\n        if (lst.Count == 0)\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        long largestPositiveNegative = lst.Max(x => x > 0 ? x : 0);\n\
    \        long smallestPositiveNegative = lst.Min(x => x < 0 ? x : 0);\n      \
    \  if (largest < smallestPositiveNegative)\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        if (largest == smallestPositiveNegative)\n            return\
    \ Tuple.Create<Nullable<long>>(null, largest);\n        if (lst.Count == 0)\n\
    \            return Tuple.Create<Nullable<long>>(null, null);\n        long largestPositiveNegativeNegative\
    \ = lst.Max(x => x > 0 ? x : 0);\n        long smallestPositiveNegativeNegative\
    \ = lst.Min(x => x < 0 ? x : 0);\n        if (largest < smallestPositiveNegativeNegative)\n\
    \            return Tuple.Create<Nullable<long>>(null, null);\n        if (largest\
    \ == smallestPositiveNegativeNegative)\n            return Tuple.Create<Nullable<long>>(null,\
    \ largest);\n        if (lst.Count == 0)\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        long largestPositiveNegativeNegativeNegative = lst.Max(x =>\
    \ x > 0 ? x : 0);\n        long smallestPositiveNegativeNegativeNegative = lst.Min(x\
    \ => x < 0 ? x : 0);\n        if (largest < smallestPositiveNegativeNegativeNegative)\n\
    \            return Tuple.Create<Nullable<long>>(null, null);\n        if (largest\
    \ == smallestPositiveNegativeNegativeNegative)\n            return Tuple.Create<Nullable<long>>(null,\
    \ largest);\n        if (lst.Count == 0)\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        long ", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x > 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        long largest = lst[0];\n        long smallest = lst[0];\n   \
    \     bool isNegative = false;\n        foreach (long i in lst) {\n          \
    \  if (i < 0) {\n                isNegative = true;\n            }\n         \
    \   if (i > largest) {\n                largest = i;\n            }\n        \
    \    if (i < smallest) {\n                smallest = i;\n            }\n     \
    \   }\n        if (isNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);\n        } else {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, null);\n        }"]
stop_tokens:
- "\n    }\n"
