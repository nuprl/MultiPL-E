name: HumanEval_136_largest_smallest_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n\
  \    // the largest of negative integers, and 'b' is the smallest\n    // of positive\
  \ integers in a list.\n    // If there is no negative or positive integers, return\
  \ them as None.\n    // Examples:\n    // >>> LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L})))\n    //\
  \ Tuple.Create((Nullable<long>)null, 1L)\n    // >>> LargestSmallestIntegers((new\
  \ List<long>()))\n    // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n\
  \    // >>> LargestSmallestIntegers((new List<long>(new long[]{(long)0L})))\n  \
  \  // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    public static\
  \ Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L,\
  \ (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L,\
  \ (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L,\
  \ (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null,\
  \ (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L,\
  \ 1L)));\n    }\n\n}\n"
completions: ["        if (lst.Count == 0) {\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        }\n        long largest = lst.Max();\n     \
    \   long smallest = lst.Min();\n        if (largest < smallest) {\n          \
    \  return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n        }\n\
    \        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create(null, smallest);\n\
    \        }\n        if (largest == smallest) {\n            return Tuple.Create(null,\
    \ null);\n        }\n        List<long> negative = new List<long>();\n       \
    \ List<long> positive = new List<long>();\n        foreach (long n in lst) {\n\
    \            if (n < 0) {\n                negative.Add(n);\n            } else\
    \ {\n                positive.Add(n);\n            }\n        }\n        if (negative.Count\
    \ > 0 && positive.Count > 0) {\n            long largestNegative = negative.Max();\n\
    \            long smallestPositive = positive.Min();\n            if (largestNegative\
    \ < smallestPositive) {\n                return Tuple.Create(null, smallestPositive);\n\
    \            }\n            if (largestNegative == smallestPositive) {\n     \
    \           return Tuple.Create(null, null);\n            }\n            List<long>\
    \ negative2 = new List<long>();\n            List<long> positive2 = new List<long>();\n\
    \            foreach (long n in lst) {\n                if (n < 0) {\n       \
    \             negative2.Add(n);\n                } else {\n                  \
    \  positive2.Add(n);\n                }\n            }\n            if (negative2.Count\
    \ > 0 && positive2.Count > 0) {\n                long largestNegative2 = negative2.Max();\n\
    \                long smallestPositive2 = positive2.Min();\n                if\
    \ (largestNegative2 < smallestPositive2) {\n                    return Tuple.Create(null,\
    \ smallestPositive2);\n                }\n                if (largestNegative2\
    \ == smallestPositive2) {\n                    return Tuple.Create(null, null);\n\
    \                }\n            }\n        }\n        return Tuple.Create(null,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create((Nullable<long>)null, smallest);\n        }\n     \
    \   return Tuple.Create((Nullable<long>)null, largest);", "        long max =\
    \ 0;\n        long min = 0;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                max = Math.Max(max, i);\n            } else {\n \
    \               min = Math.Min(min, i);\n            }\n        }\n        return\
    \ Tuple.Create(max < min ? null : (Nullable<long>)max, min < 0 ? null : (Nullable<long>)min);",
  "        if (lst.Count == 0) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        long largest = lst.Max();\n        long smallest = lst.Min();\n     \
    \   if (largest < smallest) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        if (largest == smallest) return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);\n        long largestNegative = lst.Where(x => x\
    \ < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        if (largestNegative == smallestPositive) return\
    \ Tuple.Create((Nullable<long>)largestNegative, (Nullable<long>)smallestPositive);\n\
    \        return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create(null, smallest);\n\
    \        }\n        if (largest == smallest) {\n            return Tuple.Create(largest,\
    \ largest);\n        }\n        List<long> negative = new List<long>();\n    \
    \    List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                negative.Add(i);\n            }\
    \ else {\n                positive.Add(i);\n            }\n        }\n       \
    \ if (negative.Count > 0 && positive.Count > 0) {\n            long largestNegative\
    \ = negative.Max();\n            long smallestPositive = positive.Min();\n   \
    \         if (largestNegative < smallestPositive) {\n                return Tuple.Create(null,\
    \ smallestPositive);\n            }\n            if (largestNegative == smallestPositive)\
    \ {\n                return Tuple.Create(largestNegative, largestNegative);\n\
    \            }\n            List<long> negativePositive = new List<long>();\n\
    \            List<long> negativeNegative = new List<long>();\n            List<long>\
    \ positivePositive = new List<long>();\n            List<long> positiveNegative\
    \ = new List<long>();\n            foreach (long i in lst) {\n               \
    \ if (i < 0) {\n                    if (i < smallestPositive) {\n            \
    \            negativePositive.Add(i);\n                    } else if (i < largestNegative)\
    \ {\n                        negativeNegative.Add(i);\n                    } else\
    \ {\n                        positivePositive.Add(i);\n                    }\n\
    \                } else {\n                    if (i < smallestPositive) {\n \
    \                       positivePositive.Add(i);\n                    } else if\
    \ (i < largestNegative) {\n                        positiveNegative.Add(i);\n\
    \                    } else {\n                        negativePositive.Add(i);\n\
    \                        negativeNegative.Add(i);\n                    }\n   \
    \             }\n            }\n            if (negativePositive.Count > 0 &&\
    \ negativeNegative.Count > 0) {\n                long largestNegativePositive\
    \ = negativePositive.Max();\n                long smallestNegativeNegative = negativeNegative.Min();\n\
    \                if (largestNegativePositive < smallestNegativeNegative) {\n \
    \                   return Tuple.Create(null, smallestNegativeNegative);\n   \
    \             }\n                if (largestNegativePositive == smallestNegativeNegative)\
    \ {\n                    return Tuple.Create(largestNegativePositive, largestNegativePositive);\n\
    \                }\n                List<long> negativePositiveNegative = new\
    \ List<long>();\n                List<long> negativePositivePositive = new List<long>();\n\
    \                List<long> negativeNegativePositive = new List<long>();\n   \
    \             List<long> negativeNegativeNegative = new List<long>();\n      \
    \          List<long> positivePositivePositive = new List<long>();\n         \
    \       List<long> positivePositiveNegative = new List<long>();\n            \
    \    List<long> positiveNegativePositive = new List<", "        long largest =\
    \ lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create(null, smallest);\n        }\n        if (largest\
    \ == smallest) {\n            return Tuple.Create(largest, largest);\n       \
    \ }\n        List<long> negative = new List<long>();\n        List<long> positive\
    \ = new List<long>();\n        foreach (long i in lst) {\n            if (i <\
    \ 0) {\n                negative.Add(i);\n            } else {\n             \
    \   positive.Add(i);\n            }\n        }\n        Tuple<Nullable<long>,\
    \ Nullable<long>> result = LargestSmallestIntegers(negative);\n        if (result.Item1\
    \ == null) {\n            return result;\n        }\n        return LargestSmallestIntegers(positive);",
  "        if (lst.Count == 0) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        long largest = lst.Max();\n        long smallest = lst.Min();\n     \
    \   if (largest < smallest) return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        if (largest == smallest) return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create((Nullable<long>)largest, (Nullable<long>)smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create(null, smallest);\n\
    \        }\n        return Tuple.Create(largest, null);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        if (lst.Count == 0) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        long a = lst.FindIndex(x => x < 0);\n      \
    \  long b = lst.FindIndex(x => x >= 0);\n        if (a < b) return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create((Nullable<long>)null, smallest);\n        }\n        if (largest\
    \ == smallest) {\n            return Tuple.Create((Nullable<long>)null, largest);\n\
    \        }\n        long largestNegative = lst.FindIndex(x => x < 0);\n      \
    \  long smallestPositive = lst.FindIndex(x => x > 0);\n        if (largestNegative\
    \ == -1 && smallestPositive == -1) {\n            return Tuple.Create((Nullable<long>)null,\
    \ largest);\n        }\n        if (largestNegative == -1 && smallestPositive\
    \ != -1) {\n            return Tuple.Create((Nullable<long>)null, smallest);\n\
    \        }\n        if (largestNegative != -1 && smallestPositive == -1) {\n \
    \           return Tuple.Create((Nullable<long>)null, largest);\n        }\n \
    \       if (largestNegative != -1 && smallestPositive != -1) {\n            return\
    \ Tuple.Create((Nullable<long>)null, smallest);\n        }\n        return Tuple.Create((Nullable<long>)null,\
    \ largest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == smallest) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest);\n\
    \        }\n        List<long> negative = new List<long>();\n        List<long>\
    \ positive = new List<long>();\n        foreach (long n in lst) {\n          \
    \  if (n < 0) negative.Add(n);\n            if (n > 0) positive.Add(n);\n    \
    \    }\n        if (negative.Count > 0 && positive.Count > 0) {\n            long\
    \ largestNegative = negative.Max();\n            long smallestPositive = positive.Min();\n\
    \            if (largestNegative < smallestPositive) {\n                return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n            }\n \
    \           if (largestNegative == smallestPositive) {\n                return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, largestNegative);\n     \
    \       }\n            long largestNegativeNegative = negative.Max(n => -(n));\n\
    \            long smallestPositivePositive = positive.Min(n => -(n));\n      \
    \      if (largestNegativeNegative < smallestPositivePositive) {\n           \
    \     return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n     \
    \       }\n            if (largestNegativeNegative == smallestPositivePositive)\
    \ {\n                return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ largestNegativeNegative);\n            }\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create(new Nullable<long>(), new Nullable<long>());\n        }\n     \
    \   return Tuple.Create(new Nullable<long>(largest), new Nullable<long>(smallest));",
  "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long max = 0;\n        long min = 0;\n        foreach\
    \ (var item in lst) {\n            if (item < 0) {\n                max = Math.Max(max,\
    \ item);\n            }\n            if (item > 0) {\n                min = Math.Min(min,\
    \ item);\n            }\n        }\n        return Tuple.Create(max < min ? null\
    \ : new Nullable<long>(max), min > 0 ? new Nullable<long>(min) : null);", "  \
    \      long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);"]
stop_tokens:
- "\n    }\n"
