name: HumanEval_27_flip_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\")\n\
  \    public static string FlipCase(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
  \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
  )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\")).Equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        string result = \"\";\n        foreach (char c in str) {\n\
    \            if (Char.IsUpper(c)) {\n                result += Char.ToLower(c);\n\
    \            } else {\n                result += Char.ToUpper(c);\n          \
    \  }\n        }\n        return result;", "        string result = \"\";\n   \
    \     foreach (char c in str) {\n            result += (char)(c ^ 32);\n     \
    \   }\n        return result;", "        string result = \"\";\n        foreach\
    \ (char c in str) {\n            if (char.IsLower(c)) {\n                result\
    \ += char.ToUpper(c);\n            } else {\n                result += char.ToLower(c);\n\
    \            }\n        }\n        return result;", "        string result = \"\
    \";\n        foreach (char c in str) {\n            if (char.IsLower(c)) {\n \
    \               result += char.ToUpper(c);\n            } else {\n           \
    \     result += char.ToLower(c);\n            }\n        }\n        return result;",
  "        char[] charArray = str.ToCharArray();\n        char[] newCharArray = new\
    \ char[charArray.Length];\n        for(int i = 0; i < charArray.Length; i++) {\n\
    \            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n             \
    \   newCharArray[i] = (char)(charArray[i] - 32);\n            } else if (charArray[i]\
    \ >= 'A' && charArray[i] <= 'Z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ + 32);\n            } else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);", "      \
    \  char[] chars = str.ToCharArray();\n        char[] flipped = new char[chars.Length];\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            flipped[i] = chars[i]\
    \ > 'Z' ? 'A' + (chars[i] - 'A' + 26) : chars[i] > 'z' ? 'a' + (chars[i] - 'a'\
    \ + 26) : chars[i];\n        }\n        return new string(flipped);", "      \
    \  char[] charArray = str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);", "        char[] charArray = str.ToCharArray();\n\
    \        char[] newCharArray = new char[charArray.Length];\n        for (int i\
    \ = 0; i < charArray.Length; i++) {\n            if (charArray[i] >= 'a' && charArray[i]\
    \ <= 'z') {\n                newCharArray[i] = (char)(charArray[i] - 32);\n  \
    \          }\n            else if (charArray[i] >= 'A' && charArray[i] <= 'Z')\
    \ {\n                newCharArray[i] = (char)(charArray[i] + 32);\n          \
    \  }\n            else {\n                newCharArray[i] = charArray[i];\n  \
    \          }\n        }\n        return new string(newCharArray);", "        char[]\
    \ charArray = str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);", "        char[] charArray = str.ToCharArray();\n\
    \        char[] newCharArray = new char[charArray.Length];\n        for (int i\
    \ = 0; i < charArray.Length; i++) {\n            if (charArray[i] >= 'a' && charArray[i]\
    \ <= 'z') {\n                newCharArray[i] = (char)(charArray[i] - 32);\n  \
    \          }\n            else if (charArray[i] >= 'A' && charArray[i] <= 'Z')\
    \ {\n                newCharArray[i] = (char)(charArray[i] + 32);\n          \
    \  }\n            else {\n                newCharArray[i] = charArray[i];\n  \
    \          }\n        }\n        return new string(newCharArray);", "        char[]\
    \ chars = str.ToCharArray();\n        char[] newChars = new char[str.Length];\n\
    \        for (int i = 0; i < str.Length; i++) {\n            if (chars[i].ToString().ToLower()\
    \ != chars[i].ToString().ToUpper()) {\n                newChars[i] = chars[i].ToString().ToUpper();\n\
    \            } else {\n                newChars[i] = chars[i].ToString().ToLower();\n\
    \            }\n        }\n        return new string(newChars);", "        string\
    \ result = \"\";\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                result += Char.ToUpper(c);\n            } else {\n      \
    \          result += Char.ToLower(c);\n            }\n        }\n        return\
    \ result;", "        string result = \"\";\n        foreach (char c in str) {\n\
    \            if (char.IsUpper(c)) {\n                result += char.ToLower(c);\n\
    \            } else {\n                result += char.ToUpper(c);\n          \
    \  }\n        }\n        return result;", "        string result = \"\";\n   \
    \     foreach (char c in str) {\n            if (Char.IsLower(c)) {\n        \
    \        result += Char.ToUpper(c);\n            } else {\n                result\
    \ += Char.ToLower(c);\n            }\n        }\n        return result;", "  \
    \      char[] charArray = str.ToCharArray();\n        char[] newCharArray = new\
    \ char[charArray.Length];\n        for (int i = 0; i < charArray.Length; i++)\
    \ {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n         \
    \       newCharArray[i] = (char)(charArray[i] - 32);\n            } else if (charArray[i]\
    \ >= 'A' && charArray[i] <= 'Z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ + 32);\n            } else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);", "      \
    \  string result = \"\";\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                result += Char.ToUpper(c);\n            } else {\n      \
    \          result += Char.ToLower(c);\n            }\n        }\n        return\
    \ result;", "        char[] chars = str.ToCharArray();\n        char[] flipped\
    \ = new char[chars.Length];\n        for (int i = 0; i < chars.Length; i++) {\n\
    \            if (chars[i].ToString().Equals(\"A\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'a';\n            }\n            else if (chars[i].ToString().Equals(\"\
    B\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'b';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"C\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'c';\n            }\n            else if (chars[i].ToString().Equals(\"\
    D\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'd';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"E\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'e';\n            }\n            else if (chars[i].ToString().Equals(\"\
    F\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'f';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"G\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'g';\n            }\n            else if (chars[i].ToString().Equals(\"\
    H\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'h';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"I\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'i';\n            }\n            else if (chars[i].ToString().Equals(\"\
    J\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'j';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"K\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'k';\n            }\n            else if (chars[i].ToString().Equals(\"\
    L\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'l';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"M\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'm';\n            }\n            else if (chars[i].ToString().Equals(\"\
    N\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'n';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"O\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'o';\n            }\n            else if (chars[i].ToString().Equals(\"\
    P\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = 'p';\n\
    \            }\n            else if (chars[i].ToString().Equals(\"Q\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = 'q';\n            }\n            else if (chars[i].ToString",
  "        StringBuilder sb = new StringBuilder();\n        foreach (char c in str)\
    \ {\n            if (Char.IsLower(c)) {\n                sb.Append(char.ToUpper(c));\n\
    \            } else {\n                sb.Append(char.ToLower(c));\n         \
    \   }\n        }\n        return sb.ToString();", "        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);", "        char[] charArray = str.ToCharArray();\n\
    \        char[] newCharArray = new char[charArray.Length];\n        for (int i\
    \ = 0; i < charArray.Length; i++) {\n            if (charArray[i] >= 'a' && charArray[i]\
    \ <= 'z') {\n                newCharArray[i] = (char)(charArray[i] - 32);\n  \
    \          } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n        \
    \        newCharArray[i] = (char)(charArray[i] + 32);\n            } else {\n\
    \                newCharArray[i] = charArray[i];\n            }\n        }\n \
    \       return new string(newCharArray);"]
stop_tokens:
- "\n    }\n"
