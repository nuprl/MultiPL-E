name: HumanEval_141_file_name_check
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function which takes a string representing a file's\
  \ name, and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
  \ otherwise.\n    // A file's name is considered to be valid if and only if all\
  \ the following conditions \n    // are met:\n    // - There should not be more\
  \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
  \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
  \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
  \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
  \    // Examples:\n    // >>> FileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
  )\n    // >>> FileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    public static\
  \ string FileNameCheck(string file_name) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FileNameCheck((\"\
  example.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1example.dll\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"s1sdf3.asd\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"K.dll\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  MY16FILE3.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"His12FILE94.exe\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_Y.txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"?aREYA.exe\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  /this_is_valid.dll\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.wow\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txt\")).Equals((\"\
  Yes\")));\n    Debug.Assert(FileNameCheck((\"this_is_valid.txtexe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"#this2_i4s_5valid.ten\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"@this1_is6_valid.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"this_is_12valid.6exe4.txt\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"all.exe.txt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"I563_No.exe\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"\
  Is3youfault.txt\")).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"no_one#knows.dll\"\
  )).Equals((\"Yes\")));\n    Debug.Assert(FileNameCheck((\"1I563_Yes3.exe\")).Equals((\"\
  No\")));\n    Debug.Assert(FileNameCheck((\"I563_Yes3.txtt\")).Equals((\"No\")));\n\
  \    Debug.Assert(FileNameCheck((\"final..txt\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"\
  final132\")).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\"_f4indsartal132.\"\
  )).Equals((\"No\")));\n    Debug.Assert(FileNameCheck((\".txt\")).Equals((\"No\"\
  )));\n    Debug.Assert(FileNameCheck((\"s.\")).Equals((\"No\")));\n    }\n\n}\n"
completions: ["        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{0,1}$\";\n       \
    \ Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n\
    \            int index = file_name.IndexOf('.');\n            if (index != -1)\
    \ {\n                string sub_string = file_name.Substring(0, index);\n    \
    \            if (sub_string.Length > 0) {\n                    char first_letter\
    \ = sub_string[0];\n                    if (first_letter >= 'a' && first_letter\
    \ <= 'z') {\n                        return (\"Yes\");\n                    }\
    \ else {\n                        return (\"No\");\n                    }\n  \
    \              } else {\n                    return (\"No\");\n              \
    \  }\n            } else {\n                return (\"No\");\n            }\n\
    \        } else {\n            return (\"No\");\n        }", "        if (file_name.Length\
    \ > 3 || file_name.Contains(\".\") || file_name.Substring(0, 1).IsEmpty() || file_name.Substring(0,\
    \ 1).FirstOrDefault().ToString() != \"a\" || file_name.Substring(0, 1).FirstOrDefault().ToString()\
    \ != \"b\" || file_name.Substring(0, 1).FirstOrDefault().ToString() != \"c\" ||\
    \ file_name.Substring(0, 1).FirstOrDefault().ToString() != \"d\" || file_name.Substring(0,\
    \ 1).FirstOrDefault().ToString() != \"e\" || file_name.Substring(0, 1).FirstOrDefault().ToString()\
    \ != \"f\" || file_name.Substring(0, 1).FirstOrDefault().ToString() != \"g\" ||\
    \ file_name.Substring(0, 1).FirstOrDefault().ToString() != \"h\" || file_name.Substring(0,\
    \ 1).FirstOrDefault().ToString() != \"i\" || file_name.Substring(0, 1).FirstOrDefault().ToString()\
    \ != \"j\" || file_name.Substring(0, 1).FirstOrDefault().ToString() != \"k\" ||\
    \ file_name.Substring(0, 1).FirstOrDefault().ToString() != \"l\" || file_name.Substring(0,\
    \ 1).FirstOrDefault().ToString() != \"m\" || file_name.Substring(0, 1).FirstOrDefault().ToString()\
    \ != \"n\" || file_name.Substring(0, 1).FirstOrDefault().ToString() != \"o\" ||\
    \ file_name.Substring(0, 1).FirstOrDefault().ToString() != \"p\" || file_name.Substring(0,\
    \ 1).FirstOrDefault().ToString() != \"q\" || file_name.Substring(0, 1).FirstOrDefault().ToString()\
    \ != \"r\" || file_name.Substring(0, 1).FirstOrDefault().ToString() != \"s\" ||\
    \ file_name.Substring(0, 1).FirstOrDefault().ToString() != \"t\" || file_name.Substring(0,\
    \ 1).FirstOrDefault().ToString() != \"u\" || file_name.Substring(0, 1).FirstOrDefault().ToString()\
    \ != \"v\" || file_name.Substring(0, 1).FirstOrDefault().ToString() != \"w\" ||\
    \ file_name.Substring(0, 1).FirstOrDefault().ToString() != \"x\" || file_name.Substring(0,\
    \ 1).FirstOrDefault().ToString() != \"y\" || file_name.Substring(0, 1).FirstOrDefault().ToString()\
    \ != \"z\") {\n            return \"No\";\n        }\n        return \"Yes\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n           \
    \ if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1) != \"\") {\n                    if (file_name.Substring(0, 1) != \"a\" &&\
    \ file_name.Substring(0, 1) != \"b\" && file_name.Substring(0, 1) != \"c\" &&\
    \ file_name.Substring(0, 1) != \"d\" && file_name.Substring(0, 1) != \"e\" &&\
    \ file_name.Substring(0, 1) != \"f\" && file_name.Substring(0, 1) != \"g\" &&\
    \ file_name.Substring(0, 1) != \"h\" && file_name.Substring(0, 1) != \"i\" &&\
    \ file_name.Substring(0, 1) != \"j\" && file_name.Substring(0, 1) != \"k\" &&\
    \ file_name.Substring(0, 1) != \"l\" && file_name.Substring(0, 1) != \"m\" &&\
    \ file_name.Substring(0, 1) != \"n\" && file_name.Substring(0, 1) != \"o\" &&\
    \ file_name.Substring(0, 1) != \"p\" && file_name.Substring(0, 1) != \"q\" &&\
    \ file_name.Substring(0, 1) != \"r\" && file_name.Substring(0, 1) != \"s\" &&\
    \ file_name.Substring(0, 1) != \"t\" && file_name.Substring(0, 1) != \"u\" &&\
    \ file_name.Substring(0, 1) != \"v\" && file_name.Substring(0, 1) != \"w\" &&\
    \ file_name.Substring(0, 1) != \"x\" && file_name.Substring(0, 1) != \"y\" &&\
    \ file_name.Substring(0, 1) != \"z\") {\n                        return \"No\"\
    ;\n                    }\n                }\n            }\n            return\
    \ \"Yes\";\n        }\n        return \"No\";", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-zA-Z]{1}$\";\n        Regex regex = new Regex(pattern);\n     \
    \   if (regex.IsMatch(file_name)) {\n            int index = file_name.IndexOf(\"\
    .\");\n            if (index != -1) {\n                string before = file_name.Substring(0,\
    \ index);\n                string after = file_name.Substring(index + 1);\n  \
    \              bool valid = before.Length > 0 && before.StartsWith(\"a\") && before.EndsWith(\"\
    z\") && after.Length > 0 && after.Contains(\"txt\") && after.Contains(\"exe\"\
    ) && after.Contains(\"dll\");\n                return valid ? \"Yes\" : \"No\"\
    ;\n            }\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n\
    \        string result = regex.Match(file_name).Value;\n        if (result ==\
    \ \"Yes\") {\n            return result;\n        }\n        else {\n        \
    \    return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string sub = file_name.Substring(0, file_name.IndexOf(\".\"));\n\
    \            if (sub.Length > 0) {\n                if (sub[0] >= 'a' && sub[0]\
    \ <= 'z' || sub[0] >= 'A' && sub[0] <= 'Z') {\n                    string ext\
    \ = file_name.Substring(file_name.IndexOf(\".\") + 1);\n                    if\
    \ (ext == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n                   \
    \     return \"Yes\";\n                    }\n                }\n            }\n\
    \        }\n        return \"No\";", "        if (file_name.Length > 3) {\n  \
    \          return \"No\";\n        }\n        if (file_name.Contains(\".\")) {\n\
    \            return \"No\";\n        }\n        if (file_name.Substring(0, 1).IsEmpty())\
    \ {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).Any(c => c < 'a' || c > 'z')) {\n            return \"No\";\n        }\n\
    \        if (file_name.Substring(0, 1).Any(c => c < 'A' || c > 'Z')) {\n     \
    \       return \"No\";\n        }\n        if (file_name.Substring(0, file_name.IndexOf(\"\
    .\")).Any(c => c < 'a' || c > 'z')) {\n            return \"No\";\n        }\n\
    \        if (file_name.Substring(0, file_name.IndexOf(\".\")).Any(c => c < 'A'\
    \ || c > 'Z')) {\n            return \"No\";\n        }\n        return \"Yes\"\
    ;", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{0,2}$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \ }\n        return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            string valid_extensions = new string[] { \"txt\", \"exe\", \"dll\"\
    \ };\n            if (valid_extensions.Contains(extension)) {\n              \
    \  return \"Yes\";\n            }\n        }\n        return \"No\";", "     \
    \   string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).Length > 0) {\n    \
    \                if (file_name.Substring(0, 1).ToLower() != \"a\" && file_name.Substring(0,\
    \ 1).ToLower() != \"b\" && file_name.Substring(0, 1).ToLower() != \"c\" && file_name.Substring(0,\
    \ 1).ToLower() != \"d\" && file_name.Substring(0, 1).ToLower() != \"e\" && file_name.Substring(0,\
    \ 1).ToLower() != \"f\" && file_name.Substring(0, 1).ToLower() != \"g\" && file_name.Substring(0,\
    \ 1).ToLower() != \"h\" && file_name.Substring(0, 1).ToLower() != \"i\" && file_name.Substring(0,\
    \ 1).ToLower() != \"j\" && file_name.Substring(0, 1).ToLower() != \"k\" && file_name.Substring(0,\
    \ 1).ToLower() != \"l\" && file_name.Substring(0, 1).ToLower() != \"m\" && file_name.Substring(0,\
    \ 1).ToLower() != \"n\" && file_name.Substring(0, 1).ToLower() != \"o\" && file_name.Substring(0,\
    \ 1).ToLower() != \"p\" && file_name.Substring(0, 1).ToLower() != \"q\" && file_name.Substring(0,\
    \ 1).ToLower() != \"r\" && file_name.Substring(0, 1).ToLower() != \"s\" && file_name.Substring(0,\
    \ 1).ToLower() != \"t\" && file_name.Substring(0, 1).ToLower() != \"u\" && file_name.Substring(0,\
    \ 1).ToLower() != \"v\" && file_name.Substring(0, 1).ToLower() != \"w\" && file_name.Substring(0,\
    \ 1).ToLower() != \"x\" && file_name.Substring(0, 1).ToLower() != \"y\" && file_name.Substring(0,\
    \ 1).ToLower() != \"z\") {\n                        return \"No\";\n         \
    \           }\n                }\n                if (file_name.Substring(file_name.IndexOf('.')).ToLower()\
    \ != \"txt\" && file_name.Substring(file_name.IndexOf('.')).ToLower() != \"exe\"\
    \ && file_name.Substring(file_name.IndexOf('.')).ToLower() != \"dll\") {\n   \
    \                 return \"No\";\n                }\n            }\n         \
    \   return \"Yes\";\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success) {\n\
    \            string file_name = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            string extension = file_name.Substring(file_name.IndexOf(\".\"\
    ) + 1);\n            string pattern = @\"^[a-zA-Z]+\";\n            Regex regex\
    \ = new Regex(pattern);\n            Match match = regex.Match(extension);\n \
    \           if (match.Success) {\n                string extension = extension.Substring(0,\
    \ extension.IndexOf(\".\"));\n                string pattern = @\"^[a-zA-Z]+\"\
    ;\n                Regex regex = new Regex(pattern);\n                Match match\
    \ = regex.Match(extension);\n                if (match.Success) {\n          \
    \          return \"Yes\";\n                }\n            }\n        }\n    \
    \    return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string sub_string = file_name.Substring(0,\
    \ match.Index);\n            string extension = file_name.Substring(match.Index\
    \ + 1);\n            if (sub_string.Length > 0 && sub_string[0] == '.' &&\n  \
    \              sub_string.Substring(0, 1).IsLetter() &&\n                extension.Contains(\"\
    txt\") ||\n                extension.Contains(\"exe\") ||\n                extension.Contains(\"\
    dll\")) {\n                return \"Yes\";\n            }\n        }\n       \
    \ return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n            return\
    \ \"No\";\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]{0,1}$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") != -1) {\n                string\
    \ before_dot = file_name.Substring(0, file_name.IndexOf(\".\"));\n           \
    \     if (before_dot.Length > 0) {\n                    string after_dot = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n                    if (!after_dot.Contains(\"txt\") && !after_dot.Contains(\"\
    exe\") && !after_dot.Contains(\"dll\")) {\n                        return \"No\"\
    ;\n                    }\n                }\n            }\n            return\
    \ \"Yes\";\n        }\n        return \"No\";", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n       \
    \ if (regex.IsMatch(file_name)) {\n            string before_dot = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            if (before_dot.Length > 0) {\n     \
    \           char first_letter = before_dot[0];\n                if (!(first_letter\
    \ == 'a' || first_letter == 'b' || first_letter == 'c' || first_letter == 'd'\
    \ || first_letter == 'e' || first_letter == 'f' || first_letter == 'g' || first_letter\
    \ == 'h' || first_letter == 'i' || first_letter == 'j' || first_letter == 'k'\
    \ || first_letter == 'l' || first_letter == 'm' || first_letter == 'n' || first_letter\
    \ == 'o' || first_letter == 'p' || first_letter == 'q' || first_letter == 'r'\
    \ || first_letter == 's' || first_letter == 't' || first_letter == 'u' || first_letter\
    \ == 'v' || first_letter == 'w' || first_letter == 'x' || first_letter == 'y'\
    \ || first_letter == 'z')) {\n                    return \"No\";\n           \
    \     }\n            }\n            string after_dot = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            string[] extensions = new string[] { \"txt\", \"exe\"\
    , \"dll\" };\n            if (extensions.Contains(after_dot)) {\n            \
    \    return \"Yes\";\n            }\n        }\n        return \"No\";", "   \
    \     string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        string result = regex.Match(file_name).Value;\n   \
    \     if (result == \"Yes\") {\n            return result;\n        } else {\n\
    \            return \"No\";\n        }", "        string dot = \".\";\n      \
    \  string dot1 = \"\";\n        string dot2 = \"\";\n        string dot3 = \"\"\
    ;\n        string dot4 = \"\";\n        string dot5 = \"\";\n        string dot6\
    \ = \"\";\n        string dot7 = \"\";\n        string dot8 = \"\";\n        string\
    \ dot9 = \"\";\n        string dot10 = \"\";\n        string dot11 = \"\";\n \
    \       string dot12 = \"\";\n        string dot13 = \"\";\n        string dot14\
    \ = \"\";\n        string dot15 = \"\";\n        string dot16 = \"\";\n      \
    \  string dot17 = \"\";\n        string dot18 = \"\";\n        string dot19 =\
    \ \"\";\n        string dot20 = \"\";\n        string dot21 = \"\";\n        string\
    \ dot22 = \"\";\n        string dot23 = \"\";\n        string dot24 = \"\";\n\
    \        string dot25 = \"\";\n        string dot26 = \"\";\n        string dot27\
    \ = \"\";\n        string dot28 = \"\";\n        string dot29 = \"\";\n      \
    \  string dot30 = \"\";\n        string dot31 = \"\";\n        string dot32 =\
    \ \"\";\n        string dot33 = \"\";\n        string dot34 = \"\";\n        string\
    \ dot35 = \"\";\n        string dot36 = \"\";\n        string dot37 = \"\";\n\
    \        string dot38 = \"\";\n        string dot39 = \"\";\n        string dot40\
    \ = \"\";\n        string dot41 = \"\";\n        string dot42 = \"\";\n      \
    \  string dot43 = \"\";\n        string dot44 = \"\";\n        string dot45 =\
    \ \"\";\n        string dot46 = \"\";\n        string dot47 = \"\";\n        string\
    \ dot48 = \"\";\n        string dot49 = \"\";\n        string dot50 = \"\";\n\
    \        string dot51 = \"\";\n        string dot52 = \"\";\n        string dot53\
    \ = \"\";\n        string dot54 = \"\";\n        string dot55 = \"\";\n      \
    \  string dot56 = \"\";\n        string dot57 = \"\";\n        string dot58 =\
    \ \"\";\n        string dot59 = \"\";\n        string dot60 = \"\";\n        string\
    \ dot61 = \"\";\n        string dot62 = \"\";\n        string dot63 = \"\";\n\
    \        string dot64 = \"\";\n        string dot65 = \"\";\n        string dot66\
    \ = \"\";\n        string dot67 = \"\";\n        string dot68 = \"\";\n      \
    \  string dot69 = \"\";\n        string dot70 = \"\";\n        string dot71 =\
    \ \"\";\n        string dot72 = \"\";\n        string dot73 = \"\";\n        string\
    \ dot74 = \"\";\n        string dot75 = \"\";\n        string dot76 = \"\";\n\
    \        string dot77 = \"\";\n        string dot78 = \"\";\n        string dot79\
    \ = \"\";\n        string dot80 = \"\";\n        string dot81 = \"\";\n      \
    \  ", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\";\n    \
    \    Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).Equals(\"0\") || file_name.Substring(0, 1).Equals(\"1\") || file_name.Substring(0,\
    \ 1).Equals(\"2\") || file_name.Substring(0, 1).Equals(\"3\") || file_name.Substring(0,\
    \ 1).Equals(\"4\") || file_name.Substring(0, 1).Equals(\"5\") || file_name.Substring(0,\
    \ 1).Equals(\"6\") || file_name.Substring(0, 1).Equals(\"7\") || file_name.Substring(0,\
    \ 1).Equals(\"8\") || file_name.Substring(0, 1).Equals(\"9\")) {\n           \
    \         return \"Yes\";\n                } else {\n                    return\
    \ \"No\";\n                }\n            } else {\n                return \"\
    No\";\n            }\n        } else {\n            return \"No\";\n        }",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        Match match = regex.Match(file_name);\n        if (match.Success)\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            bool is_exe = extension.Equals(\"exe\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_dll = extension.Equals(\"dll\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_txt = extension.Equals(\"txt\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_other = extension.Equals(\"other\", StringComparison.OrdinalIgnoreCase);\n\
    \            if (is_exe && is_dll) {\n                return \"No\";\n       \
    \     }\n            if (is_exe && is_txt) {\n                return \"No\";\n\
    \            }\n            if (is_exe && is_other) {\n                return\
    \ \"No\";\n            }\n            if (is_dll && is_txt) {\n              \
    \  return \"No\";\n            }\n            if (is_dll && is_other) {\n    \
    \            return \"No\";\n            }\n            if (is_txt && is_other)\
    \ {\n                return \"No\";\n            }\n            return \"Yes\"\
    ;\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        Match match\
    \ = regex.Match(file_name);\n        if (match.Success) {\n            string\
    \ file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n            string\
    \ extension = file_name.Substring(file_name.LastIndexOf(\".\") + 1);\n       \
    \     if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    ) {\n                return \"Yes\";\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string file_extension =\
    \ file_name.Substring(file_name.LastIndexOf('.'));\n            string file_extension_array\
    \ = file_extension.Split('.');\n            string file_extension_array_check\
    \ = file_extension_array[0];\n            if (file_extension_array_check == \"\
    txt\" || file_extension_array_check == \"exe\" || file_extension_array_check ==\
    \ \"dll\") {\n                return \"Yes\";\n            }\n            else\
    \ {\n                return \"No\";\n            }\n        }\n        else {\n\
    \            return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\\
    .[a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n        Match match\
    \ = regex.Match(file_name);\n        if (match.Success)\n        {\n         \
    \   string file_name = file_name.Substring(0, file_name.Length - 1);\n       \
    \     string extension = file_name.Substring(file_name.Length - 3, 3);\n     \
    \       if (extension == \"exe\" || extension == \"dll\")\n            {\n   \
    \             return \"Yes\";\n            }\n            else\n            {\n\
    \                return \"No\";\n            }\n        }\n        else\n    \
    \    {\n            return \"No\";\n        }", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n       \
    \ if (regex.IsMatch(file_name)) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf('.'));\n            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            if (extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\") {\n                return \"Yes\";\n            }\n        }\n    \
    \    return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string substr = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            if (substr.Length > 0) {\n                if (substr.StartsWith(\"\
    a\") || substr.StartsWith(\"A\")) {\n                    return \"Yes\";\n   \
    \             } else {\n                    return \"No\";\n                }\n\
    \            } else {\n                return \"No\";\n            }\n       \
    \ } else {\n            return \"No\";\n        }", "        string pattern =\
    \ @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n  \
    \      if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\".\"\
    ) > 0) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\" ||\
    \ file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower() == \"L\" || file_name.Substring(0,\
    \ 1).ToLower() == \"M\" || file_name", "        // Your code goes here\n     \
    \   string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{0,1}$\";\n        Regex regex = new\
    \ Regex(pattern);\n        string result = regex.Match(file_name).Value;\n   \
    \     if (result == \"Yes\")\n        {\n            return result;\n        }\n\
    \        else\n        {\n            return \"No\";\n        }", "        if\
    \ (file_name.Length > 3) {\n            return \"No\";\n        }\n        if\
    \ (file_name.Contains(\".\")) {\n            return \"No\";\n        }\n     \
    \   if (file_name.Substring(0, 1).IsEmpty()) {\n            return \"No\";\n \
    \       }\n        if (file_name.Substring(0, 1).ToLower() != \"a\" && file_name.Substring(0,\
    \ 1).ToLower() != \"b\" && file_name.Substring(0, 1).ToLower() != \"c\" && file_name.Substring(0,\
    \ 1).ToLower() != \"d\" && file_name.Substring(0, 1).ToLower() != \"e\" && file_name.Substring(0,\
    \ 1).ToLower() != \"f\" && file_name.Substring(0, 1).ToLower() != \"g\" && file_name.Substring(0,\
    \ 1).ToLower() != \"h\" && file_name.Substring(0, 1).ToLower() != \"i\" && file_name.Substring(0,\
    \ 1).ToLower() != \"j\" && file_name.Substring(0, 1).ToLower() != \"k\" && file_name.Substring(0,\
    \ 1).ToLower() != \"l\" && file_name.Substring(0, 1).ToLower() != \"m\" && file_name.Substring(0,\
    \ 1).ToLower() != \"n\" && file_name.Substring(0, 1).ToLower() != \"o\" && file_name.Substring(0,\
    \ 1).ToLower() != \"p\" && file_name.Substring(0, 1).ToLower() != \"q\" && file_name.Substring(0,\
    \ 1).ToLower() != \"r\" && file_name.Substring(0, 1).ToLower() != \"s\" && file_name.Substring(0,\
    \ 1).ToLower() != \"t\" && file_name.Substring(0, 1).ToLower() != \"u\" && file_name.Substring(0,\
    \ 1).ToLower() != \"v\" && file_name.Substring(0, 1).ToLower() != \"w\" && file_name.Substring(0,\
    \ 1).ToLower() != \"x\" && file_name.Substring(0, 1).ToLower() != \"y\" && file_name.Substring(0,\
    \ 1).ToLower() != \"z\") {\n            return \"No\";\n        }\n        if\
    \ (file_name.Substring(1, 1).ToLower() != \".\") {\n            return \"No\"\
    ;\n        }\n        if (file_name.Substring(1, 3).ToLower() != \"txt\" && file_name.Substring(1,\
    \ 3).ToLower() != \"exe\" && file_name.Substring(1, 3).ToLower() != \"dll\") {\n\
    \            return \"No\";\n        }\n        return \"Yes\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") != -1) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\"\
    \ || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower() == \"L\" || file_name.Substring(0,\
    \ 1).ToLower() == \"M\" || file_name", "        string pattern = @\"^[0-9]{1,3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            if (file_extension == \"txt\" || file_extension == \"exe\" || file_extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{0,1}$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") > 0) {\n                string before_dot\
    \ = file_name.Substring(0, file_name.IndexOf(\".\"));\n                if (before_dot.Length\
    \ > 0) {\n                    string after_dot = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n                    if (!after_dot.Contains(\"txt\") && !after_dot.Contains(\"\
    exe\") && !after_dot.Contains(\"dll\")) {\n                        return \"No\"\
    ;\n                    }\n                }\n            }\n            return\
    \ \"Yes\";\n        }\n        return \"No\";", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-zA-Z]{1}$\";\n        Regex regex = new Regex(pattern);\n     \
    \   if (regex.IsMatch(file_name)) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n            return\
    \ \"No\";\n        }\n        return \"No\";", "        if (file_name.Length >\
    \ 3) {\n            return \"No\";\n        }\n        if (file_name.Contains(\"\
    .\")) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).IsEmpty()) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).Any(c => c < 'a' || c > 'z')) {\n            return \"No\";\n        }\n\
    \        if (file_name.Substring(0, file_name.IndexOf(\".\")).Any(c => c < 'a'\
    \ || c > 'z')) {\n            return \"No\";\n        }\n        if (file_name.Substring(file_name.IndexOf(\"\
    .\") + 1).Any(c => c < 'a' || c > 'z')) {\n            return \"No\";\n      \
    \  }\n        if (file_name.Substring(file_name.IndexOf(\".\") + 1).ToLower()\
    \ == \"txt\") {\n            return \"Yes\";\n        }\n        if (file_name.Substring(file_name.IndexOf(\"\
    .\") + 1).ToLower() == \"exe\") {\n            return \"Yes\";\n        }\n  \
    \      if (file_name.Substring(file_name.IndexOf(\".\") + 1).ToLower() == \"dll\"\
    ) {\n            return \"Yes\";\n        }\n        return \"No\";", "      \
    \  string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.Contains(\".\")) {\n                if (file_name.Substring(0,\
    \ 1).Length > 0) {\n                    string pattern1 = @\"^[a-zA-Z]+\";\n \
    \                   Regex regex1 = new Regex(pattern1);\n                    if\
    \ (regex1.IsMatch(file_name.Substring(0, 1))) {\n                        return\
    \ (\"Yes\");\n                    }\n                }\n            }\n      \
    \      return (\"No\");\n        }\n        return (\"No\");", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string name = file_name.Substring(0,\
    \ file_name.IndexOf('.'));\n            string ext = file_name.Substring(file_name.IndexOf('.'));\n\
    \            string valid_extensions = new List<string> { \"txt\", \"exe\", \"\
    dll\" };\n            if (valid_extensions.Contains(ext)) {\n                return\
    \ \"Yes\";\n            }\n        }\n        return \"No\";", "        if (file_name.Length\
    \ > 3) {\n            return \"No\";\n        }\n        if (file_name.Contains(\"\
    .\")) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).IsEmpty()) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \           return \"No\";\n        }\n        if (file_name.Substring(1, 1).ToLower()\
    \ != \".\") {\n            return \"No\";\n        }\n        if (file_name.Substring(2,\
    \ 1).ToLower() != \"t\" && file_name.Substring(2, 1).ToLower() != \"e\" && file_name.Substring(2,\
    \ 1).ToLower() != \"x\" && file_name.Substring(2, 1).ToLower() != \"d\" && file_name.Substring(2,\
    \ 1).ToLower() != \"l\" && file_name.Substring(2, 1).ToLower() != \"l\" && file_name.Substring(2,\
    \ 1).ToLower() != \"o\" && file_name.Substring(2, 1).ToLower(", "        string\
    \ dot = \".\";\n        string first_letter = \"a\";\n        string last_letter\
    \ = \"z\";\n        string extensions = \"txt,exe,dll\";\n        string sub_string\
    \ = file_name.Substring(0, file_name.IndexOf(dot));\n        if (sub_string.Length\
    \ > 3 || sub_string.Length < 1 || sub_string.StartsWith(first_letter) || sub_string.EndsWith(last_letter))\
    \ {\n            return \"No\";\n        }\n        if (extensions.Contains(sub_string))\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";", "      \
    \  if (file_name.Length > 3 || file_name.Contains(\".\") || file_name.Substring(0,\
    \ 1).IsEmpty() || file_name.Substring(0, 1).FirstOrDefault() != 'a' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != 'A' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ 'z' || file_name.Substring(0, 1).FirstOrDefault() != 'Z' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != '0' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ '9') {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).FirstOrDefault() == '.') {\n            return \"No\";\n        }\n     \
    \   if (file_name.Substring(0, 1).FirstOrDefault() != 'a' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != 'A' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ 'z' || file_name.Substring(0, 1).FirstOrDefault() != 'Z' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != '0' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ '9') {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).FirstOrDefault() == '.') {\n            return \"No\";\n        }\n     \
    \   if (file_name.Substring(0, 1).FirstOrDefault() != 'a' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != 'A' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ 'z' || file_name.Substring(0, 1).FirstOrDefault() != 'Z' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != '0' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ '9') {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).FirstOrDefault() == '.') {\n            return \"No\";\n        }\n     \
    \   if (file_name.Substring(0, 1).FirstOrDefault() != 'a' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != 'A' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ 'z' || file_name.Substring(0, 1).FirstOrDefault() != 'Z' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != '0' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ '9') {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).FirstOrDefault() == '.') {\n            return \"No\";\n        }\n     \
    \   if (file_name.Substring(0, 1).FirstOrDefault() != 'a' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != 'A' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ 'z' || file_name.Substring(0, 1).FirstOrDefault() != 'Z' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != '0' ", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{1}$\"\
    ;\n        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\"));\n            string valid_extensions = new List<string>() { \"txt\", \"\
    exe\", \"dll\" };\n            if (valid_extensions.Contains(extension)) {\n \
    \               return \"Yes\";\n            }\n        }\n        return \"No\"\
    ;", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{1}$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n           \
    \ int index = file_name.IndexOf('.');\n            if (index > 0) {\n        \
    \        string sub_string = file_name.Substring(0, index);\n                if\
    \ (!string.IsNullOrEmpty(sub_string)) {\n                    string pattern1 =\
    \ @\"^[a-zA-Z]{1}$\";\n                    Regex regex1 = new Regex(pattern1);\n\
    \                    if (regex1.IsMatch(sub_string)) {\n                     \
    \   return (\"Yes\");\n                    }\n                }\n            }\n\
    \        }\n        return (\"No\");", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            string valid_extensions = new string[] { \"txt\", \"exe\", \"dll\"\
    \ };\n            if (valid_extensions.Contains(extension)) {\n              \
    \  return \"Yes\";\n            }\n        }\n        return \"No\";", "     \
    \   string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).ToUpper() == file_name.Substring(0,\
    \ 1).ToUpper()) {\n                    string extension = file_name.Substring(file_name.IndexOf('.')\
    \ + 1);\n                    if (extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\") {\n                        return \"Yes\";\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       string substr = file_name.Substring(0, file_name.IndexOf(\".\"));\n  \
    \          if (substr.Length > 0) {\n                string first_char = substr.Substring(0,\
    \ 1);\n                if (first_char.Length > 0 && first_char.ToLower() == \"\
    a\") {\n                    substr = substr.Substring(1);\n                }\n\
    \                if (substr.Length > 0 && substr.ToLower() == \"txt\" || substr.ToLower()\
    \ == \"exe\" || substr.ToLower() == \"dll\") {\n                    return \"\
    Yes\";\n                }\n            }\n            return \"No\";\n       \
    \ }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z]$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).ToUpper() == file_name.Substring(0, 1).ToUpper()) {\n                   \
    \ if (file_name.Substring(0, 1).ToUpper() == file_name.Substring(0, 1).ToUpper())\
    \ {\n                        if (file_name.Substring(0, 1).ToUpper() == file_name.Substring(0,\
    \ 1).ToUpper()) {\n                            return \"Yes\";\n             \
    \           }\n                    }\n                }\n            }\n     \
    \       return \"No\";\n        }\n        return \"No\";", "        string dot\
    \ = \".\";\n        string letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        string sub_string = file_name.Substring(0, file_name.IndexOf(dot));\n\
    \        if (sub_string.Length > 3 || sub_string.Length < 1 || sub_string[0] <\
    \ 'a' || sub_string[0] > 'z' || sub_string[sub_string.Length - 1] < 'a' || sub_string[sub_string.Length\
    \ - 1] > 'z') {\n            return \"No\";\n        }\n        if (file_name.IndexOf(dot)\
    \ == -1 || file_name.Substring(0, file_name.IndexOf(dot)).Length == 0) {\n   \
    \         return \"No\";\n        }\n        if (file_name.Substring(file_name.IndexOf(dot)\
    \ + 1, file_name.Length - file_name.IndexOf(dot) - 1).ToLower() != \"txt\" &&\
    \ file_name.Substring(file_name.IndexOf(dot) + 1, file_name.Length - file_name.IndexOf(dot)\
    \ - 1).ToLower() != \"exe\" && file_name.Substring(file_name.IndexOf(dot) + 1,\
    \ file_name.Length - file_name.IndexOf(dot) - 1).ToLower() != \"dll\") {\n   \
    \         return \"No\";\n        }\n        return \"Yes\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") != -1) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\"\
    \ || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower() == \"L\" || file_name.Substring(0,\
    \ 1).ToLower(", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n     \
    \   Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n\
    \            int index = file_name.IndexOf('.');\n            if (index != -1)\
    \ {\n                string sub_string = file_name.Substring(0, index);\n    \
    \            if (sub_string.Length > 0 && sub_string[0] >= 'a' && sub_string[0]\
    \ <= 'z') {\n                    string extension = file_name.Substring(index);\n\
    \                    if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                        return \"Yes\";\n                   \
    \ }\n                }\n            }\n        }\n        return \"No\";", " \
    \       string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).ToUpper() != file_name.Substring(0,\
    \ 1).ToLower()) {\n                    return \"No\";\n                }\n   \
    \             else {\n                    string extension = file_name.Substring(file_name.IndexOf('.')\
    \ + 1);\n                    if (extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\") {\n                        return \"Yes\";\n      \
    \              }\n                    else {\n                        return \"\
    No\";\n                    }\n                }\n            }\n            else\
    \ {\n                return \"No\";\n            }\n        }\n        else {\n\
    \            return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\\
    .[a-z][a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).Equals(\"0\") || file_name.Substring(0, 1).Equals(\"1\") || file_name.Substring(0,\
    \ 1).Equals(\"2\") || file_name.Substring(0, 1).Equals(\"3\") || file_name.Substring(0,\
    \ 1).Equals(\"4\") || file_name.Substring(0, 1).Equals(\"5\") || file_name.Substring(0,\
    \ 1).Equals(\"6\") || file_name.Substring(0, 1).Equals(\"7\") || file_name.Substring(0,\
    \ 1).Equals(\"8\") || file_name.Substring(0, 1).Equals(\"9\")) {\n           \
    \         return \"Yes\";\n                }\n            }\n            else\
    \ {\n                return \"No\";\n            }\n        }\n        else {\n\
    \            return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z][a-zA-Z0-9]*$\";\n        Regex regex = new Regex(pattern);\n       \
    \ if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\".\") >\
    \ 0) {\n                string before_dot = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n                if (before_dot.Length > 0) {\n                    string\
    \ after_dot = file_name.Substring(file_name.IndexOf(\".\") + 1);\n           \
    \         if (!after_dot.Contains(\"txt\") && !after_dot.Contains(\"exe\") &&\
    \ !after_dot.Contains(\"dll\")) {\n                        return \"No\";\n  \
    \                  }\n                }\n            }\n            return \"\
    Yes\";\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z][a-zA-Z0-9]*$\";\n        Regex regex = new Regex(pattern);\n       \
    \ if (regex.IsMatch(file_name)) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf('.'));\n            string extension = file_name.Substring(file_name.IndexOf('.'));\n\
    \            if (extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\") {\n                return \"Yes\";\n            }\n            else\
    \ {\n                return \"No\";\n            }\n        }\n        else {\n\
    \            return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \ }\n        return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success)\n        {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf('.')\
    \ + 1);\n            string pattern1 = @\"^[a-zA-Z]+\";\n            Regex regex1\
    \ = new Regex(pattern1);\n            Match match1 = regex1.Match(extension);\n\
    \            if (match1.Success)\n            {\n                string pattern2\
    \ = @\"^[a-zA-Z]+\\.[a-zA-Z]+$\";\n                Regex regex2 = new Regex(pattern2);\n\
    \                Match match2 = regex2.Match(file_name);\n                if (match2.Success)\n\
    \                {\n                    return \"Yes\";\n                }\n \
    \               else\n                {\n                    return \"No\";\n\
    \                }\n            }\n            else\n            {\n         \
    \       return \"No\";\n            }\n        }\n        else\n        {\n  \
    \          return \"No\";\n        }", "        if (file_name.Length > 3) {\n\
    \            return \"No\";\n        }\n        if (file_name.Contains(\".\"))\
    \ {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).IsEmpty()) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ 1).IndexOfAny(new char[] { 'a', 'A' }) < 0) {\n            return \"No\";\n\
    \        }\n        if (file_name.Substring(0, file_name.IndexOf(\".\")).IndexOfAny(new\
    \ char[] { 't', 'e', 'x' }) < 0) {\n            return \"No\";\n        }\n  \
    \      if (file_name.Substring(file_name.IndexOf(\".\") + 1).IndexOfAny(new char[]\
    \ { 't', 'e', 'x' }) < 0) {\n            return \"No\";\n        }\n        return\
    \ \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            bool valid = true;\n            foreach (char c in extension)\
    \ {\n                if (c < 'a' || c > 'z') {\n                    valid = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (valid && extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    ) {\n                return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        } else {\n            return \"No\";\n     \
    \   }", "        if (file_name.Length > 3) {\n            return \"No\";\n   \
    \     }\n        if (file_name.Contains(\".\")) {\n            return \"No\";\n\
    \        }\n        if (file_name.Substring(0, 1).IsEmpty()) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Substring(0, 1).Any(c => c < 'a' ||\
    \ c > 'z')) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ file_name.IndexOf(\".\")).Any(c => c < 'a' || c > 'z')) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Substring(file_name.IndexOf(\".\"\
    ) + 1).Any(c => c < 'a' || c > 'z')) {\n            return \"No\";\n        }\n\
    \        return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n            else\
    \ {\n                return \"No\";\n            }\n        }\n        else {\n\
    \            return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            int index = file_name.IndexOf('.');\n            if (index >\
    \ 0 && file_name.Substring(0, index).Length > 0) {\n                string first_letter\
    \ = file_name.Substring(0, index).ToLower();\n                bool is_latin_letter\
    \ = first_letter.Any(x => char.IsLetter(x));\n                if (is_latin_letter)\
    \ {\n                    string last_letter = file_name.Substring(index).ToLower();\n\
    \                    bool is_valid_extension = last_letter.Contains(\"txt\") ||\
    \ last_letter.Contains(\"exe\") || last_letter.Contains(\"dll\");\n          \
    \          return is_valid_extension ? \"Yes\" : \"No\";\n                }\n\
    \            }\n        }\n        return \"No\";", "        string pattern =\
    \ @\"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\";\n        Regex regex = new Regex(pattern);\n\
    \        string result = regex.Match(file_name).Value;\n        if (result ==\
    \ \"Yes\") {\n            return \"Yes\";\n        }\n        return \"No\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        string result = regex.Match(file_name).Value;\n   \
    \     if (result == \"Yes\") {\n            return \"Yes\";\n        }\n     \
    \   else {\n            return \"No\";\n        }", "        string pattern =\
    \ @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n  \
    \      Match match = regex.Match(file_name);\n        if (match.Success) {\n \
    \           string sub_string = file_name.Substring(0, match.Index);\n       \
    \     string extension = file_name.Substring(match.Index);\n            if (sub_string.Length\
    \ > 0 && sub_string[0] == '.') {\n                if (sub_string.Substring(1,\
    \ sub_string.Length - 1).ToLower() == \"exe\" || sub_string.Substring(1, sub_string.Length\
    \ - 1).ToLower() == \"dll\") {\n                    return \"Yes\";\n        \
    \        }\n            }\n        }\n        return \"No\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            int index = file_name.IndexOf(\".\");\n            if (index\
    \ > 0 && file_name.Substring(0, index).Length > 0) {\n                string sub\
    \ = file_name.Substring(0, index);\n                bool ok = sub.All(c => char.IsLetter(c)\
    \ || c == '_');\n                if (ok) {\n                    string ext = file_name.Substring(index);\n\
    \                    bool ok2 = ext.All(c => c == 't' || c == 'e' || c == 'x'\
    \ || c == 'd' || c == 'l');\n                    if (ok2) {\n                \
    \        return \"Yes\";\n                    }\n                }\n         \
    \   }\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            int index = file_name.IndexOf(\".\");\n            if (index\
    \ > 0) {\n                string before = file_name.Substring(0, index);\n   \
    \             if (before.Length > 0) {\n                    char first_letter\
    \ = before[0];\n                    if (first_letter >= 'a' && first_letter <=\
    \ 'z') {\n                        return (\"Yes\");\n                    } else\
    \ {\n                        return (\"No\");\n                    }\n       \
    \         } else {\n                    return (\"No\");\n                }\n\
    \            } else {\n                return (\"No\");\n            }\n     \
    \   } else {\n            return (\"No\");\n        }", "        // Your code\
    \ here\n        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{2}$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\n       \
    \ {\n            if (file_name.IndexOf('.') != -1)\n            {\n          \
    \      if (file_name.Substring(0, 1).ToLower() != \"a\" && file_name.Substring(0,\
    \ 1).ToLower() != \"b\")\n                {\n                    if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\")\n   \
    \                 {\n                        if (file_name.Substring(0, 1).ToLower()\
    \ != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\")\n                \
    \        {\n                            if (file_name.Substring(0, 1).ToLower()\
    \ != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\")\n                \
    \            {\n                                if (file_name.Substring(0, 1).ToLower()\
    \ != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\")\n                \
    \                {\n                                    if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\")\n   \
    \                                 {\n                                        if\
    \ (file_name.Substring(0, 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower()\
    \ != \"b\")\n                                        {\n                     \
    \                       if (file_name.Substring(0, 1).ToLower() != \"a\" && file_name.Substring(0,\
    \ 1).ToLower() != \"b\")\n                                            {\n    \
    \                                            if (file_name.Substring(0, 1).ToLower()\
    \ != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\")\n                \
    \                                {\n                                         \
    \           if (file_name.Substring(0, 1).ToLower() != \"a\" && file_name.Substring(0,\
    \ 1).ToLower() != \"b\")\n                                                   \
    \ {\n                                                        if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\")\n   \
    \                                                     {\n                    \
    \                                        if (file_name.Substring(0, 1).ToLower()\
    \ != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\")\n                \
    \                                            {\n                             \
    \                                   if (file_name.Substring(0, 1).ToLower() !=\
    \ \"a\" && file_name.Substring(0, 1).ToLower() != \"b\")\n                   \
    \                                             {\n                            \
    \                                        if (file_name.Substring(0, 1).ToLower()\
    \ != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\")\n                \
    \                                                    {\n                     \
    \                                                   if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\")\n", " \
    \       string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        Match match = regex.Match(file_name);\n        if (match.Success)\
    \ {\n            string sub_string = file_name.Substring(0, match.Index);\n  \
    \          string extension = file_name.Substring(match.Index + match.Length);\n\
    \            if (sub_string.Length > 0 && sub_string[0] == '.') {\n          \
    \      if (sub_string.Length > 1 && sub_string[1] != '.') {\n                \
    \    string pattern1 = @\"^[a-zA-Z]+\";\n                    Regex regex1 = new\
    \ Regex(pattern1);\n                    Match match1 = regex1.Match(sub_string);\n\
    \                    if (match1.Success) {\n                        return (\"\
    Yes\");\n                    }\n                }\n            }\n           \
    \ if (extension.Length > 0 && extension.Substring(0, 3) == \"txt\") {\n      \
    \          return (\"Yes\");\n            }\n            if (extension.Length\
    \ > 0 && extension.Substring(0, 3) == \"exe\") {\n                return (\"Yes\"\
    );\n            }\n            if (extension.Length > 0 && extension.Substring(0,\
    \ 3) == \"dll\") {\n                return (\"Yes\");\n            }\n       \
    \ }\n        return (\"No\");", "        // Your code here\n        string pattern\
    \ = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success)\n \
    \       {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\")\n            {\n                return \"Yes\";\n            }\n\
    \            else\n            {\n                return \"No\";\n           \
    \ }\n        }\n        else\n        {\n            return \"No\";\n        }",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") > 0) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\"\
    \ || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower() == \"L\" || file_name.Substring(0,\
    \ 1).ToLower() == \"M\" || file_name", "        string pattern = @\"^[0-9]{3}\\\
    .[a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n        Match match\
    \ = regex.Match(file_name);\n        if (match.Success) {\n            if (file_name.Substring(0,\
    \ 1).Equals(\"0\") || file_name.Substring(0, 1).Equals(\"9\")) {\n           \
    \     return \"No\";\n            }\n            if (file_name.Substring(0, 1).Equals(\"\
    .\") && file_name.Substring(0, 1).Length > 1) {\n                return \"No\"\
    ;\n            }\n            if (file_name.Substring(0, 1).Equals(\".\") && file_name.Substring(0,\
    \ 1).Length == 1) {\n                string pattern1 = @\"^[a-z][a-z]\";\n   \
    \             Regex regex1 = new Regex(pattern1);\n                Match match1\
    \ = regex1.Match(file_name.Substring(0, 2));\n                if (match1.Success)\
    \ {\n                    return \"No\";\n                }\n            }\n  \
    \      }\n        return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z]$\"\
    ;\n        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success)\n        {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf('.'));\n            string extension = file_name.Substring(file_name.IndexOf('.'));\n\
    \            if (extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\")\n            {\n                return \"Yes\";\n            }\n  \
    \          else\n            {\n                return \"No\";\n            }\n\
    \        }\n        else\n        {\n            return \"No\";\n        }", " \
    \       string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") > 0) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\"\
    \ || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\") {\n \
    \                   if (file_name.Substring(1).ToLower() == \"txt\" || file_name.Substring(1).ToLower()\
    \ == \"exe\" || file_name.Substring(1).ToLower() == \"dll\") {\n             \
    \           return \"Yes\";\n                    }\n                }\n      \
    \      }\n        }\n        return \"No\";", "        string dot = \".\";\n \
    \       string dot1 = \"\";\n        string dot2 = \"\";\n        string dot3\
    \ = \"\";\n        string dot4 = \"\";\n        string dot5 = \"\";\n        string\
    \ dot6 = \"\";\n        string dot7 = \"\";\n        string dot8 = \"\";\n   \
    \     string dot9 = \"\";\n        string dot10 = \"\";\n        string dot11\
    \ = \"\";\n        string dot12 = \"\";\n        string dot13 = \"\";\n      \
    \  string dot14 = \"\";\n        string dot15 = \"\";\n        string dot16 =\
    \ \"\";\n        string dot17 = \"\";\n        string dot18 = \"\";\n        string\
    \ dot19 = \"\";\n        string dot20 = \"\";\n        string dot21 = \"\";\n\
    \        string dot22 = \"\";\n        string dot23 = \"\";\n        string dot24\
    \ = \"\";\n        string dot25 = \"\";\n        string dot26 = \"\";\n      \
    \  string dot27 = \"\";\n        string dot28 = \"\";\n        string dot29 =\
    \ \"\";\n        string dot30 = \"\";\n        string dot31 = \"\";\n        string\
    \ dot32 = \"\";\n        string dot33 = \"\";\n        string dot34 = \"\";\n\
    \        string dot35 = \"\";\n        string dot36 = \"\";\n        string dot37\
    \ = \"\";\n        string dot38 = \"\";\n        string dot39 = \"\";\n      \
    \  string dot40 = \"\";\n        string dot41 = \"\";\n        string dot42 =\
    \ \"\";\n        string dot43 = \"\";\n        string dot44 = \"\";\n        string\
    \ dot45 = \"\";\n        string dot46 = \"\";\n        string dot47 = \"\";\n\
    \        string dot48 = \"\";\n        string dot49 = \"\";\n        string dot50\
    \ = \"\";\n        string dot51 = \"\";\n        string dot52 = \"\";\n      \
    \  string dot53 = \"\";\n        string dot54 = \"\";\n        string dot55 =\
    \ \"\";\n        string dot56 = \"\";\n        string dot57 = \"\";\n        string\
    \ dot58 = \"\";\n        string dot59 = \"\";\n        string dot60 = \"\";\n\
    \        string dot61 = \"\";\n        string dot62 = \"\";\n        string dot63\
    \ = \"\";\n        string dot64 = \"\";\n        string dot65 = \"\";\n      \
    \  string dot66 = \"\";\n        string dot67 = \"\";\n        string dot68 =\
    \ \"\";\n        string dot69 = \"\";\n        string dot70 = \"\";\n        string\
    \ dot71 = \"\";\n        string dot72 = \"\";\n        string dot73 = \"\";\n\
    \        string dot74 = \"\";\n        string dot75 = \"\";\n        string dot76\
    \ = \"\";\n        string dot77 = \"\";\n        string dot78 = \"\";\n      \
    \  string dot79 = \"\";\n        string dot80 = \"\";\n        string dot81 =\
    \ \"\";\n        ", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n \
    \       Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            if (file_name.Substring(0, 1).Equals(\"\
    0\") || file_name.Substring(0, 1).Equals(\"9\")) {\n                return \"\
    No\";\n            }\n            if (file_name.Substring(0, 1).Equals(\".\")\
    \ && file_name.Substring(0, 1).Length > 1) {\n                return \"No\";\n\
    \            }\n            if (file_name.Substring(0, 1).Equals(\".\") && file_name.Substring(0,\
    \ 1).Length == 1) {\n                if (file_name.Substring(0, 1).Equals(\"a\"\
    ) || file_name.Substring(0, 1).Equals(\"b\") || file_name.Substring(0, 1).Equals(\"\
    c\") || file_name.Substring(0, 1).Equals(\"d\") || file_name.Substring(0, 1).Equals(\"\
    e\") || file_name.Substring(0, 1).Equals(\"f\") || file_name.Substring(0, 1).Equals(\"\
    g\") || file_name.Substring(0, 1).Equals(\"h\") || file_name.Substring(0, 1).Equals(\"\
    i\") || file_name.Substring(0, 1).Equals(\"j\") || file_name.Substring(0, 1).Equals(\"\
    k\") || file_name.Substring(0, 1).Equals(\"l\") || file_name.Substring(0, 1).Equals(\"\
    m\") || file_name.Substring(0, 1).Equals(\"n\") || file_name.Substring(0, 1).Equals(\"\
    o\") || file_name.Substring(0, 1).Equals(\"p\") || file_name.Substring(0, 1).Equals(\"\
    q\") || file_name.Substring(0, 1).Equals(\"r\") || file_name.Substring(0, 1).Equals(\"\
    s\") || file_name.Substring(0, 1).Equals(\"t\") || file_name.Substring(0, 1).Equals(\"\
    u\") || file_name.Substring(0, 1).Equals(\"v\") || file_name.Substring(0, 1).Equals(\"\
    w\") || file_name.Substring(0, 1).Equals(\"x\") || file_name.Substring(0, 1).Equals(\"\
    y\") || file_name.Substring(0, 1).Equals(\"z\")) {\n                    return\
    \ \"No\";\n                }\n            }\n        }\n        return \"Yes\"\
    ;", "        string pattern = @\"^[0-9]{1,3}\\.[a-zA-Z]{0,1}$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       if (file_name.IndexOf(\".\") != -1) {\n                string before_dot\
    \ = file_name.Substring(0, file_name.IndexOf(\".\"));\n                if (before_dot.Length\
    \ > 0) {\n                    char first_letter = Convert.ToChar(first_letter(before_dot));\n\
    \                    if (first_letter >= 'a' && first_letter <= 'z') {\n     \
    \                   return (\"Yes\");\n                    }\n               \
    \ }\n            }\n            else if (file_name.IndexOf(\".\") == -1) {\n \
    \               return (\"No\");\n            }\n        }\n        return (\"\
    No\");", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{0,1}$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter()) {\n                    string extension = file_name.Substring(1,\
    \ file_name.Length - 2);\n                    if (extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\") {\n                        return \"Yes\"\
    ;\n                    }\n                }\n            }\n        }\n      \
    \  return \"No\";", "        // TODO: Write your code here\n        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]{2,3}$\";\n        Regex regex = new Regex(pattern);\n\
    \        string result = regex.Match(file_name).Value;\n        if (result ==\
    \ \"Yes\")\n        {\n            return result;\n        }\n        else\n \
    \       {\n            return \"No\";\n        }", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n       \
    \ if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\".\") >\
    \ 0) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\" || file_name.Substring(0,\
    \ 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower() == \"c\" || file_name.Substring(0,\
    \ 1).ToLower() == \"d\" || file_name.Substring(0, 1).ToLower() == \"e\" || file_name.Substring(0,\
    \ 1).ToLower() == \"f\" || file_name.Substring(0, 1).ToLower() == \"g\" || file_name.Substring(0,\
    \ 1).ToLower() == \"h\" || file_name.Substring(0, 1).ToLower() == \"i\" || file_name.Substring(0,\
    \ 1).ToLower() == \"j\" || file_name.Substring(0, 1).ToLower() == \"k\" || file_name.Substring(0,\
    \ 1).ToLower() == \"l\" || file_name.Substring(0, 1).ToLower() == \"m\" || file_name.Substring(0,\
    \ 1).ToLower() == \"n\" || file_name.Substring(0, 1).ToLower() == \"o\" || file_name.Substring(0,\
    \ 1).ToLower() == \"p\" || file_name.Substring(0, 1).ToLower() == \"q\" || file_name.Substring(0,\
    \ 1).ToLower() == \"r\" || file_name.Substring(0, 1).ToLower() == \"s\" || file_name.Substring(0,\
    \ 1).ToLower() == \"t\" || file_name.Substring(0, 1).ToLower() == \"u\" || file_name.Substring(0,\
    \ 1).ToLower() == \"v\" || file_name.Substring(0, 1).ToLower() == \"w\" || file_name.Substring(0,\
    \ 1).ToLower() == \"x\" || file_name.Substring(0, 1).ToLower() == \"y\" || file_name.Substring(0,\
    \ 1).ToLower() == \"z\") {\n                    if (file_name.Substring(1).ToLower()\
    \ == \"txt\" || file_name.Substring(1).ToLower() == \"exe\" || file_name.Substring(1).ToLower()\
    \ == \"dll\") {\n                        return \"Yes\";\n                   \
    \ }\n                }\n            }\n        }\n        return \"No\";", " \
    \       string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n           \
    \ string file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n     \
    \       string extension = file_name.Substring(file_name.IndexOf(\".\"));\n  \
    \          if (extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\") {\n                return \"Yes\";\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       int index = file_name.IndexOf(\".\");\n            if (index > 0) {\n\
    \                string sub_string = file_name.Substring(0, index);\n        \
    \        string first_char = sub_string.First();\n                bool result\
    \ = true;\n                foreach (char c in first_char) {\n                \
    \    if (!(Char.IsLetter(c) || Char.IsDigit(c))) {\n                        result\
    \ = false;\n                        break;\n                    }\n          \
    \      }\n                if (result) {\n                    string last_char\
    \ = sub_string.Last();\n                    bool result = true;\n            \
    \        foreach (char c in last_char) {\n                        if (!(Char.IsLetter(c)\
    \ || Char.IsDigit(c))) {\n                            result = false;\n      \
    \                      break;\n                        }\n                   \
    \ }\n                    if (result) {\n                        if (sub_string.Length\
    \ > 0) {\n                            string extension = sub_string.Substring(1);\n\
    \                            if (extension == \"txt\" || extension == \"exe\"\
    \ || extension == \"dll\") {\n                                return \"Yes\";\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n        return \"No\";", " \
    \       string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        string result = regex.Match(file_name).Value;\n   \
    \     if (result == \"Yes\") {\n            return result;\n        }\n      \
    \  else {\n            return \"No\";\n        }", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n      \
    \  Match match = regex.Match(file_name);\n        if (match.Success)\n       \
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\")\n            {\n                return \"Yes\";\n            }\n\
    \            else\n            {\n                return \"No\";\n           \
    \ }\n        }\n        else\n        {\n            return \"No\";\n        }",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            string\
    \ before_dot = file_name.Substring(0, file_name.IndexOf(\".\"));\n           \
    \ string after_dot = file_name.Substring(file_name.IndexOf(\".\") + 1);\n    \
    \        string pattern2 = @\"^[a-zA-Z]+\\.[a-zA-Z]+$\";\n            Regex regex2\
    \ = new Regex(pattern2);\n            if (regex2.IsMatch(before_dot)) {\n    \
    \            if (after_dot == \"txt\" || after_dot == \"exe\" || after_dot ==\
    \ \"dll\") {\n                    return \"Yes\";\n                }\n       \
    \     }\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{1,3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            string extension_array = extension.Split('.');\n            if (extension_array.Length\
    \ == 1) {\n                if (extension_array[0] == \"txt\" || extension_array[0]\
    \ == \"exe\" || extension_array[0] == \"dll\") {\n                    return \"\
    Yes\";\n                }\n            }\n        }\n        return \"No\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            int index\
    \ = file_name.IndexOf(\".\");\n            if (index != -1) {\n              \
    \  string before = file_name.Substring(0, index);\n                string after\
    \ = file_name.Substring(index + 1);\n                bool valid = before.Length\
    \ > 0 && before.StartsWith(\"a\") && before.EndsWith(\"z\") && after.Length >\
    \ 0 && after.StartsWith(\"a\") && after.EndsWith(\"z\");\n                return\
    \ valid ? \"Yes\" : \"No\";\n            }\n        }\n        return \"No\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            string\
    \ substr = file_name.Substring(0, file_name.IndexOf('.'));\n            if (substr.Length\
    \ > 0 && substr.StartsWith(\"a\") && substr.EndsWith(\"z\") || substr.StartsWith(\"\
    A\") && substr.EndsWith(\"Z\")) {\n                string extension = file_name.Substring(file_name.IndexOf('.'));\n\
    \                if (extension.ToLower() == \"txt\" || extension.ToLower() ==\
    \ \"exe\" || extension.ToLower() == \"dll\") {\n                    return \"\
    Yes\";\n                }\n            }\n        }\n        return \"No\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            string\
    \ file_name = file_name.Substring(0, file_name.IndexOf('.'));\n            string\
    \ extension = file_name.Substring(file_name.IndexOf('.'));\n            if (extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n            \
    \    return \"Yes\";\n            }\n            else {\n                return\
    \ \"No\";\n            }\n        }\n        else {\n            return \"No\"\
    ;\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z]$\";\n     \
    \   Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n\
    \            string before_dot = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            if (before_dot.Length > 0) {\n                string first_letter\
    \ = before_dot.Substring(0, 1);\n                bool is_first_letter = first_letter.All(x\
    \ => char.IsLetter(x));\n                if (!is_first_letter) {\n           \
    \         return \"No\";\n                }\n            }\n            string\
    \ after_dot = file_name.Substring(file_name.IndexOf('.') + 1);\n            string[]\
    \ extensions = { \"txt\", \"exe\", \"dll\" };\n            bool is_extension =\
    \ extensions.Contains(after_dot);\n            if (!is_extension) {\n        \
    \        return \"No\";\n            }\n            return \"Yes\";\n        }\n\
    \        return \"No\";", "        string pattern = @\"^[0-9]{1,3}\\.[a-z][a-z]$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.Contains(\".\")) {\n                if (file_name.Substring(0,\
    \ 1).Equals(\"0\") || file_name.Substring(0, 1).Equals(\"9\")) {\n           \
    \         return \"No\";\n                }\n            }\n            if (file_name.Substring(0,\
    \ 1).Equals(\"a\") || file_name.Substring(0, 1).Equals(\"z\") || file_name.Substring(0,\
    \ 1).Equals(\"A\") || file_name.Substring(0, 1).Equals(\"Z\")) {\n           \
    \     if (file_name.Substring(0, 2).Equals(\"\")) {\n                    return\
    \ \"No\";\n                }\n            }\n            if (file_name.Substring(0,\
    \ 1).Equals(\".\") && file_name.Substring(0, 2).Equals(\"\") && file_name.Substring(0,\
    \ 3).Equals(\"txt\") && file_name.Substring(0, 4).Equals(\"exe\") && file_name.Substring(0,\
    \ 5).Equals(\"dll\")) {\n                return \"Yes\";\n            }\n    \
    \    }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return (\"Yes\");\n        }\n\
    \        if (result == \"No\") {\n            return (\"No\");\n        }\n  \
    \      return (\"No\");", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success)\n        {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            string pattern1 = @\"^[a-zA-Z]+\";\n            Regex regex1 = new\
    \ Regex(pattern1);\n            Match match1 = regex1.Match(extension);\n    \
    \        if (match1.Success)\n            {\n                string extension\
    \ = extension.Substring(0, extension.IndexOf('.'));\n                string pattern2\
    \ = @\"^[a-zA-Z]+\";\n                Regex regex2 = new Regex(pattern2);\n  \
    \              Match match2 = regex2.Match(extension);\n                if (match2.Success)\n\
    \                {\n                    string extension = extension.Substring(0,\
    \ extension.IndexOf('.'));\n                    if (extension == \"txt\" || extension\
    \ == \"exe\" || extension == \"dll\")\n                    {\n               \
    \         return \"Yes\";\n                    }\n                    else\n \
    \                   {\n                        return \"No\";\n              \
    \      }\n                }\n                else\n                {\n       \
    \             return \"No\";\n                }\n            }\n            else\n\
    \            {\n                return \"No\";\n            }\n        }\n   \
    \     else\n        {\n            return \"No\";\n        }", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success) {\n\
    \            string sub = file_name.Substring(0, match.Index);\n            string\
    \ ext = file_name.Substring(match.Index);\n            if (ext.ToLower() == \"\
    txt\" || ext.ToLower() == \"exe\" || ext.ToLower() == \"dll\") {\n           \
    \     return \"Yes\";\n            } else {\n                return \"No\";\n\
    \            }\n        } else {\n            return \"No\";\n        }", "  \
    \      string dot = \".\";\n        string dot1 = \"\";\n        string dot2 =\
    \ \"\";\n        string dot3 = \"\";\n        string dot4 = \"\";\n        string\
    \ dot5 = \"\";\n        string dot6 = \"\";\n        string dot7 = \"\";\n   \
    \     string dot8 = \"\";\n        string dot9 = \"\";\n        string dot10 =\
    \ \"\";\n        string dot11 = \"\";\n        string dot12 = \"\";\n        string\
    \ dot13 = \"\";\n        string dot14 = \"\";\n        string dot15 = \"\";\n\
    \        string dot16 = \"\";\n        string dot17 = \"\";\n        string dot18\
    \ = \"\";\n        string dot19 = \"\";\n        string dot20 = \"\";\n      \
    \  string dot21 = \"\";\n        string dot22 = \"\";\n        string dot23 =\
    \ \"\";\n        string dot24 = \"\";\n        string dot25 = \"\";\n        string\
    \ dot26 = \"\";\n        string dot27 = \"\";\n        string dot28 = \"\";\n\
    \        string dot29 = \"\";\n        string dot30 = \"\";\n        string dot31\
    \ = \"\";\n        string dot32 = \"\";\n        string dot33 = \"\";\n      \
    \  string dot34 = \"\";\n        string dot35 = \"\";\n        string dot36 =\
    \ \"\";\n        string dot37 = \"\";\n        string dot38 = \"\";\n        string\
    \ dot39 = \"\";\n        string dot40 = \"\";\n        string dot41 = \"\";\n\
    \        string dot42 = \"\";\n        string dot43 = \"\";\n        string dot44\
    \ = \"\";\n        string dot45 = \"\";\n        string dot46 = \"\";\n      \
    \  string dot47 = \"\";\n        string dot48 = \"\";\n        string dot49 =\
    \ \"\";\n        string dot50 = \"\";\n        string dot51 = \"\";\n        string\
    \ dot52 = \"\";\n        string dot53 = \"\";\n        string dot54 = \"\";\n\
    \        string dot55 = \"\";\n        string dot56 = \"\";\n        string dot57\
    \ = \"\";\n        string dot58 = \"\";\n        string dot59 = \"\";\n      \
    \  string dot60 = \"\";\n        string dot61 = \"\";\n        string dot62 =\
    \ \"\";\n        string dot63 = \"\";\n        string dot64 = \"\";\n        string\
    \ dot65 = \"\";\n        string dot66 = \"\";\n        string dot67 = \"\";\n\
    \        string dot68 = \"\";\n        string dot69 = \"\";\n        string dot70\
    \ = \"\";\n        string dot71 = \"\";\n        string dot72 = \"\";\n      \
    \  string dot73 = \"\";\n        string dot74 = \"\";\n        string dot75 =\
    \ \"\";\n        string dot76 = \"\";\n        string dot77 = \"\";\n        string\
    \ dot78 = \"\";\n        string dot79 = \"\";\n        string dot80 = \"\";\n\
    \        string dot81 = \"\";\n        ", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        string result\
    \ = regex.Match(file_name).Value;\n        if (result == \"Yes\") {\n        \
    \    return \"Yes\";\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).Equals('0') ||\n   \
    \                 file_name.Substring(0, 1).Equals('9')) {\n                 \
    \   return \"No\";\n                }\n            }\n            if (file_name.Substring(0,\
    \ 1).Equals('a') ||\n                file_name.Substring(0, 1).Equals('z') ||\n\
    \                file_name.Substring(0, 1).Equals('A') ||\n                file_name.Substring(0,\
    \ 1).Equals('Z')) {\n                if (file_name.Substring(0, file_name.IndexOf('.')).Equals(\"\
    .exe\") ||\n                    file_name.Substring(0, file_name.IndexOf('.')).Equals(\"\
    .dll\") ||\n                    file_name.Substring(0, file_name.IndexOf('.')).Equals(\"\
    .txt\")) {\n                    return \"Yes\";\n                }\n         \
    \   }\n        }\n        return \"No\";", "        string dot = \".\";\n    \
    \    string dot1 = \"\";\n        string dot2 = \"\";\n        string dot3 = \"\
    \";\n        string dot4 = \"\";\n        string dot5 = \"\";\n        string\
    \ dot6 = \"\";\n        string dot7 = \"\";\n        string dot8 = \"\";\n   \
    \     string dot9 = \"\";\n        string dot10 = \"\";\n        string dot11\
    \ = \"\";\n        string dot12 = \"\";\n        string dot13 = \"\";\n      \
    \  string dot14 = \"\";\n        string dot15 = \"\";\n        string dot16 =\
    \ \"\";\n        string dot17 = \"\";\n        string dot18 = \"\";\n        string\
    \ dot19 = \"\";\n        string dot20 = \"\";\n        string dot21 = \"\";\n\
    \        string dot22 = \"\";\n        string dot23 = \"\";\n        string dot24\
    \ = \"\";\n        string dot25 = \"\";\n        string dot26 = \"\";\n      \
    \  string dot27 = \"\";\n        string dot28 = \"\";\n        string dot29 =\
    \ \"\";\n        string dot30 = \"\";\n        string dot31 = \"\";\n        string\
    \ dot32 = \"\";\n        string dot33 = \"\";\n        string dot34 = \"\";\n\
    \        string dot35 = \"\";\n        string dot36 = \"\";\n        string dot37\
    \ = \"\";\n        string dot38 = \"\";\n        string dot39 = \"\";\n      \
    \  string dot40 = \"\";\n        string dot41 = \"\";\n        string dot42 =\
    \ \"\";\n        string dot43 = \"\";\n        string dot44 = \"\";\n        string\
    \ dot45 = \"\";\n        string dot46 = \"\";\n        string dot47 = \"\";\n\
    \        string dot48 = \"\";\n        string dot49 = \"\";\n        string dot50\
    \ = \"\";\n        string dot51 = \"\";\n        string dot52 = \"\";\n      \
    \  string dot53 = \"\";\n        string dot54 = \"\";\n        string dot55 =\
    \ \"\";\n        string dot56 = \"\";\n        string dot57 = \"\";\n        string\
    \ dot58 = \"\";\n        string dot59 = \"\";\n        string dot60 = \"\";\n\
    \        string dot61 = \"\";\n        string dot62 = \"\";\n        string dot63\
    \ = \"\";\n        string dot64 = \"\";\n        string dot65 = \"\";\n      \
    \  string dot66 = \"\";\n        string dot67 = \"\";\n        string dot68 =\
    \ \"\";\n        string dot69 = \"\";\n        string dot70 = \"\";\n        string\
    \ dot71 = \"\";\n        string dot72 = \"\";\n        string dot73 = \"\";\n\
    \        string dot74 = \"\";\n        string dot75 = \"\";\n        string dot76\
    \ = \"\";\n        string dot77 = \"\";\n        string dot78 = \"\";\n      \
    \  string dot79 = \"\";\n        string dot80 = \"\";\n        string dot81 =\
    \ \"\";\n        ", "        // Your code goes here\n        string dotIndex =\
    \ file_name.IndexOf(\".\");\n        if (dotIndex == -1) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Length > 3) {\n            return\
    \ \"No\";\n        }\n        if (file_name.IndexOf(\".\") == 0) {\n         \
    \   return \"No\";\n        }\n        if (file_name.Substring(0, 1).ToLower()\
    \ != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \           return \"No\";\n        }\n        if (file_name.Substring(dotIndex).ToLower()\
    \ != \"txt\" && file_name.Substring(dotIndex).ToLower() != \"exe\" && file_name.Substring(dotIndex).ToLower()\
    \ != \"dll\") {\n            return \"No\";\n        }\n        return \"Yes\"\
    ;", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex\
    \ = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return result;\n        }\n   \
    \     else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string sub_string = file_name.Substring(0,\
    \ file_name.IndexOf('.'));\n            string sub_string2 = file_name.Substring(file_name.IndexOf('.'));\n\
    \            if (sub_string.Length == 0 && sub_string2.Length > 0) {\n       \
    \         return \"No\";\n            }\n            if (sub_string.Length > 0\
    \ && sub_string2.Length == 0) {\n                return \"No\";\n            }\n\
    \            if (sub_string.Length > 0 && sub_string2.Length > 0) {\n        \
    \        char first_char = sub_string[0];\n                char second_char =\
    \ sub_string2[0];\n                if (first_char < 'a' || first_char > 'z') {\n\
    \                    return \"No\";\n                }\n                if (second_char\
    \ < 'a' || second_char > 'z') {\n                    return \"No\";\n        \
    \        }\n            }\n            return \"Yes\";\n        }\n        return\
    \ \"No\";", "        // Your code goes here\n        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]{0,1}$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string substr = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            if (substr.Length > 0) {\n                char first_letter =\
    \ substr[0];\n                char last_letter = substr[substr.Length - 1];\n\
    \                if (first_letter >= 'a' && first_letter <= 'z' || first_letter\
    \ >= 'A' && first_letter <= 'Z') {\n                    if (last_letter >= 'a'\
    \ && last_letter <= 'z' || last_letter >= 'A' && last_letter <= 'Z') {\n     \
    \                   return (\"Yes\");\n                    }\n               \
    \ }\n            }\n        }\n        return (\"No\");", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\";\n        Regex regex = new Regex(pattern);\n\
    \        string result = regex.Match(file_name).Value;\n        if (result ==\
    \ \"Yes\") {\n            return result;\n        }\n        else {\n        \
    \    return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string sub_string = file_name.Substring(0,\
    \ match.Index);\n            if (sub_string.Length > 0) {\n                char\
    \ first_letter = sub_string[0];\n                if (first_letter < 'a' || first_letter\
    \ > 'z') {\n                    return \"No\";\n                }\n          \
    \  }\n            string extension = file_name.Substring(match.Index + 1);\n \
    \           if (extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\") {\n                return \"Yes\";\n            }\n        }\n        return\
    \ \"No\";", "        // Your code goes here\n        string pattern = @\"^[0-9]{3}\\\
    .[a-z][a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).Length > 0) {\n                    string pattern1 = @\"^[a-z]\";\n     \
    \               Regex regex1 = new Regex(pattern1);\n                    if (regex1.IsMatch(file_name.Substring(0,\
    \ 1))) {\n                        if (file_name.Substring(file_name.IndexOf('.')).ToLower()\
    \ == \"exe\" || file_name.Substring(file_name.IndexOf('.')).ToLower() == \"dll\"\
    ) {\n                            return \"Yes\";\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{1}$\";\n       \
    \ Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n\
    \            string file_name = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            string extension = file_name.Substring(file_name.IndexOf('.'));\n\
    \            if (extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\") {\n                return \"Yes\";\n            }\n        }\n    \
    \    return \"No\";", "        string pattern = @\"^[0-9]{1,3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string substr = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            if (substr.Length > 0 && substr.StartsWith(\"a\") && substr.EndsWith(\"\
    z\") || substr.StartsWith(\"A\") && substr.EndsWith(\"Z\")) {\n              \
    \  return \"Yes\";\n            } else {\n                return \"No\";\n   \
    \         }\n        } else {\n            return \"No\";\n        }", "     \
    \   string pattern = @\"^[0-9]{1,3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        Match match = regex.Match(file_name);\n        if (match.Success)\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            string extension_array = extension.Split('.');\n         \
    \   if (extension_array.Length == 1) {\n                if (extension_array[0].ToLower()\
    \ == \"txt\" || extension_array[0].ToLower() == \"exe\" || extension_array[0].ToLower()\
    \ == \"dll\") {\n                    return \"Yes\";\n                }\n    \
    \        }\n        }\n        return \"No\";", "        // Your code here\n \
    \       string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{0,1}$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name))\n        {\n  \
    \          string file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n\
    \            string extension = file_name.Substring(file_name.LastIndexOf(\".\"\
    ) + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\")\n            {\n                return \"Yes\";\n            }\n\
    \            else\n            {\n                return \"No\";\n           \
    \ }\n        }\n        else\n        {\n            return \"No\";\n        }",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") > 0) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\"\
    \ || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower() == \"L\" || file_name.Substring(0,\
    \ 1).ToLower() == \"M\" || file_name", "        string pattern = @\"^[0-9]{3}\\\
    .[a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).Length > 0) {\n                    string pattern1 = @\"^[a-z]\";\n     \
    \               Regex regex1 = new Regex(pattern1);\n                    if (regex1.IsMatch(file_name.Substring(0,\
    \ 1))) {\n                        if (file_name.Substring(0, 2).Length > 0) {\n\
    \                            string pattern2 = @\"^[a-z][a-z]\";\n           \
    \                 Regex regex2 = new Regex(pattern2);\n                      \
    \      if (regex2.IsMatch(file_name.Substring(0, 2))) {\n                    \
    \            return \"Yes\";\n                            }\n                \
    \        }\n                    }\n                }\n            }\n        }\n\
    \        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success) {\n\
    \            string file_name = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            string extension = file_name.Substring(file_name.IndexOf(\".\"\
    ) + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n            else\
    \ {\n                return \"No\";\n            }\n        }\n        else {\n\
    \            return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\\
    .[a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n        string result\
    \ = regex.Match(file_name).Value;\n        if (result == \"Yes\") {\n        \
    \    return file_name;\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf('.'));\n            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            string extension_array = extension.Split('.');\n            if (extension_array.Length\
    \ == 1) {\n                if (extension_array[0] == \"txt\" || extension_array[0]\
    \ == \"exe\" || extension_array[0] == \"dll\") {\n                    return \"\
    Yes\";\n                }\n            }\n        }\n        return \"No\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        Match match = regex.Match(file_name);\n        if (match.Success)\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            } else {\n     \
    \           return \"No\";\n            }\n        } else {\n            return\
    \ \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string before_dot = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            if (before_dot.Length > 0) {\n                string first_letter\
    \ = before_dot.Substring(0, 1);\n                bool is_first_letter = first_letter.All(c\
    \ => char.IsLetter(c));\n                if (!is_first_letter) {\n           \
    \         return \"No\";\n                }\n            }\n            string\
    \ after_dot = file_name.Substring(file_name.IndexOf('.') + 1);\n            string\
    \ extension = after_dot.ToLower();\n            bool is_extension = extension.Contains(\"\
    txt\") || extension.Contains(\"exe\") || extension.Contains(\"dll\");\n      \
    \      if (!is_extension) {\n                return \"No\";\n            }\n \
    \           return \"Yes\";\n        }\n        return \"No\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\";\n        Regex regex = new\
    \ Regex(pattern);\n        Match match = regex.Match(file_name);\n        if (match.Success)\
    \ {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n            else\
    \ {\n                return \"No\";\n            }\n        }\n        else {\n\
    \            return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        Match match\
    \ = regex.Match(file_name);\n        if (match.Success) {\n            string\
    \ sub_string = file_name.Substring(0, match.Index);\n            string extension\
    \ = file_name.Substring(match.Index + match.Length);\n            if (sub_string.Length\
    \ > 0 && sub_string[0] == '.') {\n                if (sub_string.Length > 1 &&\
    \ sub_string[1] == '.') {\n                    string sub_string1 = sub_string.Substring(1,\
    \ sub_string.Length - 2);\n                    string sub_string2 = sub_string.Substring(sub_string.Length\
    \ - 2);\n                    if (!sub_string1.Contains(\".txt\") && !sub_string1.Contains(\"\
    .exe\") && !sub_string1.Contains(\".dll\")) {\n                        return\
    \ \"No\";\n                    }\n                    if (!sub_string2.Contains(\"\
    .txt\") && !sub_string2.Contains(\".exe\") && !sub_string2.Contains(\".dll\"))\
    \ {\n                        return \"No\";\n                    }\n         \
    \       }\n            }\n        }\n        return \"Yes\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success) {\n\
    \            string file_name = file_name.Substring(0, file_name.IndexOf('.'));\n\
    \            string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            bool is_exe = extension.Equals(\"exe\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_dll = extension.Equals(\"dll\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_txt = extension.Equals(\"txt\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_other = extension.Equals(\"other\", StringComparison.OrdinalIgnoreCase);\n\
    \            bool is_exe_or_dll = is_exe || is_dll;\n            bool is_txt_or_other\
    \ = is_txt || is_other;\n            bool is_exe_or_dll_or_other = is_exe_or_dll\
    \ || is_txt_or_other;\n            if (is_exe_or_dll_or_other) {\n           \
    \     return \"Yes\";\n            } else {\n                return \"No\";\n\
    \            }\n        } else {\n            return \"No\";\n        }", "  \
    \      string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") > 0) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\"\
    \ || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\") {\n \
    \                   if (file_name.Substring(1).ToLower() == \"txt\" || file_name.Substring(1).ToLower()\
    \ == \"exe\" || file_name.Substring(1).ToLower() == \"dll\") {\n             \
    \           return \"Yes\";\n                    }\n                }\n      \
    \      }\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        Match match\
    \ = regex.Match(file_name);\n        if (match.Success) {\n            string\
    \ file_extension = file_name.Substring(file_name.LastIndexOf('.'));\n        \
    \    string file_extension_lower = file_extension.ToLower();\n            if (file_extension_lower\
    \ == \"txt\" || file_extension_lower == \"exe\" || file_extension_lower == \"\
    dll\") {\n                return \"Yes\";\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n   \
    \     Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            int index = file_name.IndexOf(\".\");\n            if (index\
    \ > 0) {\n                string before_dot = file_name.Substring(0, index);\n\
    \                string after_dot = file_name.Substring(index + 1);\n        \
    \        if (before_dot.Length > 0 && after_dot.Length > 0) {\n              \
    \      char first_letter = before_dot[0];\n                    char last_letter\
    \ = after_dot[after_dot.Length - 1];\n                    if (first_letter >=\
    \ 'a' && first_letter <= 'z' || first_letter >= 'A' && first_letter <= 'Z') {\n\
    \                        if (last_letter >= 'a' && last_letter <= 'z' || last_letter\
    \ >= 'A' && last_letter <= 'Z') {\n                            return \"Yes\"\
    ;\n                        }\n                    }\n                }\n     \
    \       }\n        }\n        return \"No\";", "        string dot = \".\";\n\
    \        string first_letter = \"a\";\n        string extensions = \"txt,exe,dll\"\
    ;\n        int dotCount = 0;\n        int firstLetterCount = 0;\n        int extensionCount\
    \ = 0;\n        bool isValid = false;\n        bool isValidExtension = false;\n\
    \        bool isValidFirstLetter = false;\n        bool isValidExtensionSubstring\
    \ = false;\n        bool isValidExtensionSubstring2 = false;\n        bool isValidExtensionSubstring3\
    \ = false;\n        bool isValidExtensionSubstring4 = false;\n        bool isValidExtensionSubstring5\
    \ = false;\n        bool isValidExtensionSubstring6 = false;\n        bool isValidExtensionSubstring7\
    \ = false;\n        bool isValidExtensionSubstring8 = false;\n        bool isValidExtensionSubstring9\
    \ = false;\n        bool isValidExtensionSubstring10 = false;\n        bool isValidExtensionSubstring11\
    \ = false;\n        bool isValidExtensionSubstring12 = false;\n        bool isValidExtensionSubstring13\
    \ = false;\n        bool isValidExtensionSubstring14 = false;\n        bool isValidExtensionSubstring15\
    \ = false;\n        bool isValidExtensionSubstring16 = false;\n        bool isValidExtensionSubstring17\
    \ = false;\n        bool isValidExtensionSubstring18 = false;\n        bool isValidExtensionSubstring19\
    \ = false;\n        bool isValidExtensionSubstring20 = false;\n        bool isValidExtensionSubstring21\
    \ = false;\n        bool isValidExtensionSubstring22 = false;\n        bool isValidExtensionSubstring23\
    \ = false;\n        bool isValidExtensionSubstring24 = false;\n        bool isValidExtensionSubstring25\
    \ = false;\n        bool isValidExtensionSubstring26 = false;\n        bool isValidExtensionSubstring27\
    \ = false;\n        bool isValidExtensionSubstring28 = false;\n        bool isValidExtensionSubstring29\
    \ = false;\n        bool isValidExtensionSubstring30 = false;\n        bool isValidExtensionSubstring31\
    \ = false;\n        bool isValidExtensionSubstring32 = false;\n        bool isValidExtensionSubstring33\
    \ = false;\n        bool isValidExtensionSubstring34 = false;\n        bool isValidExtensionSubstring35\
    \ = false;\n        bool isValidExtensionSubstring36 = false;\n        bool isValidExtensionSubstring37\
    \ = false;\n        bool isValidExtensionSubstring38 = false;\n        bool isValidExtensionSubstring39\
    \ = false;\n        bool isValidExtensionSubstring40 = false;\n        bool isValidExtensionSubstring41\
    \ = false;\n        bool isValidExtensionSubstring42 = false;\n        bool isValidExtensionSubstring43\
    \ = false;\n        bool isValidExtensionSubstring44 = false;\n        bool isValidExtensionSubstring45\
    \ = false;\n        bool isValidExtensionSubstring46 = false;\n        bool isValidExtensionSubstring47\
    \ = false;\n        bool isValidExtensionSubstring48 = false;\n        bool isValidExtensionSubstring49\
    \ = false;\n        bool isValidExtensionSubstring", "        string pattern =\
    \ @\"^[0-9]{3}\\.[a-zA-Z]{1}$\";\n        Regex regex = new Regex(pattern);\n\
    \        string result = regex.Match(file_name).Value;\n        if (result ==\
    \ \"Yes\") {\n            return result;\n        }\n        else {\n        \
    \    return \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            int index = file_name.IndexOf('.');\n\
    \            if (index > 0 && file_name.Substring(0, index).Length > 0) {\n  \
    \              string first_char = file_name.Substring(0, index).ToLower();\n\
    \                string last_char = file_name.Substring(index).ToLower();\n  \
    \              if (first_char.Length > 0 && first_char.IndexOfAny(new char[] {\
    \ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',\
    \ 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' }) == -1) {\n             \
    \       return \"No\";\n                }\n                if (last_char.Length\
    \ > 0 && last_char.IndexOfAny(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z' }) == -1) {\n                    return \"No\";\n            \
    \    }\n            }\n        }\n        return \"Yes\";", "        // Your code\
    \ here\n        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{1}$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       if (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0,\
    \ 1).ToLower() == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\") {\n \
    \                   if (file_name.Substring(1).ToLower() == \"txt\" || file_name.Substring(1).ToLower()\
    \ == \"exe\" || file_name.Substring(1).ToLower() == \"dll\") {\n             \
    \           return \"Yes\";\n                    }\n                }\n      \
    \      }\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]{0,1}$\";\n        string pattern2 = @\"^[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\"\
    ;\n        string pattern3 = @\"^[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\"\
    ;\n        string pattern4 = @\"^[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}$\";\n        string pattern5 = @\"^[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\";\n        string pattern6 =\
    \ @\"^[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}$\";\n        string pattern7 = @\"^[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\"\
    ;\n        string pattern8 = @\"^[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\"\
    ;\n        string pattern9 = @\"^[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}$\";\n        string pattern10 = @\"^[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\";\n        string pattern11 =\
    \ @\"^[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}$\";\n        string pattern12 = @\"^[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}$\"\
    ;\n        string pattern13 = @\"^[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\.[a-zA-Z]{0,1}\\\
    .", "        string dot = \".\";\n        string dot1 = \"\";\n        string\
    \ dot2 = \"\";\n        string dot3 = \"\";\n        string dot4 = \"\";\n   \
    \     string dot5 = \"\";\n        string dot6 = \"\";\n        string dot7 =\
    \ \"\";\n        string dot8 = \"\";\n        string dot9 = \"\";\n        string\
    \ dot10 = \"\";\n        string dot11 = \"\";\n        string dot12 = \"\";\n\
    \        string dot13 = \"\";\n        string dot14 = \"\";\n        string dot15\
    \ = \"\";\n        string dot16 = \"\";\n        string dot17 = \"\";\n      \
    \  string dot18 = \"\";\n        string dot19 = \"\";\n        string dot20 =\
    \ \"\";\n        string dot21 = \"\";\n        string dot22 = \"\";\n        string\
    \ dot23 = \"\";\n        string dot24 = \"\";\n        string dot25 = \"\";\n\
    \        string dot26 = \"\";\n        string dot27 = \"\";\n        string dot28\
    \ = \"\";\n        string dot29 = \"\";\n        string dot30 = \"\";\n      \
    \  string dot31 = \"\";\n        string dot32 = \"\";\n        string dot33 =\
    \ \"\";\n        string dot34 = \"\";\n        string dot35 = \"\";\n        string\
    \ dot36 = \"\";\n        string dot37 = \"\";\n        string dot38 = \"\";\n\
    \        string dot39 = \"\";\n        string dot40 = \"\";\n        string dot41\
    \ = \"\";\n        string dot42 = \"\";\n        string dot43 = \"\";\n      \
    \  string dot44 = \"\";\n        string dot45 = \"\";\n        string dot46 =\
    \ \"\";\n        string dot47 = \"\";\n        string dot48 = \"\";\n        string\
    \ dot49 = \"\";\n        string dot50 = \"\";\n        string dot51 = \"\";\n\
    \        string dot52 = \"\";\n        string dot53 = \"\";\n        string dot54\
    \ = \"\";\n        string dot55 = \"\";\n        string dot56 = \"\";\n      \
    \  string dot57 = \"\";\n        string dot58 = \"\";\n        string dot59 =\
    \ \"\";\n        string dot60 = \"\";\n        string dot61 = \"\";\n        string\
    \ dot62 = \"\";\n        string dot63 = \"\";\n        string dot64 = \"\";\n\
    \        string dot65 = \"\";\n        string dot66 = \"\";\n        string dot67\
    \ = \"\";\n        string dot68 = \"\";\n        string dot69 = \"\";\n      \
    \  string dot70 = \"\";\n        string dot71 = \"\";\n        string dot72 =\
    \ \"\";\n        string dot73 = \"\";\n        string dot74 = \"\";\n        string\
    \ dot75 = \"\";\n        string dot76 = \"\";\n        string dot77 = \"\";\n\
    \        string dot78 = \"\";\n        string dot79 = \"\";\n        string dot80\
    \ = \"\";\n        string dot81 = \"\";\n        ", "        string pattern =\
    \ @\"^[0-9]{3}\\.[a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n \
    \       Match match = regex.Match(file_name);\n        if (match.Success)\n  \
    \      {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            string[] extensions = new string[] { \"txt\", \"exe\", \"\
    dll\" };\n            if (extensions.Contains(extension))\n            {\n   \
    \             return \"Yes\";\n            }\n            else\n            {\n\
    \                return \"No\";\n            }\n        }\n        else\n    \
    \    {\n            return \"No\";\n        }", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n \
    \       string result = regex.Match(file_name).Value;\n        if (result == \"\
    Yes\") {\n            return result;\n        }\n        else {\n            return\
    \ \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") > 0) {\n                string before_dot\
    \ = file_name.Substring(0, file_name.IndexOf(\".\"));\n                if (before_dot.Length\
    \ > 0) {\n                    char first_letter = Convert.ToChar(first_letter(before_dot));\n\
    \                    if (!(first_letter == 'a' || first_letter == 'b' || first_letter\
    \ == 'c' || first_letter == 'd' || first_letter == 'e' || first_letter == 'f'\
    \ || first_letter == 'g' || first_letter == 'h' || first_letter == 'i' || first_letter\
    \ == 'j' || first_letter == 'k' || first_letter == 'l' || first_letter == 'm'\
    \ || first_letter == 'n' || first_letter == 'o' || first_letter == 'p' || first_letter\
    \ == 'q' || first_letter == 'r' || first_letter == 's' || first_letter == 't'\
    \ || first_letter == 'u' || first_letter == 'v' || first_letter == 'w' || first_letter\
    \ == 'x' || first_letter == 'y' || first_letter == 'z')) {\n                 \
    \       return \"No\";\n                    }\n                }\n           \
    \ }\n            string after_dot = file_name.Substring(file_name.IndexOf(\".\"\
    ) + 1);\n            string[] extensions = new string[] { \"txt\", \"exe\", \"\
    dll\" };\n            foreach (string extension in extensions) {\n           \
    \     if (after_dot.ToLower().Contains(extension)) {\n                    return\
    \ \"Yes\";\n                }\n            }\n            return \"No\";\n   \
    \     }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0,\
    \ 1).ToLower() == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\") {\n \
    \                   if (file_name.Substring(0, 2).ToLower() == \"..\") {\n   \
    \                     return \"No\";\n                    }\n                }\n\
    \            }\n            return \"Yes\";\n        }\n        return \"No\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z]$\";\n        Regex regex = new\
    \ Regex(pattern);\n        string result = regex.Match(file_name).Value;\n   \
    \     if (result == \"Yes\") {\n            return result;\n        }\n      \
    \  else {\n            return \"No\";\n        }", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success) {\n\
    \            string file_name = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\"));\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            } else {\n     \
    \           return \"No\";\n            }\n        } else {\n            return\
    \ \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z]$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1) != \"\") {\n       \
    \             if (file_name.Substring(0, 1).ToLower() != \"a\" && file_name.Substring(0,\
    \ 1).ToLower() != \"b\" && file_name.Substring(0, 1).ToLower() != \"c\" && file_name.Substring(0,\
    \ 1).ToLower() != \"d\" && file_name.Substring(0, 1).ToLower() != \"e\" && file_name.Substring(0,\
    \ 1).ToLower() != \"f\" && file_name.Substring(0, 1).ToLower() != \"g\" && file_name.Substring(0,\
    \ 1).ToLower() != \"h\" && file_name.Substring(0, 1).ToLower() != \"i\" && file_name.Substring(0,\
    \ 1).ToLower() != \"j\" && file_name.Substring(0, 1).ToLower() != \"k\" && file_name.Substring(0,\
    \ 1).ToLower() != \"l\" && file_name.Substring(0, 1).ToLower() != \"m\" && file_name.Substring(0,\
    \ 1).ToLower() != \"n\" && file_name.Substring(0, 1).ToLower() != \"o\" && file_name.Substring(0,\
    \ 1).ToLower() != \"p\" && file_name.Substring(0, 1).ToLower() != \"q\" && file_name.Substring(0,\
    \ 1).ToLower() != \"r\" && file_name.Substring(0, 1).ToLower() != \"s\" && file_name.Substring(0,\
    \ 1).ToLower() != \"t\" && file_name.Substring(0, 1).ToLower() != \"u\" && file_name.Substring(0,\
    \ 1).ToLower() != \"v\" && file_name.Substring(0, 1).ToLower() != \"w\" && file_name.Substring(0,\
    \ 1).ToLower() != \"x\" && file_name.Substring(0, 1).ToLower() != \"y\" && file_name.Substring(0,\
    \ 1).ToLower() != \"z\") {\n                        return \"No\";\n         \
    \           }\n                }\n            }\n        }\n        return \"\
    Yes\";", "        if (file_name.Length > 3 || file_name.Contains(\".\") || file_name.Substring(0,\
    \ 1).IsEmpty() || file_name.Substring(0, 1).FirstOrDefault() != 'a' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != 'A' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ 'z' || file_name.Substring(0, 1).FirstOrDefault() != 'Z' || file_name.Substring(0,\
    \ 1).FirstOrDefault() != '0' || file_name.Substring(0, 1).FirstOrDefault() !=\
    \ '9') {\n            return \"No\";\n        }\n        string extension = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n        if (extension == \"txt\" || extension ==\
    \ \"exe\" || extension == \"dll\") {\n            return \"Yes\";\n        }\n\
    \        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string substr = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            if (substr.Length > 0 && substr.StartsWith(\"a\") && substr.EndsWith(\"\
    z\") || substr.StartsWith(\"A\") && substr.EndsWith(\"Z\")) {\n              \
    \  return \"Yes\";\n            }\n        }\n        return \"No\";", "     \
    \   string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\";\n        Regex regex =\
    \ new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            string\
    \ substr = file_name.Substring(0, file_name.IndexOf('.'));\n            string\
    \ substr_2 = file_name.Substring(file_name.IndexOf('.'));\n            if (substr.Length\
    \ == 0 && substr_2.Length == 0)\n                return \"Yes\";\n           \
    \ else if (substr.Length == 0 && substr_2.Length != 0)\n                return\
    \ \"No\";\n            else if (substr.Length != 0 && substr_2.Length == 0)\n\
    \                return \"No\";\n            else if (substr.Length != 0 && substr_2.Length\
    \ != 0)\n                return \"No\";\n            else if (substr.Length ==\
    \ 3 && substr_2.Length != 3)\n                return \"No\";\n            else\
    \ if (substr.Length != 3 && substr_2.Length == 3)\n                return \"No\"\
    ;\n            else if (substr.Length != 3 && substr_2.Length == 3)\n        \
    \        return \"No\";\n            else if (substr.Length == 3 && substr_2.Length\
    \ == 3)\n                return \"Yes\";\n            else\n                return\
    \ \"No\";\n        }\n        else\n            return \"No\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).IsLetter()) {\n    \
    \                string extension = file_name.Substring(1, file_name.Length -\
    \ 2);\n                    if (extension == \"txt\" || extension == \"exe\" ||\
    \ extension == \"dll\") {\n                        return \"Yes\";\n         \
    \           }\n                }\n            }\n        }\n        return \"\
    No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string sub = file_name.Substring(0,\
    \ match.Index);\n            string ext = file_name.Substring(match.Index);\n\
    \            if (ext.ToLower() == \"txt\" || ext.ToLower() == \"exe\" || ext.ToLower()\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        if (file_name.Length > 3) {\n            return\
    \ \"No\";\n        }\n        if (file_name.IndexOf('.') != -1) {\n          \
    \  return \"No\";\n        }\n        if (file_name.Substring(0, 1).IsLetterOrDigit())\
    \ {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ file_name.IndexOf('.')).Contains(\".\")) {\n            return \"No\";\n   \
    \     }\n        if (file_name.Substring(0, file_name.IndexOf('.')).ToLower().Contains(\"\
    exe\")) {\n            return \"No\";\n        }\n        if (file_name.Substring(0,\
    \ file_name.IndexOf('.')).ToLower().Contains(\"dll\")) {\n            return \"\
    No\";\n        }\n        return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string substr = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            if (substr.Length > 0 && substr.StartsWith(\"a\") && substr.EndsWith(\"\
    z\") || substr.StartsWith(\"A\") && substr.EndsWith(\"Z\")) {\n              \
    \  string extension = file_name.Substring(file_name.IndexOf(\".\"));\n       \
    \         if (extension == \"txt\" || extension == \"exe\" || extension == \"\
    dll\") {\n                    return \"Yes\";\n                }\n           \
    \ }\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            int index = file_name.IndexOf('.');\n            if (index !=\
    \ -1) {\n                string sub_string = file_name.Substring(0, index);\n\
    \                if (sub_string.Length > 0) {\n                    char first_letter\
    \ = sub_string[0];\n                    if (!(first_letter == 'a' || first_letter\
    \ == 'b' || first_letter == 'c' || first_letter == 'd' || first_letter == 'e'\
    \ || first_letter == 'f' || first_letter == 'g' || first_letter == 'h' || first_letter\
    \ == 'i' || first_letter == 'j' || first_letter == 'k' || first_letter == 'l'\
    \ || first_letter == 'm' || first_letter == 'n' || first_letter == 'o' || first_letter\
    \ == 'p' || first_letter == 'q' || first_letter == 'r' || first_letter == 's'\
    \ || first_letter == 't' || first_letter == 'u' || first_letter == 'v' || first_letter\
    \ == 'w' || first_letter == 'x' || first_letter == 'y' || first_letter == 'z'))\
    \ {\n                        return \"No\";\n                    }\n         \
    \       }\n            }\n        }\n        return \"Yes\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success) {\n\
    \            string sub_string = file_name.Substring(0, match.Index);\n      \
    \      string extension = file_name.Substring(match.Index + match.Length);\n \
    \           if (sub_string.Length > 0 && sub_string[0] == '.') {\n           \
    \     if (sub_string.Length > 1 && sub_string[1] == '.') {\n                 \
    \   if (sub_string.Length > 2 && sub_string[2] == '.') {\n                   \
    \     if (sub_string.Length > 3 && sub_string[3] == '.') {\n                 \
    \           if (sub_string.Length > 4 && sub_string[4] == '.') {\n           \
    \                     if (sub_string.Length > 5 && sub_string[5] == '.') {\n \
    \                                   if (sub_string.Length > 6 && sub_string[6]\
    \ == '.') {\n                                        if (sub_string.Length > 7\
    \ && sub_string[7] == '.') {\n                                            if (sub_string.Length\
    \ > 8 && sub_string[8] == '.') {\n                                           \
    \     if (sub_string.Length > 9 && sub_string[9] == '.') {\n                 \
    \                                   if (sub_string.Length > 10 && sub_string[10]\
    \ == '.') {\n                                                        if (sub_string.Length\
    \ > 11 && sub_string[11] == '.') {\n                                         \
    \                   if (sub_string.Length > 12 && sub_string[12] == '.') {\n \
    \                                                               if (sub_string.Length\
    \ > 13 && sub_string[13] == '.') {\n                                         \
    \                           if (sub_string.Length > 14 && sub_string[14] == '.')\
    \ {\n                                                                        if\
    \ (sub_string.Length > 15 && sub_string[15] == '.') {\n                      \
    \                                                      if (sub_string.Length >\
    \ 16 && sub_string[16] == '.') {\n                                           \
    \                                     if (sub_string.Length > 17 && sub_string[17]\
    \ == '.') {\n                                                                \
    \                    if (sub_string.Length > 18 && sub_string[18] == '.') {\n\
    \                                                                            \
    \            if (sub_string.Length > 19 && sub_string[19] == '.') {\n        \
    \                                                                            \
    \        if (sub_string.Length > 20 && sub_string[20] == '.') {\n            \
    \                                                                            \
    \        if (sub_string.Length > 21 && sub_string[21] == '.') {\n            \
    \                                                                            \
    \            if (sub_string.Length > 22 && sub_string[22] == '.') {\n        \
    \                                                                            \
    \                    if (sub_string.Length > 23 && sub_string[23] == '.') {\n\
    \                                                                            \
    \                                if (sub_string.Length > 24 && sub_string[24]\
    \ == '.') {\n                                                                \
    \                                                if (sub_string.Length > 25 &&\
    \ sub_string[25] == '.') {\n                                                 \
    \                                                                   if (sub_string.Length\
    \ > 26 && sub_string[", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return result;\n        }\n   \
    \     else {\n            return \"No\";\n        }", "        // Your code goes\
    \ here\n        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex\
    \ = new Regex(pattern);\n        string file_name = file_name.ToLower();\n   \
    \     if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\".\"\
    ) > 0) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\" ||\
    \ file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower(", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.Contains(\"\
    .\")) {\n                if (file_name.Substring(0, 1).Length > 0) {\n       \
    \             if (!char.IsLetter(file_name.Substring(0, 1).ToCharArray()[0]))\
    \ {\n                        return \"No\";\n                    }\n         \
    \       }\n                else {\n                    return \"No\";\n      \
    \          }\n            }\n            else {\n                return \"No\"\
    ;\n            }\n        }\n        else {\n            return \"No\";\n    \
    \    }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return result;\n        }\n   \
    \     else {\n            return \"No\";\n        }", "        // Your code goes\
    \ here\n        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex\
    \ = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n           \
    \ if (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0,\
    \ 1).ToLower() == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\" || file_name.Substring(0,\
    \ 1).ToLower() == \"A\" || file_name.Substring(0, 1).ToLower() == \"B\" || file_name.Substring(0,\
    \ 1).ToLower() == \"C\" || file_name.Substring(0, 1).ToLower() == \"D\" || file_name.Substring(0,\
    \ 1).ToLower() == \"E\" || file_name.Substring(0, 1).ToLower() == \"F\" || file_name.Substring(0,\
    \ 1).ToLower() == \"G\" || file_name.Substring(0, 1).ToLower() == \"H\" || file_name.Substring(0,\
    \ 1).ToLower() == \"I\" || file_name.Substring(0, 1).ToLower() == \"J\" || file_name.Substring(0,\
    \ 1).ToLower() == \"K\" || file_name.Substring(0, 1).ToLower() == \"L\" || file_name.Substring(0,\
    \ 1).To", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).IsLetter() && file_name.Substring(1, 1).IsLetter()) {\n                 \
    \   string extension = file_name.Substring(1, file_name.Length - 2);\n       \
    \             if (extension == \"txt\" || extension == \"exe\" || extension ==\
    \ \"dll\") {\n                        return \"Yes\";\n                    }\n\
    \                }\n            }\n        }\n        return \"No\";", "     \
    \   string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success) {\n\
    \            if (file_name.Substring(0, 1).Equals(\"0\") || file_name.Substring(0,\
    \ 1).Equals(\"9\")) {\n                return \"No\";\n            }\n       \
    \     if (file_name.Substring(0, 1).Equals(\".\")) {\n                return \"\
    No\";\n            }\n            if (file_name.Substring(0, 1).Equals(\"a\")\
    \ || file_name.Substring(0, 1).Equals(\"z\") || file_name.Substring(0, 1).Equals(\"\
    A\") || file_name.Substring(0, 1).Equals(\"Z\")) {\n                return \"\
    No\";\n            }\n            if (file_name.Substring(0, 1).Equals(\".\")\
    \ && file_name.Substring(0, 2).Equals(\"exe\") || file_name.Substring(0, 1).Equals(\"\
    .\") && file_name.Substring(0, 2).Equals(\"dll\")) {\n                return \"\
    Yes\";\n            }\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            string file_extension =\
    \ file_name.Substring(file_name.LastIndexOf('.') + 1);\n            if (file_extension\
    \ == \"txt\" || file_extension == \"exe\" || file_extension == \"dll\") {\n  \
    \              return \"Yes\";\n            } else {\n                return \"\
    No\";\n            }\n        } else {\n            return \"No\";\n        }",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            string\
    \ file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n            string\
    \ extension = file_name.Substring(file_name.LastIndexOf(\".\") + 1);\n       \
    \     if (extension == \"txt\" || extension == \"exe\" || extension == \"dll\"\
    ) {\n                return \"Yes\";\n            } else {\n                return\
    \ \"No\";\n            }\n        } else {\n            return \"No\";\n     \
    \   }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       if (file_name.IndexOf('.') != -1) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \ }\n        return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string file_ext = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \            if (file_ext == \"txt\" || file_ext == \"exe\" || file_ext == \"\
    dll\") {\n                return \"Yes\";\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return result;\n        } else\
    \ {\n            return \"No\";\n        }", "        string pattern = @\"^[0-9]{1,3}\\\
    .[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n        string result\
    \ = regex.Match(file_name).Value;\n        if (result == \"Yes\") {\n        \
    \    return \"Yes\";\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success) {\n\
    \            string file_name = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            string extension = file_name.Substring(file_name.IndexOf(\".\"\
    ));\n            string extension_array = extension.Split('.');\n            if\
    \ (extension_array.Length == 1) {\n                if (extension_array[0] != \"\
    txt\" && extension_array[0] != \"exe\" && extension_array[0] != \"dll\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \     else {\n                if (extension_array[0] != \"txt\" && extension_array[0]\
    \ != \"exe\" && extension_array[0] != \"dll\") {\n                    return \"\
    No\";\n                }\n            }\n        }\n        else {\n         \
    \   return \"No\";\n        }\n        return \"Yes\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success) {\n\
    \            if (file_name.Substring(0, 1).Equals(\"0\") || file_name.Substring(0,\
    \ 1).Equals(\"9\")) {\n                return \"No\";\n            }\n       \
    \     if (file_name.Substring(0, 1).Equals(\"a\") || file_name.Substring(0, 1).Equals(\"\
    z\") || file_name.Substring(0, 1).Equals(\"A\") || file_name.Substring(0, 1).Equals(\"\
    Z\")) {\n                if (file_name.Substring(0, 2).Equals(\"\")) {\n     \
    \               return \"No\";\n                }\n                if (file_name.Substring(0,\
    \ 2).Equals(\".\") && file_name.Substring(0, 3).Equals(\"txt\") || file_name.Substring(0,\
    \ 3).Equals(\"exe\") || file_name.Substring(0, 3).Equals(\"dll\")) {\n       \
    \             return \"Yes\";\n                }\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-z][a-z][a-z]$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string file_extension = file_name.Substring(file_name.LastIndexOf('.')\
    \ + 1);\n            if (file_extension == \"txt\" || file_extension == \"exe\"\
    \ || file_extension == \"dll\") {\n                return \"Yes\";\n         \
    \   }\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z]{1}$\";\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            int index = file_name.IndexOf(\".\");\n            if (index\
    \ > 0) {\n                string sub_string = file_name.Substring(0, index);\n\
    \                if (sub_string.Length > 0) {\n                    char first_letter\
    \ = sub_string[0];\n                    bool is_latin_letter = Char.IsLetter(first_letter);\n\
    \                    bool is_valid_sub_string = sub_string.Contains(\"txt\") ||\
    \ sub_string.Contains(\"exe\") || sub_string.Contains(\"dll\");\n            \
    \        bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_letter && is_valid_sub_string;\n\
    \                    bool is_valid_sub_string = is_latin_", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        string result = regex.Match(file_name).Value;\n        if (result ==\
    \ \"Yes\") {\n            return \"Yes\";\n        }\n        return \"No\";",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        string result = regex.Match(file_name).Value;\n   \
    \     if (result == \"Yes\") {\n            return (\"Yes\");\n        }\n   \
    \     else {\n            return (\"No\");\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            int index = file_name.IndexOf('.');\n\
    \            if (index > 0 && file_name.Substring(0, index).Trim().Length > 0)\
    \ {\n                string sub = file_name.Substring(0, index);\n           \
    \     bool isLetter = char.IsLetter(sub[0]);\n                bool isFile = sub\
    \ == \"txt\" || sub == \"exe\" || sub == \"dll\";\n                return isLetter\
    \ && isFile;\n            }\n        }\n        return \"No\";", "        string\
    \ dot = \".\";\n        string sub_string = file_name.Substring(0, file_name.IndexOf(dot));\n\
    \        string extension = file_name.Substring(file_name.IndexOf(dot) + 1);\n\
    \        bool is_valid = true;\n        if (sub_string.Length > 3) {\n       \
    \     is_valid = false;\n        }\n        if (sub_string.IndexOf(dot) == -1)\
    \ {\n            is_valid = false;\n        }\n        if (sub_string.IndexOf(dot)\
    \ == 0 || sub_string.IndexOf(dot) == 1 || sub_string.IndexOf(dot) == 2) {\n  \
    \          is_valid = false;\n        }\n        if (sub_string.IndexOf(dot) ==\
    \ 0 || sub_string.IndexOf(dot) == 1 || sub_string.IndexOf(dot) == 2) {\n     \
    \       is_valid = false;\n        }\n        if (sub_string.IndexOf(dot) == 0\
    \ || sub_string.IndexOf(dot) == 1 || sub_string.IndexOf(dot) == 2) {\n       \
    \     is_valid = false;\n        }\n        if (sub_string.IndexOf(dot) == 0 ||\
    \ sub_string.IndexOf(dot) == 1 || sub_string.IndexOf(dot) == 2) {\n          \
    \  is_valid = false;\n        }\n        if (sub_string.IndexOf(dot) == 0 || sub_string.IndexOf(dot)\
    \ == 1 || sub_string.IndexOf(dot) == 2) {\n            is_valid = false;\n   \
    \     }\n        if (sub_string.IndexOf(dot) == 0 || sub_string.IndexOf(dot) ==\
    \ 1 || sub_string.IndexOf(dot) == 2) {\n            is_valid = false;\n      \
    \  }\n        if (sub_string.IndexOf(dot) == 0 || sub_string.IndexOf(dot) == 1\
    \ || sub_string.IndexOf(dot) == 2) {\n            is_valid = false;\n        }\n\
    \        if (sub_string.IndexOf(dot) == 0 || sub_string.IndexOf(dot) == 1 || sub_string.IndexOf(dot)\
    \ == 2) {\n            is_valid = false;\n        }\n        if (sub_string.IndexOf(dot)\
    \ == 0 || sub_string.IndexOf(dot) == 1 || sub_string.IndexOf(dot) == 2) {\n  \
    \          is_valid = false;\n        }\n        if (sub_string.IndexOf(dot) ==\
    \ 0 || sub_string.IndexOf(dot) == 1 || sub_string.IndexOf(dot) == 2) {\n     \
    \       is_valid = false;\n        }\n        if (sub_string.IndexOf(dot) == 0\
    \ || sub_string.IndexOf(dot) == 1 || sub_string.IndexOf(dot) == 2) {\n       \
    \     is_valid = false;\n        }\n        if (sub_string.IndexOf(dot) == 0 ||\
    \ sub_string.IndexOf(dot) == 1 || sub_string.IndexOf(dot) == 2) {\n          \
    \  is_valid = false;\n        }\n        if (sub_string.IndexOf(dot) == 0 || sub_string.IndexOf(dot)\
    \ == 1 || sub_string.IndexOf(dot) == 2) {\n            is_valid = false;\n   \
    \     }\n        if (sub_string.IndexOf(dot) == 0 || sub_string.IndexOf(dot) ==\
    \ 1 || sub_string.", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n\
    \        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            } else {\n     \
    \           return \"No\";\n            }\n        } else {\n            return\
    \ \"No\";\n        }", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{1}$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return result;\n        }\n   \
    \     else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]{0,1}$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success)\n \
    \       {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\")\n            {\n                return \"Yes\";\n            }\n\
    \            else\n            {\n                return \"No\";\n           \
    \ }\n        }\n        else\n        {\n            return \"No\";\n        }",
  "        // Your code goes here\n        string pattern = @\"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]*$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.Contains(\".\")) {\n                if (file_name.Substring(0,\
    \ 1).Equals(\"\")) {\n                    return \"No\";\n                }\n\
    \                else {\n                    return \"No\";\n                }\n\
    \            }\n            else {\n                return \"No\";\n         \
    \   }\n        }\n        else {\n            return \"No\";\n        }", "  \
    \      string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        Match match = regex.Match(file_name);\n        if (match.Success)\n\
    \        {\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            string file_name = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n            string extension = file_name.Substring(file_name.LastIndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\")\n            {\n                return \"Yes\";\n            }\n\
    \            else\n            {\n                return \"No\";\n           \
    \ }\n        }\n        else\n        {\n            return \"No\";\n        }",
  "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") > 0) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\"\
    \ || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\") {\n \
    \                   if (file_name.Substring(0, 2).ToLower() == \"txt\" || file_name.Substring(0,\
    \ 2).ToLower() == \"exe\" || file_name.Substring(0, 2).ToLower() == \"dll\") {\n\
    \                        return \"Yes\";\n                    }\n            \
    \    }\n            }\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{1,3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1).ToLower() != \"a\" &&\
    \ file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0, 1).ToLower()\
    \ != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                   return \"No\";\n                }\n            }\n       \
    \ }\n        return \"Yes\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return (\"Yes\");\n        }\n\
    \        else {\n            return (\"No\");\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.Contains(\"\
    .\")) {\n                if (file_name.Substring(0, 1).Length > 0) {\n       \
    \             if (file_name.Substring(0, 1).ToLower() != \"a\" && file_name.Substring(0,\
    \ 1).ToLower() != \"b\" && file_name.Substring(0, 1).ToLower() != \"c\" && file_name.Substring(0,\
    \ 1).ToLower() != \"d\" && file_name.Substring(0, 1).ToLower() != \"e\" && file_name.Substring(0,\
    \ 1).ToLower() != \"f\" && file_name.Substring(0, 1).ToLower() != \"g\" && file_name.Substring(0,\
    \ 1).ToLower() != \"h\" && file_name.Substring(0, 1).ToLower() != \"i\" && file_name.Substring(0,\
    \ 1).ToLower() != \"j\" && file_name.Substring(0, 1).ToLower() != \"k\" && file_name.Substring(0,\
    \ 1).ToLower() != \"l\" && file_name.Substring(0, 1).ToLower() != \"m\" && file_name.Substring(0,\
    \ 1).ToLower() != \"n\" && file_name.Substring(0, 1).ToLower() != \"o\" && file_name.Substring(0,\
    \ 1).ToLower() != \"p\" && file_name.Substring(0, 1).ToLower() != \"q\" && file_name.Substring(0,\
    \ 1).ToLower() != \"r\" && file_name.Substring(0, 1).ToLower() != \"s\" && file_name.Substring(0,\
    \ 1).ToLower() != \"t\" && file_name.Substring(0, 1).ToLower() != \"u\" && file_name.Substring(0,\
    \ 1).ToLower() != \"v\" && file_name.Substring(0, 1).ToLower() != \"w\" && file_name.Substring(0,\
    \ 1).ToLower() != \"x\" && file_name.Substring(0, 1).ToLower() != \"y\" && file_name.Substring(0,\
    \ 1).ToLower() != \"z\") {\n                        return \"No\";\n         \
    \           }\n                }\n                if (file_name.Substring(1, 1).ToLower()\
    \ == \"d\") {\n                    return \"No\";\n                }\n       \
    \     }\n            return \"Yes\";\n        }\n        return \"No\";", "  \
    \      string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n            string\
    \ substr = file_name.Substring(0, file_name.IndexOf(\".\"));\n            string\
    \ first_char = substr.Substring(0, 1);\n            string last_char = substr.Substring(substr.Length\
    \ - 1, 1);\n            if (first_char.ToUpper() == first_char && last_char.ToUpper()\
    \ == last_char) {\n                if (substr.Length > 1) {\n                \
    \    string extension = substr.Substring(1);\n                    if (extension.ToUpper()\
    \ == \"TXT\" || extension.ToUpper() == \"EXE\" || extension.ToUpper() == \"DLL\"\
    ) {\n                        return \"Yes\";\n                    }\n        \
    \        }\n            }\n        }\n        return \"No\";", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-z][a-z]$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf('.')\
    \ != -1) {\n                if (file_name.Substring(0, 1) != \"\") {\n       \
    \             if (file_name.Substring(0, 1) != \"a\" && file_name.Substring(0,\
    \ 1) != \"A\") {\n                        if (file_name.Substring(0, 1) != \"\
    b\" && file_name.Substring(0, 1) != \"B\") {\n                            if (file_name.Substring(0,\
    \ 1) != \"c\" && file_name.Substring(0, 1) != \"C\") {\n                     \
    \           if (file_name.Substring(0, 1) != \"d\" && file_name.Substring(0, 1)\
    \ != \"D\") {\n                                    if (file_name.Substring(0,\
    \ 1) != \"e\" && file_name.Substring(0, 1) != \"E\") {\n                     \
    \                   if (file_name.Substring(0, 1) != \"f\" && file_name.Substring(0,\
    \ 1) != \"F\") {\n                                            if (file_name.Substring(0,\
    \ 1) != \"g\" && file_name.Substring(0, 1) != \"G\") {\n                     \
    \                           if (file_name.Substring(0, 1) != \"h\" && file_name.Substring(0,\
    \ 1) != \"H\") {\n                                                    if (file_name.Substring(0,\
    \ 1) != \"i\" && file_name.Substring(0, 1) != \"I\") {\n                     \
    \                                   if (file_name.Substring(0, 1) != \"j\" &&\
    \ file_name.Substring(0, 1) != \"J\") {\n                                    \
    \        if (file_name.Substring(0, 1) != \"k\" && file_name.Substring(0, 1) !=\
    \ \"K\") {\n                                                if (file_name.Substring(0,\
    \ 1) != \"l\" && file_name.Substring(0, 1) != \"L\") {\n                     \
    \                               if (file_name.Substring(0, 1) != \"m\" && file_name.Substring(0,\
    \ 1) != \"M\") {\n                                                        if (file_name.Substring(0,\
    \ 1) != \"n\" && file_name.Substring(0, 1) != \"N\") {\n                     \
    \                       if (file_name.Substring(0, 1) != \"o\" && file_name.Substring(0,\
    \ 1) != \"O\") {\n                                                if (file_name.Substring(0,\
    \ 1) != \"p\" && file_name.Substring(0, 1) != \"P\") {\n                     \
    \                               if (file_name.Substring(0, 1) != \"q\" && file_name.Substring(0,\
    \ 1) != \"Q\") {\n                                                        if (file_name.Substring(0,\
    \ 1) != \"r\" && file_name.Substring(0, 1) != \"R\") {\n                     \
    \                       if (file_name.Substring(0, 1) != \"s\" && file_name.Substring(0,\
    \ 1) != \"S\") {\n                                                if (file_name.Substring(0,\
    \ 1) != \"t\" && file_name.Substring(0, 1) != \"T\") {\n                     \
    \                               if (file_name.Substring(0, 1) != \"u\" && file_name.Substring(0,\
    \ 1) != \"U\") {\n                                                        if (file_name.Substring(0,\
    \ 1) != \"v\" && file_name.Substring(0, 1) != \"", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n       \
    \ string result = regex.Match(file_name).Value;\n        if (result == \"Yes\"\
    ) {\n            return (\"Yes\");\n        }\n        else {\n            return\
    \ (\"No\");\n        }", "        string dot = \".\";\n        string dot1 = \"\
    \";\n        string dot2 = \"\";\n        string dot3 = \"\";\n        string\
    \ dot4 = \"\";\n        string dot5 = \"\";\n        string dot6 = \"\";\n   \
    \     string dot7 = \"\";\n        string dot8 = \"\";\n        string dot9 =\
    \ \"\";\n        string dot10 = \"\";\n        string dot11 = \"\";\n        string\
    \ dot12 = \"\";\n        string dot13 = \"\";\n        string dot14 = \"\";\n\
    \        string dot15 = \"\";\n        string dot16 = \"\";\n        string dot17\
    \ = \"\";\n        string dot18 = \"\";\n        string dot19 = \"\";\n      \
    \  string dot20 = \"\";\n        string dot21 = \"\";\n        string dot22 =\
    \ \"\";\n        string dot23 = \"\";\n        string dot24 = \"\";\n        string\
    \ dot25 = \"\";\n        string dot26 = \"\";\n        string dot27 = \"\";\n\
    \        string dot28 = \"\";\n        string dot29 = \"\";\n        string dot30\
    \ = \"\";\n        string dot31 = \"\";\n        string dot32 = \"\";\n      \
    \  string dot33 = \"\";\n        string dot34 = \"\";\n        string dot35 =\
    \ \"\";\n        string dot36 = \"\";\n        string dot37 = \"\";\n        string\
    \ dot38 = \"\";\n        string dot39 = \"\";\n        string dot40 = \"\";\n\
    \        string dot41 = \"\";\n        string dot42 = \"\";\n        string dot43\
    \ = \"\";\n        string dot44 = \"\";\n        string dot45 = \"\";\n      \
    \  string dot46 = \"\";\n        string dot47 = \"\";\n        string dot48 =\
    \ \"\";\n        string dot49 = \"\";\n        string dot50 = \"\";\n        string\
    \ dot51 = \"\";\n        string dot52 = \"\";\n        string dot53 = \"\";\n\
    \        string dot54 = \"\";\n        string dot55 = \"\";\n        string dot56\
    \ = \"\";\n        string dot57 = \"\";\n        string dot58 = \"\";\n      \
    \  string dot59 = \"\";\n        string dot60 = \"\";\n        string dot61 =\
    \ \"\";\n        string dot62 = \"\";\n        string dot63 = \"\";\n        string\
    \ dot64 = \"\";\n        string dot65 = \"\";\n        string dot66 = \"\";\n\
    \        string dot67 = \"\";\n        string dot68 = \"\";\n        string dot69\
    \ = \"\";\n        string dot70 = \"\";\n        string dot71 = \"\";\n      \
    \  string dot72 = \"\";\n        string dot73 = \"\";\n        string dot74 =\
    \ \"\";\n        string dot75 = \"\";\n        string dot76 = \"\";\n        string\
    \ dot77 = \"\";\n        string dot78 = \"\";\n        string dot79 = \"\";\n\
    \        string dot80 = \"\";\n        string dot81 = \"\";\n        ", "    \
    \    string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        string result = regex.Match(file_name).Value;\n   \
    \     if (result == \"Yes\") {\n            return \"Yes\";\n        }\n     \
    \   else {\n            return \"No\";\n        }", "        string dot = \".\"\
    ;\n        string first_letter = \"a\";\n        string last_letter = \"z\";\n\
    \        string extensions = \"txt,exe,dll\";\n        string file_name = file_name.ToLower();\n\
    \        int num_digits = file_name.Count(x => x >= '0' && x <= '9');\n      \
    \  if (num_digits > 3) {\n            return \"No\";\n        }\n        if (file_name.Contains(dot))\
    \ {\n            return \"No\";\n        }\n        if (file_name.StartsWith(first_letter))\
    \ {\n            return \"No\";\n        }\n        if (file_name.EndsWith(extensions))\
    \ {\n            return \"Yes\";\n        }\n        return \"No\";", "      \
    \  string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        Match match = regex.Match(file_name);\n        if (match.Success) {\n\
    \            string sub_string = file_name.Substring(0, match.Index);\n      \
    \      string extension = file_name.Substring(match.Index);\n            if (sub_string.Length\
    \ > 0 && sub_string[0] == '.') {\n                if (sub_string.Length > 1 &&\
    \ sub_string[1] == '.') {\n                    string sub_string1 = sub_string.Substring(1,\
    \ sub_string.Length - 2);\n                    if (sub_string1.Length > 0 && sub_string1[0]\
    \ == 'a' && sub_string1[1] == 'z') {\n                        return (\"Yes\"\
    );\n                    }\n                }\n            }\n            if (extension.Length\
    \ > 0 && extension[0] == '.') {\n                if (extension.Length > 1 && extension[1]\
    \ == '.') {\n                    string extension1 = extension.Substring(1, extension.Length\
    \ - 2);\n                    if (extension1.Length > 0 && extension1[0] == 'a'\
    \ && extension1[1] == 'z') {\n                        return (\"Yes\");\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ (\"No\");", "        string pattern = @\"^[0-9]{1,3}\\.[a-zA-Z]+$\";\n     \
    \   Regex regex = new Regex(pattern);\n        string result = regex.Match(file_name).Value;\n\
    \        if (result == \"Yes\") {\n            return \"Yes\";\n        }\n  \
    \      else {\n            return \"No\";\n        }", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") > 0) {\n                string beforeDot = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n                if (beforeDot.Length > 0) {\n                    char\
    \ firstChar = beforeDot[0];\n                    bool isLetter = Char.IsLetter(firstChar);\n\
    \                    bool isDigit = Char.IsDigit(firstChar);\n               \
    \     bool isAllLetters = isLetter && isDigit;\n                    bool isAllDigits\
    \ = !isLetter && !isDigit;\n                    bool isAllLettersAndDigits = isAllLetters\
    \ && isAllDigits;\n                    bool isAllLettersAndDigitsOrEmpty = isAllLetters\
    \ && isAllDigits && !beforeDot.Equals(\"\");\n                    bool isAllLettersAndDigitsOrEmptyOrNot\
    \ = isAllLettersAndDigits && !beforeDot.Equals(\"\") && !beforeDot.Equals(\".\"\
    );\n                    bool isAllLettersAndDigitsOrEmptyOrNotOrNot = isAllLettersAndDigits\
    \ && !beforeDot.Equals(\"\") && !beforeDot.Equals(\".\") && !beforeDot.Equals(\"\
    .\");\n                    bool isAllLettersAndDigitsOrEmptyOrNotOrNotOrNot =\
    \ isAllLettersAndDigits && !beforeDot.Equals(\"\") && !beforeDot.Equals(\".\"\
    ) && !beforeDot.Equals(\".\") && !beforeDot.Equals(\".\");\n                 \
    \   bool isAllLettersAndDigitsOrEmptyOrNotOrNotOrNotOrNot = isAllLettersAndDigits\
    \ && !beforeDot.Equals(\"\") && !beforeDot.Equals(\".\") && !beforeDot.Equals(\"\
    .\") && !beforeDot.Equals(\".\") && !beforeDot.Equals(\".\");\n              \
    \      bool isAllLettersAndDigitsOrEmptyOrNotOrNotOrNotOrNotOrNot = isAllLettersAndDigits\
    \ && !beforeDot.Equals(\"\") && !beforeDot.Equals(\".\") && !beforeDot.Equals(\"\
    .\") && !beforeDot.Equals(\".\") && !beforeDot.Equals(\".\") && !beforeDot.Equals(\"\
    .\");\n                    bool isAllLettersAndDigitsOrEmptyOrNotOrNotOrNotOrNotOrNotOrNot\
    \ = isAllLettersAndDigits && !beforeDot.Equals(\"\") && !beforeDot.Equals(\".\"\
    ) && !beforeDot.Equals(\".\") && !beforeDot.Equals(\".\") && !beforeDot.Equals(\"\
    .", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z][a-zA-Z0-9]+$\";\n      \
    \  Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n\
    \            if (file_name.IndexOf('.') != -1) {\n                string file_name\
    \ = file_name.Substring(0, file_name.IndexOf('.'));\n                if (file_name.Length\
    \ > 0) {\n                    string extension = file_name.Substring(file_name.LastIndexOf('.'));\n\
    \                    if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                        return \"Yes\";\n                   \
    \ }\n                }\n            }\n            return \"No\";\n        }\n\
    \        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            string substr = file_name.Substring(0, file_name.IndexOf(\".\"\
    ));\n            if (substr.Length > 0) {\n                char first_letter =\
    \ substr[0];\n                if (first_letter >= 'a' && first_letter <= 'z')\
    \ {\n                    if (substr.Length > 1) {\n                        char\
    \ second_letter = substr[1];\n                        if (second_letter >= 'a'\
    \ && second_letter <= 'z') {\n                            if (substr.Length >\
    \ 2) {\n                                char third_letter = substr[2];\n     \
    \                           if (third_letter >= 'a' && third_letter <= 'z') {\n\
    \                                    return \"Yes\";\n                       \
    \         }\n                            }\n                        }\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       string file_name = file_name.Substring(0, file_name.IndexOf(\".\"));\n\
    \            string extension = file_name.Substring(file_name.LastIndexOf(\".\"\
    ) + 1);\n            string pattern1 = @\"^[a-zA-Z]+\";\n            Regex regex1\
    \ = new Regex(pattern1);\n            if (regex1.IsMatch(extension)) {\n     \
    \           string pattern2 = @\"^[a-zA-Z]+\\.[a-zA-Z]+$\";\n                Regex\
    \ regex2 = new Regex(pattern2);\n                if (regex2.IsMatch(file_name))\
    \ {\n                    return \"Yes\";\n                }\n            }\n \
    \       }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        Match match = regex.Match(file_name);\n\
    \        if (match.Success)\n        {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\"));\n            string file_extension = extension.ToLower();\n           \
    \ bool file_extension_valid = false;\n            bool file_extension_valid =\
    \ file_extension == \"txt\" || file_extension == \"exe\" || file_extension ==\
    \ \"dll\";\n            if (file_extension_valid)\n            {\n           \
    \     bool file_extension_valid = file_name.Substring(0, 1).ToLower() == \"a\"\
    \ || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\";\n   \
    \             if (file_extension_valid)\n                {\n                 \
    \   bool file_extension_valid = file_name.Substring(1, 1).ToLower() == \"a\" ||\
    \ file_name.Substring(1, 1).ToLower() == \"b\" || file_name.Substring(1, 1).ToLower()\
    \ == \"c\" || file_name.Substring(1, 1).ToLower() == \"d\" || file_name.Substring",
  "        string dot = \".\";\n        string first_letter = \"a\";\n        string\
    \ last_letter = \"z\";\n        string valid_extensions = \"txt,exe,dll\";\n \
    \       string first_letter_of_extension = first_letter.ToLower();\n        string\
    \ last_letter_of_extension = last_letter.ToLower();\n        string extension\
    \ = file_name.Substring(file_name.IndexOf(dot));\n        string extension_of_extension\
    \ = extension.ToLower();\n        if (file_name.Length > 3 || file_name.Contains(dot)\
    \ || extension.Length != 1 || extension_of_extension != first_letter_of_extension\
    \ || extension_of_extension != last_letter_of_extension) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Substring(0, 1) != first_letter ||\
    \ file_name.Substring(file_name.IndexOf(dot), 1) != last_letter || valid_extensions.IndexOf(extension)\
    \ == -1) {\n            return \"No\";\n        }\n        return \"Yes\";", " \
    \       string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new\
    \ Regex(pattern);\n        string result = regex.Match(file_name).Value;\n   \
    \     if (result == \"Yes\") {\n            return result;\n        }\n      \
    \  else {\n            return \"No\";\n        }", "        string pattern = @\"\
    ^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n       \
    \ if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\".\") !=\
    \ -1) {\n                string before_dot = file_name.Substring(0, file_name.IndexOf(\"\
    .\"));\n                if (before_dot.Length > 0) {\n                    string\
    \ first_letter = before_dot.Substring(0, 1);\n                    if (first_letter.All(char.IsLetter))\
    \ {\n                        string after_dot = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n                        if (after_dot.All(char.IsDigit)) {\n     \
    \                       if (after_dot.Contains(\"txt\") || after_dot.Contains(\"\
    exe\") || after_dot.Contains(\"dll\")) {\n                                return\
    \ \"Yes\";\n                            }\n                        }\n       \
    \             }\n                }\n            }\n        }\n        return \"\
    No\";", "        if (file_name.Length > 3) {\n            return \"No\";\n   \
    \     }\n        if (file_name.Contains(\".\")) {\n            return \"No\";\n\
    \        }\n        if (file_name.Substring(0, 1).IsEmpty()) {\n            return\
    \ \"No\";\n        }\n        if (file_name.Substring(0, 1).IndexOfAny(new char[]\
    \ { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' }) < 0) {\n          \
    \  return \"No\";\n        }\n        if (file_name.Substring(0, file_name.IndexOf(\"\
    .\")).IndexOfAny(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'\
    \ }) < 0) {\n            return \"No\";\n        }\n        if (file_name.Substring(file_name.IndexOf(\"\
    .\") + 1).IndexOfAny(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z' }) < 0) {\n            return \"No\";\n        }\n        return \"Yes\"\
    ;", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{0,1}$\";\n        Regex\
    \ regex = new Regex(pattern);\n        if (regex.IsMatch(file_name)) {\n     \
    \       string substr = file_name.Substring(0, file_name.IndexOf(\".\"));\n  \
    \          string substr_2 = file_name.Substring(file_name.IndexOf(\".\"));\n\
    \            if (substr.Length > 0 && substr_2.Length > 0 && substr_2.Substring(0,\
    \ 1).ToString().ToLower() == \"a\" && substr_2.Substring(1, 1).ToString().ToLower()\
    \ == \"z\" || substr_2.Substring(0, 1).ToString().ToLower() == \"a\" && substr_2.Substring(1,\
    \ 1).ToString().ToLower() == \"z\") {\n                return \"Yes\";\n     \
    \       }\n            else {\n                return \"No\";\n            }\n\
    \        }\n        else {\n            return \"No\";\n        }", "        string\
    \ pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") > 0) {\n                if (file_name.Substring(0, 1).ToUpper() == file_name.Substring(0,\
    \ 1).ToUpper()) {\n                    if (file_name.Substring(0, 1).ToUpper()\
    \ == file_name.Substring(0, 1).ToUpper()) {\n                        if (file_name.Substring(0,\
    \ 1).ToUpper() == file_name.Substring(0, 1).ToUpper()) {\n                   \
    \         return \"Yes\";\n                        }\n                    }\n\
    \                }\n            }\n            return \"Yes\";\n        }\n  \
    \      return \"No\";", "        string dot = \".\";\n        string dot1 = \"\
    \";\n        string dot2 = \"\";\n        string dot3 = \"\";\n        string\
    \ dot4 = \"\";\n        string dot5 = \"\";\n        string dot6 = \"\";\n   \
    \     string dot7 = \"\";\n        string dot8 = \"\";\n        string dot9 =\
    \ \"\";\n        string dot10 = \"\";\n        string dot11 = \"\";\n        string\
    \ dot12 = \"\";\n        string dot13 = \"\";\n        string dot14 = \"\";\n\
    \        string dot15 = \"\";\n        string dot16 = \"\";\n        string dot17\
    \ = \"\";\n        string dot18 = \"\";\n        string dot19 = \"\";\n      \
    \  string dot20 = \"\";\n        string dot21 = \"\";\n        string dot22 =\
    \ \"\";\n        string dot23 = \"\";\n        string dot24 = \"\";\n        string\
    \ dot25 = \"\";\n        string dot26 = \"\";\n        string dot27 = \"\";\n\
    \        string dot28 = \"\";\n        string dot29 = \"\";\n        string dot30\
    \ = \"\";\n        string dot31 = \"\";\n        string dot32 = \"\";\n      \
    \  string dot33 = \"\";\n        string dot34 = \"\";\n        string dot35 =\
    \ \"\";\n        string dot36 = \"\";\n        string dot37 = \"\";\n        string\
    \ dot38 = \"\";\n        string dot39 = \"\";\n        string dot40 = \"\";\n\
    \        string dot41 = \"\";\n        string dot42 = \"\";\n        string dot43\
    \ = \"\";\n        string dot44 = \"\";\n        string dot45 = \"\";\n      \
    \  string dot46 = \"\";\n        string dot47 = \"\";\n        string dot48 =\
    \ \"\";\n        string dot49 = \"\";\n        string dot50 = \"\";\n        string\
    \ dot51 = \"\";\n        string dot52 = \"\";\n        string dot53 = \"\";\n\
    \        string dot54 = \"\";\n        string dot55 = \"\";\n        string dot56\
    \ = \"\";\n        string dot57 = \"\";\n        string dot58 = \"\";\n      \
    \  string dot59 = \"\";\n        string dot60 = \"\";\n        string dot61 =\
    \ \"\";\n        string dot62 = \"\";\n        string dot63 = \"\";\n        string\
    \ dot64 = \"\";\n        string dot65 = \"\";\n        string dot66 = \"\";\n\
    \        string dot67 = \"\";\n        string dot68 = \"\";\n        string dot69\
    \ = \"\";\n        string dot70 = \"\";\n        string dot71 = \"\";\n      \
    \  string dot72 = \"\";\n        string dot73 = \"\";\n        string dot74 =\
    \ \"\";\n        string dot75 = \"\";\n        string dot76 = \"\";\n        string\
    \ dot77 = \"\";\n        string dot78 = \"\";\n        string dot79 = \"\";\n\
    \        string dot80 = \"\";\n        string dot81 = \"\";\n        ", "    \
    \    string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        string pattern2 =\
    \ @\"^[a-zA-Z]+\\.[a-zA-Z]+$\";\n        string pattern3 = @\"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\";\n        string pattern4 = @\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\";\n        string pattern5 = @\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\";\n        string pattern6 = @\"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\";\n        string pattern7 =\
    \ @\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+$\";\n        string pattern8 = @\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\";\n        string\
    \ pattern9 = @\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\";\n        string pattern10 = @\"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\";\n        string pattern11 = @\"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\";\n        string pattern12 = @\"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\";\n        string pattern13 = @\"^[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\";\n        string\
    \ pattern14 = @\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+$\";\n        string pattern15 = @\"^[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+$\";\n \
    \       string pattern16 = @\"^[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\\
    .[a-zA-Z]+\\.[a-zA-Z]+\\.", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]{2,3}$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.Contains(\".\")) {\n                if (file_name.Substring(0,\
    \ 1).Length > 0) {\n                    if (file_name.Substring(0, 1).ToLower()\
    \ != \"a\" && file_name.Substring(0, 1).ToLower() != \"b\" && file_name.Substring(0,\
    \ 1).ToLower() != \"c\" && file_name.Substring(0, 1).ToLower() != \"d\" && file_name.Substring(0,\
    \ 1).ToLower() != \"e\" && file_name.Substring(0, 1).ToLower() != \"f\" && file_name.Substring(0,\
    \ 1).ToLower() != \"g\" && file_name.Substring(0, 1).ToLower() != \"h\" && file_name.Substring(0,\
    \ 1).ToLower() != \"i\" && file_name.Substring(0, 1).ToLower() != \"j\" && file_name.Substring(0,\
    \ 1).ToLower() != \"k\" && file_name.Substring(0, 1).ToLower() != \"l\" && file_name.Substring(0,\
    \ 1).ToLower() != \"m\" && file_name.Substring(0, 1).ToLower() != \"n\" && file_name.Substring(0,\
    \ 1).ToLower() != \"o\" && file_name.Substring(0, 1).ToLower() != \"p\" && file_name.Substring(0,\
    \ 1).ToLower() != \"q\" && file_name.Substring(0, 1).ToLower() != \"r\" && file_name.Substring(0,\
    \ 1).ToLower() != \"s\" && file_name.Substring(0, 1).ToLower() != \"t\" && file_name.Substring(0,\
    \ 1).ToLower() != \"u\" && file_name.Substring(0, 1).ToLower() != \"v\" && file_name.Substring(0,\
    \ 1).ToLower() != \"w\" && file_name.Substring(0, 1).ToLower() != \"x\" && file_name.Substring(0,\
    \ 1).ToLower() != \"y\" && file_name.Substring(0, 1).ToLower() != \"z\") {\n \
    \                       return \"No\";\n                    }\n              \
    \  }\n                if (file_name.Substring(0, 2).ToLower() != \"txt\" && file_name.Substring(0,\
    \ 2).ToLower() != \"exe\" && file_name.Substring(0, 2).ToLower() != \"dll\") {\n\
    \                    return \"No\";\n                }\n            }\n      \
    \      return \"Yes\";\n        }\n        return \"No\";", "        string pattern\
    \ = @\"^[0-9]{3}\\.[a-zA-Z]+$\";\n        Regex regex = new Regex(pattern);\n\
    \        if (regex.IsMatch(file_name)) {\n            if (file_name.IndexOf(\"\
    .\") != -1) {\n                if (file_name.Substring(0, 1).ToLower() == \"a\"\
    \ || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0, 1).ToLower()\
    \ == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\") {\n \
    \                   if (file_name.Substring(1).ToLower() == \"txt\" || file_name.Substring(1).ToLower()\
    \ == \"exe\" || file_name.Substring(1).ToLower() == \"dll\") {\n             \
    \           return \"Yes\";\n                    }\n                }\n      \
    \      }\n        }\n        return \"No\";", "        string pattern = @\"^[0-9]{3}\\\
    .[a-zA-Z][a-zA-Z0-9]*$\";\n        Regex regex = new Regex(pattern);\n       \
    \ if (regex.IsMatch(file_name)) {\n            string file_name = file_name.Substring(0,\
    \ file_name.IndexOf(\".\"));\n            string extension = file_name.Substring(file_name.IndexOf(\"\
    .\") + 1);\n            if (extension == \"txt\" || extension == \"exe\" || extension\
    \ == \"dll\") {\n                return \"Yes\";\n            }\n        }\n \
    \       return \"No\";", "        string pattern = @\"^[0-9]{3}\\.[a-zA-Z]+$\"\
    ;\n        Regex regex = new Regex(pattern);\n        if (regex.IsMatch(file_name))\
    \ {\n            if (file_name.IndexOf(\".\") > 0) {\n                if (file_name.Substring(0,\
    \ 1).ToLower() == \"a\" || file_name.Substring(0, 1).ToLower() == \"b\" || file_name.Substring(0,\
    \ 1).ToLower() == \"c\" || file_name.Substring(0, 1).ToLower() == \"d\" || file_name.Substring(0,\
    \ 1).ToLower() == \"e\" || file_name.Substring(0, 1).ToLower() == \"f\" || file_name.Substring(0,\
    \ 1).ToLower() == \"g\" || file_name.Substring(0, 1).ToLower() == \"h\" || file_name.Substring(0,\
    \ 1).ToLower() == \"i\" || file_name.Substring(0, 1).ToLower() == \"j\" || file_name.Substring(0,\
    \ 1).ToLower() == \"k\" || file_name.Substring(0, 1).ToLower() == \"l\" || file_name.Substring(0,\
    \ 1).ToLower() == \"m\" || file_name.Substring(0, 1).ToLower() == \"n\" || file_name.Substring(0,\
    \ 1).ToLower() == \"o\" || file_name.Substring(0, 1).ToLower() == \"p\" || file_name.Substring(0,\
    \ 1).ToLower() == \"q\" || file_name.Substring(0, 1).ToLower() == \"r\" || file_name.Substring(0,\
    \ 1).ToLower() == \"s\" || file_name.Substring(0, 1).ToLower() == \"t\" || file_name.Substring(0,\
    \ 1).ToLower() == \"u\" || file_name.Substring(0, 1).ToLower() == \"v\" || file_name.Substring(0,\
    \ 1).ToLower() == \"w\" || file_name.Substring(0, 1).ToLower() == \"x\" || file_name.Substring(0,\
    \ 1).ToLower() == \"y\" || file_name.Substring(0, 1).ToLower() == \"z\") {\n \
    \                   if (file_name.Substring(1).ToLower() == \"txt\" || file_name.Substring(1).ToLower()\
    \ == \"exe\" || file_name.Substring(1).ToLower() == \"dll\") {\n             \
    \           return \"Yes\";\n                    }\n                }\n      \
    \      }\n        }\n        return \"No\";"]
stop_tokens:
- "\n    }\n"
