name: HumanEval_25_factorize
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return list of prime factors of given integer in the order from\
  \ smallest to largest.\n    // Each of the factors should be listed number of times\
  \ corresponding to how many times it appeares in factorization.\n    // Input number\
  \ should be equal to the product of all factors\n    // >>> Factorize((8L))\n  \
  \  // (new List<long>(new long[]{(long)2L, (long)2L, (long)2L}))\n    // >>> Factorize((25L))\n\
  \    // (new List<long>(new long[]{(long)5L, (long)5L}))\n    // >>> Factorize((70L))\n\
  \    // (new List<long>(new long[]{(long)2L, (long)5L, (long)7L}))\n    public static\
  \ List<long> Factorize(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Factorize((2L)).Equals((new\
  \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Factorize((4L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)2L}))));\n    Debug.Assert(Factorize((8L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)2L, (long)2L}))));\n    Debug.Assert(Factorize((57L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)19L}))));\n    Debug.Assert(Factorize((3249L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)3L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((185193L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)19L, (long)19L, (long)19L}))));\n\
  \    Debug.Assert(Factorize((20577L)).Equals((new List<long>(new long[]{(long)3L,\
  \ (long)19L, (long)19L, (long)19L}))));\n    Debug.Assert(Factorize((18L)).Equals((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)3L}))));\n    }\n\n}\n"
completions: ["        List<long> factors = new List<long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.Add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.Add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.Add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.Add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.Add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.Add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.Add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.Add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        if (n > 1) {\n     \
    \       factors.Add(n);\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        if (n > 1) {\n     \
    \       factors.Add(n);\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        if (n > 1) {\n     \
    \       factors.Add(n);\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.Add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        if (n > 1) {\n     \
    \       factors.Add(n);\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.Add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        if (n > 1) {\n     \
    \       factors.Add(n);\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        if (n > 1) {\n            factors.Add(n);\n\
    \        }\n        return factors;", "        List<long> factors = new List<long>();\n\
    \        long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;", "        List<long> factors\
    \ = new List<long>();\n        long factor = 1;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                factors.Add(factor);\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        if (n > 1) {\n            factors.Add(n);\n        }\n        return\
    \ factors;", "        List<long> factors = new List<long>();\n        long factor\
    \ = 1;\n        while (n > 1) {\n            while (n % factor == 0) {\n     \
    \           factors.Add(factor);\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return factors;", "        List<long>\
    \ factors = new List<long>();\n        long factor = 1;\n        while (n > 1)\
    \ {\n            while (n % factor == 0) {\n                factors.Add(factor);\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return factors;", "        List<long> factors = new List<long>();\n \
    \       long factor = 1;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                factors.Add(factor);\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return factors;", " \
    \       List<long> factors = new List<long>();\n        long factor = 1;\n   \
    \     while (n > 1) {\n            while (n % factor == 0) {\n               \
    \ factors.Add(factor);\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return factors;"]
stop_tokens:
- "\n    }\n"
