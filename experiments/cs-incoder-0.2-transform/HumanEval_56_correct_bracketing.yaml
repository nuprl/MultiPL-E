name: HumanEval_56_correct_bracketing
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return True\
  \ if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"\
  <\"))\n    // (false)\n    // >>> CorrectBracketing((\"<>\"))\n    // (true)\n \
  \   // >>> CorrectBracketing((\"<<><>>\"))\n    // (true)\n    // >>> CorrectBracketing((\"\
  ><<>\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
  <>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"<<><>>\")) == (true));\n\
  \    Debug.Assert(CorrectBracketing((\"<><><<><>><>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  <><><<<><><>><>><<><><<>>>\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  <<<><>>>>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"><<>\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"<\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  <<<<\")) == (false));\n    Debug.Assert(CorrectBracketing((\">\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"<<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  <><><<><>><>><<>\")) == (false));\n    Debug.Assert(CorrectBracketing((\"<><><<><>><>>><>\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        if (brackets == null) return false;\n        List<char> openingBrackets\
    \ = new List<char>();\n        List<char> closingBrackets = new List<char>();\n\
    \        foreach (char c in brackets) {\n            if (c == '<') openingBrackets.Add('<');\n\
    \            else if (c == '>') closingBrackets.Add('>');\n            else return\
    \ false;\n        }\n        if (openingBrackets.Count == 0) return false;\n \
    \       if (closingBrackets.Count == 0) return false;\n        if (openingBrackets.Count\
    \ != closingBrackets.Count) return false;\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Count; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) return false;\n        }\n        return result;", " \
    \       bool result = true;\n        foreach (char c in brackets) {\n        \
    \    if (c == '<') {\n                result = result && CorrectBracketing(brackets.Replace(c.ToString(),\
    \ \">\"));\n            }\n            else if (c == '>') {\n                result\
    \ = result && CorrectBracketing(brackets.Replace(c.ToString(), \"<\"));\n    \
    \        }\n            else {\n                result = result && brackets.Contains(c.ToString());\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         result = result && CorrectBracketing(brackets.Replace(c, '>'));\n  \
    \          }\n            if (c == '>') {\n                result = result &&\
    \ CorrectBracketing(brackets.Replace(c, '<'));\n            }\n        }\n   \
    \     return result;", "        bool result = true;\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                result &= !(brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0);\n            }\n        }\n        return result;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c)\
    \ + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   bool result = true;\n        foreach (char c in brackets) {\n            if\
    \ (c == '<') {\n                for (int i = 0; i < brackets.Length; i++) {\n\
    \                    if (brackets[i] == '>') {\n                        result\
    \ = true;\n                        break;\n                    }\n           \
    \     }\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                bool found = false;\n                for (int i = 1; i < brackets.Length;\
    \ i++) {\n                    if (brackets[i] == '>') {\n                    \
    \    found = true;\n                        break;\n                    }\n  \
    \              }\n                if (!found) {\n                    result =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n        return result;", "        if (brackets == null || brackets.Length\
    \ < 1)\n            return false;\n        bool result = true;\n        foreach\
    \ (char c in brackets) {\n            if (c != '<' && c != '>')\n            \
    \    return false;\n        }\n        return result;", "        bool result =\
    \ true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                result &= !(brackets.IndexOf('>', brackets.IndexOf(c) + 1) <\
    \ 0);\n            }\n        }\n        return result;", "        bool result\
    \ = true;\n        foreach (char c in brackets) {\n            if (c == '<') {\n\
    \                result &= !(brackets.IndexOf('<', brackets.IndexOf(c) + 1) <\
    \ 0);\n            }\n            if (c == '>') {\n                result &= !(brackets.IndexOf('>',\
    \ brackets.IndexOf(c) + 1) < 0);\n            }\n        }\n        return result;",
  "        bool result = true;\n        foreach (char c in brackets) {\n         \
    \   if (c != '<' && c != '>') {\n                result = false;\n           \
    \ }\n        }\n        return result;", "        bool result = true;\n      \
    \  foreach (char c in brackets) {\n            if (c == '<') {\n             \
    \   if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n              \
    \      result = false;\n                    break;\n                }\n      \
    \      }\n        }\n        return result;", "        string openingBrackets\
    \ = \"\";\n        string closingBrackets = \"\";\n        foreach (char c in\
    \ brackets) {\n            if (c == '<') {\n                openingBrackets +=\
    \ c;\n            }\n            else if (c == '>') {\n                closingBrackets\
    \ += c;\n            }\n        }\n        if (openingBrackets.Length != closingBrackets.Length)\
    \ {\n            return false;\n        }\n        bool result = true;\n     \
    \   for (int i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets[i]\
    \ != closingBrackets[i]) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         result &= (string.IsNullOrEmpty(Brackets[c]) ? true : CorrectBracketing(Brackets[c]));\n\
    \            }\n            if (c == '>') {\n                result &= (string.IsNullOrEmpty(Brackets[c])\
    \ ? true : CorrectBracketing(Brackets[c]));\n            }\n        }\n      \
    \  return result;", "        bool result = true;\n        foreach (char c in brackets)\
    \ {\n            if (c != '>') {\n                result = false;\n          \
    \      break;\n            }\n        }\n        return result;", "        bool\
    \ result = true;\n        foreach (char c in brackets) {\n            if (c ==\
    \ '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c, 1) + 1)\
    \ < 0) {\n                    result = false;\n                }\n           \
    \ }\n        }\n        return result;", "        string openingBrackets = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\");\n        string closingBrackets = brackets.Replace(\"\
    <\", \"\").Replace(\">\", \"\");\n        bool result = true;\n        for (int\
    \ i = 0; i < openingBrackets.Length; i++) {\n            if (openingBrackets.Substring(i,\
    \ 1) != closingBrackets.Substring(0, i)) {\n                result = false;\n\
    \                break;\n            }\n        }\n        return result;", " \
    \       bool result = true;\n        foreach (char c in brackets) {\n        \
    \    if (c == '<') {\n                if (brackets.IndexOf('>', brackets.IndexOf(c,\
    \ 1) + 1) < 0) {\n                    result = false;\n                    break;\n\
    \                }\n            }\n            if (c == '>') {\n             \
    \   if (brackets.IndexOf('<', brackets.IndexOf(c, 1) + 1) < 0) {\n           \
    \         result = false;\n                    break;\n                }\n   \
    \         }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         result &= !(brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0);\n \
    \           }\n        }\n        return result;", "        bool result = true;\n\
    \        foreach (char c in brackets) {\n            if (c == '<') {\n       \
    \         if (brackets.IndexOf('>', brackets.IndexOf(c) + 1) < 0) {\n        \
    \            result = false;\n                }\n            }\n        }\n  \
    \      return result;"]
stop_tokens:
- "\n    }\n"
