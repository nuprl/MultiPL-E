name: HumanEval_59_largest_prime_factor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not\
  \ a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n    // >>> LargestPrimeFactor((2048L))\n\
  \    // (2L)\n    public static long LargestPrimeFactor(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
  \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
  \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
  \ == (29L));\n    }\n\n}\n"
completions: ["        long largestPrimeFactor = n;\n        long factor = 2;\n  \
    \      while (factor <= largestPrimeFactor) {\n            if (n % factor == 0)\
    \ {\n                largestPrimeFactor = factor;\n            }\n           \
    \ factor++;\n        }\n        return largestPrimeFactor;", "        long maxFactor\
    \ = 1;\n        long factor = 2;\n        while (factor < n) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long maxFactorPrime = 1;\n        long maxFactorPrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrime = 3;\n        long maxFactorPrimePrimePrimePrime\
    \ = 4;\n        long maxFactorPrimePrimePrimePrimePrime = 5;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 6;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 7;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 10;\n    \
    \    long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 11;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 13;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 15;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 16;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 17;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 18;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 19;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 20;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 21;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 22;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 23;\n\
    \        long maxFactorPrimePrimePrimePrimePrime", "        long maxPrime = 2;\n\
    \        long maxFactor = 1;\n        while (n > 1) {\n            long testPrime\
    \ = 2;\n            while (testPrime * testPrime <= n) {\n                if (n\
    \ % testPrime == 0) {\n                    break;\n                }\n       \
    \         testPrime++;\n            }\n            if (testPrime > maxPrime) {\n\
    \                maxPrime = testPrime;\n                maxFactor = n;\n     \
    \       }\n            n /= testPrime;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long currentFactor = 2;\n\
    \        while (currentFactor <= n) {\n            while (n % currentFactor ==\
    \ 0) {\n                maxFactor = currentFactor;\n                n /= currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxPrime = 2;\n        long maxFactor = 2;\n        long currentPrime\
    \ = 2;\n        long currentFactor = 2;\n        while (n > 1) {\n           \
    \ while (n % currentPrime == 0) {\n                currentPrime++;\n         \
    \   }\n            while (n % currentFactor == 0) {\n                currentFactor++;\n\
    \            }\n            if (currentPrime > maxPrime) {\n                maxPrime\
    \ = currentPrime;\n            }\n            if (currentFactor > maxFactor) {\n\
    \                maxFactor = currentFactor;\n            }\n            n /= currentPrime;\n\
    \            n /= currentFactor;\n        }\n        return maxPrime;", "    \
    \    long maxFactor = n;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n     \
    \   long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePri", "        long maxPrimeFactor\
    \ = n;\n        long maxPrimeFactor2 = n;\n        long maxPrimeFactor3 = n;\n\
    \        long maxPrimeFactor4 = n;\n        long maxPrimeFactor5 = n;\n      \
    \  long maxPrimeFactor6 = n;\n        long maxPrimeFactor7 = n;\n        long\
    \ maxPrimeFactor8 = n;\n        long maxPrimeFactor9 = n;\n        long maxPrimeFactor10\
    \ = n;\n        long maxPrimeFactor11 = n;\n        long maxPrimeFactor12 = n;\n\
    \        long maxPrimeFactor13 = n;\n        long maxPrimeFactor14 = n;\n    \
    \    long maxPrimeFactor15 = n;\n        long maxPrimeFactor16 = n;\n        long\
    \ maxPrimeFactor17 = n;\n        long maxPrimeFactor18 = n;\n        long maxPrimeFactor19\
    \ = n;\n        long maxPrimeFactor20 = n;\n        long maxPrimeFactor21 = n;\n\
    \        long maxPrimeFactor22 = n;\n        long maxPrimeFactor23 = n;\n    \
    \    long maxPrimeFactor24 = n;\n        long maxPrimeFactor25 = n;\n        long\
    \ maxPrimeFactor26 = n;\n        long maxPrimeFactor27 = n;\n        long maxPrimeFactor28\
    \ = n;\n        long maxPrimeFactor29 = n;\n        long maxPrimeFactor30 = n;\n\
    \        long maxPrimeFactor31 = n;\n        long maxPrimeFactor32 = n;\n    \
    \    long maxPrimeFactor33 = n;\n        long maxPrimeFactor34 = n;\n        long\
    \ maxPrimeFactor35 = n;\n        long maxPrimeFactor36 = n;\n        long maxPrimeFactor37\
    \ = n;\n        long maxPrimeFactor38 = n;\n        long maxPrimeFactor39 = n;\n\
    \        long maxPrimeFactor40 = n;\n        long maxPrimeFactor41 = n;\n    \
    \    long maxPrimeFactor42 = n;\n        long maxPrimeFactor43 = n;\n        long\
    \ maxPrimeFactor44 = n;\n        long maxPrimeFactor45 = n;\n        long maxPrimeFactor46\
    \ = n;\n        long maxPrimeFactor47 = n;\n        long maxPrimeFactor48 = n;\n\
    \        long maxPrimeFactor49 = n;\n        long maxPrimeFactor50 = n;\n    \
    \    long maxPrimeFactor51 = n;\n        long maxPrimeFactor52 = n;\n        long\
    \ maxPri", "        long maxFactor = 1;\n        long factor = 2;\n        while\
    \ (n > 1) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = n / factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return maxFactor;", "      \
    \  long maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            while (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor = largestPrimeFactor / i;\n    \
    \        i++;\n        }\n        return largestPrimeFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = factor;\n        \
    \    } else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n      \
    \  while (factor < maxFactor) {\n            if (n % factor == 0) {\n        \
    \        maxFactor = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;", "        long maxFactor = 0;\n        long factor\
    \ = 2;\n        while (factor <= n) {\n            while (n % factor == 0) {\n\
    \                maxFactor = factor;\n                n = n / factor;\n      \
    \      }\n            factor++;\n        }\n        return maxFactor;", "    \
    \    long maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            while (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ < largestPrimeFactor) {\n            while (n % factor == 0) {\n           \
    \     largestPrimeFactor = factor;\n            }\n            factor++;\n   \
    \     }\n        return largestPrimeFactor;", "        long maxFactor = n;\n \
    \       long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n      \
    \  while (factor < maxFactor) {\n            if (n % factor == 0) {\n        \
    \        maxFactor = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;", "        long maxFactor = 1;\n        long factor\
    \ = 2;\n        while (factor < n) {\n            if (n % factor == 0) {\n   \
    \             maxFactor = factor;\n            }\n            factor++;\n    \
    \    }\n        return maxFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor < maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long factor = 2;\n        while (factor < n) {\n            if (n % factor ==\
    \ 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = n / factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime\
    \ = 3;\n        long maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime\
    \ = 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 19;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 21;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 22;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 25;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 27;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 28;\n   \
    \     long maxFactor", "        long largestPrimeFactor = n;\n        long currentPrime\
    \ = 2;\n        while (currentPrime < largestPrimeFactor) {\n            if (n\
    \ % currentPrime == 0) {\n                largestPrimeFactor = currentPrime;\n\
    \            }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime\
    \ = 3;\n        long maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime\
    \ = 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 16;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 18;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 19;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 20;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 21;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 22;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 23;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 24;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 25;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrime = 26;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 27;\n        long maxFactorPrimePrimePrime", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor < maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = 1;\n        long currentFactor = 2;\n        while (n > 1) {\n           \
    \ if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \            }\n            currentFactor++;\n            n /= currentFactor;\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long factor = 2;\n        while (factor <= largestPrimeFactor) {\n  \
    \          while (n % factor == 0) {\n                largestPrimeFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxPrime = 2;\n        long maxFactor = 1;\n        long prime = 2;\n\
    \        long factor = 2;\n        while (n > 1) {\n            if (n % prime\
    \ == 0) {\n                factor++;\n            }\n            while (n % prime\
    \ == 0) {\n                prime++;\n            }\n            if (factor > maxFactor)\
    \ {\n                maxFactor = factor;\n                maxPrime = prime;\n\
    \            }\n            n /= prime;\n        }\n        return maxPrime;",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (currentPrime < n) {\n            while (n % currentPrime == 0) {\n        \
    \        largestPrimeFactor = currentPrime;\n                n /= currentPrime;\n\
    \            }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long largestPrimeFactor =\
    \ n;\n        long largestPrimeFactorFactor = 1;\n        long largestPrimeFactorFactor2\
    \ = 2;\n        long largestPrimeFactorFactor3 = 3;\n        long largestPrimeFactorFactor4\
    \ = 4;\n        long largestPrimeFactorFactor5 = 5;\n        long largestPrimeFactorFactor6\
    \ = 6;\n        long largestPrimeFactorFactor7 = 7;\n        long largestPrimeFactorFactor8\
    \ = 8;\n        long largestPrimeFactorFactor9 = 9;\n        long largestPrimeFactorFactor10\
    \ = 10;\n        long largestPrimeFactorFactor11 = 11;\n        long largestPrimeFactorFactor12\
    \ = 12;\n        long largestPrimeFactorFactor13 = 13;\n        long largestPrimeFactorFactor14\
    \ = 14;\n        long largestPrimeFactorFactor15 = 15;\n        long largestPrimeFactorFactor16\
    \ = 16;\n        long largestPrimeFactorFactor17 = 17;\n        long largestPrimeFactorFactor18\
    \ = 18;\n        long largestPrimeFactorFactor19 = 19;\n        long largestPrimeFactorFactor20\
    \ = 20;\n        long largestPrimeFactorFactor21 = 21;\n        long largestPrimeFactorFactor22\
    \ = 22;\n        long largestPrimeFactorFactor23 = 23;\n        long largestPrimeFactorFactor24\
    \ = 24;\n        long largestPrimeFactorFactor25 = 25;\n        long largestPrimeFactorFactor26\
    \ = 26;\n        long largestPrimeFactorFactor27 = 27;\n        long largestPrimeFactorFactor28\
    \ = 28;\n        long largestPrimeFactorFactor29 = 29;\n        long largestPrimeFactorFactor30\
    \ = 30;\n        long largestPrimeFactorFactor31 = 31;\n        long largestPrimeFactorFactor32\
    \ = 32;\n        long largestPrimeFactorFactor33 = 33;\n        long largestPrimeFactorFactor34\
    \ = 34;\n        long largestPrimeFactorFactor35 = 35;\n        long largestPrimeFactorFactor36\
    \ = 36;\n        long largestPrimeFactorFactor37 = 37;\n        long largestPrimeFactorFactor38\
    \ = 38;\n        long largestPrimeFactorFactor39 = 39;\n        long largestPrimeFactorFactor40\
    \ = 40;\n        long largestPrimeFactorFactor41 = 41;\n        long largestPrimeFactorFactor42\
    \ = 42;\n        long largest", "        long maxFactor = 1;\n        long maxFactorPrime\
    \ = 2;\n        long currentFactor = 2;\n        while (n > 1) {\n           \
    \ while (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \                maxFactorPrime = currentFactor;\n                currentFactor++;\n\
    \            }\n            n /= currentFactor;\n            currentFactor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long maxFactorPrime = 2;\n        while (maxFactorPrime < maxFactor) {\n   \
    \         long testFactor = maxFactorPrime + 1;\n            while (testFactor\
    \ < maxFactor) {\n                if (n % testFactor == 0) {\n               \
    \     break;\n                }\n                testFactor++;\n            }\n\
    \            if (testFactor > maxFactor) {\n                maxFactor = testFactor;\n\
    \                maxFactorPrime = testFactor;\n            }\n        }\n    \
    \    return maxFactor;", "        long largestPrimeFactor = n;\n        long currentPrime\
    \ = 2;\n        while (currentPrime < largestPrimeFactor) {\n            bool\
    \ isPrime = true;\n            long currentDivisor = 2;\n            while (currentDivisor\
    \ < largestPrimeFactor) {\n                if (n % currentDivisor == 0) {\n  \
    \                  isPrime = false;\n                    break;\n            \
    \    }\n                currentDivisor++;\n            }\n            if (isPrime)\
    \ {\n                largestPrimeFactor = currentPrime;\n            }\n     \
    \       currentPrime++;\n        }\n        return largestPrimeFactor;", "   \
    \     long maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n      \
    \  while (factor < maxFactor) {\n            if (n % factor == 0) {\n        \
    \        maxFactor = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;", "        long largestPrimeFactor = n;\n        long\
    \ factor = 2;\n        while (factor < n) {\n            if (n % factor == 0)\
    \ {\n                largestPrimeFactor = factor;\n                break;\n  \
    \          }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxPrime = 2;\n        long maxFactor = 1;\n        long currentPrime\
    \ = 2;\n        long currentFactor = 1;\n        while (n > 1) {\n           \
    \ while (n % currentPrime == 0) {\n                currentPrime++;\n         \
    \   }\n            while (n % currentFactor == 0) {\n                currentFactor++;\n\
    \            }\n            if (currentPrime > maxPrime) {\n                maxPrime\
    \ = currentPrime;\n            }\n            if (currentFactor > maxFactor) {\n\
    \                maxFactor = currentFactor;\n            }\n            n /= currentPrime;\n\
    \            n /= currentFactor;\n        }\n        return maxPrime;", "    \
    \    long maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = n / factor;\n\
    \            } else {\n                factor++;\n            }\n        }\n \
    \       return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = n / factor;\n            } else {\n         \
    \       factor++;\n            }\n        }\n        return maxFactor;", "   \
    \     long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \                break;\n            }\n            factor++;\n        }\n   \
    \     return maxFactor;", "        long maxFactor = 1;\n        long maxFactorPrime\
    \ = 1;\n        long maxFactorPrimePrime = 1;\n        long maxFactorPrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrime = 1;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 1;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrime = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n  \
    \      long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 1;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 1;\n        long maxFactorPrimePrimePrimePrimePrimePrime", "        long maxFactor\
    \ = 1;\n        long factor = 2;\n        while (factor <= n / 2) {\n        \
    \    if (n % factor == 0) {\n                maxFactor = factor;\n           \
    \     break;\n            }\n            factor++;\n        }\n        return\
    \ maxFactor;", "        long maxPrime = 2;\n        long maxFactor = 1;\n    \
    \    long currentPrime = 2;\n        long currentFactor = 1;\n        while (n\
    \ > 1) {\n            currentPrime = 2;\n            currentFactor = 1;\n    \
    \        while (n > 1) {\n                if (n % currentPrime == 0) {\n     \
    \               currentFactor++;\n                }\n                currentPrime++;\n\
    \                n--;\n            }\n            if (currentFactor > maxFactor)\
    \ {\n                maxFactor = currentFactor;\n                maxPrime = currentPrime;\n\
    \            }\n        }\n        return maxPrime;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = n / factor;\n    \
    \        } else {\n                factor++;\n            }\n        }\n     \
    \   return maxFactor;", "        long maxPrime = 1;\n        long maxFactor =\
    \ 2;\n        while (n > 1) {\n            long testPrime = TestPrime(n);\n  \
    \          if (testPrime == 1) {\n                maxPrime = n;\n            \
    \    maxFactor = 1;\n                break;\n            }\n            if (testPrime\
    \ > maxPrime) {\n                maxPrime = testPrime;\n                maxFactor\
    \ = n;\n            }\n            n = testPrime;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long largestPrimeFactor =\
    \ 1;\n        long currentPrime = 2;\n        while (n > 1) {\n            if\
    \ (n % currentPrime == 0) {\n                largestPrimeFactor = currentPrime;\n\
    \            }\n            currentPrime++;\n            n--;\n        }\n   \
    \     return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor < maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = n / factor;\n            } else {\n   \
    \             factor++;\n            }\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (n > 1) {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n                n /= currentPrime;\n            }\n       \
    \     currentPrime++;\n        }\n        return largestPrimeFactor;", "     \
    \   long largestPrimeFactor = n;\n        long largestPrimeFactor2 = n;\n    \
    \    long largestPrimeFactor3 = n;\n        long largestPrimeFactor4 = n;\n  \
    \      long largestPrimeFactor5 = n;\n        long largestPrimeFactor6 = n;\n\
    \        long largestPrimeFactor7 = n;\n        long largestPrimeFactor8 = n;\n\
    \        long largestPrimeFactor9 = n;\n        long largestPrimeFactor10 = n;\n\
    \        long largestPrimeFactor11 = n;\n        long largestPrimeFactor12 = n;\n\
    \        long largestPrimeFactor13 = n;\n        long largestPrimeFactor14 = n;\n\
    \        long largestPrimeFactor15 = n;\n        long largestPrimeFactor16 = n;\n\
    \        long largestPrimeFactor17 = n;\n        long largestPrimeFactor18 = n;\n\
    \        long largestPrimeFactor19 = n;\n        long largestPrimeFactor20 = n;\n\
    \        long largestPrimeFactor21 = n;\n        long largestPrimeFactor22 = n;\n\
    \        long largestPrimeFactor23 = n;\n        long largestPrimeFactor24 = n;\n\
    \        long largestPrimeFactor25 = n;\n        long largestPrimeFactor26 = n;\n\
    \        long largestPrimeFactor27 = n;\n        long largestPrimeFactor28 = n;\n\
    \        long largestPrimeFactor29 = n;\n        long largestPrimeFactor30 = n;\n\
    \        long largestPrimeFactor31 = n;\n        long largestPrimeFactor32 = n;\n\
    \        long largestPrimeFactor33 = n;\n        long largestPrimeFactor34 = n;\n\
    \        long largestPrimeFactor35 = n;\n        long largestPrimeFactor36 = n;\n\
    \        long largestPrimeFactor37 = n;\n        long largestPrimeFactor38 = n;\n\
    \        long largestPrimeFactor39 = n;\n        long largestPrimeFactor40 = n;\n\
    \        long largestPrimeFactor41 = n;\n        long largestPrimeFactor42 = n;\n\
    \        long largestPrimeFactor43 = n;\n        long largestPrimeFactor44 = n;\n\
    \        long largestPrimeFactor45 = n;\n        long largestPrimeFactor46 = n;\n\
    \        long largestPrimeFactor47 = n;\n        long largestPrimeFactor", " \
    \       long maxPrime = 2;\n        long maxFactor = 2;\n        long currentPrime\
    \ = 2;\n        long currentFactor = 2;\n        long currentFactorIsPrime = true;\n\
    \        long currentFactorIsPrime2 = true;\n        long currentFactorIsPrime3\
    \ = true;\n        long currentFactorIsPrime4 = true;\n        long currentFactorIsPrime5\
    \ = true;\n        long currentFactorIsPrime6 = true;\n        long currentFactorIsPrime7\
    \ = true;\n        long currentFactorIsPrime8 = true;\n        long currentFactorIsPrime9\
    \ = true;\n        long currentFactorIsPrime10 = true;\n        long currentFactorIsPrime11\
    \ = true;\n        long currentFactorIsPrime12 = true;\n        long currentFactorIsPrime13\
    \ = true;\n        long currentFactorIsPrime14 = true;\n        long currentFactorIsPrime15\
    \ = true;\n        long currentFactorIsPrime16 = true;\n        long currentFactorIsPrime17\
    \ = true;\n        long currentFactorIsPrime18 = true;\n        long currentFactorIsPrime19\
    \ = true;\n        long currentFactorIsPrime20 = true;\n        long currentFactorIsPrime21\
    \ = true;\n        long currentFactorIsPrime22 = true;\n        long currentFactorIsPrime23\
    \ = true;\n        long currentFactorIsPrime24 = true;\n        long currentFactorIsPrime25\
    \ = true;\n        long currentFactorIsPrime26 = true;\n        long currentFactorIsPrime27\
    \ = true;\n        long currentFactorIsPrime28 = true;\n        long currentFactorIsPrime29\
    \ = true;\n        long currentFactorIsPrime30 = true;\n        long currentFactorIsPrime31\
    \ = true;\n        long currentFactorIsPrime32 = true;\n        long currentFactorIsPrime33\
    \ = true;\n        long currentFactorIsPrime34 = true;\n        long currentFactorIsPrime35\
    \ = true;\n        long currentFactorIsPrime36 = true;\n        long currentFactorIsPrime37\
    \ = true;\n        long currentFactorIsPrime38 = true;\n        long currentFactorIsPrime39\
    \ = true;\n        long currentFactorIsPrime40 = true;\n        long currentFactorIsPrime41\
    \ = true;\n        long currentFactorIsPrime42 = true;\n        long currentFactorIsPrime43\
    \ = true;\n        long currentFactorIsPrime44 = true;\n        long currentFactorIsPrime45\
    \ = true;\n        long currentFactorIsPrime46 = true;\n        long currentFactorIsPrime47\
    \ = true;\n        long currentFactorIsPrime48 = true;\n        ", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            while (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long largestPrimeFactor2 = n;\n \
    \       long largestPrimeFactor3 = n;\n        long largestPrimeFactor4 = n;\n\
    \        long largestPrimeFactor5 = n;\n        long largestPrimeFactor6 = n;\n\
    \        long largestPrimeFactor7 = n;\n        long largestPrimeFactor8 = n;\n\
    \        long largestPrimeFactor9 = n;\n        long largestPrimeFactor10 = n;\n\
    \        long largestPrimeFactor11 = n;\n        long largestPrimeFactor12 = n;\n\
    \        long largestPrimeFactor13 = n;\n        long largestPrimeFactor14 = n;\n\
    \        long largestPrimeFactor15 = n;\n        long largestPrimeFactor16 = n;\n\
    \        long largestPrimeFactor17 = n;\n        long largestPrimeFactor18 = n;\n\
    \        long largestPrimeFactor19 = n;\n        long largestPrimeFactor20 = n;\n\
    \        long largestPrimeFactor21 = n;\n        long largestPrimeFactor22 = n;\n\
    \        long largestPrimeFactor23 = n;\n        long largestPrimeFactor24 = n;\n\
    \        long largestPrimeFactor25 = n;\n        long largestPrimeFactor26 = n;\n\
    \        long largestPrimeFactor27 = n;\n        long largestPrimeFactor28 = n;\n\
    \        long largestPrimeFactor29 = n;\n        long largestPrimeFactor30 = n;\n\
    \        long largestPrimeFactor31 = n;\n        long largestPrimeFactor32 = n;\n\
    \        long largestPrimeFactor33 = n;\n        long largestPrimeFactor34 = n;\n\
    \        long largestPrimeFactor35 = n;\n        long largestPrimeFactor36 = n;\n\
    \        long largestPrimeFactor37 = n;\n        long largestPrimeFactor38 = n;\n\
    \        long largestPrimeFactor39 = n;\n        long largestPrimeFactor40 = n;\n\
    \        long largestPrimeFactor41 = n;\n        long largestPrimeFactor42 = n;\n\
    \        long largestPrimeFactor43 = n;\n        long largestPrimeFactor44 = n;\n\
    \        long largestPrimeFactor45 = n;\n        long largestPrimeFactor46 = n;\n\
    \        long largestPrimeFactor47 = n;\n        long largestPrimeFactor", " \
    \       long maxFactor = 1;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime\
    \ = 3;\n        long maxFactorPrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime\
    \ = 5;\n        long maxFactorPrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 10;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 13;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 14;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 16;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 17;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 18;\n \
    \       long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 19;\n  \
    \      long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 20;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 21;\n    \
    \    long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 22;\n     \
    \   long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 23;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 24;\n       \
    \ long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 25;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 26;\n        long maxFactorPrime", "        long maxFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= maxFactor) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = n / factor;\n            } else {\n   \
    \             factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = 1;\n   \
    \     long factor = 2;\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor < maxFactor) {\n            while (n\
    \ % factor == 0) {\n                n /= factor;\n            }\n            if\
    \ (n == 1) {\n                break;\n            }\n            maxFactor = factor;\n\
    \            factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       while (n % factor == 0) {\n                maxFactor = factor;\n     \
    \       }\n            factor++;\n        }\n        return maxFactor;", "   \
    \     long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            long testFactor = factor;\n            while (testFactor\
    \ <= maxFactor) {\n                if (n % testFactor == 0) {\n              \
    \      break;\n                }\n                testFactor++;\n            }\n\
    \            if (testFactor <= maxFactor) {\n                maxFactor = testFactor;\n\
    \                factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long maxFactorPrime = 2;\n        long maxFactorPrimePrime = 2;\n      \
    \  long maxFactorPrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n     \
    \   long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePri", "        long maxFactor\
    \ = 1;\n        long factor = 2;\n        while (factor < n) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        long testFactor = factor * factor;\n            if (testFactor <= maxFactor)\
    \ {\n                maxFactor = testFactor;\n                factor++;\n    \
    \        }\n        }\n        return maxFactor;", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor <= maxFactor) {\n           \
    \ if (n % factor == 0) {\n                maxFactor = n / factor;\n          \
    \  } else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long largestPrimeFactor = n;\n        long largestPrimeFactor2\
    \ = n;\n        long largestPrimeFactor3 = n;\n        long largestPrimeFactor4\
    \ = n;\n        long largestPrimeFactor5 = n;\n        long largestPrimeFactor6\
    \ = n;\n        long largestPrimeFactor7 = n;\n        long largestPrimeFactor8\
    \ = n;\n        long largestPrimeFactor9 = n;\n        long largestPrimeFactor10\
    \ = n;\n        long largestPrimeFactor11 = n;\n        long largestPrimeFactor12\
    \ = n;\n        long largestPrimeFactor13 = n;\n        long largestPrimeFactor14\
    \ = n;\n        long largestPrimeFactor15 = n;\n        long largestPrimeFactor16\
    \ = n;\n        long largestPrimeFactor17 = n;\n        long largestPrimeFactor18\
    \ = n;\n        long largestPrimeFactor19 = n;\n        long largestPrimeFactor20\
    \ = n;\n        long largestPrimeFactor21 = n;\n        long largestPrimeFactor22\
    \ = n;\n        long largestPrimeFactor23 = n;\n        long largestPrimeFactor24\
    \ = n;\n        long largestPrimeFactor25 = n;\n        long largestPrimeFactor26\
    \ = n;\n        long largestPrimeFactor27 = n;\n        long largestPrimeFactor28\
    \ = n;\n        long largestPrimeFactor29 = n;\n        long largestPrimeFactor30\
    \ = n;\n        long largestPrimeFactor31 = n;\n        long largestPrimeFactor32\
    \ = n;\n        long largestPrimeFactor33 = n;\n        long largestPrimeFactor34\
    \ = n;\n        long largestPrimeFactor35 = n;\n        long largestPrimeFactor36\
    \ = n;\n        long largestPrimeFactor37 = n;\n        long largestPrimeFactor38\
    \ = n;\n        long largestPrimeFactor39 = n;\n        long largestPrimeFactor40\
    \ = n;\n        long largestPrimeFactor41 = n;\n        long largestPrimeFactor42\
    \ = n;\n        long largestPrimeFactor43 = n;\n        long largestPrimeFactor44\
    \ = n;\n        long largestPrimeFactor45 = n;\n        long largestPrimeFactor46\
    \ = n;\n        long largestPrimeFactor47 = n;\n        long largestPrimeFactor",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long factor = 2;\n        while (factor\
    \ <= largestPrimeFactor) {\n            if (n % factor == 0) {\n             \
    \   largestPrimeFactor = factor;\n            }\n            factor++;\n     \
    \   }\n        return largestPrimeFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor < maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            }\n     \
    \       factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return maxFactor;", "      \
    \  long maxPrime = 2;\n        long maxFactor = 1;\n        long factor = 2;\n\
    \        while (factor <= n) {\n            if (n % factor == 0) {\n         \
    \       maxFactor = factor;\n                maxPrime = factor;\n            }\n\
    \            factor++;\n        }\n        return maxPrime;", "        long maxFactor\
    \ = 1;\n        long currentFactor = 2;\n        while (currentFactor <= n) {\n\
    \            if (n % currentFactor == 0) {\n                maxFactor = currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = n / factor;\n    \
    \        } else {\n                factor++;\n            }\n        }\n     \
    \   return maxFactor;", "        long maxPrime = 1;\n        long maxFactor =\
    \ 2;\n        long prime = 2;\n        while (n > 1) {\n            if (n % prime\
    \ == 0) {\n                maxFactor = prime;\n            }\n            while\
    \ (n % prime == 0) {\n                maxPrime = prime;\n                n /=\
    \ prime;\n            }\n            prime++;\n        }\n        return maxPrime;",
  "        long maxFactor = n;\n        long maxFactorPrime = 2;\n        while (maxFactorPrime\
    \ < maxFactor) {\n            long testFactor = maxFactorPrime;\n            long\
    \ testFactorPrime = 2;\n            while (testFactorPrime < testFactor) {\n \
    \               if (n % testFactor == 0) {\n                    maxFactor = testFactor;\n\
    \                    break;\n                }\n                testFactorPrime++;\n\
    \            }\n            maxFactorPrime++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor <= largestPrimeFactor) {\n            long testPrimeFactor = largestPrimeFactor;\n\
    \            while (testPrimeFactor % primeFactor == 0) {\n                testPrimeFactor++;\n\
    \            }\n            if (testPrimeFactor > largestPrimeFactor) {\n    \
    \            largestPrimeFactor = testPrimeFactor;\n            }\n          \
    \  primeFactor++;\n        }\n        return largestPrimeFactor;", "        long\
    \ largestPrimeFactor = n;\n        long primeFactor = 2;\n        while (primeFactor\
    \ <= largestPrimeFactor) {\n            long testPrimeFactor = largestPrimeFactor;\n\
    \            while (testPrimeFactor % primeFactor == 0) {\n                testPrimeFactor++;\n\
    \            }\n            if (testPrimeFactor > largestPrimeFactor) {\n    \
    \            largestPrimeFactor = testPrimeFactor;\n            }\n          \
    \  primeFactor++;\n        }\n        return largestPrimeFactor;", "        long\
    \ largestPrimeFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ largestPrimeFactor) {\n            while (n % factor == 0) {\n             \
    \   largestPrimeFactor = factor;\n            }\n            factor++;\n     \
    \   }\n        return largestPrimeFactor;", "        long maxFactor = 1;\n   \
    \     long factor = 2;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                maxFactor = factor;\n                n /= factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor = largestPrimeFactor / i;\n    \
    \        i++;\n        }\n        return largestPrimeFactor;", "        long largestPrimeFactor\
    \ = 1;\n        long prime = 2;\n        while (prime <= n / 2) {\n          \
    \  if (n % prime == 0) {\n                largestPrimeFactor = prime;\n      \
    \      }\n            prime += 2;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \                break;\n            }\n            factor++;\n        }\n   \
    \     return maxFactor;", "        long maxFactor = n;\n        long factor =\
    \ 2;\n        while (factor < maxFactor) {\n            if (n % factor == 0) {\n\
    \                maxFactor = factor;\n            }\n            factor++;\n \
    \       }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long factor = 2;\n        while (factor <= largestPrimeFactor) {\n  \
    \          if (n % factor == 0) {\n                largestPrimeFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \                break;\n            }\n            factor++;\n        }\n   \
    \     return maxFactor;", "        long maxFactor = n;\n        long factor =\
    \ 2;\n        while (factor < maxFactor) {\n            if (n % factor == 0) {\n\
    \                maxFactor = factor;\n            }\n            factor++;\n \
    \       }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            if (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n            }\n            currentPrime++;\n        }\n   \
    \     return largestPrimeFactor;", "        long maxFactor = n;\n        long\
    \ maxFactor2 = n;\n        long maxFactor3 = n;\n        long maxFactor4 = n;\n\
    \        long maxFactor5 = n;\n        long maxFactor6 = n;\n        long maxFactor7\
    \ = n;\n        long maxFactor8 = n;\n        long maxFactor9 = n;\n        long\
    \ maxFactor10 = n;\n        long maxFactor11 = n;\n        long maxFactor12 =\
    \ n;\n        long maxFactor13 = n;\n        long maxFactor14 = n;\n        long\
    \ maxFactor15 = n;\n        long maxFactor16 = n;\n        long maxFactor17 =\
    \ n;\n        long maxFactor18 = n;\n        long maxFactor19 = n;\n        long\
    \ maxFactor20 = n;\n        long maxFactor21 = n;\n        long maxFactor22 =\
    \ n;\n        long maxFactor23 = n;\n        long maxFactor24 = n;\n        long\
    \ maxFactor25 = n;\n        long maxFactor26 = n;\n        long maxFactor27 =\
    \ n;\n        long maxFactor28 = n;\n        long maxFactor29 = n;\n        long\
    \ maxFactor30 = n;\n        long maxFactor31 = n;\n        long maxFactor32 =\
    \ n;\n        long maxFactor33 = n;\n        long maxFactor34 = n;\n        long\
    \ maxFactor35 = n;\n        long maxFactor36 = n;\n        long maxFactor37 =\
    \ n;\n        long maxFactor38 = n;\n        long maxFactor39 = n;\n        long\
    \ maxFactor40 = n;\n        long maxFactor41 = n;\n        long maxFactor42 =\
    \ n;\n        long maxFactor43 = n;\n        long maxFactor44 = n;\n        long\
    \ maxFactor45 = n;\n        long maxFactor46 = n;\n        long maxFactor47 =\
    \ n;\n        long maxFactor48 = n;\n        long maxFactor49 = n;\n        long\
    \ maxFactor50 = n;\n        long maxFactor51 = n;\n        long maxFactor52 =\
    \ n;\n        long maxFactor53 = n;\n        long maxFactor54 = n;\n        long\
    \ maxFactor55 = n;\n        long maxFactor56 = n;\n        long maxFactor57 =\
    \ n;\n        long maxFactor58 = n;\n        long maxFactor59 = n;\n        long\
    \ maxFactor60 = n;\n        long maxFactor61 = n;\n        long maxFactor62 =\
    \ n;\n        long maxFactor63 = n;\n        long maxFactor64 = n;\n        long\
    \ maxFactor65 = n;\n        long maxFactor", "        long maxFactor = n;\n  \
    \      long maxFactorPrime = 2;\n        long factor = 2;\n        while (factor\
    \ <= maxFactor) {\n            if (n % factor == 0) {\n                while (n\
    \ % factor == 0) {\n                    n /= factor;\n                }\n    \
    \            if (n > maxFactor) {\n                    maxFactor = n;\n      \
    \              maxFactorPrime = factor;\n                }\n            }\n  \
    \          factor++;\n        }\n        return maxFactorPrime;", "        long\
    \ largestPrimeFactor = n;\n        long largestPrimeFactor2 = n;\n        long\
    \ largestPrimeFactor3 = n;\n        long largestPrimeFactor4 = n;\n        long\
    \ largestPrimeFactor5 = n;\n        long largestPrimeFactor6 = n;\n        long\
    \ largestPrimeFactor7 = n;\n        long largestPrimeFactor8 = n;\n        long\
    \ largestPrimeFactor9 = n;\n        long largestPrimeFactor10 = n;\n        long\
    \ largestPrimeFactor11 = n;\n        long largestPrimeFactor12 = n;\n        long\
    \ largestPrimeFactor13 = n;\n        long largestPrimeFactor14 = n;\n        long\
    \ largestPrimeFactor15 = n;\n        long largestPrimeFactor16 = n;\n        long\
    \ largestPrimeFactor17 = n;\n        long largestPrimeFactor18 = n;\n        long\
    \ largestPrimeFactor19 = n;\n        long largestPrimeFactor20 = n;\n        long\
    \ largestPrimeFactor21 = n;\n        long largestPrimeFactor22 = n;\n        long\
    \ largestPrimeFactor23 = n;\n        long largestPrimeFactor24 = n;\n        long\
    \ largestPrimeFactor25 = n;\n        long largestPrimeFactor26 = n;\n        long\
    \ largestPrimeFactor27 = n;\n        long largestPrimeFactor28 = n;\n        long\
    \ largestPrimeFactor29 = n;\n        long largestPrimeFactor30 = n;\n        long\
    \ largestPrimeFactor31 = n;\n        long largestPrimeFactor32 = n;\n        long\
    \ largestPrimeFactor33 = n;\n        long largestPrimeFactor34 = n;\n        long\
    \ largestPrimeFactor35 = n;\n        long largestPrimeFactor36 = n;\n        long\
    \ largestPrimeFactor37 = n;\n        long largestPrimeFactor38 = n;\n        long\
    \ largestPrimeFactor39 = n;\n        long largestPrimeFactor40 = n;\n        long\
    \ largestPrimeFactor41 = n;\n        long largestPrimeFactor42 = n;\n        long\
    \ largestPrimeFactor43 = n;\n        long largestPrimeFactor44 = n;\n        long\
    \ largestPrimeFactor45 = n;\n        long largestPrimeFactor46 = n;\n        long\
    \ largestPrimeFactor47 = n;\n        long largestPrimeFactor", "        long largestPrimeFactor\
    \ = n;\n        long currentPrime = 2;\n        while (currentPrime < largestPrimeFactor)\
    \ {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n            }\n            currentPrime++;\n        }\n   \
    \     return largestPrimeFactor;", "        long maxFactor = 1;\n        long\
    \ factor = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n\
    \                maxFactor = factor;\n                n /= factor;\n         \
    \   }\n            factor++;\n        }\n        return maxFactor;", "       \
    \ long maxFactor = 1;\n        long factor = 2;\n        while (factor < n) {\n\
    \            if (n % factor == 0) {\n                maxFactor = factor;\n   \
    \         }\n            factor++;\n        }\n        return maxFactor;", " \
    \       long largestPrimeFactor = n;\n        long currentPrime = 2;\n       \
    \ while (currentPrime < largestPrimeFactor) {\n            if (n % currentPrime\
    \ == 0) {\n                largestPrimeFactor = currentPrime;\n            }\n\
    \            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 2;\n        while (maxFactorPrime\
    \ < maxFactor) {\n            long nextFactor = maxFactorPrime + 1;\n        \
    \    while (nextFactor < maxFactor) {\n                if (n % nextFactor == 0)\
    \ {\n                    maxFactor = nextFactor;\n                    break;\n\
    \                }\n                nextFactor++;\n            }\n           \
    \ maxFactorPrime = nextFactor;\n        }\n        return maxFactor;", "     \
    \   long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor <= largestPrimeFactor) {\n            long testPrimeFactor = largestPrimeFactor;\n\
    \            while (testPrimeFactor % primeFactor == 0) {\n                testPrimeFactor++;\n\
    \            }\n            if (testPrimeFactor > largestPrimeFactor) {\n    \
    \            largestPrimeFactor = testPrimeFactor;\n            }\n          \
    \  primeFactor++;\n        }\n        return largestPrimeFactor;", "        long\
    \ maxFactor = 1;\n        long maxFactorPrime = 1;\n        long factor = 2;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    maxFactor = factor;\n                maxFactorPrime = factor;\n         \
    \       factor++;\n            }\n            n--;\n        }\n        return\
    \ maxFactorPrime;", "        long maxFactor = 1;\n        long factor = 2;\n \
    \       while (factor < n) {\n            if (n % factor == 0) {\n           \
    \     maxFactor = factor;\n            }\n            factor++;\n        }\n \
    \       return maxFactor;", "        long largestPrimeFactor = n;\n        long\
    \ factor = 2;\n        while (factor <= largestPrimeFactor) {\n            while\
    \ (n % factor == 0) {\n                largestPrimeFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor < maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = factor;\n            }\n     \
    \       factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        while (n % factor == 0) {\n                maxFactor = factor;\n    \
    \        }\n            factor++;\n        }\n        return maxFactor;", "  \
    \      long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <=\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (n > 1) {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n                n /= currentPrime;\n            }\n       \
    \     currentPrime++;\n        }\n        return largestPrimeFactor;", "     \
    \   long maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = 1;\n        long factor = 2;\n        while (factor\
    \ < n) {\n            if (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                break;\n            }\n            factor++;\n  \
    \      }\n        return largestPrimeFactor;", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor <= maxFactor) {\n           \
    \ while (n % factor == 0) {\n                maxFactor = factor;\n           \
    \ }\n            factor++;\n        }\n        return maxFactor;", "        long\
    \ largestPrimeFactor = n;\n        long largestPrimeFactor2 = n;\n        long\
    \ largestPrimeFactor3 = n;\n        long largestPrimeFactor4 = n;\n        long\
    \ largestPrimeFactor5 = n;\n        long largestPrimeFactor6 = n;\n        long\
    \ largestPrimeFactor7 = n;\n        long largestPrimeFactor8 = n;\n        long\
    \ largestPrimeFactor9 = n;\n        long largestPrimeFactor10 = n;\n        long\
    \ largestPrimeFactor11 = n;\n        long largestPrimeFactor12 = n;\n        long\
    \ largestPrimeFactor13 = n;\n        long largestPrimeFactor14 = n;\n        long\
    \ largestPrimeFactor15 = n;\n        long largestPrimeFactor16 = n;\n        long\
    \ largestPrimeFactor17 = n;\n        long largestPrimeFactor18 = n;\n        long\
    \ largestPrimeFactor19 = n;\n        long largestPrimeFactor20 = n;\n        long\
    \ largestPrimeFactor21 = n;\n        long largestPrimeFactor22 = n;\n        long\
    \ largestPrimeFactor23 = n;\n        long largestPrimeFactor24 = n;\n        long\
    \ largestPrimeFactor25 = n;\n        long largestPrimeFactor26 = n;\n        long\
    \ largestPrimeFactor27 = n;\n        long largestPrimeFactor28 = n;\n        long\
    \ largestPrimeFactor29 = n;\n        long largestPrimeFactor30 = n;\n        long\
    \ largestPrimeFactor31 = n;\n        long largestPrimeFactor32 = n;\n        long\
    \ largestPrimeFactor33 = n;\n        long largestPrimeFactor34 = n;\n        long\
    \ largestPrimeFactor35 = n;\n        long largestPrimeFactor36 = n;\n        long\
    \ largestPrimeFactor37 = n;\n        long largestPrimeFactor38 = n;\n        long\
    \ largestPrimeFactor39 = n;\n        long largestPrimeFactor40 = n;\n        long\
    \ largestPrimeFactor41 = n;\n        long largestPrimeFactor42 = n;\n        long\
    \ largestPrimeFactor43 = n;\n        long largestPrimeFactor44 = n;\n        long\
    \ largestPrimeFactor45 = n;\n        long largestPrimeFactor46 = n;\n        long\
    \ largestPrimeFactor47 = n;\n        long largestPrimeFactor", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       while (n % factor == 0) {\n                maxFactor = factor;\n     \
    \       }\n            factor++;\n        }\n        return maxFactor;", "   \
    \     long maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = n / factor;\n\
    \            } else {\n                factor++;\n            }\n        }\n \
    \       return maxFactor;", "        long maxFactor = 0;\n        long maxFactorPrime\
    \ = 1;\n        long maxFactorPrimePrime = 2;\n        long maxFactorPrimePrimePrime\
    \ = 3;\n        long maxFactorPrimePrimePrimePrime = 4;\n        long maxFactorPrimePrimePrimePrime\
    \ = 5;\n        long maxFactorPrimePrimePrimePrimePrime = 6;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 7;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 8;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 10;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 11;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrime = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 13;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 14;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrime = 15;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 16;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 17;\n   \
    \     long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 18;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 19;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 20;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 21;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 22;\n      \
    \  long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 23;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 24;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 25;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 26;\n\
    \        long maxFactorPrimePrimePrimePrime", "        long maxFactor = n;\n \
    \       long factor = 2;\n        while (factor < maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long maxFactorPrime = 1;\n\
    \        long factor = 2;\n        while (factor <= maxFactor) {\n           \
    \ long testFactor = n * factor;\n            if (testFactor > maxFactor) {\n \
    \               break;\n            }\n            long testFactorPrime = testFactor;\n\
    \            while (testFactorPrime < maxFactorPrime) {\n                if (testFactorPrime\
    \ % factor == 0) {\n                    break;\n                }\n          \
    \      testFactorPrime += factor;\n            }\n            if (testFactorPrime\
    \ == maxFactorPrime) {\n                maxFactor = testFactor;\n            \
    \    maxFactorPrime = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;", "        long maxFactor = 1;\n        long factor\
    \ = 2;\n        while (factor <= n / 2) {\n            if (n % factor == 0) {\n\
    \                maxFactor = factor;\n                break;\n            }\n\
    \            factor++;\n        }\n        return maxFactor;", "        long largestPrimeFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= largestPrimeFactor)\
    \ {\n            while (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long largestPrimeFactor2 = n;\n \
    \       long largestPrimeFactor3 = n;\n        long largestPrimeFactor4 = n;\n\
    \        long largestPrimeFactor5 = n;\n        long largestPrimeFactor6 = n;\n\
    \        long largestPrimeFactor7 = n;\n        long largestPrimeFactor8 = n;\n\
    \        long largestPrimeFactor9 = n;\n        long largestPrimeFactor10 = n;\n\
    \        long largestPrimeFactor11 = n;\n        long largestPrimeFactor12 = n;\n\
    \        long largestPrimeFactor13 = n;\n        long largestPrimeFactor14 = n;\n\
    \        long largestPrimeFactor15 = n;\n        long largestPrimeFactor16 = n;\n\
    \        long largestPrimeFactor17 = n;\n        long largestPrimeFactor18 = n;\n\
    \        long largestPrimeFactor19 = n;\n        long largestPrimeFactor20 = n;\n\
    \        long largestPrimeFactor21 = n;\n        long largestPrimeFactor22 = n;\n\
    \        long largestPrimeFactor23 = n;\n        long largestPrimeFactor24 = n;\n\
    \        long largestPrimeFactor25 = n;\n        long largestPrimeFactor26 = n;\n\
    \        long largestPrimeFactor27 = n;\n        long largestPrimeFactor28 = n;\n\
    \        long largestPrimeFactor29 = n;\n        long largestPrimeFactor30 = n;\n\
    \        long largestPrimeFactor31 = n;\n        long largestPrimeFactor32 = n;\n\
    \        long largestPrimeFactor33 = n;\n        long largestPrimeFactor34 = n;\n\
    \        long largestPrimeFactor35 = n;\n        long largestPrimeFactor36 = n;\n\
    \        long largestPrimeFactor37 = n;\n        long largestPrimeFactor38 = n;\n\
    \        long largestPrimeFactor39 = n;\n        long largestPrimeFactor40 = n;\n\
    \        long largestPrimeFactor41 = n;\n        long largestPrimeFactor42 = n;\n\
    \        long largestPrimeFactor43 = n;\n        long largestPrimeFactor44 = n;\n\
    \        long largestPrimeFactor45 = n;\n        long largestPrimeFactor46 = n;\n\
    \        long largestPrimeFactor47 = n;\n        long largestPrimeFactor", " \
    \       long maxPrime = 1;\n        long maxFactor = 2;\n        long currentPrime\
    \ = 2;\n        long currentFactor = 2;\n        while (n > 1) {\n           \
    \ while (n % currentPrime == 0) {\n                currentPrime++;\n         \
    \   }\n            while (n % currentFactor == 0) {\n                currentFactor++;\n\
    \            }\n            if (currentPrime > maxPrime) {\n                maxPrime\
    \ = currentPrime;\n            }\n            if (currentFactor > maxFactor) {\n\
    \                maxFactor = currentFactor;\n            }\n            n /= currentPrime;\n\
    \            n /= currentFactor;\n        }\n        return maxPrime;", "    \
    \    long largestPrimeFactor = n;\n        long largestPrimeFactor2 = n;\n   \
    \     long largestPrimeFactor3 = n;\n        long largestPrimeFactor4 = n;\n \
    \       long largestPrimeFactor5 = n;\n        long largestPrimeFactor6 = n;\n\
    \        long largestPrimeFactor7 = n;\n        long largestPrimeFactor8 = n;\n\
    \        long largestPrimeFactor9 = n;\n        long largestPrimeFactor10 = n;\n\
    \        long largestPrimeFactor11 = n;\n        long largestPrimeFactor12 = n;\n\
    \        long largestPrimeFactor13 = n;\n        long largestPrimeFactor14 = n;\n\
    \        long largestPrimeFactor15 = n;\n        long largestPrimeFactor16 = n;\n\
    \        long largestPrimeFactor17 = n;\n        long largestPrimeFactor18 = n;\n\
    \        long largestPrimeFactor19 = n;\n        long largestPrimeFactor20 = n;\n\
    \        long largestPrimeFactor21 = n;\n        long largestPrimeFactor22 = n;\n\
    \        long largestPrimeFactor23 = n;\n        long largestPrimeFactor24 = n;\n\
    \        long largestPrimeFactor25 = n;\n        long largestPrimeFactor26 = n;\n\
    \        long largestPrimeFactor27 = n;\n        long largestPrimeFactor28 = n;\n\
    \        long largestPrimeFactor29 = n;\n        long largestPrimeFactor30 = n;\n\
    \        long largestPrimeFactor31 = n;\n        long largestPrimeFactor32 = n;\n\
    \        long largestPrimeFactor33 = n;\n        long largestPrimeFactor34 = n;\n\
    \        long largestPrimeFactor35 = n;\n        long largestPrimeFactor36 = n;\n\
    \        long largestPrimeFactor37 = n;\n        long largestPrimeFactor38 = n;\n\
    \        long largestPrimeFactor39 = n;\n        long largestPrimeFactor40 = n;\n\
    \        long largestPrimeFactor41 = n;\n        long largestPrimeFactor42 = n;\n\
    \        long largestPrimeFactor43 = n;\n        long largestPrimeFactor44 = n;\n\
    \        long largestPrimeFactor45 = n;\n        long largestPrimeFactor46 = n;\n\
    \        long largestPrimeFactor47 = n;\n        long largestPrimeFactor", " \
    \       long maxFactor = 0;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            while (n % factor == 0) {\n                maxFactor = factor;\n\
    \                n /= factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;", "        long maxFactor = n;\n        long factor\
    \ = 2;\n        while (factor <= maxFactor) {\n            if (n % factor == 0)\
    \ {\n                maxFactor = n / factor;\n            } else {\n         \
    \       factor++;\n            }\n        }\n        return maxFactor;", "   \
    \     long largestPrimeFactor = n;\n        long largestPrimeFactorOfTwo = 2;\n\
    \        long largestPrimeFactorOfThree = 3;\n        long largestPrimeFactorOfFour\
    \ = 4;\n        long largestPrimeFactorOfFive = 5;\n        long largestPrimeFactorOfSix\
    \ = 6;\n        long largestPrimeFactorOfSeven = 7;\n        long largestPrimeFactorOfEight\
    \ = 8;\n        long largestPrimeFactorOfNine = 9;\n        long largestPrimeFactorOfTen\
    \ = 10;\n        long largestPrimeFactorOfEleven = 11;\n        long largestPrimeFactorOfTwelve\
    \ = 12;\n        long largestPrimeFactorOfThirteen = 13;\n        long largestPrimeFactorOfFourteen\
    \ = 14;\n        long largestPrimeFactorOfFifteen = 15;\n        long largestPrimeFactorOfSixteen\
    \ = 16;\n        long largestPrimeFactorOfSeventeen = 17;\n        long largestPrimeFactorOfEighteen\
    \ = 18;\n        long largestPrimeFactorOfNineteen = 19;\n        long largestPrimeFactorOfTwenty\
    \ = 20;\n        long largestPrimeFactorOfTwentyOne = 21;\n        long largestPrimeFactorOfTwentyTwo\
    \ = 22;\n        long largestPrimeFactorOfTwentyThree = 23;\n        long largestPrimeFactorOfTwentyFour\
    \ = 24;\n        long largestPrimeFactorOfTwentyFive = 25;\n        long largestPrimeFactorOfTwentySix\
    \ = 26;\n        long largestPrimeFactorOfTwentySeven = 27;\n        long largestPrimeFactorOfTwentyEight\
    \ = 28;\n        long largestPrimeFactorOfTwentyNine = 29;\n        long largestPrimeFactorOfThirty\
    \ = 40;\n        long largestPrimeFactorOfThirtyOne = 41;\n        long largestPrimeFactorOfThirtyTwo\
    \ = 42;\n        long largestPrimeFactorOfThirtyThree = 43;\n        long largestPrimeFactorOfThirtyFour\
    \ = 44;\n        long largestPrimeFactorOfThirtyFive = 45;\n        long largestPrimeFactorOfThirtySix\
    \ = 46;\n        long largestPrimeFactorOfThirtySeven = 47;\n        ", "    \
    \    long maxFactor = 1;\n        long currentFactor = 2;\n        while (n >\
    \ 1) {\n            while (n % currentFactor == 0) {\n                maxFactor\
    \ = currentFactor;\n                n /= currentFactor;\n            }\n     \
    \       currentFactor++;\n        }\n        return maxFactor;", "        long\
    \ maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            while (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 2;\n        while (maxFactorPrime\
    \ * maxFactorPrime <= maxFactor) {\n            long testFactor = maxFactorPrime\
    \ + 1;\n            while (testFactor * testFactor <= maxFactor) {\n         \
    \       if (n % testFactor == 0) {\n                    maxFactor = n / testFactor;\n\
    \                    break;\n                }\n                testFactor++;\n\
    \            }\n            maxFactorPrime++;\n        }\n        return maxFactor;",
  "        long maxPrime = 1;\n        long maxFactor = 2;\n        while (n > 1)\
    \ {\n            long testPrime = TestPrime(n);\n            if (testPrime ==\
    \ 1) {\n                maxPrime = testPrime;\n                maxFactor = n;\n\
    \            }\n            n /= testPrime;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = 1;\n   \
    \     long factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
    \ 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \            while (n % factor == 0) {\n                n /= factor;\n       \
    \     }\n        }\n        return maxFactor;", "        long maxFactor = n;\n\
    \        long factor = 2;\n        while (factor < maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n      \
    \  while (factor < maxFactor) {\n            if (n % factor == 0) {\n        \
    \        maxFactor = n / factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = n / factor;\n   \
    \         } else {\n                factor++;\n            }\n        }\n    \
    \    return maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n\
    \        while (factor <= maxFactor) {\n            long testFactor = n % factor;\n\
    \            if (testFactor == 0) {\n                return factor;\n        \
    \    }\n            factor++;\n        }\n        return maxFactor;", "      \
    \  long maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 0;\n        long factor = 2;\n        while (factor <=\
    \ n / 2) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \                break;\n            }\n            factor++;\n        }\n   \
    \     return maxFactor;", "        long largestPrimeFactor = n;\n        long\
    \ primeFactor = 2;\n        while (primeFactor < largestPrimeFactor) {\n     \
    \       while (n % primeFactor == 0) {\n                largestPrimeFactor = primeFactor;\n\
    \            }\n            primeFactor++;\n        }\n        return largestPrimeFactor;",
  "        long maxPrime = 2;\n        long maxFactor = 1;\n        long prime = 2;\n\
    \        while (n > 1) {\n            while (n % prime == 0) {\n             \
    \   maxPrime = prime;\n                maxFactor = n;\n                n /= prime;\n\
    \            }\n            prime++;\n        }\n        return maxFactor;", " \
    \       long largestPrimeFactor = n;\n        long currentPrime = 2;\n       \
    \ while (currentPrime < largestPrimeFactor) {\n            long currentPrimeFactor\
    \ = currentPrime;\n            while (currentPrimeFactor % currentPrime == 0)\
    \ {\n                currentPrimeFactor++;\n            }\n            if (currentPrimeFactor\
    \ > largestPrimeFactor) {\n                largestPrimeFactor = currentPrimeFactor;\n\
    \            }\n            currentPrime++;\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long currentFactor = 2;\n\
    \        while (n > 1) {\n            while (n % currentFactor == 0) {\n     \
    \           maxFactor = currentFactor;\n                n /= currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 0;\n        long factor = 2;\n        while (factor <=\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long primeFactor = 1;\n        while\
    \ (n > 1) {\n            if (n % primeFactor == 0) {\n                largestPrimeFactor\
    \ = primeFactor;\n            }\n            primeFactor++;\n            n /=\
    \ primeFactor;\n        }\n        return largestPrimeFactor;", "        long\
    \ maxFactor = 0;\n        long maxFactorPrime = 0;\n        long factor = 2;\n\
    \        while (factor <= n) {\n            if (n % factor == 0) {\n         \
    \       long primeFactor = factor;\n                while (primeFactor <= n) {\n\
    \                    if (n % primeFactor == 0) {\n                        primeFactor++;\n\
    \                        break;\n                    }\n                }\n  \
    \              if (primeFactor > maxFactor) {\n                    maxFactor =\
    \ factor;\n                    maxFactorPrime = primeFactor;\n               \
    \ }\n            }\n            factor++;\n        }\n        return maxFactorPrime;",
  "        long largestPrimeFactor = 1;\n        long currentPrime = 2;\n        while\
    \ (n > 1) {\n            while (n % currentPrime == 0) {\n                largestPrimeFactor\
    \ = currentPrime;\n                n /= currentPrime;\n            }\n       \
    \     currentPrime++;\n        }\n        return largestPrimeFactor;", "     \
    \   long maxFactor = n;\n        long factor = 2;\n        while (factor < maxFactor)\
    \ {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            } else {\n                while (n % factor == 0) {\n           \
    \         n /= factor;\n                }\n                factor++;\n       \
    \     }\n        }\n        return maxFactor;", "        long maxFactor = 1;\n\
    \        long factor = 2;\n        while (factor <= n) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = factor;\n            }\n       \
    \     factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        if (n % factor == 0) {\n                maxFactor = n / factor;\n   \
    \         } else {\n                factor++;\n            }\n        }\n    \
    \    return maxFactor;", "        long largestPrimeFactor = n;\n        long largestPrimeFactorFactor\
    \ = 1;\n        long largestPrimeFactorFactorFactor = 2;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 3;\n        long largestPrimeFactorFactorFactorFactorFactor = 4;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactorFactor = 5;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor\
    \ = 6;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 7;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 8;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 9;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 10;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 11;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 12;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 16;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 17;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 18;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 19;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 20;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 21;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 22;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 23;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 24;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 27;\n        long largestPrimeFactor", "        long maxFactor = n;\n    \
    \    long factor = 2;\n        while (factor < maxFactor) {\n            if (n\
    \ % factor == 0) {\n                maxFactor = n / factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long largestPrimeFactor =\
    \ n;\n        long primeFactor = 2;\n        while (primeFactor <= largestPrimeFactor)\
    \ {\n            while (n % primeFactor == 0) {\n                largestPrimeFactor\
    \ = primeFactor;\n            }\n            primeFactor++;\n        }\n     \
    \   return largestPrimeFactor;", "        long maxPrime = 2;\n        long maxFactor\
    \ = 1;\n        long currentPrime = 2;\n        long currentFactor = 1;\n    \
    \    while (n > 1) {\n            while (n % currentPrime == 0) {\n          \
    \      currentPrime++;\n            }\n            while (n % currentFactor ==\
    \ 0) {\n                currentFactor++;\n            }\n            if (currentPrime\
    \ > maxPrime) {\n                maxPrime = currentPrime;\n            }\n   \
    \         if (currentFactor > maxFactor) {\n                maxFactor = currentFactor;\n\
    \            }\n            n /= currentPrime;\n            n /= currentFactor;\n\
    \        }\n        return maxPrime;", "        long maxFactor = n;\n        long\
    \ maxFactorPrime = 2;\n        while (maxFactorPrime * maxFactorPrime <= maxFactor)\
    \ {\n            long newMaxFactor = maxFactorPrime;\n            long newMaxFactorPrime\
    \ = 2;\n            while (newMaxFactorPrime * newMaxFactorPrime <= newMaxFactor)\
    \ {\n                if (n % newMaxFactorPrime == 0) {\n                    maxFactor\
    \ = newMaxFactor;\n                    maxFactorPrime = newMaxFactorPrime;\n \
    \                   break;\n                }\n                newMaxFactorPrime++;\n\
    \            }\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor <= maxFactor) {\n    \
    \        while (n % factor == 0) {\n                maxFactor = factor;\n    \
    \        }\n            factor++;\n        }\n        return maxFactor;", "  \
    \      long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long maxFactorPrime = 2;\n        long factor\
    \ = 2;\n        while (factor < maxFactor) {\n            while (n % factor ==\
    \ 0) {\n                maxFactorPrime = factor;\n                maxFactor =\
    \ n / factor;\n            }\n            factor++;\n        }\n        return\
    \ maxFactorPrime;", "        long maxFactor = 0;\n        long maxFactorPrime\
    \ = 0;\n        long maxFactorPrimePrime = 0;\n        long maxFactorPrimePrimePrime\
    \ = 0;\n        long maxFactorPrimePrimePrimePrime = 0;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 0;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 0;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrime = 0;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 0;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 0;\n  \
    \      long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 0;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 0;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime", "   \
    \     long largestPrimeFactor = n;\n        long largestPrimeFactorFactor = 2;\n\
    \        while (largestPrimeFactorFactor < n) {\n            while (n % largestPrimeFactorFactor\
    \ == 0) {\n                largestPrimeFactorFactor++;\n            }\n      \
    \      if (largestPrimeFactorFactor > largestPrimeFactor) {\n                largestPrimeFactor\
    \ = largestPrimeFactorFactor;\n            }\n        }\n        return largestPrimeFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return maxFactor;", "        long maxFactor = 1;\n       \
    \ long factor = 2;\n        while (factor <= n) {\n            if (n % factor\
    \ == 0) {\n                maxFactor = factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long largestPrimeFactor = n;\n\
    \        long factor = 2;\n        while (factor < n) {\n            if (n % factor\
    \ == 0) {\n                largestPrimeFactor = factor;\n                break;\n\
    \            }\n            factor++;\n        }\n        return largestPrimeFactor;",
  "        long largestPrimeFactor = n;\n        long primeFactor = 2;\n        while\
    \ (primeFactor <= largestPrimeFactor) {\n            while (n % primeFactor ==\
    \ 0) {\n                largestPrimeFactor = primeFactor;\n            }\n   \
    \         primeFactor++;\n        }\n        return largestPrimeFactor;", "  \
    \      long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n      \
    \  while (factor < maxFactor) {\n            if (n % factor == 0) {\n        \
    \        maxFactor = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;", "        long largestPrimeFactor = 1;\n        long\
    \ currentPrime = 2;\n        while (n > 1) {\n            while (n % currentPrime\
    \ == 0) {\n                largestPrimeFactor = currentPrime;\n              \
    \  n /= currentPrime;\n            }\n            currentPrime++;\n        }\n\
    \        return largestPrimeFactor;", "        long maxFactor = 0;\n        long\
    \ factor = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n\
    \                maxFactor = factor;\n                n /= factor;\n         \
    \   }\n            factor++;\n        }\n        return maxFactor;", "       \
    \ long maxFactor = 0;\n        long factor = 2;\n        while (factor <= n) {\n\
    \            if (n % factor == 0) {\n                maxFactor = factor;\n   \
    \             break;\n            }\n            factor++;\n        }\n      \
    \  return maxFactor;", "        long largestPrimeFactor = 1;\n        long largestPrimeFactorFactor\
    \ = 2;\n        long largestPrimeFactorFactorFactor = 3;\n        long largestPrimeFactorFactorFactorFactor\
    \ = 4;\n        long largestPrimeFactorFactorFactorFactorFactor = 5;\n       \
    \ long largestPrimeFactorFactorFactorFactorFactor = 6;\n        long largestPrimeFactorFactorFactorFactorFactorFactor\
    \ = 7;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor =\
    \ 8;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactor = 9;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 10;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 11;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactor = 12;\n\
    \        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 13;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 14;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 15;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 16;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 17;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 18;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 19;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 20;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 21;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 22;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 23;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 24;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 25;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 26;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 27;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 28;\n        long largestPrimeFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactorFactor\
    \ = 29;\n        ", "        long maxFactor = 1;\n        long currentFactor =\
    \ 2;\n        while (n > 1) {\n            while (n % currentFactor == 0) {\n\
    \                maxFactor = currentFactor;\n                n /= currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = 1;\n        long factor = 2;\n        while (factor <\
    \ n) {\n            if (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;"]
stop_tokens:
- "\n    }\n"
