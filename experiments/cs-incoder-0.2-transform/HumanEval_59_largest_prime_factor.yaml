name: HumanEval_59_largest_prime_factor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not\
  \ a prime.\n    // >>> LargestPrimeFactor((13195L))\n    // (29L)\n    // >>> LargestPrimeFactor((2048L))\n\
  \    // (2L)\n    public static long LargestPrimeFactor(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
  \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
  \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
  \ == (29L));\n    }\n\n}\n"
completions: ["        long largestPrimeFactor = n;\n        long factor = 2;\n  \
    \      while (factor <= largestPrimeFactor) {\n            if (n % factor == 0)\
    \ {\n                largestPrimeFactor = factor;\n            }\n           \
    \ factor++;\n        }\n        return largestPrimeFactor;", "        long maxFactor\
    \ = 1;\n        long factor = 2;\n        while (factor < n) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long maxFactorPrime = 1;\n        long maxFactorPrimePrime = 2;\n\
    \        long maxFactorPrimePrimePrime = 3;\n        long maxFactorPrimePrimePrimePrime\
    \ = 4;\n        long maxFactorPrimePrimePrimePrimePrime = 5;\n        long maxFactorPrimePrimePrimePrimePrime\
    \ = 6;\n        long maxFactorPrimePrimePrimePrimePrimePrime = 7;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrime = 8;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime\
    \ = 9;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 10;\n    \
    \    long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 11;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 12;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 13;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ 14;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime = 15;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 16;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 17;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 18;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 19;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 20;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 21;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 22;\n\
    \        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = 23;\n\
    \        long maxFactorPrimePrimePrimePrimePrime", "        long maxPrime = 2;\n\
    \        long maxFactor = 1;\n        while (n > 1) {\n            long testPrime\
    \ = 2;\n            while (testPrime * testPrime <= n) {\n                if (n\
    \ % testPrime == 0) {\n                    break;\n                }\n       \
    \         testPrime++;\n            }\n            if (testPrime > maxPrime) {\n\
    \                maxPrime = testPrime;\n                maxFactor = n;\n     \
    \       }\n            n /= testPrime;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <\
    \ maxFactor) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n            }\n            factor++;\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = n / factor;\n            }\
    \ else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = 1;\n        long currentFactor = 2;\n\
    \        while (currentFactor <= n) {\n            while (n % currentFactor ==\
    \ 0) {\n                maxFactor = currentFactor;\n                n /= currentFactor;\n\
    \            }\n            currentFactor++;\n        }\n        return maxFactor;",
  "        long maxPrime = 2;\n        long maxFactor = 2;\n        long currentPrime\
    \ = 2;\n        long currentFactor = 2;\n        while (n > 1) {\n           \
    \ while (n % currentPrime == 0) {\n                currentPrime++;\n         \
    \   }\n            while (n % currentFactor == 0) {\n                currentFactor++;\n\
    \            }\n            if (currentPrime > maxPrime) {\n                maxPrime\
    \ = currentPrime;\n            }\n            if (currentFactor > maxFactor) {\n\
    \                maxFactor = currentFactor;\n            }\n            n /= currentPrime;\n\
    \            n /= currentFactor;\n        }\n        return maxPrime;", "    \
    \    long maxFactor = n;\n        long maxFactorPrime = 2;\n        long maxFactorPrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrime = 2;\n     \
    \   long maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long\
    \ maxFactorPrimePrimePrimePrimePrimePrimePrimePrime = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrime =\
    \ 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = 2;\n        long maxFactorPrimePrimePrimePrimePri", "        long maxPrimeFactor\
    \ = n;\n        long maxPrimeFactor2 = n;\n        long maxPrimeFactor3 = n;\n\
    \        long maxPrimeFactor4 = n;\n        long maxPrimeFactor5 = n;\n      \
    \  long maxPrimeFactor6 = n;\n        long maxPrimeFactor7 = n;\n        long\
    \ maxPrimeFactor8 = n;\n        long maxPrimeFactor9 = n;\n        long maxPrimeFactor10\
    \ = n;\n        long maxPrimeFactor11 = n;\n        long maxPrimeFactor12 = n;\n\
    \        long maxPrimeFactor13 = n;\n        long maxPrimeFactor14 = n;\n    \
    \    long maxPrimeFactor15 = n;\n        long maxPrimeFactor16 = n;\n        long\
    \ maxPrimeFactor17 = n;\n        long maxPrimeFactor18 = n;\n        long maxPrimeFactor19\
    \ = n;\n        long maxPrimeFactor20 = n;\n        long maxPrimeFactor21 = n;\n\
    \        long maxPrimeFactor22 = n;\n        long maxPrimeFactor23 = n;\n    \
    \    long maxPrimeFactor24 = n;\n        long maxPrimeFactor25 = n;\n        long\
    \ maxPrimeFactor26 = n;\n        long maxPrimeFactor27 = n;\n        long maxPrimeFactor28\
    \ = n;\n        long maxPrimeFactor29 = n;\n        long maxPrimeFactor30 = n;\n\
    \        long maxPrimeFactor31 = n;\n        long maxPrimeFactor32 = n;\n    \
    \    long maxPrimeFactor33 = n;\n        long maxPrimeFactor34 = n;\n        long\
    \ maxPrimeFactor35 = n;\n        long maxPrimeFactor36 = n;\n        long maxPrimeFactor37\
    \ = n;\n        long maxPrimeFactor38 = n;\n        long maxPrimeFactor39 = n;\n\
    \        long maxPrimeFactor40 = n;\n        long maxPrimeFactor41 = n;\n    \
    \    long maxPrimeFactor42 = n;\n        long maxPrimeFactor43 = n;\n        long\
    \ maxPrimeFactor44 = n;\n        long maxPrimeFactor45 = n;\n        long maxPrimeFactor46\
    \ = n;\n        long maxPrimeFactor47 = n;\n        long maxPrimeFactor48 = n;\n\
    \        long maxPrimeFactor49 = n;\n        long maxPrimeFactor50 = n;\n    \
    \    long maxPrimeFactor51 = n;\n        long maxPrimeFactor52 = n;\n        long\
    \ maxPri", "        long maxFactor = 1;\n        long factor = 2;\n        while\
    \ (n > 1) {\n            while (n % factor == 0) {\n                maxFactor\
    \ = factor;\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return maxFactor;", "        long maxFactor = n;\n       \
    \ long factor = 2;\n        while (factor <= maxFactor) {\n            if (n %\
    \ factor == 0) {\n                maxFactor = n / factor;\n            } else\
    \ {\n                factor++;\n            }\n        }\n        return maxFactor;",
  "        long maxFactor = n;\n        long factor = 2;\n        while (factor <=\
    \ maxFactor) {\n            if (n % factor == 0) {\n                maxFactor\
    \ = n / factor;\n            } else {\n                factor++;\n           \
    \ }\n        }\n        return maxFactor;", "        long maxFactor = n;\n   \
    \     long factor = 2;\n        while (factor <= maxFactor) {\n            if\
    \ (n % factor == 0) {\n                maxFactor = factor;\n            }\n  \
    \          factor++;\n        }\n        return maxFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = factor;\n        \
    \    }\n            factor++;\n        }\n        return maxFactor;", "      \
    \  long maxFactor = n;\n        long factor = 2;\n        while (factor <= maxFactor)\
    \ {\n            while (n % factor == 0) {\n                maxFactor = factor;\n\
    \            }\n            factor++;\n        }\n        return maxFactor;",
  "        long largestPrimeFactor = n;\n        long i = 2;\n        while (largestPrimeFactor\
    \ % i == 0) {\n            largestPrimeFactor = largestPrimeFactor / i;\n    \
    \        i++;\n        }\n        return largestPrimeFactor;", "        long maxFactor\
    \ = n;\n        long factor = 2;\n        while (factor < maxFactor) {\n     \
    \       if (n % factor == 0) {\n                maxFactor = factor;\n        \
    \    } else {\n                factor++;\n            }\n        }\n        return\
    \ maxFactor;", "        long maxFactor = n;\n        long factor = 2;\n      \
    \  while (factor < maxFactor) {\n            if (n % factor == 0) {\n        \
    \        maxFactor = factor;\n            }\n            factor++;\n        }\n\
    \        return maxFactor;"]
stop_tokens:
- "\n    }\n"
