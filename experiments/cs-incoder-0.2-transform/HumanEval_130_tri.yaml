name: HumanEval_130_tri
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by\
  \ mathematicians in \n    // the last couple centuries. However, what people don't\
  \ know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n\
  \    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
  \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
  \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
  \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
  \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
  \ sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new\
  \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>\
  \ Tri(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
  \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
  \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
  \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
  \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
  \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
  \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
  \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
  \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        if (n == 0)\n\
    \            result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n\
    \        else {\n            long tri1 = Tri(n - 1);\n            long tri2 =\
    \ Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            result.Add(tri1\
    \ + tri2 + tri3);\n        }\n        return result;", "        if (n == 0)\n\
    \            return new List<long>(new long[]{(long)1L});\n        if (n == 1)\n\
    \            return new List<long>(new long[]{(long)3L});\n        if (n == 2)\n\
    \            return new List<long>(new long[]{(long)2L, (long)3L});\n        List<long>\
    \ result = new List<long>();\n        long tri1 = Tri(n - 1);\n        long tri2\
    \ = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        result.AddRange(tri1);\n\
    \        result.AddRange(tri2);\n        result.AddRange(tri3);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(1);\n            result.Add(1);\n          \
    \  result.Add(1);\n            return result;\n        }\n        long tri1 =\
    \ Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n\
    \        result.AddRange(tri1);\n        result.AddRange(tri2);\n        result.AddRange(tri3);\n\
    \        return result;", "        if (n == 0) return new List<long>();\n    \
    \    if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n + 2);", "        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1L) + Tri(n\
    \ - 2L));\n        } else {\n            result.Add(Tri(n - 1L) + Tri(n - 1L)\
    \ + Tri(n - 2L));\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n % 2 == 0) {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n\
    \ + 1);\n            foreach (var item in a.Concat(b).Concat(c)) {\n         \
    \       result.Add(item);\n            }\n        } else {\n            long a\
    \ = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n\
    \ + 1);\n            foreach (var item in a.Concat(b).Concat(c)) {\n         \
    \       result.Add(item);\n            }\n            long d = Tri(n - 3);\n \
    \           long e = Tri(n - 4);\n            long f = Tri(n - 5);\n         \
    \   foreach (var item in d.Concat(e).Concat(f)) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        if (n == 0) return\
    \ new List<long>(new long[] { 1L });\n        if (n == 1) return new List<long>(new\
    \ long[] { 3L });\n        if (n == 2) return new List<long>(new long[] { 2L,\
    \ 1L });\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n - 3);\n        result.Add((tri1 + tri2 + tri3));\n\
    \        return result;", "        if (n == 0)\n            return new List<long>();\n\
    \        if (n == 1)\n            return new List<long>() { 1 };\n        if (n\
    \ % 2 == 0)\n            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n      \
    \  else\n            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3)\
    \ + Tri(n - 4);", "        List<long> result = new List<long>();\n        if (n\
    \ == 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n \
    \       if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (long\
    \ i in a) result.Add(i);\n            foreach (long i in b) result.Add(i);\n \
    \           foreach (long i in c) result.Add(i);\n        } else {\n         \
    \   long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = Tri(n + 1);\n            foreach (long i in a) result.Add(i);\n          \
    \  foreach (long i in b) result.Add(i);\n            foreach (long i in c) result.Add(i);\n\
    \            result.Add(n);\n        }\n        return result;", "        if (n\
    \ == 0) return new List<long>();\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4);", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(3);\n\
    \        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n + 1);\n            result.AddRange(a.Concat(b).Concat(c));\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            result.AddRange(a.Concat(b));\n        }\n        return\
    \ result;", "        if (n == 0) return new List<long>();\n        if (n == 1)\
    \ return new List<long>(new long[]{3L});\n        if (n % 2 == 0) {\n        \
    \    List<long> result = new List<long>();\n            long a = Tri(n - 1);\n\
    \            long b = Tri(n - 2);\n            long c = Tri(n + 1);\n        \
    \    foreach (long d in a) {\n                result.Add(d);\n            }\n\
    \            foreach (long e in b) {\n                result.Add(e);\n       \
    \     }\n            foreach (long f in c) {\n                result.Add(f);\n\
    \            }\n            return result;\n        } else {\n            List<long>\
    \ result = new List<long>();\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (long\
    \ d in b) {\n                result.Add(d);\n            }\n            foreach\
    \ (long e in c) {\n                result.Add(e);\n            }\n           \
    \ foreach (long f in a) {\n                result.Add(f);\n            }\n   \
    \         return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n     \
    \       foreach (long i in tri1) {\n                result.Add(i);\n         \
    \   }\n            foreach (long i in tri2) {\n                result.Add(i);\n\
    \            }\n            foreach (long i in tri3) {\n                result.Add(i);\n\
    \            }\n        } else {\n            long tri1 = Tri(n - 1);\n      \
    \      long tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n        \
    \    foreach (long i in tri1) {\n                result.Add(i);\n            }\n\
    \            foreach (long i in tri2) {\n                result.Add(i);\n    \
    \        }\n            foreach (long i in tri3) {\n                result.Add(i);\n\
    \            }\n            result.Add(tri1);\n            result.Add(tri2);\n\
    \            result.Add(tri3);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n\
    \            return result;\n        }\n        if (n == 2L) {\n            result.Add(1L);\n\
    \            result.Add(3L);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            long tri1 = Tri(n - 1L);\n            long tri2\
    \ = Tri(n - 2L);\n            result.Add(tri1);\n            result.Add(tri2);\n\
    \            result.Add(tri1 + tri2);\n            return result;\n        }\n\
    \        long tri1 = Tri(n - 1L);\n        long tri2 = Tri(n - 2L);\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri1 + tri2);\n        result.Add(tri1\
    \ + tri2 + tri1);\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            result.AddRange(new List<long>() { a, b, c });\n        }\
    \ else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2) +\
    \ Tri(n - 1) + Tri(n - 3);\n            result.AddRange(new List<long>() { a,\
    \ b, Tri(n - 3) });\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) result.Add(0L);\n        if (n == 1)\
    \ result.Add(1L);\n        if (n == 2) result.Add(2L);\n        if (n % 2 == 0)\
    \ result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        else result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n - 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);",
  "        List<long> result = new List<long>();\n        if (n == 0)\n          \
    \  result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n    \
    \    else if (n % 2 == 0)\n            result.Add(Tri(n - 1) + Tri(n - 2));\n\
    \        else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3 =\
    \ (long)2;\n        long tri4 = (long)3;\n        long tri5 = (long)1;\n     \
    \   long tri6 = (long)2;\n        long tri7 = (long)3;\n        long tri8 = (long)1;\n\
    \        long tri9 = (long)2;\n        long tri10 = (long)3;\n        long tri11\
    \ = (long)1;\n        long tri12 = (long)2;\n        long tri13 = (long)3;\n \
    \       long tri14 = (long)1;\n        long tri15 = (long)2;\n        long tri16\
    \ = (long)3;\n        long tri17 = (long)1;\n        long tri18 = (long)2;\n \
    \       long tri19 = (long)3;\n        long tri20 = (long)1;\n        long tri21\
    \ = (long)2;\n        long tri22 = (long)3;\n        long tri23 = (long)1;\n \
    \       long tri24 = (long)2;\n        long tri25 = (long)3;\n        long tri26\
    \ = (long)1;\n        long tri27 = (long)2;\n        long tri28 = (long)3;\n \
    \       long tri29 = (long)1;\n        long tri30 = (long)2;\n        long tri31\
    \ = (long)3;\n        long tri32 = (long)1;\n        long tri33 = (long)2;\n \
    \       long tri34 = (long)3;\n        long tri35 = (long)1;\n        long tri36\
    \ = (long)2;\n        long tri37 = (long)3;\n        long tri38 = (long)1;\n \
    \       long tri39 = (long)2;\n        long tri40 = (long)3;\n        long tri41\
    \ = (long)1;\n        long tri42 = (long)2;\n        long tri43 = (long)3;\n \
    \       long tri44 = (long)1;\n        long tri45 = (long)2;\n        long tri46\
    \ = (long)3;\n        long tri47 = (long)1;\n        long tri48 = (long)2;\n \
    \       long tri49 = (long)3;\n        long tri50 = (long)1;\n        long tri51\
    \ = (long)2;\n        long tri52 = (long)3;\n        long tri53 = (long)1;\n \
    \       long tri54 = (long)2;\n        long tri55 = (long)3;\n        long tri56\
    \ = (long)1;\n        long tri57 = (long)2;\n        long tri58 = (long)3;\n \
    \       long tri59 = (long)1;\n        long tri60 = (long)2;\n        long tri61\
    \ = (long)3;\n        long tri62 = (long)1;\n        long ", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = a + b;\n            result.Add(c);\n            return result;\n\
    \        }\n        long a = Tri(n - 1);\n        long b = Tri(n - 2);\n     \
    \   long c = a + b;\n        result.Add(c);\n        result.Add(a + b);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3 = (long)2;\n\
    \        long tri4 = (long)3;\n        long tri5 = (long)1;\n        long tri6\
    \ = (long)2;\n        long tri7 = (long)3;\n        long tri8 = (long)1;\n   \
    \     long tri9 = (long)2;\n        long tri10 = (long)3;\n        long tri11\
    \ = (long)1;\n        long tri12 = (long)2;\n        long tri13 = (long)3;\n \
    \       long tri14 = (long)1;\n        long tri15 = (long)2;\n        long tri16\
    \ = (long)3;\n        long tri17 = (long)1;\n        long tri18 = (long)2;\n \
    \       long tri19 = (long)3;\n        long tri20 = (long)1;\n        long tri21\
    \ = (long)2;\n        long tri22 = (long)3;\n        long tri23 = (long)1;\n \
    \       long tri24 = (long)2;\n        long tri25 = (long)3;\n        long tri26\
    \ = (long)1;\n        long tri27 = (long)2;\n        long tri28 = (long)3;\n \
    \       long tri29 = (long)1;\n        long tri30 = (long)2;\n        long tri31\
    \ = (long)3;\n        long tri32 = (long)1;\n        long tri33 = (long)2;\n \
    \       long tri34 = (long)3;\n        long tri35 = (long)1;\n        long tri36\
    \ = (long)2;\n        long tri37 = (long)3;\n        long tri38 = (long)1;\n \
    \       long tri39 = (long)2;\n        long tri40 = (long)3;\n        long tri41\
    \ = (long)1;\n        long tri42 = (long)2;\n        long tri43 = (long)3;\n \
    \       long tri44 = (long)1;\n        long tri45 = (long)2;\n        long tri46\
    \ = (long)3;\n        long tri47 = (long)1;\n        long tri48 = (long)2;\n \
    \       long tri49 = (long)3;\n        long tri50 = (long)1;\n        long tri51\
    \ = (long)2;\n        long tri52 = (long)3;\n        long tri53 = (long)1;\n \
    \       long tri54 = (long)2;\n        long tri55 = (long)3;\n        long tri56\
    \ = (long)1;\n        long tri57 = (long)2;\n        long tri58 = (long)3;\n \
    \       long tri59 = (long)1;\n        long tri60 = (long)2;\n        long tri61\
    \ = (long)3;\n        long tri62 = (long)1;\n        long ", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n          \
    \  foreach (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n\
    \            foreach (long x in b) result.Add(x);\n            foreach (long x\
    \ in c) result.Add(x);\n            foreach (long x in a) result.Add(x);\n   \
    \         foreach (long x in b) result.Add(x);\n            foreach (long x in\
    \ c) result.Add(x);\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 1) + Tri(n + 2) + Tri(n\
    \ + 3));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n       \
    \     return result;\n        }\n        if (n == 2L) {\n            result.Add(1L);\n\
    \            result.Add(3L);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1L));\n            result.Add(Tri(n\
    \ - 2L));\n            result.Add(Tri(n + 1L));\n        } else {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n            result.Add(Tri(n - 3L));\n        }\n\
    \        return result;", "        if (n < 3L) {\n            return new List<long>();\n\
    \        }\n        var result = new List<long>();\n        long tri1 = 1L;\n\
    \        long tri2 = 2L;\n        long tri3 = tri1 + tri2;\n        long tri4\
    \ = tri3;\n        long tri5 = tri4;\n        long tri6 = tri5;\n        long\
    \ tri7 = tri6;\n        long tri8 = tri7;\n        long tri9 = tri8;\n       \
    \ long tri10 = tri9;\n        long tri11 = tri10;\n        long tri12 = tri11;\n\
    \        long tri13 = tri12;\n        long tri14 = tri13;\n        long tri15\
    \ = tri14;\n        long tri16 = tri15;\n        long tri17 = tri16;\n       \
    \ long tri18 = tri17;\n        long tri19 = tri18;\n        long tri20 = tri19;\n\
    \        long tri21 = tri20;\n        long tri22 = tri21;\n        long tri23\
    \ = tri22;\n        long tri24 = tri23;\n        long tri25 = tri24;\n       \
    \ long tri26 = tri25;\n        long tri27 = tri26;\n        long tri28 = tri27;\n\
    \        long tri29 = tri28;\n        long tri30 = tri29;\n        long tri31\
    \ = tri30;\n        long tri32 = tri31;\n        long tri33 = tri32;\n       \
    \ long tri34 = tri33;\n        long tri35 = tri34;\n        long tri36 = tri35;\n\
    \        long tri37 = tri36;\n        long tri38 = tri37;\n        long tri39\
    \ = tri38;\n        long tri40 = tri39;\n        long tri41 = tri40;\n       \
    \ long tri42 = tri41;\n        long tri43 = tri42;\n        long tri44 = tri43;\n\
    \        long tri45 = tri44;\n        long tri46 = tri45;\n        long tri47\
    \ = tri46;\n        long tri48 = tri47;\n        long tri49 = tri48;\n       \
    \ long tri50 = tri49;\n        long tri51 = tri50;\n        long tri52 = tri51;\n\
    \        long tri53 = tri52;\n        long tri54 = tri53;\n        long tri55\
    \ = tri54;\n        long tri56 = tri55;\n        long tri57 = tri56;\n       \
    \ long tri58 = tri", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) {\n            result.Add(0);\n            return result;\n       \
    \ }\n        if (n == 1) {\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) +\
    \ Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8)\
    \ + Tri(n - 9);", "        List<long> result = new List<long>();\n        if (n\
    \ == 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n \
    \       if (n % 2 == 0) {\n            long a = Tri(n / 2);\n            long\
    \ b = Tri(n - 1);\n            long c = Tri(n - 2);\n            long d = a +\
    \ b + c;\n            result.Add(d);\n        }\n        else {\n            long\
    \ a = Tri(n / 2);\n            long b = Tri(n - 1);\n            long c = Tri(n\
    \ - 2);\n            long d = a + b + c;\n            result.Add(d);\n       \
    \     result.Add(a + c);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    if (n < 3) return new List<long>();\n        if (n % 2 == 0) return new List<long>()\
    \ { Tri(n - 1) + Tri(n - 2) + Tri(n - 3) };\n        return new List<long>() {\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 3) };", "        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);", "        List<long> result = new List<long>();\n      \
    \  if (n == 0)\n            result.Add(0);\n        if (n == 1)\n            result.Add(1);\n\
    \        if (n == 2)\n            result.Add(3);\n        if (n % 2 == 0)\n  \
    \          result.Add(1 + n / 2);\n        else\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n + 2));\n        }\n        return result;", "        if (n == 0)\
    \ return new List<long>();\n        if (n == 1) return new List<long>(new long[]{(long)3L});\n\
    \        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n      \
    \  else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4)\
    \ + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8) + Tri(n - 9) + Tri(n - 10)\
    \ + Tri(n - 11) + Tri(n - 12) + Tri(n - 13) + Tri(n - 14) + Tri(n - 15) + Tri(n\
    \ - 16) + Tri(n - 17) + Tri(n - 18) + Tri(n - 19) + Tri(n - 20) + Tri(n - 21)\
    \ + Tri(n - 22) + Tri(n - 23) + Tri(n - 24) + Tri(n - 25) + Tri(n - 26) + Tri(n\
    \ - 27) + Tri(n - 28) + Tri(n - 29) + Tri(n - 30) + Tri(n - 31) + Tri(n - 32)\
    \ + Tri(n - 33) + Tri(n - 34) + Tri(n - 35) + Tri(n - 36) + Tri(n - 37) + Tri(n\
    \ - 38) + Tri(n - 39) + Tri(n - 40) + Tri(n - 41) + Tri(n - 42) + Tri(n - 43)\
    \ + Tri(n - 44) + Tri(n - 45) + Tri(n - 46) + Tri(n - 47) + Tri(n - 48) + Tri(n\
    \ - 49) + Tri(n - 50) + Tri(n - 51) + Tri(n - 52) + Tri(n - 53) + Tri(n - 54)\
    \ + Tri(n - 55) + Tri(n - 56) + Tri(n - 57) + Tri(n - 58) + Tri(n - 59) + Tri(n\
    \ - 60) + Tri(n - 61) + Tri(n - 62) + Tri(n - 63) + Tri(n - 64) + Tri(n - 65)\
    \ + Tri(n - 66) + Tri(n - 67) + Tri(n - 68) + Tri(n - 69) + Tri(n - 70) + Tri(n\
    \ - 71) + Tri(n - 72) + Tri(n - 73) + Tri(n - 74) + Tri(n - 75) + Tri(n - 76)\
    \ + Tri(n - 77) + Tri(n - 78) + Tri(n - 79) + Tri(n - 80) + Tri(n - 81)});", " \
    \       List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n - 3) + Tri(n - 1) + Tri(n - 2);\n            foreach (var\
    \ item in new long[] { a, b, c }) {\n                result.Add(item);\n     \
    \       }\n        } else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2) + Tri(n - 1) + Tri(n - 3);\n            foreach (var item in\
    \ new long[] { a, b, a }) {\n                result.Add(item);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        if (n == 1)\n      \
    \      result.Add(1);\n        if (n == 2)\n            result.Add(3);\n     \
    \   if (n % 2 == 0)\n            result.Add(1 + n / 2);\n        else\n      \
    \      result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else\
    \ {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1));\n\
    \        }\n        return result;", "        if (n == 0) {\n            return\
    \ new List<long>();\n        }\n        if (n == 1) {\n            return new\
    \ List<long>() { 1 };\n        }\n        if (n % 2 == 0) {\n            return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        } else {\n            return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5)\
    \ + Tri(n - 6) + Tri(n - 7) + Tri(n - 8);\n        }", "        if (n < 3L) {\n\
    \            return new List<long>();\n        }\n        long a = 2L;\n     \
    \   long b = 1;\n        long c = 1L;\n        List<long> result = new List<long>();\n\
    \        do {\n            result.Add(c);\n            long d = a + b + c;\n \
    \           if (n % 2 == 0) {\n                a = b;\n                b = c;\n\
    \                c = d;\n            } else {\n                a = c;\n      \
    \          b = d;\n                c = a + b + c;\n            }\n           \
    \ n -= 1;\n        } while (n > 0);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long\
    \ tri3 = Tri(n - 3);\n            long tri4 = tri1 + tri2 + tri3;\n          \
    \  result.Add(tri4);\n            return result;\n        }\n        long tri1\
    \ = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n -\
    \ 3);\n        long tri4 = tri1 + tri2 + tri3;\n        result.Add(tri1);\n  \
    \      result.Add(tri2);\n        result.Add(tri3);\n        result.Add(tri4);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1);\n            result.AddRange(new List<long>() { a, b, c });\n        }\
    \ else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            result.AddRange(new\
    \ List<long>() { a, b, c });\n            result.Add(Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1));\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n \
    \           return result;\n        }\n        if (n == 2L) {\n            result.Add(1L);\n\
    \            result.Add(3L);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1L);\n        long tri2 = Tri(n - 2L);\n        long tri3 = Tri(n\
    \ - 3L);\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long\
    \ sum = 0;\n            foreach (var item in a) {\n                sum += item;\n\
    \            }\n            foreach (var item in b) {\n                sum +=\
    \ item;\n            }\n            foreach (var item in c) {\n              \
    \  sum += item;\n            }\n            result.Add(sum);\n        } else {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            long sum = 0;\n            foreach (var\
    \ item in a) {\n                sum += item;\n            }\n            foreach\
    \ (var item in b) {\n                sum += item;\n            }\n           \
    \ foreach (var item in c) {\n                sum += item;\n            }\n   \
    \         result.Add(sum);\n            result.Add(sum);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        long tri1 = Tri(n - 1);\n        long\
    \ tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        result.Add((tri1\
    \ + tri2 + tri3));\n        return result;", "        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1)});\n        else return new List<long>(new long[]{(long)Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n - 3)});", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a) {\n                result.Add(item);\n            }\n      \
    \      foreach (var item in b) {\n                result.Add(item);\n        \
    \    }\n            foreach (var item in c) {\n                result.Add(item);\n\
    \            }\n        } else {\n            long a = Tri(n - 1);\n         \
    \   long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a) {\n                result.Add(item);\n            }\n      \
    \      foreach (var item in b) {\n                result.Add(item);\n        \
    \    }\n            foreach (var item in c) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n % 2 == 0) {\n            long\
    \ tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n            long tri3\
    \ = Tri(n - 3);\n            long tri4 = tri1 + tri2 + tri3;\n            result.AddRange(tri1,\
    \ tri2, tri3, tri4);\n        } else {\n            long tri1 = Tri(n - 1);\n\
    \            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n  \
    \          long tri4 = tri1 + tri2 + tri3;\n            result.AddRange(tri1,\
    \ tri2, tri3, tri4);\n            result.AddRange(tri1, tri2, tri3, tri4);\n \
    \       }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n / 2);\n      \
    \      long b = Tri(n - 1);\n            long c = Tri(n - 2);\n            long\
    \ d = a + b + c;\n            result.Add(d);\n        }\n        else {\n    \
    \        long a = Tri(n / 2);\n            long b = Tri(n - 1);\n            long\
    \ c = Tri(n - 2);\n            long d = a + b + c;\n            result.Add(d);\n\
    \            result.Add(d);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = a + b;\n            result.Add(c);\n            return result;\n        }\
    \ else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = a + b;\n            result.Add(c);\n            long d =\
    \ Tri(n - 3);\n            result.Add(d);\n            return result;\n      \
    \  }", "        List<long> result = new List<long>();\n        if (n == 0) return\
    \ result;\n        if (n == 1) return new List<long>() { 1 };\n        if (n %\
    \ 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = Tri(n - 3) + Tri(n - 1) + Tri(n - 2);\n            long\
    \ sum = a + b + c;\n            result.Add(sum);\n            return result;\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2) + Tri(n - 1);\n            long c = Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n\
    \            long sum = a + b + c;\n            result.Add(sum);\n           \
    \ return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n       \
    \     long tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n         \
    \   long tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n           \
    \ long tri10 = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n         \
    \   long tri12 = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n       \
    \     long tri14 = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n     \
    \       long tri16 = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n   \
    \         long tri18 = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n \
    \           long tri20 = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n\
    \            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n\
    \            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n\
    \            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n\
    \            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n\
    \            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n\
    \            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n\
    \            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n\
    \            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n\
    \            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n\
    \            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n\
    \            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n\
    \            long tri44 = Tri(n - 44);\n            long tri45 = Tri(n - 45);\n\
    \            long tri46 = Tri(n - 46);\n            long tri", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n - 1);\n        else return Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1);", "        List<long> result = new List<long>();\n        if (n\
    \ == 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n \
    \       if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long\
    \ tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4\
    \ = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n            long tri6 =\
    \ Tri(n - 6);\n            long tri7 = Tri(n - 7);\n            long tri8 = Tri(n\
    \ - 8);\n            long tri9 = Tri(n - 9);\n            long tri10 = Tri(n -\
    \ 10);\n            long tri11 = Tri(n - 11);\n            long tri12 = Tri(n\
    \ - 12);\n            long tri13 = Tri(n - 13);\n            long tri14 = Tri(n\
    \ - 14);\n            long tri15 = Tri(n - 15);\n            long tri16 = Tri(n\
    \ - 16);\n            long tri17 = Tri(n - 17);\n            long tri18 = Tri(n\
    \ - 18);\n            long tri19 = Tri(n - 19);\n            long tri20 = Tri(n\
    \ - 20);\n            long tri21 = Tri(n - 21);\n            long tri22 = Tri(n\
    \ - 22);\n            long tri23 = Tri(n - 23);\n            long tri24 = Tri(n\
    \ - 24);\n            long tri25 = Tri(n - 25);\n            long tri26 = Tri(n\
    \ - 26);\n            long tri27 = Tri(n - 27);\n            long tri28 = Tri(n\
    \ - 28);\n            long tri29 = Tri(n - 29);\n            long tri30 = Tri(n\
    \ - 30);\n            long tri31 = Tri(n - 31);\n            long tri32 = Tri(n\
    \ - 32);\n            long tri33 = Tri(n - 33);\n            long tri34 = Tri(n\
    \ - 34);\n            long tri35 = Tri(n - 35);\n            long tri36 = Tri(n\
    \ - 36);\n            long tri37 = Tri(n - 37);\n            long tri38 = Tri(n\
    \ - 38);\n            long tri39 = Tri(n - 39);\n            long tri40 = Tri(n\
    \ - 40);\n            long tri41 = Tri(n - 41);\n            long tri42 = Tri(n\
    \ - 42);\n            long tri43 = Tri(n - 43);\n            long tri44 = Tri(n\
    \ - 44);\n            long tri45 = Tri(n - 45);\n            long tri46 = Tri(n\
    \ - 46);\n            long tri", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 1L) {\n         \
    \   result.Add(1L);\n            return result;\n        }\n        if (n == 2L)\
    \ {\n            result.Add(1L);\n            result.Add(3L);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            long a = Tri(n -\
    \ 1L);\n            long b = Tri(n - 2L);\n            long c = Tri(n + 1L);\n\
    \            result.AddRange(a);\n            result.Add(b + c);\n           \
    \ return result;\n        }\n        long a = Tri(n - 1L);\n        long b = Tri(n\
    \ - 2L);\n        result.AddRange(a);\n        result.Add(b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n -\
    \ 3));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ - 3) + Tri(n - 4));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long tri1 = (long)3;\n   \
    \     long tri2 = (long)1;\n        long tri3 = (long)2;\n        long tri4 =\
    \ (long)3;\n        long tri5 = (long)1;\n        long tri6 = (long)2;\n     \
    \   long tri7 = (long)3;\n        long tri8 = (long)1;\n        long tri9 = (long)2;\n\
    \        long tri10 = (long)3;\n        long tri11 = (long)1;\n        long tri12\
    \ = (long)2;\n        long tri13 = (long)3;\n        long tri14 = (long)1;\n \
    \       long tri15 = (long)2;\n        long tri16 = (long)3;\n        long tri17\
    \ = (long)1;\n        long tri18 = (long)2;\n        long tri19 = (long)3;\n \
    \       long tri20 = (long)1;\n        long tri21 = (long)2;\n        long tri22\
    \ = (long)3;\n        long tri23 = (long)1;\n        long tri24 = (long)2;\n \
    \       long tri25 = (long)3;\n        long tri26 = (long)1;\n        long tri27\
    \ = (long)2;\n        long tri28 = (long)3;\n        long tri29 = (long)1;\n \
    \       long tri30 = (long)2;\n        long tri31 = (long)3;\n        long tri32\
    \ = (long)1;\n        long tri33 = (long)2;\n        long tri34 = (long)3;\n \
    \       long tri35 = (long)1;\n        long tri36 = (long)2;\n        long tri37\
    \ = (long)3;\n        long tri38 = (long)1;\n        long tri39 = (long)2;\n \
    \       long tri40 = (long)3;\n        long tri41 = (long)1;\n        long tri42\
    \ = (long)2;\n        long tri43 = (long)3;\n        long tri44 = (long)1;\n \
    \       long tri45 = (long)2;\n        long tri46 = (long)3;\n        long tri47\
    \ = (long)1;\n        long tri48 = (long)2;\n        long tri49 = (long)3;\n \
    \       long tri50 = (long)1;\n        long tri51 = (long)2;\n        long tri52\
    \ = (long)3;\n        long tri53 = (long)1;\n        long tri54 = (long)2;\n \
    \       long tri55 = (long)3;\n        long tri56 = (long)1;\n        long tri57\
    \ = (long)2;\n        long tri58 = (long)3;\n        long tri59 = (long)1;\n \
    \       long tri60 = (long)2;\n        long tri61 = (long)3;\n        long tri62\
    \ = (long)1;\n        long ", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n / 2);\n      \
    \      long b = Tri(n - 1);\n            long c = Tri(n - 2);\n            long\
    \ d = a + b + c;\n            result.Add(d);\n        }\n        else {\n    \
    \        long a = Tri(n / 2);\n            long b = Tri(n - 1);\n            long\
    \ c = Tri(n - 2);\n            long d = a + b + c;\n            result.Add(d);\n\
    \            result.Add(a);\n            result.Add(b);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { (long)1 };\n \
    \       if (n == 2) return new List<long>() { (long)1 };\n        if (n % 2 ==\
    \ 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n \
    \           long c = Tri(n + 1);\n            long sum = 0;\n            foreach\
    \ (long x in a) sum += x;\n            foreach (long x in b) sum += x;\n     \
    \       foreach (long x in c) sum += x;\n            result.Add((long)sum);\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n + 1);\n            long sum = 0;\n       \
    \     foreach (long x in a) sum += x;\n            foreach (long x in b) sum +=\
    \ x;\n            foreach (long x in c) sum += x;\n            result.Add((long)sum);\n\
    \            result.Add((long)sum);\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n / 2);\n            long b = Tri(n - 1);\n        \
    \    long c = Tri(n - 2);\n            long d = a + b + c;\n            result.Add(d);\n\
    \        }\n        else {\n            long a = Tri(n / 2);\n            long\
    \ b = Tri(n - 1);\n            long c = Tri(n - 2);\n            long d = a +\
    \ b + c;\n            result.Add(d);\n            long e = Tri(n / 2 + 1);\n \
    \           result.Add(e);\n        }\n        return result;", "        if (n\
    \ == 0) return new List<long>();\n        if (n == 1) return new List<long>(new\
    \ long[]{3L});\n        if (n % 2 == 0) {\n            return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);\n        } else {\n            return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 2);\n        }", "   \
    \     List<long> result = new List<long>();\n        if (n == 0) result.Add(0);\n\
    \        if (n == 1) result.Add(1);\n        if (n == 2) result.Add(2);\n    \
    \    if (n % 2 == 0) {\n            int n1 = Tri(n / 2);\n            int n2 =\
    \ Tri(n - 1);\n            int n3 = Tri(n - 2);\n            int n4 = Tri(n +\
    \ 1);\n            int n5 = Tri(n - 3);\n            int n6 = Tri(n - 4);\n  \
    \          int n7 = Tri(n + 3);\n            int n8 = Tri(n - 5);\n          \
    \  int n9 = Tri(n - 6);\n            int n10 = Tri(n + 5);\n            int n11\
    \ = Tri(n - 7);\n            int n12 = Tri(n - 8);\n            int n13 = Tri(n\
    \ + 6);\n            int n14 = Tri(n - 9);\n            int n15 = Tri(n - 10);\n\
    \            int n16 = Tri(n + 7);\n            int n17 = Tri(n - 11);\n     \
    \       int n18 = Tri(n - 12);\n            int n19 = Tri(n + 8);\n          \
    \  int n20 = Tri(n - 13);\n            int n21 = Tri(n - 14);\n            int\
    \ n22 = Tri(n + 9);\n            int n23 = Tri(n - 15);\n            int n24 =\
    \ Tri(n - 16);\n            int n25 = Tri(n + 10);\n            int n26 = Tri(n\
    \ - 17);\n            int n27 = Tri(n - 18);\n            int n28 = Tri(n + 11);\n\
    \            int n29 = Tri(n - 19);\n            int n30 = Tri(n - 20);\n    \
    \        int n31 = Tri(n + 12);\n            int n32 = Tri(n - 21);\n        \
    \    int n33 = Tri(n - 22);\n            int n34 = Tri(n + 13);\n            int\
    \ n35 = Tri(n - 23);\n            int n36 = Tri(n - 24);\n            int n37\
    \ = Tri(n + 14);\n            int n38 = Tri(n - 25);\n            int n39 = Tri(n\
    \ - 26);\n            int n40 = Tri(n + 15);\n            int n41 = Tri(n - 27);\n\
    \            int n42 = Tri(n - 28);\n            int n43 = Tri(n + 16);\n    \
    \        int n44 = Tri(n - 29);\n            int n45 = Tri(n - 30);\n        \
    \    int n46 = Tri(n + 17);\n            int n47 = Tri(n - 31);\n            int\
    \ n48 = Tri", "        List<long> result = new List<long>();\n        if (n ==\
    \ 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n    \
    \    if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n            long\
    \ tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n            long tri4\
    \ = tri1 + tri2 + tri3;\n            result.Add(tri4);\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n - 3);\n        long tri4 = tri1 + tri2 + tri3;\n  \
    \      result.Add(tri4);\n        result.Add(tri3);\n        result.Add(tri2);\n\
    \        result.Add(tri1);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 1L) {\n            result.Add(1L);\n            return result;\n  \
    \      }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1L);\n            long b = Tri(n - 2L);\n            long\
    \ c = Tri(n + 1L);\n            result.AddRange(a);\n            result.Add(b);\n\
    \            result.Add(c);\n            return result;\n        }\n        else\
    \ {\n            long a = Tri(n - 1L);\n            long b = Tri(n - 2L);\n  \
    \          result.AddRange(a);\n            result.Add(b);\n            return\
    \ result;\n        }", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) return result;\n        if (n == 1) return new List<long>() { 1\
    \ };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n       \
    \     long tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n         \
    \   foreach (long i in tri1) {\n                result.Add(i);\n            }\n\
    \            foreach (long i in tri2) {\n                result.Add(i);\n    \
    \        }\n            foreach (long i in tri3) {\n                result.Add(i);\n\
    \            }\n            return result;\n        }\n        long tri1 = Tri(n\
    \ - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n + 1);\n  \
    \      foreach (long i in tri1) {\n            result.Add(i);\n        }\n   \
    \     foreach (long i in tri2) {\n            result.Add(i);\n        }\n    \
    \    foreach (long i in tri3) {\n            result.Add(i);\n        }\n     \
    \   return result;", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n ==\
    \ 1) {\n            result.Add(0);\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(0);\n    \
    \        result.Add(1);\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n        } else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1L);\n            long tri2 = Tri(n - 2L);\n          \
    \  long tri3 = Tri(n + 1L);\n            result.AddRange(tri1);\n            result.AddRange(tri2);\n\
    \            result.AddRange(tri3);\n            return result;\n        }\n \
    \       long tri1 = Tri(n - 1L);\n        long tri2 = Tri(n - 2L);\n        long\
    \ tri3 = Tri(n + 1L);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        return result;", "        if (n < 3)\
    \ {\n            return new List<long>();\n        }\n        long tri1 = Tri(n\
    \ - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n  \
    \      List<long> result = new List<long>();\n        result.Add(tri1);\n    \
    \    result.Add(tri2);\n        result.Add(tri3);\n        return result;", " \
    \       if (n == 0) {\n            return new List<long>();\n        }\n     \
    \   if (n == 1) {\n            return new List<long>() { 1 };\n        }\n   \
    \     if (n % 2 == 0) {\n            return Tri(n - 1) + Tri(n - 2) + Tri(n -\
    \ 1);\n        }\n        return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);", "   \
    \     List<long> result = new List<long>();\n        if (n == 0)\n           \
    \ result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n     \
    \   else if (n % 2 == 0)\n            result.Add(Tri(n - 1) + Tri(n - 2));\n \
    \       else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        return result;", "        if (n == 0) return new List<long>(new long[]{(long)1L});\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n == 2) return new List<long>(new long[]{(long)2L});\n        if (n % 2 ==\
    \ 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n\
    \ - 6) + Tri(n - 7) + Tri(n - 8);", "        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        long tri1 = Tri(n - 1L);\n   \
    \     long tri2 = Tri(n - 2L);\n        long tri3 = Tri(n - 3L);\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri3);\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n - 3);\n            long d = a + b + c;\n            result.Add(d);\n\
    \        }\n        else {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n - 3);\n            long d = a +\
    \ b + c;\n            result.Add(d);\n            result.Add(a + c);\n       \
    \ }\n        return result;", "        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        } else {\n\
    \            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8) + Tri(n - 9) + Tri(n\
    \ - 10) + Tri(n - 11) + Tri(n - 12) + Tri(n - 13) + Tri(n - 14) + Tri(n - 15)\
    \ + Tri(n - 16) + Tri(n - 17) + Tri(n - 18) + Tri(n - 19) + Tri(n - 20) + Tri(n\
    \ - 21) + Tri(n - 22) + Tri(n - 23) + Tri(n - 24) + Tri(n - 25) + Tri(n - 26)\
    \ + Tri(n - 27) + Tri(n - 28) + Tri(n - 29) + Tri(n - 30) + Tri(n - 31) + Tri(n\
    \ - 32) + Tri(n - 33) + Tri(n - 34) + Tri(n - 35) + Tri(n - 36) + Tri(n - 37)\
    \ + Tri(n - 38) + Tri(n - 39) + Tri(n - 40) + Tri(n - 41) + Tri(n - 42) + Tri(n\
    \ - 43) + Tri(n - 44) + Tri(n - 45) + Tri(n - 46) + Tri(n - 47) + Tri(n - 48)\
    \ + Tri(n - 49) + Tri(n - 50) + Tri(n - 51) + Tri(n - 52) + Tri(n - 53) + Tri(n\
    \ - 54) + Tri(n - 55) + Tri(n - 56) + Tri(n - 57) + Tri(n - 58) + Tri(n - 59)\
    \ + Tri(n - 60) + Tri(n - 61) + Tri(n - 62) + Tri(n - 63) + Tri(n - 64) + Tri(n\
    \ - 65) + Tri(n - 66) + Tri(n - 67) + Tri(n - 68) + Tri(n - 69) + Tri(n - 70)\
    \ + Tri(n - 71) + Tri(n - 72) + Tri(n - 73) + Tri(n - 74) + Tri(n - 75) + Tri(n\
    \ - 76) + Tri(n - 77) + Tri(n - 78) + Tri(n - 79) + Tri(n - 80) + Tri(n - 81)\
    \ + Tri(n - 82) + Tri(n - 83) + Tri(n - 84) + Tri(n - 85) + Tri(n - 86) + Tri(n\
    \ - 87) + Tri(n - 88) + Tri(n - 89) + Tri(n - 90) + Tri(n - 91) + Tri(n - 92)\
    \ + Tri(n - 93) + Tri(n - ", "        if (n < 3) return new List<long>();\n  \
    \      if (n % 2 == 0) return new List<long>() { n };\n        var result = new\
    \ List<long>();\n        var tri1 = Tri(n - 1);\n        var tri2 = Tri(n - 2);\n\
    \        var tri3 = Tri(n - 3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n     \
    \       result.Add(Tri(n - 1) + Tri(n - 2));\n        }\n        return result;",
  "        if (n == 0) return new List<long>();\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2);", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n\
    \        if (n == 2) result.Add(3);\n        if (n % 2 == 0) result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        else result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        return result;", "        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long> result =\
    \ new List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n\
    \ - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n\
    \ - 1) + Tri(n - 2);\n            long d = Tri(n - 4) + Tri(n - 3) + Tri(n - 2)\
    \ + Tri(n - 1);\n            long e = Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n\
    \ - 2) + Tri(n - 1);\n            long f = Tri(n - 6) + Tri(n - 5) + Tri(n - 4)\
    \ + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long g = Tri(n - 7) + Tri(n\
    \ - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n   \
    \         long h = Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n -\
    \ 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            result.AddRange(new\
    \ long[] { a, b, c, d, e, f, g, h });\n        } else {\n            long a =\
    \ Tri(n - 1);\n            long b = Tri(n - 2) + Tri(n - 1);\n            long\
    \ c = Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long d = Tri(n - 4) +\
    \ Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long e = Tri(n - 5) + Tri(n\
    \ - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long f = Tri(n - 6)\
    \ + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n        \
    \    long g = Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) +\
    \ Tri(n - 2) + Tri(n - 1);\n            long h = Tri(n - 8) + Tri(n - 7) + Tri(n\
    \ - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n   \
    \         result.AddRange(new long[] { a, b, c, d, e, f, g, h });\n        }\n\
    \        return result;", "        if (n == 1L) return new List<long>(new long[]{1L});\n\
    \        if (n == 2L) return new List<long>(new long[]{3L});\n        if (n %\
    \ 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long>\
    \ result = new List<long>();\n        long a = 1;\n        long b = 2;\n     \
    \   long c = 1;\n        long d = 1;\n        long e = 1;\n        long f = 3;\n\
    \        long g = 1;\n        long h = 1;\n        long i = 1;\n        long j\
    \ = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n      \
    \  long n = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n\
    \        long r = 1;\n        long s = 1;\n        long t = 1;\n        long u\
    \ = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n      \
    \  long y = 1;\n        long z = 1;\n        long a = 1;\n        long b = 2;\n\
    \        long c = 1;\n        long d = 1;\n        long e = 1;\n        long f\
    \ = 3;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n      \
    \  long j = 1;\n        long k = 1;\n        long l = 1;\n        long m = 1;\n\
    \        long n = 1;\n        long o = 1;\n        long p = 1;\n        long q\
    \ = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n      \
    \  long u = 1;\n        long v = 1;\n        long w = 1;\n        long x = 1;\n\
    \        long y = 1;\n        long z = 1;\n        long a = 1;\n        long b\
    \ = 2;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n      \
    \  long f = 3;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x\
    \ = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n      \
    \  long b = 2;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n\
    \        long f = 3;\n        long g = 1;\n        long h = 1;\n        long i\
    \ = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n      \
    \  long m = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n\
    \        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t\
    \ = 1;\n        long u = 1;\n        long v = 1;\n        long ", "        if\
    \ (n == 0) return new List<long>();\n        if (n == 1) return new List<long>(new\
    \ long[]{(long)3L});\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2);", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n == 2) return new List<long>()\
    \ { 1, 3 };\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n - 3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n == 2) return new List<long>()\
    \ { 1, 2 };\n        if (n % 2 == 0) {\n            int n1 = Tri(n / 2);\n   \
    \         int n2 = Tri(n - 1);\n            int n3 = Tri(n - 2);\n           \
    \ int n4 = Tri(n + 1);\n            int n5 = Tri(n - 3);\n            int n6 =\
    \ Tri(n - 4);\n            int n7 = Tri(n - 5);\n            int n8 = Tri(n -\
    \ 6);\n            int n9 = Tri(n - 7);\n            int n10 = Tri(n - 8);\n \
    \           int n11 = Tri(n - 9);\n            int n12 = Tri(n - 10);\n      \
    \      int n13 = Tri(n - 11);\n            int n14 = Tri(n - 12);\n          \
    \  int n15 = Tri(n - 13);\n            int n16 = Tri(n - 14);\n            int\
    \ n17 = Tri(n - 15);\n            int n18 = Tri(n - 16);\n            int n19\
    \ = Tri(n - 17);\n            int n20 = Tri(n - 18);\n            int n21 = Tri(n\
    \ - 19);\n            int n22 = Tri(n - 20);\n            int n23 = Tri(n - 21);\n\
    \            int n24 = Tri(n - 22);\n            int n25 = Tri(n - 23);\n    \
    \        int n26 = Tri(n - 24);\n            int n27 = Tri(n - 25);\n        \
    \    int n28 = Tri(n - 26);\n            int n29 = Tri(n - 27);\n            int\
    \ n30 = Tri(n - 28);\n            int n31 = Tri(n - 29);\n            int n32\
    \ = Tri(n - 30);\n            int n33 = Tri(n - 31);\n            int n34 = Tri(n\
    \ - 32);\n            int n35 = Tri(n - 33);\n            int n36 = Tri(n - 34);\n\
    \            int n37 = Tri(n - 35);\n            int n38 = Tri(n - 36);\n    \
    \        int n39 = Tri(n - 37);\n            int n40 = Tri(n - 38);\n        \
    \    int n41 = Tri(n - 39);\n            int n42 = Tri(n - 40);\n            int\
    \ n43 = Tri(n - 41);\n            int n44 = Tri(n - 42);\n            int n45\
    \ = Tri(n - 43);\n            int n", "        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) result.Add(0);\n        else\
    \ if (n == 1) result.Add(1);\n        else if (n % 2 == 0) result.Add(Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1));\n        else result.Add(Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (n == 0) result.Add(1L);\n        if (n == 1) result.Add(3L);\n        if\
    \ (n == 2) result.Add(2L);\n        if (n % 2 == 0) result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        else result.Add(Tri(n - 1) + Tri(n - 2));\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n   \
    \         result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(1);\n            result.Add(1);\n          \
    \  return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        }\n        return result;", "        if (n == 0)\n\
    \            return new List<long>();\n        if (n == 1)\n            return\
    \ new List<long>(new long[]{(long)3L});\n        if (n % 2 == 0)\n           \
    \ return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n + 1)});\n\
    \        else\n            return new List<long>(new long[]{(long)Tri(n - 1) +\
    \ Tri(n - 2) + Tri(n - 3)});", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long a = 1;\n        long\
    \ b = 2;\n        long c = 1;\n        long d = 1;\n        long temp;\n     \
    \   long temp2;\n        long temp3;\n        long temp4;\n        long temp5;\n\
    \        long temp6;\n        long temp7;\n        long temp8;\n        long temp9;\n\
    \        long temp10;\n        long temp11;\n        long temp12;\n        long\
    \ temp13;\n        long temp14;\n        long temp15;\n        long temp16;\n\
    \        long temp17;\n        long temp18;\n        long temp19;\n        long\
    \ temp20;\n        long temp21;\n        long temp22;\n        long temp23;\n\
    \        long temp24;\n        long temp25;\n        long temp26;\n        long\
    \ temp27;\n        long temp28;\n        long temp29;\n        long temp30;\n\
    \        long temp31;\n        long temp32;\n        long temp33;\n        long\
    \ temp34;\n        long temp35;\n        long temp36;\n        long temp37;\n\
    \        long temp38;\n        long temp39;\n        long temp40;\n        long\
    \ temp41;\n        long temp42;\n        long temp43;\n        long temp44;\n\
    \        long temp45;\n        long temp46;\n        long temp47;\n        long\
    \ temp48;\n        long temp49;\n        long temp50;\n        long temp51;\n\
    \        long temp52;\n        long temp53;\n        long temp54;\n        long\
    \ temp55;\n        long temp56;\n        long temp57;\n        long temp58;\n\
    \        long temp59;\n        long temp60;\n        long temp61;\n        long\
    \ temp62;\n        long temp63;\n        long temp64;\n        long temp65;\n\
    \        long temp66;\n        long temp67;\n        long temp68;\n        long\
    \ temp69;\n        long temp70;\n        long temp71;\n        long temp72;\n\
    \        long temp73;\n        long temp74;\n        long temp75;\n        long\
    \ temp76;\n        long temp77;\n        long temp78;\n        long temp79;\n\
    \        long temp80;\n        long temp81;\n        long temp82;\n        long\
    \ temp83;\n        long temp84", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1));\n        } else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   if (n == 0) return result;\n        if (n == 1) return new List<long>() {\
    \ 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            return result;\n        if (n == 1)\n      \
    \      result.Add(3);\n        else if (n % 2 == 0)\n            result.Add(1\
    \ + n / 2);\n        else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        return result;", "        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1);", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n + 2));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7);",
  "        if (n == 0) return new List<long>();\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) result.Add(0L);\n        if (n == 1)\
    \ result.Add(1L);\n        if (n == 2) result.Add(2L);\n        if (n % 2 == 0)\
    \ {\n            long tri1 = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n         \
    \   long tri2 = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            long tri3 =\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            result.Add(tri1);\n     \
    \       result.Add(tri2);\n            result.Add(tri3);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ {\n            result.Add(0);\n            return result;\n        }\n     \
    \   if (n == 1) {\n            result.Add(1);\n            return result;\n  \
    \      }\n        if (n == 2) {\n            result.Add(3);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 1) + Tri(n\
    \ + 2) + Tri(n + 3));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L) + Tri(n - 2L));\n        } else {\n            result.Add(Tri(n\
    \ - 1L) + Tri(n - 1L) + Tri(n + 1L));\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long a = 1;\n        long\
    \ b = 2;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n    \
    \    long f = 1;\n        long g = 1;\n        long h = 1;\n        long i = 1;\n\
    \        long j = 1;\n        long k = 1;\n        long l = 1;\n        long m\
    \ = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n      \
    \  long q = 1;\n        long r = 1;\n        long s = 1;\n        long t = 1;\n\
    \        long u = 1;\n        long v = 1;\n        long w = 1;\n        long x\
    \ = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n      \
    \  long b = 2;\n        long c = 1;\n        long d = 1;\n        long e = 1;\n\
    \        long f = 1;\n        long g = 1;\n        long h = 1;\n        long i\
    \ = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n      \
    \  long m = 1;\n        long n = 1;\n        long o = 1;\n        long p = 1;\n\
    \        long q = 1;\n        long r = 1;\n        long s = 1;\n        long t\
    \ = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n      \
    \  long x = 1;\n        long y = 1;\n        long z = 1;\n        long a = 1;\n\
    \        long b = 2;\n        long c = 1;\n        long d = 1;\n        long e\
    \ = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n      \
    \  long i = 1;\n        long j = 1;\n        long k = 1;\n        long l = 1;\n\
    \        long m = 1;\n        long n = 1;\n        long o = 1;\n        long p\
    \ = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n      \
    \  long t = 1;\n        long u = 1;\n        long v = 1;\n        long w = 1;\n\
    \        long x = 1;\n        long y = 1;\n        long z = 1;\n        long a\
    \ = 1;\n        long b = 2;\n        long c = 1;\n        long d = 1;\n      \
    \  long e = 1;\n        long f = 1;\n        long g = 1;\n        long h = 1;\n\
    \        long i = 1;\n        long j = 1;\n        long k = 1;\n        long l\
    \ = 1;\n        long m = 1;\n        long n = 1;\n        long o = 1;\n      \
    \  long p = 1;\n        long q = 1;\n        long r = 1;\n        long s = 1;\n\
    \        long t = 1;\n        long u = 1;\n        long v = 1;\n        long ",
  "        List<long> result = new List<long>();\n        if (n == 0)\n          \
    \  result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n    \
    \    else if (n % 2 == 0)\n            result.Add(Tri(n - 1) + Tri(n - 2));\n\
    \        else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n  \
    \      }\n        return result;", "        if (n < 3L) {\n            return\
    \ new List<long>();\n        }\n        List<long> result = new List<long>();\n\
    \        long tri1 = 3L;\n        long tri2 = 1L;\n        long tri3 = 2L;\n \
    \       long tri4 = 3L;\n        long tri5 = tri1 + tri2 + tri3;\n        long\
    \ tri6 = tri4 + tri5;\n        long tri7 = tri6 + tri4;\n        long tri8 = tri7\
    \ + tri6;\n        long tri9 = tri8 + tri7;\n        long tri10 = tri9 + tri8;\n\
    \        long tri11 = tri10 + tri9;\n        long tri12 = tri11 + tri10;\n   \
    \     long tri13 = tri12 + tri11;\n        long tri14 = tri13 + tri12;\n     \
    \   long tri15 = tri14 + tri13;\n        long tri16 = tri15 + tri14;\n       \
    \ long tri17 = tri16 + tri15;\n        long tri18 = tri17 + tri16;\n        long\
    \ tri19 = tri18 + tri17;\n        long tri20 = tri19 + tri18;\n        long tri21\
    \ = tri20 + tri19;\n        long tri22 = tri21 + tri20;\n        long tri23 =\
    \ tri22 + tri21;\n        long tri24 = tri23 + tri22;\n        long tri25 = tri24\
    \ + tri23;\n        long tri26 = tri25 + tri24;\n        long tri27 = tri26 +\
    \ tri25;\n        long tri28 = tri27 + tri26;\n        long tri29 = tri28 + tri27;\n\
    \        long tri30 = tri29 + tri28;\n        long tri31 = tri30 + tri29;\n  \
    \      long tri32 = tri31 + tri30;\n        long tri33 = tri32 + tri31;\n    \
    \    long tri34 = tri33 + tri32;\n        long tri35 = tri34 + tri33;\n      \
    \  long tri36 = tri35 + tri34;\n        long tri37 = tri36 + tri35;\n        long\
    \ tri38 = tri37 + tri36;\n        long tri39 = tri38 + tri37;\n        long tri40\
    \ = tri39 + tri38;\n        long tri41 = tri40 + tri39;\n        long tri42 =\
    \ tri41 + tri40;\n        long tri43 = tri42 + tri41;\n        long tri44 = tri43\
    \ + tri42;\n        ", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) return result;\n        if (n == 1) return new List<long>() { 1\
    \ };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1);\n            result.AddRange(new List<long>() { a, b, c });\n        }\
    \ else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            result.AddRange(new\
    \ List<long>() { a, b, c });\n            result.AddRange(new List<long>() { a,\
    \ b, c });\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            result.Add(1);\n            return result;\n \
    \       }\n        if (n == 1) {\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n - 1);\n        else return Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1);", "        List<long> result = new List<long>();\n        if (n\
    \ == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n        if (n == 2)\
    \ result.Add(2);\n        if (n % 2 == 0) {\n            int n1 = n / 2;\n   \
    \         int n2 = n - n1;\n            result.Add(Tri(n1) + Tri(n2));\n     \
    \   } else {\n            int n1 = n / 2;\n            int n2 = n - n1;\n    \
    \        result.Add(Tri(n1) + Tri(n2) + Tri(n + n1));\n        }\n        return\
    \ result;", "        if (n < 3) return new List<long>();\n        var result =\
    \ new List<long>();\n        var tri = new long[] { 1, 1, 1 };\n        while\
    \ (tri.Length <= n) {\n            result.Add(tri[tri.Length - 1] + tri[tri.Length\
    \ - 2] + tri[tri.Length - 3]);\n            tri[tri.Length - 2] = tri[tri.Length\
    \ - 1] + tri[tri.Length - 2];\n            tri[tri.Length - 1] = tri[tri.Length\
    \ - 3];\n            tri[tri.Length - 3] = tri[tri.Length - 2];\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n     \
    \       result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n\
    \ - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n + 1);\n\
    \            foreach (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n\
    \            }\n        } else {\n            long a = Tri(n - 1);\n         \
    \   long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            long d = Tri(n - 3);\n            long e = Tri(n -\
    \ 4);\n            long f = Tri(n - 5);\n            foreach (var item in d.Concat(e).Concat(f))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5)\
    \ + Tri(n - 6) + Tri(n - 7) + Tri(n - 8);", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(0);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        long tri1\
    \ = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n -\
    \ 3);\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        return result;", "        if (n == 0) return new List<long>(new long[]{(long)1L});\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2);", "        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long tri1 = Tri1(n);\n        long tri2 = Tri2(n);\n\
    \        long tri3 = Tri3(n);\n        result.Add(tri1);\n        result.Add(tri2);\n\
    \        result.Add(tri3);\n        return result;", "        if (n == 0)\n  \
    \          return new List<long>();\n        if (n == 1)\n            return new\
    \ List<long>(new long[]{(long)3L});\n        if (n % 2 == 0)\n            return\
    \ new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n + 1)});\n  \
    \      else\n            return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3)});", "        List<long> result = new List<long>();\n    \
    \    if (n == 0) return result;\n        if (n == 1) return new List<long>() {\
    \ 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);",
  "        List<long> result = new List<long>();\n        if (n == 0)\n          \
    \  result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n    \
    \    else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n   \
    \     return result;", "        if (n == 0) return new List<long>();\n       \
    \ if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n    \
    \        return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        } else {\n    \
    \        return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n\
    \        }", "        List<long> result = new List<long>();\n        if (n ==\
    \ 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n    \
    \    if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b =\
    \ Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n     \
    \       return result;\n        }\n        long a = Tri(n - 1);\n        long\
    \ b = Tri(n - 2);\n        long c = a + b;\n        result.Add(c);\n        result.Add(a\
    \ + b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        }\n        return result;", "        if (n == 0)\
    \ return new List<long>();\n        if (n == 1) return new List<long>(new long[]{(long)1L});\n\
    \        if (n == 2) return new List<long>(new long[]{(long)1L, (long)3L});\n\
    \        if (n % 2 == 0) {\n            return new List<long>(new long[]{(long)Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1)});\n        } else {\n            return new\
    \ List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2)});\n        }", "      \
    \  List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long> result =\
    \ new List<long>();\n        if (n == 0) return result;\n        if (n == 1) return\
    \ new List<long>() { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n    \
    \    return result;", "        if (n == 0)\n            return new List<long>();\n\
    \        if (n == 1)\n            return new List<long>() { 1 };\n        if (n\
    \ % 2 == 0)\n            return new List<long>() { Tri(n - 1) + Tri(n - 2) };\n\
    \        else\n            return new List<long>() { Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1) };", "        List<long> result = new List<long>();\n        if (n\
    \ == 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n \
    \       if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n - 2);\n\
    \            long d = Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n   \
    \         long e = Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n -\
    \ 1);\n            long f = Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3)\
    \ + Tri(n - 2) + Tri(n - 1);\n            long g = Tri(n - 7) + Tri(n - 6) + Tri(n\
    \ - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long\
    \ h = Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n -\
    \ 3) + Tri(n - 2) + Tri(n - 1);\n            result.AddRange(new long[] {a, b,\
    \ c, d, e, f, g, h});\n        } else {\n            long a = Tri(n - 1);\n  \
    \          long b = Tri(n - 2) + Tri(n - 1);\n            long c = Tri(n - 3)\
    \ + Tri(n - 2) + Tri(n - 1);\n            long d = Tri(n - 4) + Tri(n - 3) + Tri(n\
    \ - 2) + Tri(n - 1);\n            long e = Tri(n - 5) + Tri(n - 4) + Tri(n - 3)\
    \ + Tri(n - 2) + Tri(n - 1);\n            long f = Tri(n - 6) + Tri(n - 5) + Tri(n\
    \ - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long g = Tri(n - 7)\
    \ + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n\
    \            long h = Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n\
    \ - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            result.AddRange(new\
    \ long[] {a, b, c, d, e, f, g, h});\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        if (n == 0) {\n         \
    \   result.Add(0);\n            result.Add(1);\n            result.Add(1);\n \
    \           return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(3);\n\
    \            return result;\n        }\n        long tri1 = Tri(n - 1);\n    \
    \    long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4\
    \ = Tri(n - 4);\n        long tri5 = Tri(n - 5);\n        long tri6 = Tri(n -\
    \ 6);\n        long tri7 = Tri(n - 7);\n        long tri8 = Tri(n - 8);\n    \
    \    long tri9 = Tri(n - 9);\n        long tri10 = Tri(n - 10);\n        long\
    \ tri11 = Tri(n - 11);\n        long tri12 = Tri(n - 12);\n        long tri13\
    \ = Tri(n - 13);\n        long tri14 = Tri(n - 14);\n        long tri15 = Tri(n\
    \ - 15);\n        long tri16 = Tri(n - 16);\n        long tri17 = Tri(n - 17);\n\
    \        long tri18 = Tri(n - 18);\n        long tri19 = Tri(n - 19);\n      \
    \  long tri20 = Tri(n - 20);\n        long tri21 = Tri(n - 21);\n        long\
    \ tri22 = Tri(n - 22);\n        long tri23 = Tri(n - 23);\n        long tri24\
    \ = Tri(n - 24);\n        long tri25 = Tri(n - 25);\n        long tri26 = Tri(n\
    \ - 26);\n        long tri27 = Tri(n - 27);\n        long tri28 = Tri(n - 28);\n\
    \        long tri29 = Tri(n - 29);\n        long tri30 = Tri(n - 30);\n      \
    \  long tri31 = Tri(n - 31);\n        long tri32 = Tri(n - 32);\n        long\
    \ tri33 = Tri(n - 33);\n        long tri34 = Tri(n - 34);\n        long tri35\
    \ = Tri(n - 35);\n        long tri36 = Tri(n - 36);\n        long tri37 = Tri(n\
    \ - 37);\n        long tri38 = Tri(n - 38);\n        long tri39 = Tri(n - 39);\n\
    \        long tri40 = Tri(n - 40);\n        long tri41 = Tri(n - 41);\n      \
    \  long tri42 = Tri(n - 42);\n        long tri43 = Tri(n - 43);\n        long\
    \ tri44 = Tri(n - 44);\n        long ", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n / 2);\n      \
    \      long b = Tri(n - 1);\n            long c = Tri(n - 2);\n            long\
    \ d = Tri(n - 3);\n            long sum = a;\n            foreach (long x in b)\
    \ sum += x;\n            foreach (long x in c) sum += x;\n            foreach\
    \ (long x in d) sum += x;\n            result.Add(sum);\n        } else {\n  \
    \          long a = Tri(n / 2);\n            long b = Tri(n - 1);\n          \
    \  long c = Tri(n - 2);\n            long d = Tri(n - 3);\n            long sum\
    \ = a;\n            foreach (long x in b) sum += x;\n            foreach (long\
    \ x in c) sum += x;\n            result.Add(sum);\n            long sum = b;\n\
    \            foreach (long x in c) sum += x;\n            result.Add(sum);\n \
    \           long sum = c;\n            foreach (long x in d) sum += x;\n     \
    \       result.Add(sum);\n            long sum = d;\n            foreach (long\
    \ x in a) sum += x;\n            result.Add(sum);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) {\n        \
    \    result.Add(0);\n            result.Add(1);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 2) {\n            result.Add(1);\n            result.Add(2);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 2));\n  \
    \      }\n        return result;", "        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1)});\n        else return new List<long>(new long[]{(long)Tri(n -\
    \ 1) + Tri(n - 2)});", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n   \
    \         result.Add(1);\n            return result;\n        }\n        if (n\
    \ == 1) {\n            result.Add(0);\n            result.Add(1);\n          \
    \  return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 0) {\n            result.Add(0);\n         \
    \   result.Add(1);\n            result.Add(1);\n            return result;\n \
    \       }\n        if (n == 1) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        result.Add((long)tri1);\n        result.Add((long)tri2);\n  \
    \      result.Add((long)tri3);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n % 2 == 0) {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n\
    \ + 1);\n            foreach (var item in a) {\n                result.Add(item);\n\
    \            }\n            foreach (var item in b) {\n                result.Add(item);\n\
    \            }\n            foreach (var item in c) {\n                result.Add(item);\n\
    \            }\n        } else {\n            long a = Tri(n - 1);\n         \
    \   long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a) {\n                result.Add(item);\n            }\n      \
    \      foreach (var item in b) {\n                result.Add(item);\n        \
    \    }\n            foreach (var item in c) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;", "        if (n == 1L) return\
    \ new List<long>(new long[]{1L});\n        if (n == 2L) return new List<long>(new\
    \ long[]{3L});\n        if (n % 2 == 1L) return Tri(n - 1L).Concat(Tri(n - 2L)).Concat(Tri(n\
    \ + 1L));\n        return Tri(n - 1L).Concat(Tri(n - 2L)).Concat(Tri(n + 1L)).Concat(Tri(n\
    \ - 3L)).Concat(Tri(n + 2L));", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { (long)1 };\n        if (n == 2) return new List<long>() { (long)1, (long)2\
    \ };\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n     \
    \   long tri3 = Tri(n - 3);\n        result.Add((long)tri1);\n        result.Add((long)tri2);\n\
    \        result.Add((long)tri3);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) result.Add(0L);\n        else\
    \ if (n == 1) result.Add(1L);\n        else {\n            long a = Tri(n - 1L);\n\
    \            long b = Tri(n - 2L);\n            long c = Tri(n - 3L);\n      \
    \      result.AddRange(new long[]{a, b, c});\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n - 3);\n            result.AddRange(a);\n            result.AddRange(b);\n\
    \            result.AddRange(c);\n        } else {\n            long a = Tri(n\
    \ - 1);\n            long b = Tri(n - 2);\n            result.AddRange(a);\n \
    \           result.AddRange(b);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n / 2);\n            long b = Tri(n / 2);\n        \
    \    long c = Tri(n / 2);\n            long d = Tri(n / 2);\n            long\
    \ e = Tri(n / 2);\n            long f = Tri(n / 2);\n            long g = Tri(n\
    \ / 2);\n            long h = Tri(n / 2);\n            long i = Tri(n / 2);\n\
    \            long j = Tri(n / 2);\n            long k = Tri(n / 2);\n        \
    \    long l = Tri(n / 2);\n            long m = Tri(n / 2);\n            long\
    \ n = Tri(n / 2);\n            long o = Tri(n / 2);\n            long p = Tri(n\
    \ / 2);\n            long q = Tri(n / 2);\n            long r = Tri(n / 2);\n\
    \            long s = Tri(n / 2);\n            long t = Tri(n / 2);\n        \
    \    long u = Tri(n / 2);\n            long v = Tri(n / 2);\n            long\
    \ w = Tri(n / 2);\n            long x = Tri(n / 2);\n            long y = Tri(n\
    \ / 2);\n            long z = Tri(n / 2);\n            long a = Tri(n / 2);\n\
    \            long b = Tri(n / 2);\n            long c = Tri(n / 2);\n        \
    \    long d = Tri(n / 2);\n            long e = Tri(n / 2);\n            long\
    \ f = Tri(n / 2);\n            long g = Tri(n / 2);\n            long h = Tri(n\
    \ / 2);\n            long i = Tri(n / 2);\n            long j = Tri(n / 2);\n\
    \            long k = Tri(n / 2);\n            long l = Tri(n / 2);\n        \
    \    long m = Tri(n / 2);\n            long n = Tri(n / 2);\n            long\
    \ o = Tri(n / 2);\n            long p = Tri(n / 2);\n            long q = Tri(n\
    \ / 2);\n            long r = Tri(n / 2);\n            long s = Tri(n / 2);\n\
    \            long t = Tri(n / 2);\n            long u = Tri(n / 2);\n        \
    \    long v = Tri(n / 2);\n            long w = Tri(n / 2);\n            long\
    \ x = Tri(n / 2);\n            long y = Tri(n / 2);\n            long z = Tri(n\
    \ / 2);\n            long a = Tri(n / 2);\n            ", "        if (n == 0)\
    \ return new List<long>();\n        if (n == 1) return new List<long>(new long[]{(long)3L});\n\
    \        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n      \
    \  else return Tri(n - 1) + Tri(n - 2);", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n        } else {\n        \
    \    long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n        \
    \    foreach (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \            long d = Tri(n - 3);\n            foreach (long x in d) result.Add(x);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1);", "  \
    \      List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n\
    \ - 7) + Tri(n - 8);", "        if (n == 0)\n            return new List<long>();\n\
    \        if (n == 1)\n            return new List<long>(new long[]{(long)3L});\n\
    \        if (n % 2 == 0)\n            return new List<long>(new long[]{(long)Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3)});\n        else\n            return new List<long>(new\
    \ long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n - 3)});", "        if (n == 0)\
    \ return new List<long>();\n        if (n == 1) return new List<long>(new long[]{(long)3L});\n\
    \        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n      \
    \  else return Tri(n - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1) + Tri(n + 2)\
    \ + Tri(n + 3);", "        List<long> result = new List<long>();\n        if (n\
    \ == 0)\n            return result;\n        if (n == 1)\n            result.Add(1);\n\
    \        if (n == 2)\n            result.Add(3);\n        if (n % 2 == 0) {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            result.AddRange(a);\n            result.AddRange(b);\n\
    \            result.AddRange(c);\n        }\n        else {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n\
    \ + 1);\n            result.AddRange(a);\n            result.AddRange(b);\n  \
    \          result.AddRange(c);\n            result.Add(n);\n        }\n      \
    \  return result;", "        List<long> result = new List<long>();\n        if\
    \ (n == 1L) {\n            result.Add(1L);\n            return result;\n     \
    \   }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n            return result;\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n\
    \            result.Add(Tri(n + 1L));\n            result.Add(Tri(n - 1L));\n\
    \            result.Add(Tri(n - 2L));\n            result.Add(Tri(n + 1L));\n\
    \            return result;\n        }", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n\
    \            return result;\n        }\n        if (n == 2L) {\n            result.Add(1L);\n\
    \            result.Add(3L);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            long tri1 = Tri(n - 1L);\n            long tri2\
    \ = Tri(n - 2L);\n            long tri3 = Tri(n - 3L);\n            result.AddRange(tri1);\n\
    \            result.AddRange(tri2);\n            result.AddRange(tri3);\n    \
    \    } else {\n            long tri1 = Tri(n - 1L);\n            long tri2 = Tri(n\
    \ - 2L);\n            result.AddRange(tri1);\n            result.AddRange(tri2);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(3);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        return result;", "        if (n < 3L) return new List<long>();\n\
    \        var result = new List<long>();\n        var first = (long)Math.Pow((double)n,\
    \ (double)0.5);\n        var second = (long)Math.Pow((double)n, (double)1.5);\n\
    \        result.Add(first);\n        result.Add(second);\n        long third =\
    \ (long)Math.Pow((double)n, (double)2.5);\n        result.Add(third);\n      \
    \  return result;", "        if (n == 0) return new List<long>();\n        if\
    \ (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n       \
    \     return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        }\n        else {\n\
    \            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2);\n     \
    \   }", "        List<long> result = new List<long>();\n        if (n == 0) return\
    \ result;\n        if (n == 1) return new List<long>() { 1 };\n        if (n %\
    \ 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = Tri(n - 3);\n            long d = a + b + c;\n         \
    \   result.Add(d);\n        }\n        else {\n            long a = Tri(n - 1);\n\
    \            long b = Tri(n - 2);\n            long c = Tri(n - 3);\n        \
    \    long d = a + b + c;\n            result.Add(d);\n            result.Add(a\
    \ + c);\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n       \
    \     return result;\n        }\n        if (n == 2L) {\n            result.Add(1L);\n\
    \            result.Add(3L);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1L));\n            result.Add(Tri(n\
    \ - 2L));\n            result.Add(Tri(n + 1L));\n        } else {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n            result.Add(Tri(n - 1L));\n          \
    \  result.Add(Tri(n - 2L));\n            result.Add(Tri(n + 1L));\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            result.Add(Tri(n - 3));\n        }\n        return\
    \ result;", "        if (n < 3L) return new List<long>();\n        var result\
    \ = new List<long>();\n        var a = Tri(n - 1L);\n        var b = Tri(n - 2L);\n\
    \        var c = Tri(n - 3L);\n        result.AddRange(a);\n        result.AddRange(b);\n\
    \        result.AddRange(c);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) return result;\n        if (n == 1)\
    \ return new List<long>() { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 1L) {\n       \
    \     result.Add(1L);\n            return result;\n        }\n        if (n %\
    \ 2 == 0) {\n            result.Add(Tri(n - 1L) + Tri(n - 2L));\n        } else\
    \ {\n            result.Add(Tri(n - 1L) + Tri(n - 2L) + Tri(n + 1L));\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0L);\n        if (n == 1) result.Add(1L);\n  \
    \      if (n == 2) result.Add(2L);\n        if (n % 2 == 0) result.Add(Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n - 3));\n        else result.Add(Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n - 3) + Tri(n - 4));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n\
    \            return result;\n        }\n        if (n == 2L) {\n            result.Add(1L);\n\
    \            result.Add(3L);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1L));\n            result.Add(Tri(n\
    \ - 2L));\n            result.Add(Tri(n + 1L));\n            return result;\n\
    \        }\n        result.Add(Tri(n - 1L));\n        result.Add(Tri(n - 2L));\n\
    \        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 3L));\n        result.Add(Tri(n\
    \ - 4L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 5L));\n\
    \        result.Add(Tri(n - 6L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n\
    \ - 7L));\n        result.Add(Tri(n - 8L));\n        result.Add(Tri(n + 1L));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n\
    \ + 1) + Tri(n + 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;", "        if (n == 0)\
    \ return new List<long>();\n        if (n == 1) return new List<long>() { (long)1\
    \ };\n        if (n == 2) return new List<long>() { (long)3 };\n        if (n\
    \ % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) result.Add(0L);\n        if\
    \ (n == 1) result.Add(1L);\n        if (n == 2) result.Add(2L);\n        if (n\
    \ % 2 == 0) result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n - 3));\n        else result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2) + Tri(n + 3));\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 1L) {\n       \
    \     result.Add(1L);\n            return result;\n        }\n        if (n ==\
    \ 2L) {\n            result.Add(1L);\n            result.Add(3L);\n          \
    \  return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1L));\n            result.Add(Tri(n - 2L));\n            result.Add(Tri(n\
    \ + 1L));\n            return result;\n        }\n        result.Add(Tri(n - 1L));\n\
    \        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n\
    \ - 3L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 4L));\n\
    \        result.Add(Tri(n + 1L));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long tri1 = (long)3;\n        long tri2\
    \ = (long)1;\n        long tri3 = (long)2;\n        long tri4 = (long)3;\n   \
    \     long tri5 = (long)1;\n        long tri6 = (long)2;\n        long tri7 =\
    \ (long)3;\n        long tri8 = (long)1;\n        long tri9 = (long)2;\n     \
    \   long tri10 = (long)3;\n        long tri11 = (long)1;\n        long tri12 =\
    \ (long)2;\n        long tri13 = (long)3;\n        long tri14 = (long)1;\n   \
    \     long tri15 = (long)2;\n        long tri16 = (long)3;\n        long tri17\
    \ = (long)1;\n        long tri18 = (long)2;\n        long tri19 = (long)3;\n \
    \       long tri20 = (long)1;\n        long tri21 = (long)2;\n        long tri22\
    \ = (long)3;\n        long tri23 = (long)1;\n        long tri24 = (long)2;\n \
    \       long tri25 = (long)3;\n        long tri26 = (long)1;\n        long tri27\
    \ = (long)2;\n        long tri28 = (long)3;\n        long tri29 = (long)1;\n \
    \       long tri30 = (long)2;\n        long tri31 = (long)3;\n        long tri32\
    \ = (long)1;\n        long tri33 = (long)2;\n        long tri34 = (long)3;\n \
    \       long tri35 = (long)1;\n        long tri36 = (long)2;\n        long tri37\
    \ = (long)3;\n        long tri38 = (long)1;\n        long tri39 = (long)2;\n \
    \       long tri40 = (long)3;\n        long tri41 = (long)1;\n        long tri42\
    \ = (long)2;\n        long tri43 = (long)3;\n        long tri44 = (long)1;\n \
    \       long tri45 = (long)2;\n        long tri46 = (long)3;\n        long tri47\
    \ = (long)1;\n        long tri48 = (long)2;\n        long tri49 = (long)3;\n \
    \       long tri50 = (long)1;\n        long tri51 = (long)2;\n        long tri52\
    \ = (long)3;\n        long tri53 = (long)1;\n        long tri54 = (long)2;\n \
    \       long tri55 = (long)3;\n        long tri56 = (long)1;\n        long tri57\
    \ = (long)2;\n        long tri58 = (long)3;\n        long tri59 = (long)1;\n \
    \       long tri60 = (long)2;\n        long tri61 = (long)3;\n        long tri62\
    \ = (long)1;\n        long ", "        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 2));\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n        } else {\n            result.Add(Tri(n -\
    \ 1L));\n            result.Add(Tri(n - 2L));\n            result.Add(Tri(n +\
    \ 1L));\n            result.Add(Tri(n - 1L));\n            result.Add(Tri(n -\
    \ 2L));\n            result.Add(Tri(n + 1L));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n == 2) return\
    \ new List<long>() { 3 };\n        long a = Tri(n - 1);\n        long b = Tri(n\
    \ - 2);\n        long c = Tri(n - 3);\n        result.AddRange(a);\n        result.AddRange(b);\n\
    \        result.AddRange(c);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            result.Add(0);\n   \
    \         result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(0);\n            result.Add(1);\n\
    \            return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        if (n == 1L) {\n            result.Add(1L);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1L) + Tri(n - 2L));\n        } else {\n            result.Add(Tri(n - 1L)\
    \ + Tri(n - 1L) + Tri(n + 1L));\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            long tri1 = Tri(n - 1);\n            long tri2 = Tri(n - 2);\n  \
    \          long tri3 = Tri(n - 3);\n            long tri4 = Tri(n - 4);\n    \
    \        long tri5 = Tri(n - 5);\n            long tri6 = Tri(n - 6);\n      \
    \      long tri7 = Tri(n - 7);\n            long tri8 = Tri(n - 8);\n        \
    \    long tri9 = Tri(n - 9);\n            long tri10 = Tri(n - 10);\n        \
    \    long tri11 = Tri(n - 11);\n            long tri12 = Tri(n - 12);\n      \
    \      long tri13 = Tri(n - 13);\n            long tri14 = Tri(n - 14);\n    \
    \        long tri15 = Tri(n - 15);\n            long tri16 = Tri(n - 16);\n  \
    \          long tri17 = Tri(n - 17);\n            long tri18 = Tri(n - 18);\n\
    \            long tri19 = Tri(n - 19);\n            long tri20 = Tri(n - 20);\n\
    \            long tri21 = Tri(n - 21);\n            long tri22 = Tri(n - 22);\n\
    \            long tri23 = Tri(n - 23);\n            long tri24 = Tri(n - 24);\n\
    \            long tri25 = Tri(n - 25);\n            long tri26 = Tri(n - 26);\n\
    \            long tri27 = Tri(n - 27);\n            long tri28 = Tri(n - 28);\n\
    \            long tri29 = Tri(n - 29);\n            long tri30 = Tri(n - 30);\n\
    \            long tri31 = Tri(n - 31);\n            long tri32 = Tri(n - 32);\n\
    \            long tri33 = Tri(n - 33);\n            long tri34 = Tri(n - 34);\n\
    \            long tri35 = Tri(n - 35);\n            long tri36 = Tri(n - 36);\n\
    \            long tri37 = Tri(n - 37);\n            long tri38 = Tri(n - 38);\n\
    \            long tri39 = Tri(n - 39);\n            long tri40 = Tri(n - 40);\n\
    \            long tri41 = Tri(n - 41);\n            long tri42 = Tri(n - 42);\n\
    \            long tri43 = Tri(n - 43);\n            long tri44 = Tri(n - 44);\n\
    \            long tri45 = Tri(n - 45);\n            long tri46 = Tri(n - 46);\n\
    \            long tri", "        List<long> result = new List<long>();\n     \
    \   if (n == 0) return result;\n        if (n == 1) return new List<long>() {\
    \ 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = Tri(n + 1);\n            foreach (var item in a.Concat(b).Concat(c)) {\n \
    \               result.Add(item);\n            }\n        } else {\n         \
    \   long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = Tri(n + 1);\n            long d = Tri(n - 3);\n            foreach (var item\
    \ in a.Concat(b).Concat(c).Concat(d)) {\n                result.Add(item);\n \
    \           }\n        }\n        return result;", "        if (n == 0) return\
    \ new List<long>();\n        if (n == 1) return new List<long>(new long[]{(long)3L});\n\
    \        if (n % 2 == 0) return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1)});\n        else return new List<long>(new long[]{(long)Tri(n\
    \ - 1) + Tri(n - 2)});", "        List<long> result = new List<long>();\n    \
    \    long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3 = (long)2;\n\
    \        long tri4 = (long)3;\n        long tri5 = (long)1;\n        long tri6\
    \ = (long)2;\n        long tri7 = (long)3;\n        long tri8 = (long)1;\n   \
    \     long tri9 = (long)2;\n        long tri10 = (long)3;\n        long tri11\
    \ = (long)1;\n        long tri12 = (long)2;\n        long tri13 = (long)3;\n \
    \       long tri14 = (long)1;\n        long tri15 = (long)2;\n        long tri16\
    \ = (long)3;\n        long tri17 = (long)1;\n        long tri18 = (long)2;\n \
    \       long tri19 = (long)3;\n        long tri20 = (long)1;\n        long tri21\
    \ = (long)2;\n        long tri22 = (long)3;\n        long tri23 = (long)1;\n \
    \       long tri24 = (long)2;\n        long tri25 = (long)3;\n        long tri26\
    \ = (long)1;\n        long tri27 = (long)2;\n        long tri28 = (long)3;\n \
    \       long tri29 = (long)1;\n        long tri30 = (long)2;\n        long tri31\
    \ = (long)3;\n        long tri32 = (long)1;\n        long tri33 = (long)2;\n \
    \       long tri34 = (long)3;\n        long tri35 = (long)1;\n        long tri36\
    \ = (long)2;\n        long tri37 = (long)3;\n        long tri38 = (long)1;\n \
    \       long tri39 = (long)2;\n        long tri40 = (long)3;\n        long tri41\
    \ = (long)1;\n        long tri42 = (long)2;\n        long tri43 = (long)3;\n \
    \       long tri44 = (long)1;\n        long tri45 = (long)2;\n        long tri46\
    \ = (long)3;\n        long tri47 = (long)1;\n        long tri48 = (long)2;\n \
    \       long tri49 = (long)3;\n        long tri50 = (long)1;\n        long tri51\
    \ = (long)2;\n        long tri52 = (long)3;\n        long tri53 = (long)1;\n \
    \       long tri54 = (long)2;\n        long tri55 = (long)3;\n        long tri56\
    \ = (long)1;\n        long tri57 = (long)2;\n        long tri58 = (long)3;\n \
    \       long tri59 = (long)1;\n        long tri60 = (long)2;\n        long tri61\
    \ = (long)3;\n        long tri62 = (long)1;\n        long ", "        if (n ==\
    \ 0) return new List<long>();\n        if (n == 1) return new List<long>() { (long)1\
    \ };\n        if (n % 2 == 0) {\n            List<long> result = new List<long>();\n\
    \            result.Add((long)3);\n            result.Add((long)1 + n / 2);\n\
    \            return result;\n        } else {\n            List<long> result =\
    \ new List<long>();\n            result.Add((long)3);\n            result.Add((long)1\
    \ + n / 2);\n            result.Add((long)1 + n / 2 + n / 4);\n            return\
    \ result;\n        }", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) return result;\n        if (n == 1) return new List<long>() { 1\
    \ };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n - 3));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        if (n == 0) {\n          \
    \  result.Add(0);\n            result.Add(1);\n            result.Add(1);\n  \
    \          return result;\n        }\n        if (n == 1) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = Tri(n - 3);\n            long sum = a;\n            foreach (long d in b)\n\
    \                sum += d;\n            foreach (long e in c)\n              \
    \  sum += e;\n            result.Add(sum);\n        } else {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n\
    \ - 3);\n            long sum = a;\n            foreach (long d in b)\n      \
    \          sum += d;\n            foreach (long e in c)\n                sum +=\
    \ e;\n            result.Add(sum);\n            long d = Tri(n - 4);\n       \
    \     result.Add(d);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (n == 0) return result;\n        if (n\
    \ == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c\
    \ = Tri(n - 3) + Tri(n - 1) + Tri(n - 2);\n            foreach (long x in a) result.Add(x);\n\
    \            foreach (long x in b) result.Add(x);\n            foreach (long x\
    \ in c) result.Add(x);\n            return result;\n        }\n        else {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2) + Tri(n - 1)\
    \ + Tri(n - 3);\n            foreach (long x in a) result.Add(x);\n          \
    \  foreach (long x in b) result.Add(x);\n            return result;\n        }",
  "        List<long> result = new List<long>();\n        if (n == 0) return result;\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3) + Tri(n + 1);", "        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);", "        List<long> result = new List<long>();\n      \
    \  if (n == 0) return result;\n        if (n == 1) return new List<long>() { 1\
    \ };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            result.AddRange(a);\n            result.AddRange(b);\n  \
    \          result.AddRange(c);\n        } else {\n            long a = Tri(n -\
    \ 1);\n            long b = Tri(n - 2) + Tri(n - 1) + Tri(n - 3);\n          \
    \  result.AddRange(a);\n            result.AddRange(b);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\n\
    \            result.Add(0);\n        else if (n == 1)\n            result.Add(1);\n\
    \        else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n - 3);\n            result.Add(a + b + c);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long d\
    \ = Tri(n - 3);\n            foreach (var item in a.Concat(b).Concat(c).Concat(d))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long tri1\
    \ = Tri1(n);\n        long tri2 = Tri2(n);\n        long tri3 = Tri3(n);\n   \
    \     result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long d\
    \ = Tri(n - 3);\n            foreach (var item in a.Concat(b).Concat(c).Concat(d))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (n == 0)\
    \ return result;\n        if (n == 1) return new List<long>() { 1 };\n       \
    \ if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n\
    \            foreach (long x in b) result.Add(x);\n            foreach (long x\
    \ in c) result.Add(x);\n        } else {\n            long a = Tri(n - 1);\n \
    \           long b = Tri(n - 2);\n            long c = Tri(n + 1);\n         \
    \   foreach (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n            long d = Tri(n\
    \ - 3);\n            foreach (long x in d) result.Add(x);\n        }\n       \
    \ return result;", "        List<long> result = new List<long>();\n        if\
    \ (n == 0) return result;\n        if (n == 1) return new List<long>() { 1 };\n\
    \        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n - 2);\n\
    \            foreach (long x in a) result.Add(x);\n            foreach (long x\
    \ in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n   \
    \     } else {\n            long a = Tri(n - 1);\n            long b = Tri(n -\
    \ 2) + Tri(n - 1);\n            foreach (long x in a) result.Add(x);\n       \
    \     foreach (long x in b) result.Add(x);\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
