language: cs
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else {\n            long tri1 = Tri(n - 1);\n\
    \            long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n  \
    \          result.Add(tri1 + tri2 + tri3);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgzdw_lbo.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgzdw_lbo.cs(33,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgzdw_lbo.cs(34,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0)\n           \
    \ return new List<long>(new long[]{(long)1L});\n        if (n == 1)\n        \
    \    return new List<long>(new long[]{(long)3L});\n        if (n == 2)\n     \
    \       return new List<long>(new long[]{(long)2L, (long)3L});\n        List<long>\
    \ result = new List<long>();\n        long tri1 = Tri(n - 1);\n        long tri2\
    \ = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        result.AddRange(tri1);\n\
    \        result.AddRange(tri2);\n        result.AddRange(tri3);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpva98kzsn.cs(33,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpva98kzsn.cs(34,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpva98kzsn.cs(35,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpva98kzsn.cs(36,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpva98kzsn.cs(37,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpva98kzsn.cs(38,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(1);\n          \
    \  result.Add(1);\n            result.Add(1);\n            return result;\n  \
    \      }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n \
    \       long tri3 = Tri(n - 3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk7jcb6g5.cs(50,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk7jcb6g5.cs(51,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk7jcb6g5.cs(52,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk7jcb6g5.cs(53,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpk7jcb6g5.cs(54,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpk7jcb6g5.cs(55,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n + 2);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1r9vqv3i.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1r9vqv3i.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1L) + Tri(n\
    \ - 2L));\n        } else {\n            result.Add(Tri(n - 1L) + Tri(n - 1L)\
    \ + Tri(n - 2L));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp53yy08_6.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp53yy08_6.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            long d = Tri(n - 3);\n            long e = Tri(n -\
    \ 4);\n            long f = Tri(n - 5);\n            foreach (var item in d.Concat(e).Concat(f))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpodugy3rb.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpodugy3rb.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(40,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpodugy3rb.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(46,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>(new\
    \ long[] { 1L });\n        if (n == 1) return new List<long>(new long[] { 3L });\n\
    \        if (n == 2) return new List<long>(new long[] { 2L, 1L });\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcl14na_t.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpcl14na_t.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n - 3);\n        result.Add((tri1 + tri2 + tri3));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpob99h0d_.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpob99h0d_.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpob99h0d_.cs(46,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0)\n           \
    \ return new List<long>();\n        if (n == 1)\n            return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0)\n            return Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1);\n        else\n            return Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n - 3) + Tri(n - 4);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkje0odka.cs(31,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpkje0odka.cs(33,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (long i in a) result.Add(i);\n            foreach (long i in b) result.Add(i);\n\
    \            foreach (long i in c) result.Add(i);\n        } else {\n        \
    \    long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (long i in a) result.Add(i);\n        \
    \    foreach (long i in b) result.Add(i);\n            foreach (long i in c) result.Add(i);\n\
    \            result.Add(n);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7qf32t4t.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp7qf32t4t.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp7qf32t4t.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp7qf32t4t.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp7qf32t4t.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp7qf32t4t.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp7qf32t4t.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp7qf32t4t.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp7qf32t4t.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp7qf32t4t.cs(40,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp7qf32t4t.cs(41,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp7qf32t4t.cs(42,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1t77gyq5.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1t77gyq5.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n    \
    \    if (n == 2) result.Add(3);\n        if (n % 2 == 0) {\n            long a\
    \ = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n\
    \ + 1);\n            result.AddRange(a.Concat(b).Concat(c));\n        } else {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    result.AddRange(a.Concat(b));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4eni3k50.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4eni3k50.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4eni3k50.cs(33,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4eni3k50.cs(34,31): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmp4eni3k50.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4eni3k50.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4eni3k50.cs(38,31): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{3L});\n        if (n % 2\
    \ == 0) {\n            List<long> result = new List<long>();\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long c = Tri(n\
    \ + 1);\n            foreach (long d in a) {\n                result.Add(d);\n\
    \            }\n            foreach (long e in b) {\n                result.Add(e);\n\
    \            }\n            foreach (long f in c) {\n                result.Add(f);\n\
    \            }\n            return result;\n        } else {\n            List<long>\
    \ result = new List<long>();\n            long a = Tri(n - 1);\n            long\
    \ b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach (long\
    \ d in b) {\n                result.Add(d);\n            }\n            foreach\
    \ (long e in c) {\n                result.Add(e);\n            }\n           \
    \ foreach (long f in a) {\n                result.Add(f);\n            }\n   \
    \         return result;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_qwnpqn6.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_qwnpqn6.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_qwnpqn6.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_qwnpqn6.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp_qwnpqn6.cs(36,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp_qwnpqn6.cs(39,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp_qwnpqn6.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_qwnpqn6.cs(46,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_qwnpqn6.cs(47,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_qwnpqn6.cs(48,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp_qwnpqn6.cs(51,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp_qwnpqn6.cs(54,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n     \
    \       foreach (long i in tri1) {\n                result.Add(i);\n         \
    \   }\n            foreach (long i in tri2) {\n                result.Add(i);\n\
    \            }\n            foreach (long i in tri3) {\n                result.Add(i);\n\
    \            }\n        } else {\n            long tri1 = Tri(n - 1);\n      \
    \      long tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n        \
    \    foreach (long i in tri1) {\n                result.Add(i);\n            }\n\
    \            foreach (long i in tri2) {\n                result.Add(i);\n    \
    \        }\n            foreach (long i in tri3) {\n                result.Add(i);\n\
    \            }\n            result.Add(tri1);\n            result.Add(tri2);\n\
    \            result.Add(tri3);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvkp_78ok.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvkp_78ok.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvkp_78ok.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvkp_78ok.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpvkp_78ok.cs(36,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpvkp_78ok.cs(39,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpvkp_78ok.cs(43,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvkp_78ok.cs(44,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvkp_78ok.cs(45,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpvkp_78ok.cs(46,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpvkp_78ok.cs(49,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpvkp_78ok.cs(52,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1L);\n            long tri2 = Tri(n - 2L);\n          \
    \  result.Add(tri1);\n            result.Add(tri2);\n            result.Add(tri1\
    \ + tri2);\n            return result;\n        }\n        long tri1 = Tri(n -\
    \ 1L);\n        long tri2 = Tri(n - 2L);\n        result.Add(tri1);\n        result.Add(tri2);\n\
    \        result.Add(tri1 + tri2);\n        result.Add(tri1 + tri2 + tri1);\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk7al_4zg.cs(37,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpk7al_4zg.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk7al_4zg.cs(38,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpk7al_4zg.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk7al_4zg.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk7al_4zg.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            result.AddRange(new List<long>() { a, b, c });\n        }\
    \ else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2) +\
    \ Tri(n - 1) + Tri(n - 3);\n            result.AddRange(new List<long>() { a,\
    \ b, Tri(n - 3) });\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmiy90e_m.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpmiy90e_m.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpmiy90e_m.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpmiy90e_m.cs(35,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpmiy90e_m.cs(36,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpmiy90e_m.cs(37,54): error CS1950: The best overloaded Add method ''List<long>.Add(long)''
    for the collection initializer has some invalid arguments

    /tmp/tmpmiy90e_m.cs(37,54): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0L);\n        if (n == 1) result.Add(1L);\n  \
    \      if (n == 2) result.Add(2L);\n        if (n % 2 == 0) result.Add(Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1));\n        else result.Add(Tri(n - 1) + Tri(n -\
    \ 2));\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp14jdgkro.cs(30,36): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp14jdgkro.cs(31,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1za2yxu2.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1za2yxu2.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp388t1rqk.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp388t1rqk.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3\
    \ = (long)2;\n        long tri4 = (long)3;\n        long tri5 = (long)1;\n   \
    \     long tri6 = (long)2;\n        long tri7 = (long)3;\n        long tri8 =\
    \ (long)1;\n        long tri9 = (long)2;\n        long tri10 = (long)3;\n    \
    \    long tri11 = (long)1;\n        long tri12 = (long)2;\n        long tri13\
    \ = (long)3;\n        long tri14 = (long)1;\n        long tri15 = (long)2;\n \
    \       long tri16 = (long)3;\n        long tri17 = (long)1;\n        long tri18\
    \ = (long)2;\n        long tri19 = (long)3;\n        long tri20 = (long)1;\n \
    \       long tri21 = (long)2;\n        long tri22 = (long)3;\n        long tri23\
    \ = (long)1;\n        long tri24 = (long)2;\n        long tri25 = (long)3;\n \
    \       long tri26 = (long)1;\n        long tri27 = (long)2;\n        long tri28\
    \ = (long)3;\n        long tri29 = (long)1;\n        long tri30 = (long)2;\n \
    \       long tri31 = (long)3;\n        long tri32 = (long)1;\n        long tri33\
    \ = (long)2;\n        long tri34 = (long)3;\n        long tri35 = (long)1;\n \
    \       long tri36 = (long)2;\n        long tri37 = (long)3;\n        long tri38\
    \ = (long)1;\n        long tri39 = (long)2;\n        long tri40 = (long)3;\n \
    \       long tri41 = (long)1;\n        long tri42 = (long)2;\n        long tri43\
    \ = (long)3;\n        long tri44 = (long)1;\n        long tri45 = (long)2;\n \
    \       long tri46 = (long)3;\n        long tri47 = (long)1;\n        long tri48\
    \ = (long)2;\n        long tri49 = (long)3;\n        long tri50 = (long)1;\n \
    \       long tri51 = (long)2;\n        long tri52 = (long)3;\n        long tri53\
    \ = (long)1;\n        long tri54 = (long)2;\n        long tri55 = (long)3;\n \
    \       long tri56 = (long)1;\n        long tri57 = (long)2;\n        long tri58\
    \ = (long)3;\n        long tri59 = (long)1;\n        long tri60 = (long)2;\n \
    \       long tri61 = (long)3;\n        long tri62 = (long)1;\n        long \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzwlnf0kb.cs(89,13): error CS1001: Identifier expected

    /tmp/tmpzwlnf0kb.cs(89,13): error CS1002: ; expected

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsn34g6ur.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpsn34g6ur.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            return result;\n        }\n        long a = Tri(n - 1);\n       \
    \ long b = Tri(n - 2);\n        long c = a + b;\n        result.Add(c);\n    \
    \    result.Add(a + b);\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkseq5iey.cs(30,18): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpkseq5iey.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkseq5iey.cs(31,18): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpkseq5iey.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkseq5iey.cs(32,18): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpkseq5iey.cs(36,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkseq5iey.cs(37,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3\
    \ = (long)2;\n        long tri4 = (long)3;\n        long tri5 = (long)1;\n   \
    \     long tri6 = (long)2;\n        long tri7 = (long)3;\n        long tri8 =\
    \ (long)1;\n        long tri9 = (long)2;\n        long tri10 = (long)3;\n    \
    \    long tri11 = (long)1;\n        long tri12 = (long)2;\n        long tri13\
    \ = (long)3;\n        long tri14 = (long)1;\n        long tri15 = (long)2;\n \
    \       long tri16 = (long)3;\n        long tri17 = (long)1;\n        long tri18\
    \ = (long)2;\n        long tri19 = (long)3;\n        long tri20 = (long)1;\n \
    \       long tri21 = (long)2;\n        long tri22 = (long)3;\n        long tri23\
    \ = (long)1;\n        long tri24 = (long)2;\n        long tri25 = (long)3;\n \
    \       long tri26 = (long)1;\n        long tri27 = (long)2;\n        long tri28\
    \ = (long)3;\n        long tri29 = (long)1;\n        long tri30 = (long)2;\n \
    \       long tri31 = (long)3;\n        long tri32 = (long)1;\n        long tri33\
    \ = (long)2;\n        long tri34 = (long)3;\n        long tri35 = (long)1;\n \
    \       long tri36 = (long)2;\n        long tri37 = (long)3;\n        long tri38\
    \ = (long)1;\n        long tri39 = (long)2;\n        long tri40 = (long)3;\n \
    \       long tri41 = (long)1;\n        long tri42 = (long)2;\n        long tri43\
    \ = (long)3;\n        long tri44 = (long)1;\n        long tri45 = (long)2;\n \
    \       long tri46 = (long)3;\n        long tri47 = (long)1;\n        long tri48\
    \ = (long)2;\n        long tri49 = (long)3;\n        long tri50 = (long)1;\n \
    \       long tri51 = (long)2;\n        long tri52 = (long)3;\n        long tri53\
    \ = (long)1;\n        long tri54 = (long)2;\n        long tri55 = (long)3;\n \
    \       long tri56 = (long)1;\n        long tri57 = (long)2;\n        long tri58\
    \ = (long)3;\n        long tri59 = (long)1;\n        long tri60 = (long)2;\n \
    \       long tri61 = (long)3;\n        long tri62 = (long)1;\n        long \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzwlnf0kb.cs(89,13): error CS1001: Identifier expected

    /tmp/tmpzwlnf0kb.cs(89,13): error CS1002: ; expected

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n        } else {\n        \
    \    long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n        \
    \    foreach (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \            foreach (long x in a) result.Add(x);\n            foreach (long x\
    \ in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcfebj906.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpcfebj906.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpcfebj906.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpcfebj906.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpcfebj906.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpcfebj906.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpcfebj906.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpcfebj906.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpcfebj906.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpcfebj906.cs(40,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpcfebj906.cs(41,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpcfebj906.cs(42,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpcfebj906.cs(43,32): error CS1579: foreach statement cannot operate on
    v'
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 1) + Tri(n + 2) + Tri(n\
    \ + 3));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzsoik06f.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpzsoik06f.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n        } else {\n            result.Add(Tri(n -\
    \ 1L));\n            result.Add(Tri(n - 2L));\n            result.Add(Tri(n +\
    \ 1L));\n            result.Add(Tri(n - 3L));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu06l5w68.cs(37,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu06l5w68.cs(38,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu06l5w68.cs(39,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu06l5w68.cs(41,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu06l5w68.cs(42,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu06l5w68.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpu06l5w68.cs(44,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3L) {\n         \
    \   return new List<long>();\n        }\n        var result = new List<long>();\n\
    \        long tri1 = 1L;\n        long tri2 = 2L;\n        long tri3 = tri1 +\
    \ tri2;\n        long tri4 = tri3;\n        long tri5 = tri4;\n        long tri6\
    \ = tri5;\n        long tri7 = tri6;\n        long tri8 = tri7;\n        long\
    \ tri9 = tri8;\n        long tri10 = tri9;\n        long tri11 = tri10;\n    \
    \    long tri12 = tri11;\n        long tri13 = tri12;\n        long tri14 = tri13;\n\
    \        long tri15 = tri14;\n        long tri16 = tri15;\n        long tri17\
    \ = tri16;\n        long tri18 = tri17;\n        long tri19 = tri18;\n       \
    \ long tri20 = tri19;\n        long tri21 = tri20;\n        long tri22 = tri21;\n\
    \        long tri23 = tri22;\n        long tri24 = tri23;\n        long tri25\
    \ = tri24;\n        long tri26 = tri25;\n        long tri27 = tri26;\n       \
    \ long tri28 = tri27;\n        long tri29 = tri28;\n        long tri30 = tri29;\n\
    \        long tri31 = tri30;\n        long tri32 = tri31;\n        long tri33\
    \ = tri32;\n        long tri34 = tri33;\n        long tri35 = tri34;\n       \
    \ long tri36 = tri35;\n        long tri37 = tri36;\n        long tri38 = tri37;\n\
    \        long tri39 = tri38;\n        long tri40 = tri39;\n        long tri41\
    \ = tri40;\n        long tri42 = tri41;\n        long tri43 = tri42;\n       \
    \ long tri44 = tri43;\n        long tri45 = tri44;\n        long tri46 = tri45;\n\
    \        long tri47 = tri46;\n        long tri48 = tri47;\n        long tri49\
    \ = tri48;\n        long tri50 = tri49;\n        long tri51 = tri50;\n       \
    \ long tri52 = tri51;\n        long tri53 = tri52;\n        long tri54 = tri53;\n\
    \        long tri55 = tri54;\n        long tri56 = tri55;\n        long tri57\
    \ = tri56;\n        long tri58 = tri\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvyuy7bnz.cs(87,25): error CS1002: ; expected

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0g9tcp5h.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp0g9tcp5h.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8) + Tri(n - 9);\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpknzgcqgg.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpknzgcqgg.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n / 2);\n      \
    \      long b = Tri(n - 1);\n            long c = Tri(n - 2);\n            long\
    \ d = a + b + c;\n            result.Add(d);\n        }\n        else {\n    \
    \        long a = Tri(n / 2);\n            long b = Tri(n - 1);\n            long\
    \ c = Tri(n - 2);\n            long d = a + b + c;\n            result.Add(d);\n\
    \            result.Add(a + c);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb4tjcoz_.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpb4tjcoz_.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpb4tjcoz_.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpb4tjcoz_.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpb4tjcoz_.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpb4tjcoz_.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsn34g6ur.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpsn34g6ur.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3) return new List<long>();\n\
    \        if (n % 2 == 0) return new List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ - 3) };\n        return new List<long>() { Tri(n - 1) + Tri(n - 2) + Tri(n -\
    \ 3) };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0wkje_6g.cs(27,51): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp0wkje_6g.cs(28,35): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprxhyyt5_.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprxhyyt5_.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        if (n == 1)\n      \
    \      result.Add(1);\n        if (n == 2)\n            result.Add(3);\n     \
    \   if (n % 2 == 0)\n            result.Add(1 + n / 2);\n        else\n      \
    \      result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpudv12ve2.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n   \
    \     }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n + 2));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpytdmjvs_.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpytdmjvs_.cs(43,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5)\
    \ + Tri(n - 6) + Tri(n - 7) + Tri(n - 8) + Tri(n - 9) + Tri(n - 10) + Tri(n -\
    \ 11) + Tri(n - 12) + Tri(n - 13) + Tri(n - 14) + Tri(n - 15) + Tri(n - 16) +\
    \ Tri(n - 17) + Tri(n - 18) + Tri(n - 19) + Tri(n - 20) + Tri(n - 21) + Tri(n\
    \ - 22) + Tri(n - 23) + Tri(n - 24) + Tri(n - 25) + Tri(n - 26) + Tri(n - 27)\
    \ + Tri(n - 28) + Tri(n - 29) + Tri(n - 30) + Tri(n - 31) + Tri(n - 32) + Tri(n\
    \ - 33) + Tri(n - 34) + Tri(n - 35) + Tri(n - 36) + Tri(n - 37) + Tri(n - 38)\
    \ + Tri(n - 39) + Tri(n - 40) + Tri(n - 41) + Tri(n - 42) + Tri(n - 43) + Tri(n\
    \ - 44) + Tri(n - 45) + Tri(n - 46) + Tri(n - 47) + Tri(n - 48) + Tri(n - 49)\
    \ + Tri(n - 50) + Tri(n - 51) + Tri(n - 52) + Tri(n - 53) + Tri(n - 54) + Tri(n\
    \ - 55) + Tri(n - 56) + Tri(n - 57) + Tri(n - 58) + Tri(n - 59) + Tri(n - 60)\
    \ + Tri(n - 61) + Tri(n - 62) + Tri(n - 63) + Tri(n - 64) + Tri(n - 65) + Tri(n\
    \ - 66) + Tri(n - 67) + Tri(n - 68) + Tri(n - 69) + Tri(n - 70) + Tri(n - 71)\
    \ + Tri(n - 72) + Tri(n - 73) + Tri(n - 74) + Tri(n - 75) + Tri(n - 76) + Tri(n\
    \ - 77) + Tri(n - 78) + Tri(n - 79) + Tri(n - 80) + Tri(n - 81)});\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeupxttl6.cs(29,1156): error CS1002: ; expected

    /tmp/tmpeupxttl6.cs(29,1157): error CS1519: Invalid token '')'' in class, struct,
    or interface member declaration

    /tmp/tmpeupxttl6.cs(44,1): error CS1022: Type or namespace definition, or end-of-file
    expected

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            foreach (var item in new long[] { a, b, c }) {\n        \
    \        result.Add(item);\n            }\n        } else {\n            long\
    \ a = Tri(n - 1);\n            long b = Tri(n - 2) + Tri(n - 1) + Tri(n - 3);\n\
    \            foreach (var item in new long[] { a, b, a }) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbcysbs76.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbcysbs76.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbcysbs76.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpbcysbs76.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbcysbs76.cs(38,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        if (n == 1)\n      \
    \      result.Add(1);\n        if (n == 2)\n            result.Add(3);\n     \
    \   if (n % 2 == 0)\n            result.Add(1 + n / 2);\n        else\n      \
    \      result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpudv12ve2.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3) + Tri(n + 1));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpplaay86j.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpplaay86j.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) {\n         \
    \   return new List<long>();\n        }\n        if (n == 1) {\n            return\
    \ new List<long>() { 1 };\n        }\n        if (n % 2 == 0) {\n            return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        } else {\n            return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5)\
    \ + Tri(n - 6) + Tri(n - 7) + Tri(n - 8);\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp79xtgpuu.cs(33,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp79xtgpuu.cs(35,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3L) {\n         \
    \   return new List<long>();\n        }\n        long a = 2L;\n        long b\
    \ = 1;\n        long c = 1L;\n        List<long> result = new List<long>();\n\
    \        do {\n            result.Add(c);\n            long d = a + b + c;\n \
    \           if (n % 2 == 0) {\n                a = b;\n                b = c;\n\
    \                c = d;\n            } else {\n                a = c;\n      \
    \          b = d;\n                c = a + b + c;\n            }\n           \
    \ n -= 1;\n        } while (n > 0);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ac3e1122c424ae58785600cc7b46deb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ac3e1122c424ae58785600cc7b46deb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri4);\n     \
    \       return result;\n        }\n        long tri1 = Tri(n - 1);\n        long\
    \ tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = tri1\
    \ + tri2 + tri3;\n        result.Add(tri1);\n        result.Add(tri2);\n     \
    \   result.Add(tri3);\n        result.Add(tri4);\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgc6ygv1b.cs(30,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpgc6ygv1b.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgc6ygv1b.cs(31,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpgc6ygv1b.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgc6ygv1b.cs(32,18): error CS0136: A local or parameter named ''tri3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpgc6ygv1b.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgc6ygv1b.cs(33,18): error CS0136: A local or parameter named ''tri4''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpgc6ygv1b.cs(37,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgc6ygv1b.cs(38,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgc6ygv1b.cs(39,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1);\n            result.AddRange(new List<long>() { a, b, c });\n        }\
    \ else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            result.AddRange(new\
    \ List<long>() { a, b, c });\n            result.Add(Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1));\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc3olp6cl.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpc3olp6cl.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpc3olp6cl.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpc3olp6cl.cs(35,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpc3olp6cl.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpc3olp6cl.cs(37,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpc3olp6cl.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        long tri1 = Tri(n - 1L);\n   \
    \     long tri2 = Tri(n - 2L);\n        long tri3 = Tri(n - 3L);\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri3);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp1ihu8dq.cs(36,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpp1ihu8dq.cs(37,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpp1ihu8dq.cs(38,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long\
    \ sum = 0;\n            foreach (var item in a) {\n                sum += item;\n\
    \            }\n            foreach (var item in b) {\n                sum +=\
    \ item;\n            }\n            foreach (var item in c) {\n              \
    \  sum += item;\n            }\n            result.Add(sum);\n        } else {\n\
    \            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n        \
    \    long c = Tri(n + 1);\n            long sum = 0;\n            foreach (var\
    \ item in a) {\n                sum += item;\n            }\n            foreach\
    \ (var item in b) {\n                sum += item;\n            }\n           \
    \ foreach (var item in c) {\n                sum += item;\n            }\n   \
    \         result.Add(sum);\n            result.Add(sum);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpomzpynej.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpomzpynej.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpomzpynej.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpomzpynej.cs(34,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpomzpynej.cs(37,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpomzpynej.cs(40,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpomzpynej.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpomzpynej.cs(46,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpomzpynej.cs(47,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpomzpynej.cs(49,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpomzpynej.cs(52,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpomzpynej.cs(55,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        result.Add((tri1 + tri2 + tri3));\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3bv6yk6.cs(43,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmps3bv6yk6.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmps3bv6yk6.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1)});\n        else return new List<long>(new long[]{(long)Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n - 3)});\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo_nlpc5p.cs(28,58): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpo_nlpc5p.cs(29,47): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a) {\n                result.Add(item);\n            }\n      \
    \      foreach (var item in b) {\n                result.Add(item);\n        \
    \    }\n            foreach (var item in c) {\n                result.Add(item);\n\
    \            }\n        } else {\n            long a = Tri(n - 1);\n         \
    \   long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a) {\n                result.Add(item);\n            }\n      \
    \      foreach (var item in b) {\n                result.Add(item);\n        \
    \    }\n            foreach (var item in c) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3bijg3my.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3bijg3my.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3bijg3my.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3bijg3my.cs(33,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp3bijg3my.cs(36,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp3bijg3my.cs(39,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp3bijg3my.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3bijg3my.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3bijg3my.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3bijg3my.cs(46,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp3bijg3my.cs(49,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp3bijg3my.cs(52,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = tri1 + tri2 + tri3;\n            result.AddRange(tri1, tri2,\
    \ tri3, tri4);\n        } else {\n            long tri1 = Tri(n - 1);\n      \
    \      long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n        \
    \    long tri4 = tri1 + tri2 + tri3;\n            result.AddRange(tri1, tri2,\
    \ tri3, tri4);\n            result.AddRange(tri1, tri2, tri3, tri4);\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5uhorzp.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpn5uhorzp.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpn5uhorzp.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpn5uhorzp.cs(34,20): error CS1501: No overload for method ''AddRange''
    takes 4 arguments

    /tmp/tmpn5uhorzp.cs(36,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpn5uhorzp.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpn5uhorzp.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpn5uhorzp.cs(40,20): error CS1501: No overload for method ''AddRange''
    takes 4 arguments

    /tmp/tmpn5uhorzp.cs(41,20): error CS1501: No overload for method ''AddRange''
    takes 4 arguments

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n / 2);\n      \
    \      long b = Tri(n - 1);\n            long c = Tri(n - 2);\n            long\
    \ d = a + b + c;\n            result.Add(d);\n        }\n        else {\n    \
    \        long a = Tri(n / 2);\n            long b = Tri(n - 1);\n            long\
    \ c = Tri(n - 2);\n            long d = a + b + c;\n            result.Add(d);\n\
    \            result.Add(d);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw056fuif.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpw056fuif.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpw056fuif.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpw056fuif.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpw056fuif.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpw056fuif.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            return result;\n        } else {\n            long a = Tri(n - 1);\n\
    \            long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            long d = Tri(n - 3);\n            result.Add(d);\n            return\
    \ result;\n        }\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0agsbflm.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0agsbflm.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0agsbflm.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0agsbflm.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp0agsbflm.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            long sum = a + b + c;\n            result.Add(sum);\n   \
    \         return result;\n        } else {\n            long a = Tri(n - 1);\n\
    \            long b = Tri(n - 2) + Tri(n - 1);\n            long c = Tri(n - 3)\
    \ + Tri(n - 2) + Tri(n - 1);\n            long sum = a + b + c;\n            result.Add(sum);\n\
    \            return result;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr0gk70ly.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpr0gk70ly.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpr0gk70ly.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpr0gk70ly.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpr0gk70ly.cs(38,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpr0gk70ly.cs(39,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n       \
    \     long tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n         \
    \   long tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n           \
    \ long tri10 = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n         \
    \   long tri12 = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n       \
    \     long tri14 = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n     \
    \       long tri16 = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n   \
    \         long tri18 = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n \
    \           long tri20 = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n\
    \            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n\
    \            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n\
    \            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n\
    \            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n\
    \            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n\
    \            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n\
    \            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n\
    \            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n\
    \            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n\
    \            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n\
    \            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n\
    \            long tri44 = Tri(n - 44);\n            long tri45 = Tri(n - 45);\n\
    \            long tri46 = Tri(n - 46);\n            long tri\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxxxoyvng.cs(76,21): error CS1002: ; expected

    /tmp/tmpxxxoyvng.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpxxxoyvng.cs(91,2): error CS1513: } expected

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1za2yxu2.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1za2yxu2.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n       \
    \     long tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n         \
    \   long tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n           \
    \ long tri10 = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n         \
    \   long tri12 = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n       \
    \     long tri14 = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n     \
    \       long tri16 = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n   \
    \         long tri18 = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n \
    \           long tri20 = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n\
    \            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n\
    \            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n\
    \            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n\
    \            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n\
    \            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n\
    \            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n\
    \            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n\
    \            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n\
    \            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n\
    \            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n\
    \            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n\
    \            long tri44 = Tri(n - 44);\n            long tri45 = Tri(n - 45);\n\
    \            long tri46 = Tri(n - 46);\n            long tri\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxxxoyvng.cs(76,21): error CS1002: ; expected

    /tmp/tmpxxxoyvng.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpxxxoyvng.cs(91,2): error CS1513: } expected

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp60qsi6jk.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp60qsi6jk.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1L);\n            long b = Tri(n - 2L);\n            long\
    \ c = Tri(n + 1L);\n            result.AddRange(a);\n            result.Add(b\
    \ + c);\n            return result;\n        }\n        long a = Tri(n - 1L);\n\
    \        long b = Tri(n - 2L);\n        result.AddRange(a);\n        result.Add(b);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplcz_tsok.cs(37,18): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmplcz_tsok.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplcz_tsok.cs(38,18): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmplcz_tsok.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplcz_tsok.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplcz_tsok.cs(40,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmplcz_tsok.cs(44,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplcz_tsok.cs(45,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplcz_tsok.cs(46,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo6cw137i.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpo6cw137i.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsn34g6ur.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpsn34g6ur.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3\
    \ = (long)2;\n        long tri4 = (long)3;\n        long tri5 = (long)1;\n   \
    \     long tri6 = (long)2;\n        long tri7 = (long)3;\n        long tri8 =\
    \ (long)1;\n        long tri9 = (long)2;\n        long tri10 = (long)3;\n    \
    \    long tri11 = (long)1;\n        long tri12 = (long)2;\n        long tri13\
    \ = (long)3;\n        long tri14 = (long)1;\n        long tri15 = (long)2;\n \
    \       long tri16 = (long)3;\n        long tri17 = (long)1;\n        long tri18\
    \ = (long)2;\n        long tri19 = (long)3;\n        long tri20 = (long)1;\n \
    \       long tri21 = (long)2;\n        long tri22 = (long)3;\n        long tri23\
    \ = (long)1;\n        long tri24 = (long)2;\n        long tri25 = (long)3;\n \
    \       long tri26 = (long)1;\n        long tri27 = (long)2;\n        long tri28\
    \ = (long)3;\n        long tri29 = (long)1;\n        long tri30 = (long)2;\n \
    \       long tri31 = (long)3;\n        long tri32 = (long)1;\n        long tri33\
    \ = (long)2;\n        long tri34 = (long)3;\n        long tri35 = (long)1;\n \
    \       long tri36 = (long)2;\n        long tri37 = (long)3;\n        long tri38\
    \ = (long)1;\n        long tri39 = (long)2;\n        long tri40 = (long)3;\n \
    \       long tri41 = (long)1;\n        long tri42 = (long)2;\n        long tri43\
    \ = (long)3;\n        long tri44 = (long)1;\n        long tri45 = (long)2;\n \
    \       long tri46 = (long)3;\n        long tri47 = (long)1;\n        long tri48\
    \ = (long)2;\n        long tri49 = (long)3;\n        long tri50 = (long)1;\n \
    \       long tri51 = (long)2;\n        long tri52 = (long)3;\n        long tri53\
    \ = (long)1;\n        long tri54 = (long)2;\n        long tri55 = (long)3;\n \
    \       long tri56 = (long)1;\n        long tri57 = (long)2;\n        long tri58\
    \ = (long)3;\n        long tri59 = (long)1;\n        long tri60 = (long)2;\n \
    \       long tri61 = (long)3;\n        long tri62 = (long)1;\n        long \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzwlnf0kb.cs(89,13): error CS1001: Identifier expected

    /tmp/tmpzwlnf0kb.cs(89,13): error CS1002: ; expected

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n / 2);\n      \
    \      long b = Tri(n - 1);\n            long c = Tri(n - 2);\n            long\
    \ d = a + b + c;\n            result.Add(d);\n        }\n        else {\n    \
    \        long a = Tri(n / 2);\n            long b = Tri(n - 1);\n            long\
    \ c = Tri(n - 2);\n            long d = a + b + c;\n            result.Add(d);\n\
    \            result.Add(a);\n            result.Add(b);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfx14p88o.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfx14p88o.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfx14p88o.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfx14p88o.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfx14p88o.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpfx14p88o.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { (long)1 };\n        if (n == 2) return new List<long>() { (long)1 };\n   \
    \     if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b\
    \ = Tri(n - 2);\n            long c = Tri(n + 1);\n            long sum = 0;\n\
    \            foreach (long x in a) sum += x;\n            foreach (long x in b)\
    \ sum += x;\n            foreach (long x in c) sum += x;\n            result.Add((long)sum);\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n + 1);\n            long sum = 0;\n       \
    \     foreach (long x in a) sum += x;\n            foreach (long x in b) sum +=\
    \ x;\n            foreach (long x in c) sum += x;\n            result.Add((long)sum);\n\
    \            result.Add((long)sum);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2ub0_a66.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp2ub0_a66.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp2ub0_a66.cs(33,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp2ub0_a66.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp2ub0_a66.cs(36,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp2ub0_a66.cs(37,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp2ub0_a66.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp2ub0_a66.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp2ub0_a66.cs(42,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp2ub0_a66.cs(44,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp2ub0_a66.cs(45,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp2ub0_a66.cs(46,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n / 2);\n      \
    \      long b = Tri(n - 1);\n            long c = Tri(n - 2);\n            long\
    \ d = a + b + c;\n            result.Add(d);\n        }\n        else {\n    \
    \        long a = Tri(n / 2);\n            long b = Tri(n - 1);\n            long\
    \ c = Tri(n - 2);\n            long d = a + b + c;\n            result.Add(d);\n\
    \            long e = Tri(n / 2 + 1);\n            result.Add(e);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1b7po_7v.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1b7po_7v.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1b7po_7v.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1b7po_7v.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1b7po_7v.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1b7po_7v.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1b7po_7v.cs(42,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{3L});\n        if (n % 2\
    \ == 0) {\n            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        }\
    \ else {\n            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3)\
    \ + Tri(n - 4) + Tri(n + 2);\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjvi0_thp.cs(29,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpjvi0_thp.cs(31,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n    \
    \    if (n == 2) result.Add(2);\n        if (n % 2 == 0) {\n            int n1\
    \ = Tri(n / 2);\n            int n2 = Tri(n - 1);\n            int n3 = Tri(n\
    \ - 2);\n            int n4 = Tri(n + 1);\n            int n5 = Tri(n - 3);\n\
    \            int n6 = Tri(n - 4);\n            int n7 = Tri(n + 3);\n        \
    \    int n8 = Tri(n - 5);\n            int n9 = Tri(n - 6);\n            int n10\
    \ = Tri(n + 5);\n            int n11 = Tri(n - 7);\n            int n12 = Tri(n\
    \ - 8);\n            int n13 = Tri(n + 6);\n            int n14 = Tri(n - 9);\n\
    \            int n15 = Tri(n - 10);\n            int n16 = Tri(n + 7);\n     \
    \       int n17 = Tri(n - 11);\n            int n18 = Tri(n - 12);\n         \
    \   int n19 = Tri(n + 8);\n            int n20 = Tri(n - 13);\n            int\
    \ n21 = Tri(n - 14);\n            int n22 = Tri(n + 9);\n            int n23 =\
    \ Tri(n - 15);\n            int n24 = Tri(n - 16);\n            int n25 = Tri(n\
    \ + 10);\n            int n26 = Tri(n - 17);\n            int n27 = Tri(n - 18);\n\
    \            int n28 = Tri(n + 11);\n            int n29 = Tri(n - 19);\n    \
    \        int n30 = Tri(n - 20);\n            int n31 = Tri(n + 12);\n        \
    \    int n32 = Tri(n - 21);\n            int n33 = Tri(n - 22);\n            int\
    \ n34 = Tri(n + 13);\n            int n35 = Tri(n - 23);\n            int n36\
    \ = Tri(n - 24);\n            int n37 = Tri(n + 14);\n            int n38 = Tri(n\
    \ - 25);\n            int n39 = Tri(n - 26);\n            int n40 = Tri(n + 15);\n\
    \            int n41 = Tri(n - 27);\n            int n42 = Tri(n - 28);\n    \
    \        int n43 = Tri(n + 16);\n            int n44 = Tri(n - 29);\n        \
    \    int n45 = Tri(n - 30);\n            int n46 = Tri(n + 17);\n            int\
    \ n47 = Tri(n - 31);\n            int n48 = Tri\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3yhfzwfm.cs(78,26): error CS1002: ; expected

    /tmp/tmp3yhfzwfm.cs(80,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp3yhfzwfm.cs(93,2): error CS1513: } expected

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = tri1 + tri2 + tri3;\n            result.Add(tri4);\n     \
    \       return result;\n        }\n        long tri1 = Tri(n - 1);\n        long\
    \ tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        long tri4 = tri1\
    \ + tri2 + tri3;\n        result.Add(tri4);\n        result.Add(tri3);\n     \
    \   result.Add(tri2);\n        result.Add(tri1);\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8nb116y1.cs(30,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp8nb116y1.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp8nb116y1.cs(31,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp8nb116y1.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp8nb116y1.cs(32,18): error CS0136: A local or parameter named ''tri3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp8nb116y1.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp8nb116y1.cs(33,18): error CS0136: A local or parameter named ''tri4''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmp8nb116y1.cs(37,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp8nb116y1.cs(38,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp8nb116y1.cs(39,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn6xknwif.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpn6xknwif.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long a = Tri(n - 1L);\n            long b = Tri(n - 2L);\n            long\
    \ c = Tri(n + 1L);\n            result.AddRange(a);\n            result.Add(b);\n\
    \            result.Add(c);\n            return result;\n        }\n        else\
    \ {\n            long a = Tri(n - 1L);\n            long b = Tri(n - 2L);\n  \
    \          result.AddRange(a);\n            result.Add(b);\n            return\
    \ result;\n        }\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxxcg5b0g.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxxcg5b0g.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxxcg5b0g.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxxcg5b0g.cs(40,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpxxcg5b0g.cs(46,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxxcg5b0g.cs(47,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpxxcg5b0g.cs(48,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n + 1);\n     \
    \       foreach (long i in tri1) {\n                result.Add(i);\n         \
    \   }\n            foreach (long i in tri2) {\n                result.Add(i);\n\
    \            }\n            foreach (long i in tri3) {\n                result.Add(i);\n\
    \            }\n            return result;\n        }\n        long tri1 = Tri(n\
    \ - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n + 1);\n  \
    \      foreach (long i in tri1) {\n            result.Add(i);\n        }\n   \
    \     foreach (long i in tri2) {\n            result.Add(i);\n        }\n    \
    \    foreach (long i in tri3) {\n            result.Add(i);\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpob1l7cqs.cs(30,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpob1l7cqs.cs(30,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpob1l7cqs.cs(31,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpob1l7cqs.cs(31,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpob1l7cqs.cs(32,18): error CS0136: A local or parameter named ''tri3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpob1l7cqs.cs(32,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpob1l7cqs.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpob1l7cqs.cs(36,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpob1l7cqs.cs(39,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpob1l7cqs.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpob1l7cqs.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpob1l7cqs.cs(46,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpob1l7cqs.cs(47,28): error CS1579: foreach'
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(2);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n        } else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcmpjcq9e.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpcmpjcq9e.cs(46,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpcmpjcq9e.cs(48,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1L);\n            long tri2 = Tri(n - 2L);\n          \
    \  long tri3 = Tri(n + 1L);\n            result.AddRange(tri1);\n            result.AddRange(tri2);\n\
    \            result.AddRange(tri3);\n            return result;\n        }\n \
    \       long tri1 = Tri(n - 1L);\n        long tri2 = Tri(n - 2L);\n        long\
    \ tri3 = Tri(n + 1L);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n\
    \        result.AddRange(tri3);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgryhf2xq.cs(37,18): error CS0136: A local or parameter named ''tri1''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpgryhf2xq.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgryhf2xq.cs(38,18): error CS0136: A local or parameter named ''tri2''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpgryhf2xq.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgryhf2xq.cs(39,18): error CS0136: A local or parameter named ''tri3''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpgryhf2xq.cs(39,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgryhf2xq.cs(40,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpgryhf2xq.cs(41,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpgryhf2xq.cs(42,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpgryhf2xq.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgryhf2xq.cs(46,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgryhf2xq.cs(47,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgryhf2xq.cs(48,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpgryhf2xq.cs(49,25): error CS1503: Argument 1: cannot convert from ''lo'
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3) {\n          \
    \  return new List<long>();\n        }\n        long tri1 = Tri(n - 1);\n    \
    \    long tri2 = Tri(n - 2);\n        long tri3 = Tri(n - 3);\n        List<long>\
    \ result = new List<long>();\n        result.Add(tri1);\n        result.Add(tri2);\n\
    \        result.Add(tri3);\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplu9_up0t.cs(29,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplu9_up0t.cs(30,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmplu9_up0t.cs(31,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) {\n         \
    \   return new List<long>();\n        }\n        if (n == 1) {\n            return\
    \ new List<long>() { 1 };\n        }\n        if (n % 2 == 0) {\n            return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        }\n        return Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n + 1);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphf44dc4a.cs(33,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmphf44dc4a.cs(35,16): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp388t1rqk.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp388t1rqk.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>(new\
    \ long[]{(long)1L});\n        if (n == 1) return new List<long>(new long[]{(long)3L});\n\
    \        if (n == 2) return new List<long>(new long[]{(long)2L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5)\
    \ + Tri(n - 6) + Tri(n - 7) + Tri(n - 8);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqk4qgw2q.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpqk4qgw2q.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        long tri1 = Tri(n - 1L);\n   \
    \     long tri2 = Tri(n - 2L);\n        long tri3 = Tri(n - 3L);\n        result.Add(tri1);\n\
    \        result.Add(tri2);\n        result.Add(tri3);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp1ihu8dq.cs(36,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpp1ihu8dq.cs(37,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpp1ihu8dq.cs(38,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3);\n            long\
    \ d = a + b + c;\n            result.Add(d);\n        }\n        else {\n    \
    \        long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n - 3);\n            long d = a + b + c;\n            result.Add(d);\n\
    \            result.Add(a + c);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph5tuf05t.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph5tuf05t.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph5tuf05t.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph5tuf05t.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph5tuf05t.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph5tuf05t.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        } else {\n\
    \            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8) + Tri(n - 9) + Tri(n\
    \ - 10) + Tri(n - 11) + Tri(n - 12) + Tri(n - 13) + Tri(n - 14) + Tri(n - 15)\
    \ + Tri(n - 16) + Tri(n - 17) + Tri(n - 18) + Tri(n - 19) + Tri(n - 20) + Tri(n\
    \ - 21) + Tri(n - 22) + Tri(n - 23) + Tri(n - 24) + Tri(n - 25) + Tri(n - 26)\
    \ + Tri(n - 27) + Tri(n - 28) + Tri(n - 29) + Tri(n - 30) + Tri(n - 31) + Tri(n\
    \ - 32) + Tri(n - 33) + Tri(n - 34) + Tri(n - 35) + Tri(n - 36) + Tri(n - 37)\
    \ + Tri(n - 38) + Tri(n - 39) + Tri(n - 40) + Tri(n - 41) + Tri(n - 42) + Tri(n\
    \ - 43) + Tri(n - 44) + Tri(n - 45) + Tri(n - 46) + Tri(n - 47) + Tri(n - 48)\
    \ + Tri(n - 49) + Tri(n - 50) + Tri(n - 51) + Tri(n - 52) + Tri(n - 53) + Tri(n\
    \ - 54) + Tri(n - 55) + Tri(n - 56) + Tri(n - 57) + Tri(n - 58) + Tri(n - 59)\
    \ + Tri(n - 60) + Tri(n - 61) + Tri(n - 62) + Tri(n - 63) + Tri(n - 64) + Tri(n\
    \ - 65) + Tri(n - 66) + Tri(n - 67) + Tri(n - 68) + Tri(n - 69) + Tri(n - 70)\
    \ + Tri(n - 71) + Tri(n - 72) + Tri(n - 73) + Tri(n - 74) + Tri(n - 75) + Tri(n\
    \ - 76) + Tri(n - 77) + Tri(n - 78) + Tri(n - 79) + Tri(n - 80) + Tri(n - 81)\
    \ + Tri(n - 82) + Tri(n - 83) + Tri(n - 84) + Tri(n - 85) + Tri(n - 86) + Tri(n\
    \ - 87) + Tri(n - 88) + Tri(n - 89) + Tri(n - 90) + Tri(n - 91) + Tri(n - 92)\
    \ + Tri(n - 93) + Tri(n - \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj_fucy49.cs(31,1333): error CS1525: Invalid expression term ''}''

    /tmp/tmpj_fucy49.cs(31,1333): error CS1026: ) expected

    /tmp/tmpj_fucy49.cs(31,1333): error CS1002: ; expected

    /tmp/tmpj_fucy49.cs(33,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpj_fucy49.cs(46,2): error CS1513: } expected

    '
  timestamp: 1659823546
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3) return new List<long>();\n\
    \        if (n % 2 == 0) return new List<long>() { n };\n        var result =\
    \ new List<long>();\n        var tri1 = Tri(n - 1);\n        var tri2 = Tri(n\
    \ - 2);\n        var tri3 = Tri(n - 3);\n        result.AddRange(tri1);\n    \
    \    result.AddRange(tri2);\n        result.AddRange(tri3);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <325caf26dd3e47d2bd6fa2a02d3f2937>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <325caf26dd3e47d2bd6fa2a02d3f2937>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0pkz77o_.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp0pkz77o_.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyxs_481k.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpyxs_481k.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n    \
    \    if (n == 2) result.Add(3);\n        if (n % 2 == 0) result.Add(Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n + 1));\n        else result.Add(Tri(n - 1) + Tri(n - 2));\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0l32gd5j.cs(30,36): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp0l32gd5j.cs(31,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1t77gyq5.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1t77gyq5.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            long d = Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n\
    \            long e = Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n\
    \ - 1);\n            long f = Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3)\
    \ + Tri(n - 2) + Tri(n - 1);\n            long g = Tri(n - 7) + Tri(n - 6) + Tri(n\
    \ - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long\
    \ h = Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n -\
    \ 3) + Tri(n - 2) + Tri(n - 1);\n            result.AddRange(new long[] { a, b,\
    \ c, d, e, f, g, h });\n        } else {\n            long a = Tri(n - 1);\n \
    \           long b = Tri(n - 2) + Tri(n - 1);\n            long c = Tri(n - 3)\
    \ + Tri(n - 2) + Tri(n - 1);\n            long d = Tri(n - 4) + Tri(n - 3) + Tri(n\
    \ - 2) + Tri(n - 1);\n            long e = Tri(n - 5) + Tri(n - 4) + Tri(n - 3)\
    \ + Tri(n - 2) + Tri(n - 1);\n            long f = Tri(n - 6) + Tri(n - 5) + Tri(n\
    \ - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long g = Tri(n - 7)\
    \ + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n\
    \            long h = Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n\
    \ - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            result.AddRange(new\
    \ long[] { a, b, c, d, e, f, g, h });\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprq2j75vj.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprq2j75vj.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprq2j75vj.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprq2j75vj.cs(33,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprq2j75vj.cs(34,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprq2j75vj.cs(35,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprq2j75vj.cs(36,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprq2j75vj.cs(37,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprq2j75vj.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprq2j75vj.cs(41,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprq2j75vj.cs(42,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprq2j75vj.cs(43,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprq2j75vj.cs(44,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprq2j75vj.cs(45,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprq2j75vj.cs(46,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprq2j75vj.cs(47,22): error CS0019: Operator ''+'' cannot be applied to '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 1L) return new List<long>(new\
    \ long[]{1L});\n        if (n == 2L) return new List<long>(new long[]{3L});\n\
    \        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n      \
    \  else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5is1pfqd.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp5is1pfqd.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long a = 1;\n        long b = 2;\n        long c = 1;\n        long d\
    \ = 1;\n        long e = 1;\n        long f = 3;\n        long g = 1;\n      \
    \  long h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n\
    \        long l = 1;\n        long m = 1;\n        long n = 1;\n        long o\
    \ = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n      \
    \  long s = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n\
    \        long w = 1;\n        long x = 1;\n        long y = 1;\n        long z\
    \ = 1;\n        long a = 1;\n        long b = 2;\n        long c = 1;\n      \
    \  long d = 1;\n        long e = 1;\n        long f = 3;\n        long g = 1;\n\
    \        long h = 1;\n        long i = 1;\n        long j = 1;\n        long k\
    \ = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n      \
    \  long o = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n\
    \        long s = 1;\n        long t = 1;\n        long u = 1;\n        long v\
    \ = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n      \
    \  long z = 1;\n        long a = 1;\n        long b = 2;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 3;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long a = 1;\n        long b = 2;\n        long c\
    \ = 1;\n        long d = 1;\n        long e = 1;\n        long f = 3;\n      \
    \  long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n\
    \        long k = 1;\n        long l = 1;\n        long m = 1;\n        long n\
    \ = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n      \
    \  long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n\
    \        long v = 1;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7g0_p6st.cs(127,13): error CS1001: Identifier expected

    /tmp/tmp7g0_p6st.cs(127,13): error CS1002: ; expected

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa6fbpzkv.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpa6fbpzkv.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 3 };\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        result.AddRange(tri1);\n        result.AddRange(tri2);\n    \
    \    result.AddRange(tri3);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpspngqpfv.cs(30,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpspngqpfv.cs(31,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpspngqpfv.cs(32,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpspngqpfv.cs(33,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpspngqpfv.cs(34,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpspngqpfv.cs(35,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 1, 2 };\n        if (n\
    \ % 2 == 0) {\n            int n1 = Tri(n / 2);\n            int n2 = Tri(n -\
    \ 1);\n            int n3 = Tri(n - 2);\n            int n4 = Tri(n + 1);\n  \
    \          int n5 = Tri(n - 3);\n            int n6 = Tri(n - 4);\n          \
    \  int n7 = Tri(n - 5);\n            int n8 = Tri(n - 6);\n            int n9\
    \ = Tri(n - 7);\n            int n10 = Tri(n - 8);\n            int n11 = Tri(n\
    \ - 9);\n            int n12 = Tri(n - 10);\n            int n13 = Tri(n - 11);\n\
    \            int n14 = Tri(n - 12);\n            int n15 = Tri(n - 13);\n    \
    \        int n16 = Tri(n - 14);\n            int n17 = Tri(n - 15);\n        \
    \    int n18 = Tri(n - 16);\n            int n19 = Tri(n - 17);\n            int\
    \ n20 = Tri(n - 18);\n            int n21 = Tri(n - 19);\n            int n22\
    \ = Tri(n - 20);\n            int n23 = Tri(n - 21);\n            int n24 = Tri(n\
    \ - 22);\n            int n25 = Tri(n - 23);\n            int n26 = Tri(n - 24);\n\
    \            int n27 = Tri(n - 25);\n            int n28 = Tri(n - 26);\n    \
    \        int n29 = Tri(n - 27);\n            int n30 = Tri(n - 28);\n        \
    \    int n31 = Tri(n - 29);\n            int n32 = Tri(n - 30);\n            int\
    \ n33 = Tri(n - 31);\n            int n34 = Tri(n - 32);\n            int n35\
    \ = Tri(n - 33);\n            int n36 = Tri(n - 34);\n            int n37 = Tri(n\
    \ - 35);\n            int n38 = Tri(n - 36);\n            int n39 = Tri(n - 37);\n\
    \            int n40 = Tri(n - 38);\n            int n41 = Tri(n - 39);\n    \
    \        int n42 = Tri(n - 40);\n            int n43 = Tri(n - 41);\n        \
    \    int n44 = Tri(n - 42);\n            int n45 = Tri(n - 43);\n            int\
    \ n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8zgiak5w.cs(76,18): error CS1002: ; expected

    /tmp/tmp8zgiak5w.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp8zgiak5w.cs(91,2): error CS1513: } expected

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgy_tcjre.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpgy_tcjre.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0);\n        else if (n == 1) result.Add(1);\n\
    \        else if (n % 2 == 0) result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        else result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6));\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7m6irs3p.cs(29,41): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp7m6irs3p.cs(30,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(1L);\n        if (n == 1) result.Add(3L);\n  \
    \      if (n == 2) result.Add(2L);\n        if (n % 2 == 0) result.Add(Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1));\n        else result.Add(Tri(n - 1) + Tri(n -\
    \ 2));\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpav6olp2o.cs(30,36): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpav6olp2o.cs(31,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfmtzkk46.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpfmtzkk46.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0)\n           \
    \ return new List<long>();\n        if (n == 1)\n            return new List<long>(new\
    \ long[]{(long)3L});\n        if (n % 2 == 0)\n            return new List<long>(new\
    \ long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n + 1)});\n        else\n       \
    \     return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n -\
    \ 3)});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpepwielsw.cs(31,46): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpepwielsw.cs(33,46): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk1vi80vm.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpk1vi80vm.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long a = 1;\n        long b = 2;\n        long c = 1;\n        long d\
    \ = 1;\n        long temp;\n        long temp2;\n        long temp3;\n       \
    \ long temp4;\n        long temp5;\n        long temp6;\n        long temp7;\n\
    \        long temp8;\n        long temp9;\n        long temp10;\n        long\
    \ temp11;\n        long temp12;\n        long temp13;\n        long temp14;\n\
    \        long temp15;\n        long temp16;\n        long temp17;\n        long\
    \ temp18;\n        long temp19;\n        long temp20;\n        long temp21;\n\
    \        long temp22;\n        long temp23;\n        long temp24;\n        long\
    \ temp25;\n        long temp26;\n        long temp27;\n        long temp28;\n\
    \        long temp29;\n        long temp30;\n        long temp31;\n        long\
    \ temp32;\n        long temp33;\n        long temp34;\n        long temp35;\n\
    \        long temp36;\n        long temp37;\n        long temp38;\n        long\
    \ temp39;\n        long temp40;\n        long temp41;\n        long temp42;\n\
    \        long temp43;\n        long temp44;\n        long temp45;\n        long\
    \ temp46;\n        long temp47;\n        long temp48;\n        long temp49;\n\
    \        long temp50;\n        long temp51;\n        long temp52;\n        long\
    \ temp53;\n        long temp54;\n        long temp55;\n        long temp56;\n\
    \        long temp57;\n        long temp58;\n        long temp59;\n        long\
    \ temp60;\n        long temp61;\n        long temp62;\n        long temp63;\n\
    \        long temp64;\n        long temp65;\n        long temp66;\n        long\
    \ temp67;\n        long temp68;\n        long temp69;\n        long temp70;\n\
    \        long temp71;\n        long temp72;\n        long temp73;\n        long\
    \ temp74;\n        long temp75;\n        long temp76;\n        long temp77;\n\
    \        long temp78;\n        long temp79;\n        long temp80;\n        long\
    \ temp81;\n        long temp82;\n        long temp83;\n        long temp84\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7k8rz7ox.cs(114,20): error CS1002: ; expected

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n            result.Add(Tri(n + 1));\n        } else {\n\
    \            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk5q1sk3m.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpk5q1sk3m.cs(40,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpk5q1sk3m.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx4s7lqjr.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpx4s7lqjr.cs(33,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpx4s7lqjr.cs(34,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            return result;\n        if (n == 1)\n      \
    \      result.Add(3);\n        else if (n % 2 == 0)\n            result.Add(1\
    \ + n / 2);\n        else\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp14z3v8c1.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfkv2z6fw.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpfkv2z6fw.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1) + Tri(n + 2));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6__59jkg.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp6__59jkg.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpefle_bkq.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpefle_bkq.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        return Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph94bqv11.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmph94bqv11.cs(29,16): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0L);\n        if (n == 1) result.Add(1L);\n  \
    \      if (n == 2) result.Add(2L);\n        if (n % 2 == 0) {\n            long\
    \ tri1 = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            long tri2 = Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1);\n            long tri3 = Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);\n            result.Add(tri1);\n            result.Add(tri2);\n\
    \            result.Add(tri3);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9gbg9rzz.cs(31,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9gbg9rzz.cs(32,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9gbg9rzz.cs(33,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n == 2) {\n            result.Add(3);\n    \
    \        return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 1) + Tri(n\
    \ + 2) + Tri(n + 3));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpltvbs45w.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpltvbs45w.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1L) + Tri(n\
    \ - 2L));\n        } else {\n            result.Add(Tri(n - 1L) + Tri(n - 1L)\
    \ + Tri(n + 1L));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp28_1vr6d.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp28_1vr6d.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long a = 1;\n        long b = 2;\n        long c = 1;\n        long d\
    \ = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n      \
    \  long h = 1;\n        long i = 1;\n        long j = 1;\n        long k = 1;\n\
    \        long l = 1;\n        long m = 1;\n        long n = 1;\n        long o\
    \ = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n      \
    \  long s = 1;\n        long t = 1;\n        long u = 1;\n        long v = 1;\n\
    \        long w = 1;\n        long x = 1;\n        long y = 1;\n        long z\
    \ = 1;\n        long a = 1;\n        long b = 2;\n        long c = 1;\n      \
    \  long d = 1;\n        long e = 1;\n        long f = 1;\n        long g = 1;\n\
    \        long h = 1;\n        long i = 1;\n        long j = 1;\n        long k\
    \ = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n      \
    \  long o = 1;\n        long p = 1;\n        long q = 1;\n        long r = 1;\n\
    \        long s = 1;\n        long t = 1;\n        long u = 1;\n        long v\
    \ = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n      \
    \  long z = 1;\n        long a = 1;\n        long b = 2;\n        long c = 1;\n\
    \        long d = 1;\n        long e = 1;\n        long f = 1;\n        long g\
    \ = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n      \
    \  long k = 1;\n        long l = 1;\n        long m = 1;\n        long n = 1;\n\
    \        long o = 1;\n        long p = 1;\n        long q = 1;\n        long r\
    \ = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n      \
    \  long v = 1;\n        long w = 1;\n        long x = 1;\n        long y = 1;\n\
    \        long z = 1;\n        long a = 1;\n        long b = 2;\n        long c\
    \ = 1;\n        long d = 1;\n        long e = 1;\n        long f = 1;\n      \
    \  long g = 1;\n        long h = 1;\n        long i = 1;\n        long j = 1;\n\
    \        long k = 1;\n        long l = 1;\n        long m = 1;\n        long n\
    \ = 1;\n        long o = 1;\n        long p = 1;\n        long q = 1;\n      \
    \  long r = 1;\n        long s = 1;\n        long t = 1;\n        long u = 1;\n\
    \        long v = 1;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwx2mpfo2.cs(127,13): error CS1001: Identifier expected

    /tmp/tmpwx2mpfo2.cs(127,13): error CS1002: ; expected

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp388t1rqk.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp388t1rqk.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpms67ur57.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpms67ur57.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3L) {\n         \
    \   return new List<long>();\n        }\n        List<long> result = new List<long>();\n\
    \        long tri1 = 3L;\n        long tri2 = 1L;\n        long tri3 = 2L;\n \
    \       long tri4 = 3L;\n        long tri5 = tri1 + tri2 + tri3;\n        long\
    \ tri6 = tri4 + tri5;\n        long tri7 = tri6 + tri4;\n        long tri8 = tri7\
    \ + tri6;\n        long tri9 = tri8 + tri7;\n        long tri10 = tri9 + tri8;\n\
    \        long tri11 = tri10 + tri9;\n        long tri12 = tri11 + tri10;\n   \
    \     long tri13 = tri12 + tri11;\n        long tri14 = tri13 + tri12;\n     \
    \   long tri15 = tri14 + tri13;\n        long tri16 = tri15 + tri14;\n       \
    \ long tri17 = tri16 + tri15;\n        long tri18 = tri17 + tri16;\n        long\
    \ tri19 = tri18 + tri17;\n        long tri20 = tri19 + tri18;\n        long tri21\
    \ = tri20 + tri19;\n        long tri22 = tri21 + tri20;\n        long tri23 =\
    \ tri22 + tri21;\n        long tri24 = tri23 + tri22;\n        long tri25 = tri24\
    \ + tri23;\n        long tri26 = tri25 + tri24;\n        long tri27 = tri26 +\
    \ tri25;\n        long tri28 = tri27 + tri26;\n        long tri29 = tri28 + tri27;\n\
    \        long tri30 = tri29 + tri28;\n        long tri31 = tri30 + tri29;\n  \
    \      long tri32 = tri31 + tri30;\n        long tri33 = tri32 + tri31;\n    \
    \    long tri34 = tri33 + tri32;\n        long tri35 = tri34 + tri33;\n      \
    \  long tri36 = tri35 + tri34;\n        long tri37 = tri36 + tri35;\n        long\
    \ tri38 = tri37 + tri36;\n        long tri39 = tri38 + tri37;\n        long tri40\
    \ = tri39 + tri38;\n        long tri41 = tri40 + tri39;\n        long tri42 =\
    \ tri41 + tri40;\n        long tri43 = tri42 + tri41;\n        long tri44 = tri43\
    \ + tri42;\n        \n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5n55od9m.cs(25,30): error CS0161: ''Problem.Tri(long)'': not all code
    paths return a value

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1);\n            result.AddRange(new List<long>() { a, b, c });\n        }\
    \ else {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n\
    \            long c = Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n            result.AddRange(new\
    \ List<long>() { a, b, c });\n            result.AddRange(new List<long>() { a,\
    \ b, c });\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6om8eb1k.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6om8eb1k.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6om8eb1k.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp6om8eb1k.cs(35,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6om8eb1k.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp6om8eb1k.cs(37,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgixczx3e.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpgixczx3e.cs(46,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1za2yxu2.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1za2yxu2.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0);\n        if (n == 1) result.Add(1);\n    \
    \    if (n == 2) result.Add(2);\n        if (n % 2 == 0) {\n            int n1\
    \ = n / 2;\n            int n2 = n - n1;\n            result.Add(Tri(n1) + Tri(n2));\n\
    \        } else {\n            int n1 = n / 2;\n            int n2 = n - n1;\n\
    \            result.Add(Tri(n1) + Tri(n2) + Tri(n + n1));\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa_j0og71.cs(31,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpa_j0og71.cs(32,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpa_j0og71.cs(33,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpa_j0og71.cs(35,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpa_j0og71.cs(36,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpa_j0og71.cs(37,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3) return new List<long>();\n\
    \        var result = new List<long>();\n        var tri = new long[] { 1, 1,\
    \ 1 };\n        while (tri.Length <= n) {\n            result.Add(tri[tri.Length\
    \ - 1] + tri[tri.Length - 2] + tri[tri.Length - 3]);\n            tri[tri.Length\
    \ - 2] = tri[tri.Length - 1] + tri[tri.Length - 2];\n            tri[tri.Length\
    \ - 1] = tri[tri.Length - 3];\n            tri[tri.Length - 3] = tri[tri.Length\
    \ - 2];\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659823552
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp388t1rqk.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp388t1rqk.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            long d = Tri(n - 3);\n            long e = Tri(n -\
    \ 4);\n            long f = Tri(n - 5);\n            foreach (var item in d.Concat(e).Concat(f))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpodugy3rb.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpodugy3rb.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(40,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpodugy3rb.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpodugy3rb.cs(46,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659794631
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9b1ikdo9.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9b1ikdo9.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn6xknwif.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpn6xknwif.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n - 3);\n        result.Add(tri1);\n        result.Add(tri2);\n\
    \        result.Add(tri3);\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ipx1rmq.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ipx1rmq.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp9ipx1rmq.cs(46,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>(new\
    \ long[]{(long)1L});\n        if (n == 1) return new List<long>(new long[]{(long)3L});\n\
    \        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n      \
    \  else return Tri(n - 1) + Tri(n - 2);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9escfwu4.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9escfwu4.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else if (n % 2 == 0)\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        else\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp388t1rqk.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp388t1rqk.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = Tri1(n);\n        long tri2 = Tri2(n);\n        long tri3\
    \ = Tri3(n);\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpevsjmiop.cs(27,21): error CS0103: The name ''Tri1'' does not exist in
    the current context

    /tmp/tmpevsjmiop.cs(28,21): error CS0103: The name ''Tri2'' does not exist in
    the current context

    /tmp/tmpevsjmiop.cs(29,21): error CS0103: The name ''Tri3'' does not exist in
    the current context

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0)\n           \
    \ return new List<long>();\n        if (n == 1)\n            return new List<long>(new\
    \ long[]{(long)3L});\n        if (n % 2 == 0)\n            return new List<long>(new\
    \ long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n + 1)});\n        else\n       \
    \     return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n -\
    \ 3)});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpepwielsw.cs(31,46): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpepwielsw.cs(33,46): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_d9gugxz.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp_d9gugxz.cs(30,16): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else\n            result.Add(Tri(n - 1) +\
    \ Tri(n - 2) + Tri(n + 1));\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp11oa847s.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        } else {\n\
    \            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4);\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9eybc5ty.cs(29,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9eybc5ty.cs(31,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = a + b;\n            result.Add(c);\n\
    \            return result;\n        }\n        long a = Tri(n - 1);\n       \
    \ long b = Tri(n - 2);\n        long c = a + b;\n        result.Add(c);\n    \
    \    result.Add(a + b);\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkseq5iey.cs(30,18): error CS0136: A local or parameter named ''a'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpkseq5iey.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkseq5iey.cs(31,18): error CS0136: A local or parameter named ''b'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpkseq5iey.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkseq5iey.cs(32,18): error CS0136: A local or parameter named ''c'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpkseq5iey.cs(36,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkseq5iey.cs(37,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n - 3));\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7szyanw3.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp7szyanw3.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp7szyanw3.cs(42,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)1L});\n        if\
    \ (n == 2) return new List<long>(new long[]{(long)1L, (long)3L});\n        if\
    \ (n % 2 == 0) {\n            return new List<long>(new long[]{(long)Tri(n - 1)\
    \ + Tri(n - 2) + Tri(n + 1)});\n        } else {\n            return new List<long>(new\
    \ long[]{(long)Tri(n - 1) + Tri(n - 2)});\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmmx2cayk.cs(30,46): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpmmx2cayk.cs(32,46): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq2at9y64.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpq2at9y64.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn6xknwif.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpn6xknwif.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0)\n           \
    \ return new List<long>();\n        if (n == 1)\n            return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0)\n            return new List<long>() { Tri(n\
    \ - 1) + Tri(n - 2) };\n        else\n            return new List<long>() { Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) };\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcsd457oz.cs(31,39): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpcsd457oz.cs(33,39): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            long d = Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n\
    \            long e = Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n\
    \ - 1);\n            long f = Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3)\
    \ + Tri(n - 2) + Tri(n - 1);\n            long g = Tri(n - 7) + Tri(n - 6) + Tri(n\
    \ - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long\
    \ h = Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n -\
    \ 3) + Tri(n - 2) + Tri(n - 1);\n            result.AddRange(new long[] {a, b,\
    \ c, d, e, f, g, h});\n        } else {\n            long a = Tri(n - 1);\n  \
    \          long b = Tri(n - 2) + Tri(n - 1);\n            long c = Tri(n - 3)\
    \ + Tri(n - 2) + Tri(n - 1);\n            long d = Tri(n - 4) + Tri(n - 3) + Tri(n\
    \ - 2) + Tri(n - 1);\n            long e = Tri(n - 5) + Tri(n - 4) + Tri(n - 3)\
    \ + Tri(n - 2) + Tri(n - 1);\n            long f = Tri(n - 6) + Tri(n - 5) + Tri(n\
    \ - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            long g = Tri(n - 7)\
    \ + Tri(n - 6) + Tri(n - 5) + Tri(n - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n\
    \            long h = Tri(n - 8) + Tri(n - 7) + Tri(n - 6) + Tri(n - 5) + Tri(n\
    \ - 4) + Tri(n - 3) + Tri(n - 2) + Tri(n - 1);\n            result.AddRange(new\
    \ long[] {a, b, c, d, e, f, g, h});\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe98ufz6u.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpe98ufz6u.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpe98ufz6u.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpe98ufz6u.cs(33,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpe98ufz6u.cs(34,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpe98ufz6u.cs(35,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpe98ufz6u.cs(36,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpe98ufz6u.cs(37,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpe98ufz6u.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpe98ufz6u.cs(41,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpe98ufz6u.cs(42,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpe98ufz6u.cs(43,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpe98ufz6u.cs(44,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpe98ufz6u.cs(45,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpe98ufz6u.cs(46,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpe98ufz6u.cs(47,22): error CS0019: Operator ''+'' cannot be applied to '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            return result;\n       \
    \ }\n        if (n == 2) {\n            result.Add(3);\n            return result;\n\
    \        }\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n\
    \        long tri3 = Tri(n - 3);\n        long tri4 = Tri(n - 4);\n        long\
    \ tri5 = Tri(n - 5);\n        long tri6 = Tri(n - 6);\n        long tri7 = Tri(n\
    \ - 7);\n        long tri8 = Tri(n - 8);\n        long tri9 = Tri(n - 9);\n  \
    \      long tri10 = Tri(n - 10);\n        long tri11 = Tri(n - 11);\n        long\
    \ tri12 = Tri(n - 12);\n        long tri13 = Tri(n - 13);\n        long tri14\
    \ = Tri(n - 14);\n        long tri15 = Tri(n - 15);\n        long tri16 = Tri(n\
    \ - 16);\n        long tri17 = Tri(n - 17);\n        long tri18 = Tri(n - 18);\n\
    \        long tri19 = Tri(n - 19);\n        long tri20 = Tri(n - 20);\n      \
    \  long tri21 = Tri(n - 21);\n        long tri22 = Tri(n - 22);\n        long\
    \ tri23 = Tri(n - 23);\n        long tri24 = Tri(n - 24);\n        long tri25\
    \ = Tri(n - 25);\n        long tri26 = Tri(n - 26);\n        long tri27 = Tri(n\
    \ - 27);\n        long tri28 = Tri(n - 28);\n        long tri29 = Tri(n - 29);\n\
    \        long tri30 = Tri(n - 30);\n        long tri31 = Tri(n - 31);\n      \
    \  long tri32 = Tri(n - 32);\n        long tri33 = Tri(n - 33);\n        long\
    \ tri34 = Tri(n - 34);\n        long tri35 = Tri(n - 35);\n        long tri36\
    \ = Tri(n - 36);\n        long tri37 = Tri(n - 37);\n        long tri38 = Tri(n\
    \ - 38);\n        long tri39 = Tri(n - 39);\n        long tri40 = Tri(n - 40);\n\
    \        long tri41 = Tri(n - 41);\n        long tri42 = Tri(n - 42);\n      \
    \  long tri43 = Tri(n - 43);\n        long tri44 = Tri(n - 44);\n        long\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7b6x0unp.cs(85,13): error CS1001: Identifier expected

    /tmp/tmp7b6x0unp.cs(85,13): error CS1002: ; expected

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n / 2);\n      \
    \      long b = Tri(n - 1);\n            long c = Tri(n - 2);\n            long\
    \ d = Tri(n - 3);\n            long sum = a;\n            foreach (long x in b)\
    \ sum += x;\n            foreach (long x in c) sum += x;\n            foreach\
    \ (long x in d) sum += x;\n            result.Add(sum);\n        } else {\n  \
    \          long a = Tri(n / 2);\n            long b = Tri(n - 1);\n          \
    \  long c = Tri(n - 2);\n            long d = Tri(n - 3);\n            long sum\
    \ = a;\n            foreach (long x in b) sum += x;\n            foreach (long\
    \ x in c) sum += x;\n            result.Add(sum);\n            long sum = b;\n\
    \            foreach (long x in c) sum += x;\n            result.Add(sum);\n \
    \           long sum = c;\n            foreach (long x in d) sum += x;\n     \
    \       result.Add(sum);\n            long sum = d;\n            foreach (long\
    \ x in a) sum += x;\n            result.Add(sum);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz0zumavk.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpz0zumavk.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpz0zumavk.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpz0zumavk.cs(33,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpz0zumavk.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpz0zumavk.cs(36,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpz0zumavk.cs(37,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpz0zumavk.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpz0zumavk.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpz0zumavk.cs(42,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpz0zumavk.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpz0zumavk.cs(45,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpz0zumavk.cs(46,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpz0zumavk.'
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(2);\n            return result;\n        }\n        if\
    \ (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n\
    \        } else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1)\
    \ + Tri(n - 3) + Tri(n - 4) + Tri(n + 2));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3zn8p51p.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp3zn8p51p.cs(46,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1)});\n        else return new List<long>(new long[]{(long)Tri(n -\
    \ 1) + Tri(n - 2)});\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsksbqel8.cs(28,58): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsksbqel8.cs(29,47): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjbmru4af.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpjbmru4af.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpjbmru4af.cs(48,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        result.Add((long)tri1);\n        result.Add((long)tri2);\n  \
    \      result.Add((long)tri3);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf5iez9lz.cs(43,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpf5iez9lz.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpf5iez9lz.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a) {\n                result.Add(item);\n            }\n      \
    \      foreach (var item in b) {\n                result.Add(item);\n        \
    \    }\n            foreach (var item in c) {\n                result.Add(item);\n\
    \            }\n        } else {\n            long a = Tri(n - 1);\n         \
    \   long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a) {\n                result.Add(item);\n            }\n      \
    \      foreach (var item in b) {\n                result.Add(item);\n        \
    \    }\n            foreach (var item in c) {\n                result.Add(item);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3bijg3my.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3bijg3my.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3bijg3my.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3bijg3my.cs(33,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp3bijg3my.cs(36,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp3bijg3my.cs(39,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp3bijg3my.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3bijg3my.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3bijg3my.cs(45,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3bijg3my.cs(46,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp3bijg3my.cs(49,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp3bijg3my.cs(52,34): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 1L) return new List<long>(new\
    \ long[]{1L});\n        if (n == 2L) return new List<long>(new long[]{3L});\n\
    \        if (n % 2 == 1L) return Tri(n - 1L).Concat(Tri(n - 2L)).Concat(Tri(n\
    \ + 1L));\n        return Tri(n - 1L).Concat(Tri(n - 2L)).Concat(Tri(n + 1L)).Concat(Tri(n\
    \ - 3L)).Concat(Tri(n + 2L));\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdgeod5mk.cs(28,33): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    /tmp/tmpdgeod5mk.cs(29,16): error CS0266: Cannot implicitly convert type ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''. An explicit conversion exists (are
    you missing a cast?)

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { (long)1 };\n        if (n == 2) return new List<long>() { (long)1, (long)2\
    \ };\n        long tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n     \
    \   long tri3 = Tri(n - 3);\n        result.Add((long)tri1);\n        result.Add((long)tri2);\n\
    \        result.Add((long)tri3);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4fbzotch.cs(30,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4fbzotch.cs(31,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp4fbzotch.cs(32,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0L);\n        else if (n == 1) result.Add(1L);\n\
    \        else {\n            long a = Tri(n - 1L);\n            long b = Tri(n\
    \ - 2L);\n            long c = Tri(n - 3L);\n            result.AddRange(new long[]{a,\
    \ b, c});\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppzlr7oqg.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppzlr7oqg.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmppzlr7oqg.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3);\n            result.AddRange(a);\n\
    \            result.AddRange(b);\n            result.AddRange(c);\n        } else\
    \ {\n            long a = Tri(n - 1);\n            long b = Tri(n - 2);\n    \
    \        result.AddRange(a);\n            result.AddRange(b);\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbj6esp_b.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbj6esp_b.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbj6esp_b.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbj6esp_b.cs(33,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpbj6esp_b.cs(34,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpbj6esp_b.cs(35,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpbj6esp_b.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbj6esp_b.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbj6esp_b.cs(39,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpbj6esp_b.cs(40,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n / 2);\n      \
    \      long b = Tri(n / 2);\n            long c = Tri(n / 2);\n            long\
    \ d = Tri(n / 2);\n            long e = Tri(n / 2);\n            long f = Tri(n\
    \ / 2);\n            long g = Tri(n / 2);\n            long h = Tri(n / 2);\n\
    \            long i = Tri(n / 2);\n            long j = Tri(n / 2);\n        \
    \    long k = Tri(n / 2);\n            long l = Tri(n / 2);\n            long\
    \ m = Tri(n / 2);\n            long n = Tri(n / 2);\n            long o = Tri(n\
    \ / 2);\n            long p = Tri(n / 2);\n            long q = Tri(n / 2);\n\
    \            long r = Tri(n / 2);\n            long s = Tri(n / 2);\n        \
    \    long t = Tri(n / 2);\n            long u = Tri(n / 2);\n            long\
    \ v = Tri(n / 2);\n            long w = Tri(n / 2);\n            long x = Tri(n\
    \ / 2);\n            long y = Tri(n / 2);\n            long z = Tri(n / 2);\n\
    \            long a = Tri(n / 2);\n            long b = Tri(n / 2);\n        \
    \    long c = Tri(n / 2);\n            long d = Tri(n / 2);\n            long\
    \ e = Tri(n / 2);\n            long f = Tri(n / 2);\n            long g = Tri(n\
    \ / 2);\n            long h = Tri(n / 2);\n            long i = Tri(n / 2);\n\
    \            long j = Tri(n / 2);\n            long k = Tri(n / 2);\n        \
    \    long l = Tri(n / 2);\n            long m = Tri(n / 2);\n            long\
    \ n = Tri(n / 2);\n            long o = Tri(n / 2);\n            long p = Tri(n\
    \ / 2);\n            long q = Tri(n / 2);\n            long r = Tri(n / 2);\n\
    \            long s = Tri(n / 2);\n            long t = Tri(n / 2);\n        \
    \    long u = Tri(n / 2);\n            long v = Tri(n / 2);\n            long\
    \ w = Tri(n / 2);\n            long x = Tri(n / 2);\n            long y = Tri(n\
    \ / 2);\n            long z = Tri(n / 2);\n            long a = Tri(n / 2);\n\
    \            \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp355nurbj.cs(85,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp355nurbj.cs(98,2): error CS1513: } expected

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa6fbpzkv.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpa6fbpzkv.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n        } else {\n        \
    \    long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n        \
    \    foreach (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \            long d = Tri(n - 3);\n            foreach (long x in d) result.Add(x);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1bc13s9u.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1bc13s9u.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1bc13s9u.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1bc13s9u.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp1bc13s9u.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp1bc13s9u.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp1bc13s9u.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1bc13s9u.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1bc13s9u.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1bc13s9u.cs(40,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp1bc13s9u.cs(41,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp1bc13s9u.cs(42,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp1bc13s9u.cs(43,22): error CS0029: Cannot implicitly convert type ''Syste'
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyaj2akr_.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpyaj2akr_.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n\
    \ - 4) + Tri(n - 5) + Tri(n - 6) + Tri(n - 7) + Tri(n - 8);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9b1ikdo9.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9b1ikdo9.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0)\n           \
    \ return new List<long>();\n        if (n == 1)\n            return new List<long>(new\
    \ long[]{(long)3L});\n        if (n % 2 == 0)\n            return new List<long>(new\
    \ long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n - 3)});\n        else\n       \
    \     return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2) + Tri(n -\
    \ 3)});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj6hn0dpt.cs(31,46): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpj6hn0dpt.cs(33,46): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        else return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1) + Tri(n + 2) + Tri(n + 3);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpetycmvwp.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpetycmvwp.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            return result;\n        if (n == 1)\n      \
    \      result.Add(1);\n        if (n == 2)\n            result.Add(3);\n     \
    \   if (n % 2 == 0) {\n            long a = Tri(n - 1);\n            long b =\
    \ Tri(n - 2);\n            long c = Tri(n + 1);\n            result.AddRange(a);\n\
    \            result.AddRange(b);\n            result.AddRange(c);\n        }\n\
    \        else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n + 1);\n            result.AddRange(a);\n \
    \           result.AddRange(b);\n            result.AddRange(c);\n           \
    \ result.Add(n);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_obzsgq3.cs(34,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_obzsgq3.cs(35,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_obzsgq3.cs(36,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_obzsgq3.cs(37,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp_obzsgq3.cs(38,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp_obzsgq3.cs(39,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp_obzsgq3.cs(42,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_obzsgq3.cs(43,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_obzsgq3.cs(44,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp_obzsgq3.cs(45,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp_obzsgq3.cs(46,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp_obzsgq3.cs(47,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n            return result;\n        }\n        else\
    \ {\n            result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n\
    \            result.Add(Tri(n + 1L));\n            result.Add(Tri(n - 1L));\n\
    \            result.Add(Tri(n - 2L));\n            result.Add(Tri(n + 1L));\n\
    \            return result;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbg3di837.cs(37,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbg3di837.cs(38,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbg3di837.cs(39,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbg3di837.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbg3di837.cs(44,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbg3di837.cs(45,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbg3di837.cs(46,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbg3di837.cs(47,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpbg3di837.cs(48,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp24s__ouu.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp24s__ouu.cs(48,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp24s__ouu.cs(49,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  long tri1 = Tri(n - 1L);\n            long tri2 = Tri(n - 2L);\n          \
    \  long tri3 = Tri(n - 3L);\n            result.AddRange(tri1);\n            result.AddRange(tri2);\n\
    \            result.AddRange(tri3);\n        } else {\n            long tri1 =\
    \ Tri(n - 1L);\n            long tri2 = Tri(n - 2L);\n            result.AddRange(tri1);\n\
    \            result.AddRange(tri2);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp47f_qm9g.cs(37,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp47f_qm9g.cs(38,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp47f_qm9g.cs(39,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp47f_qm9g.cs(40,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp47f_qm9g.cs(41,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp47f_qm9g.cs(42,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp47f_qm9g.cs(44,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp47f_qm9g.cs(45,25): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp47f_qm9g.cs(46,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmp47f_qm9g.cs(47,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(3);\n            return result;\n       \
    \ }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        result.Add(Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1));\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpznr004mn.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpznr004mn.cs(41,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpznr004mn.cs(42,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823548
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3L) return new List<long>();\n\
    \        var result = new List<long>();\n        var first = (long)Math.Pow((double)n,\
    \ (double)0.5);\n        var second = (long)Math.Pow((double)n, (double)1.5);\n\
    \        result.Add(first);\n        result.Add(second);\n        long third =\
    \ (long)Math.Pow((double)n, (double)2.5);\n        result.Add(third);\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <149653b80c5c439582c868ad21d370ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <149653b80c5c439582c868ad21d370ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) {\n\
    \            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n        }\n       \
    \ else {\n            return Tri(n - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n + 2);\n\
    \        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplsto7d9y.cs(29,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmplsto7d9y.cs(32,20): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3);\n            long\
    \ d = a + b + c;\n            result.Add(d);\n        }\n        else {\n    \
    \        long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n - 3);\n            long d = a + b + c;\n            result.Add(d);\n\
    \            result.Add(a + c);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph5tuf05t.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph5tuf05t.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph5tuf05t.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph5tuf05t.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph5tuf05t.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmph5tuf05t.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n        } else {\n            result.Add(Tri(n -\
    \ 1L));\n            result.Add(Tri(n - 2L));\n            result.Add(Tri(n +\
    \ 1L));\n            result.Add(Tri(n - 1L));\n            result.Add(Tri(n -\
    \ 2L));\n            result.Add(Tri(n + 1L));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ww4bu0y.cs(37,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(38,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(39,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(41,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(42,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(44,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(45,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(46,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n - 5) + Tri(n - 6));\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpms67ur57.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpms67ur57.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n            result.Add(Tri(n - 3));\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjsu_ubjx.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpjsu_ubjx.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpjsu_ubjx.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpjsu_ubjx.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpjsu_ubjx.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpjsu_ubjx.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpjsu_ubjx.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpjsu_ubjx.cs(40,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpjsu_ubjx.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823548
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n < 3L) return new List<long>();\n\
    \        var result = new List<long>();\n        var a = Tri(n - 1L);\n      \
    \  var b = Tri(n - 2L);\n        var c = Tri(n - 3L);\n        result.AddRange(a);\n\
    \        result.AddRange(b);\n        result.AddRange(c);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3103d10a0fbf4f619bef198b8eb14d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3103d10a0fbf4f619bef198b8eb14d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo6cw137i.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpo6cw137i.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1L) + Tri(n\
    \ - 2L));\n        } else {\n            result.Add(Tri(n - 1L) + Tri(n - 2L)\
    \ + Tri(n + 1L));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe2a3stwo.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpe2a3stwo.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0L);\n        if (n == 1) result.Add(1L);\n  \
    \      if (n == 2) result.Add(2L);\n        if (n % 2 == 0) result.Add(Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n - 3));\n        else result.Add(Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n - 3) + Tri(n - 4));\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0mvpwvl3.cs(30,36): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp0mvpwvl3.cs(31,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n\
    \        result.Add(Tri(n - 3L));\n        result.Add(Tri(n - 4L));\n        result.Add(Tri(n\
    \ + 1L));\n        result.Add(Tri(n - 5L));\n        result.Add(Tri(n - 6L));\n\
    \        result.Add(Tri(n + 1L));\n        result.Add(Tri(n - 7L));\n        result.Add(Tri(n\
    \ - 8L));\n        result.Add(Tri(n + 1L));\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp39tvx64l.cs(37,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(38,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(39,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(42,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(43,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(44,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(45,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(46,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(47,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(48,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(49,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(50,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(51,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(52,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp39tvx64l.cs(53,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2));\n            result.Add(Tri(n\
    \ + 1) + Tri(n + 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n + 1) + Tri(n + 2));\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6d0tuwbl.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp6d0tuwbl.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp6d0tuwbl.cs(43,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp6d0tuwbl.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsn34g6ur.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpsn34g6ur.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { (long)1 };\n        if (n == 2)\
    \ return new List<long>() { (long)3 };\n        if (n % 2 == 0) return Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n + 1);\n        else return Tri(n - 1) + Tri(n - 2) +\
    \ Tri(n + 1) + Tri(n - 3) + Tri(n - 4);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwbd0xdhn.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpwbd0xdhn.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) result.Add(0L);\n        if (n == 1) result.Add(1L);\n  \
    \      if (n == 2) result.Add(2L);\n        if (n % 2 == 0) result.Add(Tri(n -\
    \ 1) + Tri(n - 2) + Tri(n - 3));\n        else result.Add(Tri(n - 1) + Tri(n -\
    \ 2) + Tri(n + 1) + Tri(n + 2) + Tri(n + 3));\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnwv_2jt2.cs(30,36): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpnwv_2jt2.cs(31,25): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n            return result;\n        }\n        result.Add(Tri(n\
    \ - 1L));\n        result.Add(Tri(n - 2L));\n        result.Add(Tri(n + 1L));\n\
    \        result.Add(Tri(n - 3L));\n        result.Add(Tri(n + 1L));\n        result.Add(Tri(n\
    \ - 4L));\n        result.Add(Tri(n + 1L));\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprz3gdi5t.cs(37,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprz3gdi5t.cs(38,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprz3gdi5t.cs(39,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprz3gdi5t.cs(42,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprz3gdi5t.cs(43,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprz3gdi5t.cs(44,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprz3gdi5t.cs(45,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprz3gdi5t.cs(46,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprz3gdi5t.cs(47,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmprz3gdi5t.cs(48,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        long\
    \ tri1 = Tri(n - 1);\n        long tri2 = Tri(n - 2);\n        long tri3 = Tri(n\
    \ - 3);\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptljauvor.cs(43,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmptljauvor.cs(44,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmptljauvor.cs(45,21): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsn34g6ur.cs(39,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpsn34g6ur.cs(41,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3\
    \ = (long)2;\n        long tri4 = (long)3;\n        long tri5 = (long)1;\n   \
    \     long tri6 = (long)2;\n        long tri7 = (long)3;\n        long tri8 =\
    \ (long)1;\n        long tri9 = (long)2;\n        long tri10 = (long)3;\n    \
    \    long tri11 = (long)1;\n        long tri12 = (long)2;\n        long tri13\
    \ = (long)3;\n        long tri14 = (long)1;\n        long tri15 = (long)2;\n \
    \       long tri16 = (long)3;\n        long tri17 = (long)1;\n        long tri18\
    \ = (long)2;\n        long tri19 = (long)3;\n        long tri20 = (long)1;\n \
    \       long tri21 = (long)2;\n        long tri22 = (long)3;\n        long tri23\
    \ = (long)1;\n        long tri24 = (long)2;\n        long tri25 = (long)3;\n \
    \       long tri26 = (long)1;\n        long tri27 = (long)2;\n        long tri28\
    \ = (long)3;\n        long tri29 = (long)1;\n        long tri30 = (long)2;\n \
    \       long tri31 = (long)3;\n        long tri32 = (long)1;\n        long tri33\
    \ = (long)2;\n        long tri34 = (long)3;\n        long tri35 = (long)1;\n \
    \       long tri36 = (long)2;\n        long tri37 = (long)3;\n        long tri38\
    \ = (long)1;\n        long tri39 = (long)2;\n        long tri40 = (long)3;\n \
    \       long tri41 = (long)1;\n        long tri42 = (long)2;\n        long tri43\
    \ = (long)3;\n        long tri44 = (long)1;\n        long tri45 = (long)2;\n \
    \       long tri46 = (long)3;\n        long tri47 = (long)1;\n        long tri48\
    \ = (long)2;\n        long tri49 = (long)3;\n        long tri50 = (long)1;\n \
    \       long tri51 = (long)2;\n        long tri52 = (long)3;\n        long tri53\
    \ = (long)1;\n        long tri54 = (long)2;\n        long tri55 = (long)3;\n \
    \       long tri56 = (long)1;\n        long tri57 = (long)2;\n        long tri58\
    \ = (long)3;\n        long tri59 = (long)1;\n        long tri60 = (long)2;\n \
    \       long tri61 = (long)3;\n        long tri62 = (long)1;\n        long \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzwlnf0kb.cs(89,13): error CS1001: Identifier expected

    /tmp/tmpzwlnf0kb.cs(89,13): error CS1002: ; expected

    '
  timestamp: 1659794629
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            return result;\n\
    \        }\n        if (n == 1) {\n            result.Add(1);\n            return\
    \ result;\n        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n\
    \ - 1) + Tri(n - 2) + Tri(n + 1) + Tri(n - 3) + Tri(n - 4) + Tri(n + 2));\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9bz4cvw4.cs(36,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp9bz4cvw4.cs(38,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n == 2L) {\n            result.Add(1L);\n            result.Add(3L);\n\
    \            return result;\n        }\n        if (n % 2 == 0) {\n          \
    \  result.Add(Tri(n - 1L));\n            result.Add(Tri(n - 2L));\n          \
    \  result.Add(Tri(n + 1L));\n        } else {\n            result.Add(Tri(n -\
    \ 1L));\n            result.Add(Tri(n - 2L));\n            result.Add(Tri(n +\
    \ 1L));\n            result.Add(Tri(n - 1L));\n            result.Add(Tri(n -\
    \ 2L));\n            result.Add(Tri(n + 1L));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ww4bu0y.cs(37,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(38,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(39,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(41,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(42,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(43,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(44,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(45,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp3ww4bu0y.cs(46,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n == 2) return new List<long>() { 3 };\n        long a =\
    \ Tri(n - 1);\n        long b = Tri(n - 2);\n        long c = Tri(n - 3);\n  \
    \      result.AddRange(a);\n        result.AddRange(b);\n        result.AddRange(c);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkebkobud.cs(30,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkebkobud.cs(31,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkebkobud.cs(32,18): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpkebkobud.cs(33,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpkebkobud.cs(34,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpkebkobud.cs(35,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(0);\n            result.Add(1);\n       \
    \     return result;\n        }\n        if (n == 2) {\n            result.Add(0);\n\
    \            result.Add(1);\n            result.Add(1);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjbmru4af.cs(45,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpjbmru4af.cs(47,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpjbmru4af.cs(48,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 1L) {\n            result.Add(1L);\n            return result;\n\
    \        }\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1L) + Tri(n\
    \ - 2L));\n        } else {\n            result.Add(Tri(n - 1L) + Tri(n - 1L)\
    \ + Tri(n + 1L));\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp28_1vr6d.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp28_1vr6d.cs(34,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long tri1 = Tri(n - 1);\n   \
    \         long tri2 = Tri(n - 2);\n            long tri3 = Tri(n - 3);\n     \
    \       long tri4 = Tri(n - 4);\n            long tri5 = Tri(n - 5);\n       \
    \     long tri6 = Tri(n - 6);\n            long tri7 = Tri(n - 7);\n         \
    \   long tri8 = Tri(n - 8);\n            long tri9 = Tri(n - 9);\n           \
    \ long tri10 = Tri(n - 10);\n            long tri11 = Tri(n - 11);\n         \
    \   long tri12 = Tri(n - 12);\n            long tri13 = Tri(n - 13);\n       \
    \     long tri14 = Tri(n - 14);\n            long tri15 = Tri(n - 15);\n     \
    \       long tri16 = Tri(n - 16);\n            long tri17 = Tri(n - 17);\n   \
    \         long tri18 = Tri(n - 18);\n            long tri19 = Tri(n - 19);\n \
    \           long tri20 = Tri(n - 20);\n            long tri21 = Tri(n - 21);\n\
    \            long tri22 = Tri(n - 22);\n            long tri23 = Tri(n - 23);\n\
    \            long tri24 = Tri(n - 24);\n            long tri25 = Tri(n - 25);\n\
    \            long tri26 = Tri(n - 26);\n            long tri27 = Tri(n - 27);\n\
    \            long tri28 = Tri(n - 28);\n            long tri29 = Tri(n - 29);\n\
    \            long tri30 = Tri(n - 30);\n            long tri31 = Tri(n - 31);\n\
    \            long tri32 = Tri(n - 32);\n            long tri33 = Tri(n - 33);\n\
    \            long tri34 = Tri(n - 34);\n            long tri35 = Tri(n - 35);\n\
    \            long tri36 = Tri(n - 36);\n            long tri37 = Tri(n - 37);\n\
    \            long tri38 = Tri(n - 38);\n            long tri39 = Tri(n - 39);\n\
    \            long tri40 = Tri(n - 40);\n            long tri41 = Tri(n - 41);\n\
    \            long tri42 = Tri(n - 42);\n            long tri43 = Tri(n - 43);\n\
    \            long tri44 = Tri(n - 44);\n            long tri45 = Tri(n - 45);\n\
    \            long tri46 = Tri(n - 46);\n            long tri\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxxxoyvng.cs(76,21): error CS1002: ; expected

    /tmp/tmpxxxoyvng.cs(78,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpxxxoyvng.cs(91,2): error CS1513: } expected

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1za2yxu2.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmp1za2yxu2.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659794630
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long d\
    \ = Tri(n - 3);\n            foreach (var item in a.Concat(b).Concat(c).Concat(d))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv_s7u166.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpv_s7u166.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(41,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>(new long[]{(long)3L});\n        if\
    \ (n % 2 == 0) return new List<long>(new long[]{(long)Tri(n - 1) + Tri(n - 2)\
    \ + Tri(n + 1)});\n        else return new List<long>(new long[]{(long)Tri(n -\
    \ 1) + Tri(n - 2)});\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsksbqel8.cs(28,58): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpsksbqel8.cs(29,47): error CS0030: Cannot convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = (long)3;\n        long tri2 = (long)1;\n        long tri3\
    \ = (long)2;\n        long tri4 = (long)3;\n        long tri5 = (long)1;\n   \
    \     long tri6 = (long)2;\n        long tri7 = (long)3;\n        long tri8 =\
    \ (long)1;\n        long tri9 = (long)2;\n        long tri10 = (long)3;\n    \
    \    long tri11 = (long)1;\n        long tri12 = (long)2;\n        long tri13\
    \ = (long)3;\n        long tri14 = (long)1;\n        long tri15 = (long)2;\n \
    \       long tri16 = (long)3;\n        long tri17 = (long)1;\n        long tri18\
    \ = (long)2;\n        long tri19 = (long)3;\n        long tri20 = (long)1;\n \
    \       long tri21 = (long)2;\n        long tri22 = (long)3;\n        long tri23\
    \ = (long)1;\n        long tri24 = (long)2;\n        long tri25 = (long)3;\n \
    \       long tri26 = (long)1;\n        long tri27 = (long)2;\n        long tri28\
    \ = (long)3;\n        long tri29 = (long)1;\n        long tri30 = (long)2;\n \
    \       long tri31 = (long)3;\n        long tri32 = (long)1;\n        long tri33\
    \ = (long)2;\n        long tri34 = (long)3;\n        long tri35 = (long)1;\n \
    \       long tri36 = (long)2;\n        long tri37 = (long)3;\n        long tri38\
    \ = (long)1;\n        long tri39 = (long)2;\n        long tri40 = (long)3;\n \
    \       long tri41 = (long)1;\n        long tri42 = (long)2;\n        long tri43\
    \ = (long)3;\n        long tri44 = (long)1;\n        long tri45 = (long)2;\n \
    \       long tri46 = (long)3;\n        long tri47 = (long)1;\n        long tri48\
    \ = (long)2;\n        long tri49 = (long)3;\n        long tri50 = (long)1;\n \
    \       long tri51 = (long)2;\n        long tri52 = (long)3;\n        long tri53\
    \ = (long)1;\n        long tri54 = (long)2;\n        long tri55 = (long)3;\n \
    \       long tri56 = (long)1;\n        long tri57 = (long)2;\n        long tri58\
    \ = (long)3;\n        long tri59 = (long)1;\n        long tri60 = (long)2;\n \
    \       long tri61 = (long)3;\n        long tri62 = (long)1;\n        long \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzwlnf0kb.cs(89,13): error CS1001: Identifier expected

    /tmp/tmpzwlnf0kb.cs(89,13): error CS1002: ; expected

    '
  timestamp: 1659794629
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { (long)1 };\n        if (n % 2 ==\
    \ 0) {\n            List<long> result = new List<long>();\n            result.Add((long)3);\n\
    \            result.Add((long)1 + n / 2);\n            return result;\n      \
    \  } else {\n            List<long> result = new List<long>();\n            result.Add((long)3);\n\
    \            result.Add((long)1 + n / 2);\n            result.Add((long)1 + n\
    \ / 2 + n / 4);\n            return result;\n        }\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93f7dc32949b4e4796f757ef90b9aeb1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93f7dc32949b4e4796f757ef90b9aeb1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823549
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3));\n        } else {\n            result.Add(Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n - 3) + Tri(n - 4));\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo6cw137i.cs(30,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpo6cw137i.cs(32,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823546
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            result.Add(0);\n            result.Add(1);\n\
    \            result.Add(1);\n            return result;\n        }\n        if\
    \ (n == 1) {\n            result.Add(1);\n            result.Add(1);\n       \
    \     result.Add(1);\n            return result;\n        }\n        if (n % 2\
    \ == 0) {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n   \
    \     }\n        else {\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n\
    \ + 1));\n            result.Add(Tri(n - 1) + Tri(n - 2) + Tri(n + 1));\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplbd35m8b.cs(40,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmplbd35m8b.cs(43,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmplbd35m8b.cs(44,24): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3);\n            long\
    \ sum = a;\n            foreach (long d in b)\n                sum += d;\n   \
    \         foreach (long e in c)\n                sum += e;\n            result.Add(sum);\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2);\n            long c = Tri(n - 3);\n            long sum = a;\n       \
    \     foreach (long d in b)\n                sum += d;\n            foreach (long\
    \ e in c)\n                sum += e;\n            result.Add(sum);\n         \
    \   long d = Tri(n - 4);\n            result.Add(d);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp09rg9sy_.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp09rg9sy_.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp09rg9sy_.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp09rg9sy_.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp09rg9sy_.cs(36,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp09rg9sy_.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp09rg9sy_.cs(41,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp09rg9sy_.cs(42,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp09rg9sy_.cs(44,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp09rg9sy_.cs(44,27): error CS0136: A local or parameter named ''d'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmp09rg9sy_.cs(46,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp09rg9sy_.cs(49,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            foreach (long x in a) result.Add(x);\n            foreach\
    \ (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \            return result;\n        }\n        else {\n            long a = Tri(n\
    \ - 1);\n            long b = Tri(n - 2) + Tri(n - 1) + Tri(n - 3);\n        \
    \    foreach (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            return result;\n        }\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgu3x3ht6.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgu3x3ht6.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgu3x3ht6.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpgu3x3ht6.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgu3x3ht6.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgu3x3ht6.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgu3x3ht6.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgu3x3ht6.cs(40,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpgu3x3ht6.cs(41,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgu3x3ht6.cs(42,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) return Tri(n - 1) + Tri(n - 2) + Tri(n + 1);\n\
    \        else return Tri(n - 1) + Tri(n - 2) + Tri(n - 3) + Tri(n + 1);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyaj2akr_.cs(29,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpyaj2akr_.cs(30,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        if (n == 0) return new List<long>();\n\
    \        if (n == 1) return new List<long>() { 1 };\n        if (n % 2 == 0) return\
    \ Tri(n - 1) + Tri(n - 2) + Tri(n - 1);\n        else return Tri(n - 1) + Tri(n\
    \ - 2) + Tri(n + 1);\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprxhyyt5_.cs(28,32): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmprxhyyt5_.cs(29,21): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    '
  timestamp: 1659823545
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            result.AddRange(a);\n            result.AddRange(b);\n  \
    \          result.AddRange(c);\n        } else {\n            long a = Tri(n -\
    \ 1);\n            long b = Tri(n - 2) + Tri(n - 1) + Tri(n - 3);\n          \
    \  result.AddRange(a);\n            result.AddRange(b);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdoj8g9oo.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdoj8g9oo.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdoj8g9oo.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpdoj8g9oo.cs(33,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpdoj8g9oo.cs(34,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpdoj8g9oo.cs(35,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpdoj8g9oo.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpdoj8g9oo.cs(38,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpdoj8g9oo.cs(39,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    /tmp/tmpdoj8g9oo.cs(40,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''System.Collections.Generic.IEnumerable<long>''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0)\n            result.Add(0);\n        else if (n == 1)\n \
    \           result.Add(1);\n        else {\n            long a = Tri(n - 1);\n\
    \            long b = Tri(n - 2);\n            long c = Tri(n - 3);\n        \
    \    result.Add(a + b + c);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmponotb2it.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmponotb2it.cs(33,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmponotb2it.cs(34,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long d\
    \ = Tri(n - 3);\n            foreach (var item in a.Concat(b).Concat(c).Concat(d))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv_s7u166.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpv_s7u166.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(41,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long tri1 = Tri1(n);\n        long tri2 = Tri2(n);\n        long tri3\
    \ = Tri3(n);\n        result.Add(tri1);\n        result.Add(tri2);\n        result.Add(tri3);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpevsjmiop.cs(27,21): error CS0103: The name ''Tri1'' does not exist in
    the current context

    /tmp/tmpevsjmiop.cs(28,21): error CS0103: The name ''Tri2'' does not exist in
    the current context

    /tmp/tmpevsjmiop.cs(29,21): error CS0103: The name ''Tri3'' does not exist in
    the current context

    '
  timestamp: 1659823547
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (var item in a.Concat(b).Concat(c)) {\n                result.Add(item);\n \
    \           }\n        } else {\n            long a = Tri(n - 1);\n          \
    \  long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            long d\
    \ = Tri(n - 3);\n            foreach (var item in a.Concat(b).Concat(c).Concat(d))\
    \ {\n                result.Add(item);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv_s7u166.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(33,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    /tmp/tmpv_s7u166.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(40,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpv_s7u166.cs(41,36): error CS1061: ''long'' does not contain a definition
    for ''Concat'' and no accessible extension method ''Concat'' accepting a first
    argument of type ''long'' could be found (are you missing a using directive or
    an assembly reference?)

    '
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n + 1);\n            foreach\
    \ (long x in a) result.Add(x);\n            foreach (long x in b) result.Add(x);\n\
    \            foreach (long x in c) result.Add(x);\n        } else {\n        \
    \    long a = Tri(n - 1);\n            long b = Tri(n - 2);\n            long\
    \ c = Tri(n + 1);\n            foreach (long x in a) result.Add(x);\n        \
    \    foreach (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \            long d = Tri(n - 3);\n            foreach (long x in d) result.Add(x);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1bc13s9u.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1bc13s9u.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1bc13s9u.cs(32,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1bc13s9u.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp1bc13s9u.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp1bc13s9u.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp1bc13s9u.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1bc13s9u.cs(38,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1bc13s9u.cs(39,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmp1bc13s9u.cs(40,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp1bc13s9u.cs(41,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp1bc13s9u.cs(42,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmp1bc13s9u.cs(43,22): error CS0029: Cannot implicitly convert type ''Syste'
  timestamp: 1659823548
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) return result;\n        if (n == 1) return new List<long>()\
    \ { 1 };\n        if (n % 2 == 0) {\n            long a = Tri(n - 1);\n      \
    \      long b = Tri(n - 2);\n            long c = Tri(n - 3) + Tri(n - 1) + Tri(n\
    \ - 2);\n            foreach (long x in a) result.Add(x);\n            foreach\
    \ (long x in b) result.Add(x);\n            foreach (long x in c) result.Add(x);\n\
    \        } else {\n            long a = Tri(n - 1);\n            long b = Tri(n\
    \ - 2) + Tri(n - 1);\n            foreach (long x in a) result.Add(x);\n     \
    \       foreach (long x in b) result.Add(x);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgodzosnh.cs(30,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgodzosnh.cs(31,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgodzosnh.cs(32,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpgodzosnh.cs(33,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgodzosnh.cs(34,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgodzosnh.cs(35,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgodzosnh.cs(37,22): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.List<long>''
    to ''long''

    /tmp/tmpgodzosnh.cs(38,22): error CS0019: Operator ''+'' cannot be applied to
    operands of type ''List<long>'' and ''List<long>''

    /tmp/tmpgodzosnh.cs(39,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    /tmp/tmpgodzosnh.cs(40,32): error CS1579: foreach statement cannot operate on
    variables of type ''long'' because ''long'' does not contain a public instance
    definition for ''GetEnumerator''

    '
  timestamp: 1659823549
