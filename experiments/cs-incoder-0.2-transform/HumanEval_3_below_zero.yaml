name: HumanEval_3_below_zero
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You're given a list of deposit and withdrawal operations on\
  \ a bank account that starts with\n    // zero balance. Your task is to detect if\
  \ at any point the balance of account fallls below zero, and\n    // at that point\
  \ function should return True. Otherwise it should return False.\n    // >>> BelowZero((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (false)\n    //\
  \ >>> BelowZero((new List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L})))\n\
  \    // (true)\n    public static bool BelowZero(List<long> operations) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(BelowZero((new\
  \ List<long>())) == (false));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)-3L, (long)1L, (long)2L, (long)-3L}))) == (false));\n    Debug.Assert(BelowZero((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)-4L, (long)5L, (long)6L}))) ==\
  \ (true));\n    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L,\
  \ (long)2L, (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-4L}))) == (false));\n\
  \    Debug.Assert(BelowZero((new List<long>(new long[]{(long)1L, (long)-1L, (long)2L,\
  \ (long)-2L, (long)5L, (long)-5L, (long)4L, (long)-5L}))) == (true));\n    Debug.Assert(BelowZero((new\
  \ List<long>(new long[]{(long)1L, (long)-2L, (long)2L, (long)-2L, (long)5L, (long)-5L,\
  \ (long)4L, (long)-4L}))) == (true));\n    }\n\n}\n"
completions: ["        long balance = operations.First();\n        foreach (var operation\
    \ in operations.Skip(1))\n        {\n            if (operation < 0)\n        \
    \    {\n                return true;\n            }\n            else if (operation\
    \ > balance)\n            {\n                return false;\n            }\n  \
    \          else\n            {\n                balance -= operation;\n      \
    \      }\n        }\n        return false;", "        long balance = 0;\n    \
    \    foreach (var operation in operations) {\n            balance = balance +\
    \ operation;\n            if (balance < 0) {\n                return true;\n \
    \           }\n        }\n        return false;", "        long balance = operations.Sum();\n\
    \        return balance < 0;", "        long balance = operations.First();\n \
    \       foreach (var operation in operations.Skip(1)) {\n            if (balance\
    \ < 0)\n                return true;\n            balance += operation;\n    \
    \    }\n        return false;", "        long balance = operations.Sum();\n  \
    \      return balance < 0;", "        long balance = operations.Sum();\n     \
    \   return balance < 0;", "        long balance = operations.First();\n      \
    \  foreach (var operation in operations.Skip(1))\n        {\n            if (operation\
    \ < 0)\n            {\n                return true;\n            }\n         \
    \   else\n            {\n                balance -= operation;\n            }\n\
    \        }\n        return balance < 0;", "        long balance = operations.Sum();\n\
    \        if (balance < 0)\n            return true;\n        else\n          \
    \  return false;", "        long balance = operations.Sum();\n        if (balance\
    \ < 0)\n            return true;\n        return false;", "        long balance\
    \ = operations.Sum();\n        if (balance < 0) {\n            return true;\n\
    \        }\n        return false;", "        long balance = operations.Sum();\n\
    \        if (balance < 0)\n            return true;\n        return false;", " \
    \       long balance = operations.Sum();\n        return balance < 0;", "    \
    \    long balance = operations.Sum();\n        if (balance < 0)\n            return\
    \ true;\n        return false;", "        long balance = operations.First();\n\
    \        foreach (var operation in operations.Skip(1)) {\n            if (balance\
    \ < 0)\n                return true;\n            balance = balance - operation;\n\
    \        }\n        return false;", "        long balance = operations.Sum();\n\
    \        if (balance < 0)\n            return true;\n        else\n          \
    \  return false;", "        long balance = operations.First();\n        foreach\
    \ (var operation in operations.Skip(1)) {\n            if (balance < 0)\n    \
    \            return true;\n            balance += operation;\n        }\n    \
    \    return false;", "        long balance = operations.Sum();\n        if (balance\
    \ < 0L) {\n            return true;\n        }\n        return false;", "    \
    \    long balance = operations.Sum();\n        return balance < 0;", "       \
    \ long balance = operations.Sum();\n        return balance < 0;", "        long\
    \ balance = operations.First();\n        foreach (var operation in operations.Skip(1))\n\
    \        {\n            if (balance < 0)\n            {\n                return\
    \ true;\n            }\n            balance -= operation;\n        }\n       \
    \ return false;"]
stop_tokens:
- "\n    }\n"
