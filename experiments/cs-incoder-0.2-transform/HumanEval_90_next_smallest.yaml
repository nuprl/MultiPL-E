name: HumanEval_90_next_smallest
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return None if there\
  \ is no such element.\n    // >>> NextSmallest((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L})))\n    // 2L\n    // >>> NextSmallest((new\
  \ List<long>(new long[]{(long)5L, (long)1L, (long)4L, (long)3L, (long)2L})))\n \
  \   // 2L\n    // >>> NextSmallest((new List<long>()))\n    // null\n    // >>>\
  \ NextSmallest((new List<long>(new long[]{(long)1L, (long)1L})))\n    // null\n\
  \    public static Nullable<long> NextSmallest(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L,\
  \ (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new\
  \ long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n\
  \    }\n\n}\n"
completions: ["        if (lst.Count == 0) return null;\n        var smallest = lst[0];\n\
    \        var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (var i = 2; i < lst.Count; i++) {\n            var current = lst[i];\n\
    \            if (current < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < secondSmallest)\
    \ {\n                secondSmallest = current;\n            }\n        }\n   \
    \     return secondSmallest;", "        if (lst.Count == 0) return null;\n   \
    \     long min = lst[0];\n        long min2 = lst[1];\n        long min3 = lst[2];\n\
    \        long min4 = lst[3];\n        long min5 = lst[4];\n        long min6 =\
    \ lst[5];\n        long min7 = lst[6];\n        long min8 = lst[7];\n        long\
    \ min9 = lst[8];\n        long min10 = lst[9];\n        long min11 = lst[10];\n\
    \        long min12 = lst[11];\n        long min13 = lst[12];\n        long min14\
    \ = lst[13];\n        long min15 = lst[14];\n        long min16 = lst[15];\n \
    \       long min17 = lst[16];\n        long min18 = lst[17];\n        long min19\
    \ = lst[18];\n        long min20 = lst[19];\n        long min21 = lst[20];\n \
    \       long min22 = lst[21];\n        long min23 = lst[22];\n        long min24\
    \ = lst[23];\n        long min25 = lst[24];\n        long min26 = lst[25];\n \
    \       long min27 = lst[26];\n        long min28 = lst[27];\n        long min29\
    \ = lst[28];\n        long min30 = lst[29];\n        long min31 = lst[30];\n \
    \       long min32 = lst[31];\n        long min33 = lst[32];\n        long min34\
    \ = lst[33];\n        long min35 = lst[34];\n        long min36 = lst[35];\n \
    \       long min37 = lst[36];\n        long min38 = lst[37];\n        long min39\
    \ = lst[38];\n        long min40 = lst[39];\n        long min41 = lst[40];\n \
    \       long min42 = lst[41];\n        long min43 = lst[42];\n        long min44\
    \ = lst[43];\n        long min45 = lst[44];\n        long min46 = lst[45];\n \
    \       long min47 = lst[46];\n        long min48 = lst[47];\n        long min49\
    \ = lst[48];\n        long min50 = lst[49];\n        long min51 = lst[50];\n \
    \       long min52 = lst[51];\n        long min53 = lst[52];\n        long min54\
    \ = lst", "        if (lst.Count == 0) return null;\n        var smallest = lst[0];\n\
    \        var secondSmallest = lst[1];\n        for (var i = 2; i < lst.Count;\
    \ i++) {\n            var current = lst[i];\n            if (current < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = current;\n\
    \            } else if (current < secondSmallest) {\n                secondSmallest\
    \ = current;\n            }\n        }\n        return secondSmallest;", "   \
    \     long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).First();\n        return secondSmallest < smallest\
    \ ? null : secondSmallest;", "        if (lst.Count == 0) return null;\n     \
    \   var smallest = lst[0];\n        var smallestIndex = lst.IndexOf(smallest);\n\
    \        if (smallestIndex == 0) return null;\n        var secondSmallest = lst[smallestIndex\
    \ - 1];\n        if (secondSmallest == smallest) return null;\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).First();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] > smallest) {\n                secondSmallest = lst[i];\n\
    \            }\n        }\n        return secondSmallest;", "        if (lst.Count\
    \ == 0)\n            return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = 0;\n \
    \       foreach (long i in lst) {\n            if (i < smallest) {\n         \
    \       secondSmallest = smallest;\n                smallest = i;\n          \
    \  } else if (i == smallest) {\n                secondSmallest = i;\n        \
    \    }\n        }\n        if (secondSmallest == 0)\n            return null;\n\
    \        return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[0];\n        foreach\
    \ (long i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i > secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0)\n            return null;\n \
    \       long smallest = lst[0];\n        long secondSmallest = lst[0];\n     \
    \   for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = 0;\n        foreach (long i in lst) {\n       \
    \     if (i < smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = i;\n            }\n            else if (i == smallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0)\n            return null;\n \
    \       long smallest = lst[0];\n        long secondSmallest = lst[1];\n     \
    \   for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        var min = lst[0];\n        var\
    \ minIndex = 0;\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n                minIndex =\
    \ i;\n            }\n        }\n        if (minIndex == lst.Count - 1) return\
    \ null;\n        return lst[minIndex + 1];", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = 0;\n        foreach (long n in lst) {\n            if\
    \ (n < smallest) {\n                secondSmallest = smallest;\n             \
    \   smallest = n;\n            } else if (n < secondSmallest) {\n            \
    \    secondSmallest = n;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        foreach (long\
    \ i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i > secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;"]
stop_tokens:
- "\n    }\n"
