name: HumanEval_90_next_smallest
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return None if there\
  \ is no such element.\n    // >>> NextSmallest((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L})))\n    // 2L\n    // >>> NextSmallest((new\
  \ List<long>(new long[]{(long)5L, (long)1L, (long)4L, (long)3L, (long)2L})))\n \
  \   // 2L\n    // >>> NextSmallest((new List<long>()))\n    // null\n    // >>>\
  \ NextSmallest((new List<long>(new long[]{(long)1L, (long)1L})))\n    // null\n\
  \    public static Nullable<long> NextSmallest(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L,\
  \ (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new\
  \ long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n\
  \    }\n\n}\n"
completions: ["        if (lst.Count == 0) return null;\n        var smallest = lst[0];\n\
    \        var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (var i = 2; i < lst.Count; i++) {\n            var current = lst[i];\n\
    \            if (current < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = current;\n            } else if (current < secondSmallest)\
    \ {\n                secondSmallest = current;\n            }\n        }\n   \
    \     return secondSmallest;", "        if (lst.Count == 0) return null;\n   \
    \     long min = lst[0];\n        long min2 = lst[1];\n        long min3 = lst[2];\n\
    \        long min4 = lst[3];\n        long min5 = lst[4];\n        long min6 =\
    \ lst[5];\n        long min7 = lst[6];\n        long min8 = lst[7];\n        long\
    \ min9 = lst[8];\n        long min10 = lst[9];\n        long min11 = lst[10];\n\
    \        long min12 = lst[11];\n        long min13 = lst[12];\n        long min14\
    \ = lst[13];\n        long min15 = lst[14];\n        long min16 = lst[15];\n \
    \       long min17 = lst[16];\n        long min18 = lst[17];\n        long min19\
    \ = lst[18];\n        long min20 = lst[19];\n        long min21 = lst[20];\n \
    \       long min22 = lst[21];\n        long min23 = lst[22];\n        long min24\
    \ = lst[23];\n        long min25 = lst[24];\n        long min26 = lst[25];\n \
    \       long min27 = lst[26];\n        long min28 = lst[27];\n        long min29\
    \ = lst[28];\n        long min30 = lst[29];\n        long min31 = lst[30];\n \
    \       long min32 = lst[31];\n        long min33 = lst[32];\n        long min34\
    \ = lst[33];\n        long min35 = lst[34];\n        long min36 = lst[35];\n \
    \       long min37 = lst[36];\n        long min38 = lst[37];\n        long min39\
    \ = lst[38];\n        long min40 = lst[39];\n        long min41 = lst[40];\n \
    \       long min42 = lst[41];\n        long min43 = lst[42];\n        long min44\
    \ = lst[43];\n        long min45 = lst[44];\n        long min46 = lst[45];\n \
    \       long min47 = lst[46];\n        long min48 = lst[47];\n        long min49\
    \ = lst[48];\n        long min50 = lst[49];\n        long min51 = lst[50];\n \
    \       long min52 = lst[51];\n        long min53 = lst[52];\n        long min54\
    \ = lst", "        if (lst.Count == 0) return null;\n        var smallest = lst[0];\n\
    \        var secondSmallest = lst[1];\n        for (var i = 2; i < lst.Count;\
    \ i++) {\n            var current = lst[i];\n            if (current < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = current;\n\
    \            } else if (current < secondSmallest) {\n                secondSmallest\
    \ = current;\n            }\n        }\n        return secondSmallest;", "   \
    \     long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).First();\n        return secondSmallest < smallest\
    \ ? null : secondSmallest;", "        if (lst.Count == 0) return null;\n     \
    \   var smallest = lst[0];\n        var smallestIndex = lst.IndexOf(smallest);\n\
    \        if (smallestIndex == 0) return null;\n        var secondSmallest = lst[smallestIndex\
    \ - 1];\n        if (secondSmallest == smallest) return null;\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).First();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] > smallest) {\n                secondSmallest = lst[i];\n\
    \            }\n        }\n        return secondSmallest;", "        if (lst.Count\
    \ == 0)\n            return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = 0;\n \
    \       foreach (long i in lst) {\n            if (i < smallest) {\n         \
    \       secondSmallest = smallest;\n                smallest = i;\n          \
    \  } else if (i == smallest) {\n                secondSmallest = i;\n        \
    \    }\n        }\n        if (secondSmallest == 0)\n            return null;\n\
    \        return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[0];\n        foreach\
    \ (long i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i > secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0)\n            return null;\n \
    \       long smallest = lst[0];\n        long secondSmallest = lst[0];\n     \
    \   for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = 0;\n        foreach (long i in lst) {\n       \
    \     if (i < smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = i;\n            }\n            else if (i == smallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0)\n            return null;\n \
    \       long smallest = lst[0];\n        long secondSmallest = lst[1];\n     \
    \   for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        var min = lst[0];\n        var\
    \ minIndex = 0;\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n                minIndex =\
    \ i;\n            }\n        }\n        if (minIndex == lst.Count - 1) return\
    \ null;\n        return lst[minIndex + 1];", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = 0;\n        foreach (long n in lst) {\n            if\
    \ (n < smallest) {\n                secondSmallest = smallest;\n             \
    \   smallest = n;\n            } else if (n < secondSmallest) {\n            \
    \    secondSmallest = n;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        foreach (long\
    \ i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i > secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        long smallest = lst.Min();\n        long secondSmallest\
    \ = lst.SkipWhile(x => x < smallest).Skip(1).First();\n        if (secondSmallest\
    \ == smallest)\n            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long second = smallest;\n        foreach (long x in lst) {\n            if\
    \ (x < smallest) {\n                second = smallest;\n                smallest\
    \ = x;\n            } else if (x > second) {\n                second = x;\n  \
    \          }\n        }\n        return second == smallest ? null : second;",
  "        if (lst.Count == 0)\n            return null;\n        var min = lst[0];\n\
    \        var minIndex = 0;\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                min = lst[i];\n              \
    \  minIndex = i;\n            }\n        }\n        if (minIndex == 0)\n     \
    \       return null;\n        return lst[minIndex - 1];", "        if (lst.Count\
    \ == 0)\n            return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        bool found = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n                found = true;\n\
    \            } else if (lst[i] == smallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        if (!found) {\n            return\
    \ null;\n        }\n        return secondSmallest;", "        if (lst.Count ==\
    \ 0)\n            return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        var min = lst[0];\n        var\
    \ minIndex = 0;\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n                minIndex =\
    \ i;\n            }\n        }\n        if (minIndex == lst.Count - 1) return\
    \ null;\n        return lst[minIndex + 1];", "        if (lst.Count == 0)\n  \
    \          return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            }\n            else if (lst[i] < secondSmallest) {\n\
    \                secondSmallest = lst[i];\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0)\n  \
    \          return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long min = lst[0];\n        long\
    \ max = lst[0];\n        foreach (long i in lst) {\n            if (i < min) min\
    \ = i;\n            if (i > max) max = i;\n        }\n        if (min == max)\
    \ return null;\n        if (min == lst[1]) return lst[1];\n        if (max ==\
    \ lst[lst.Count - 1]) return lst[lst.Count - 1];\n        return max;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        foreach (long i in lst) {\n  \
    \          if (i < smallest) {\n                secondSmallest = smallest;\n \
    \               smallest = i;\n            } else if (i < secondSmallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) return null;\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i\
    \ < lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        var\
    \ smallest = lst[0];\n        var secondSmallest = lst[1];\n        for (var i\
    \ = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n         \
    \       secondSmallest = smallest;\n                smallest = lst[i];\n     \
    \       } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        var smallest = lst[0];\n      \
    \  var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n\
    \            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long min = lst[0];\n        long max = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\n              \
    \  min = lst[i];\n            if (lst[i] > max)\n                max = lst[i];\n\
    \        }\n        if (min == max)\n            return null;\n        return\
    \ max;", "        if (lst.Count == 0) {\n            return null;\n        }\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[1];\n    \
    \    for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    var smallest = lst[0];\n        var secondSmallest = lst[0];\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long min2 = lst[0];\n        long min3 = lst[0];\n  \
    \      foreach (long i in lst) {\n            if (i < min) {\n               \
    \ min = i;\n                min2 = min3;\n                min3 = min;\n      \
    \      } else if (i < min2) {\n                min2 = i;\n                min3\
    \ = min;\n            } else if (i < min3) {\n                min3 = i;\n    \
    \        }\n        }\n        if (min2 == min3) {\n            return min2;\n\
    \        }\n        return null;", "        long smallest = lst.Min();\n     \
    \   long secondSmallest = lst.SkipWhile(x => x < smallest).Skip(1).FirstOrDefault();\n\
    \        if (secondSmallest == smallest)\n            return null;\n        else\n\
    \            return secondSmallest;", "        if (lst.Count == 0) {\n       \
    \     return null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long min = lst[0];\n        long\
    \ max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n            }\n           \
    \ if (lst[i] > max) {\n                max = lst[i];\n            }\n        }\n\
    \        if (min == max) return null;\n        return max;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        var smallest = lst[0];\n\
    \        var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long min = lst[0];\n        long\
    \ max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n            }\n           \
    \ if (lst[i] > max) {\n                max = lst[i];\n            }\n        }\n\
    \        if (min == max) return null;\n        return max;", "        if (lst.Count\
    \ == 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            } else if (i > secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) return null;\n        long smallest = lst[0];\n        long\
    \ secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long second = smallest;\n        foreach\
    \ (long x in lst) {\n            if (x < smallest) {\n                second =\
    \ smallest;\n                smallest = x;\n            } else if (x > smallest)\
    \ {\n                second = x;\n            }\n        }\n        return second\
    \ == smallest ? null : second;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        bool foundSmallest = false;\n        bool foundSecondSmallest = false;\n\
    \        foreach (long x in lst) {\n            if (x == smallest) {\n       \
    \         foundSmallest = true;\n            }\n            if (x == secondSmallest)\
    \ {\n                foundSecondSmallest = true;\n            }\n        }\n \
    \       if (foundSmallest && foundSecondSmallest)\n            return secondSmallest;\n\
    \        if (foundSmallest)\n            return smallest;\n        if (foundSecondSmallest)\n\
    \            return secondSmallest;\n        return null;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long min = lst[0];\n        long\
    \ max = lst[0];\n        foreach (long i in lst) {\n            if (i < min) {\n\
    \                min = i;\n            }\n            if (i > max) {\n       \
    \         max = i;\n            }\n        }\n        if (min == max) return null;\n\
    \        if (min < max) return min;\n        return max;", "        if (lst.Count\
    \ == 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            } else if (i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i\
    \ < lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool\
    \ foundSmallest = false;\n        bool foundSecondSmallest = false;\n        foreach\
    \ (long i in lst) {\n            if (i == smallest) {\n                foundSmallest\
    \ = true;\n            } else if (i == secondSmallest) {\n                foundSecondSmallest\
    \ = true;\n            }\n        }\n        if (foundSmallest) {\n          \
    \  return secondSmallest;\n        } else if (foundSecondSmallest) {\n       \
    \     return smallest;\n        } else {\n            return null;\n        }",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        bool\
    \ foundSmallest = false;\n        bool foundSecondSmallest = false;\n        foreach\
    \ (long i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                foundSmallest = true;\n            } else if (i\
    \ == smallest) {\n                foundSmallest = true;\n            } else if\
    \ (foundSmallest && i < secondSmallest) {\n                secondSmallest = i;\n\
    \                foundSecondSmallest = true;\n            }\n        }\n     \
    \   if (foundSecondSmallest) return secondSmallest;\n        return null;", " \
    \       if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = 0;\n        foreach (long\
    \ n in lst) {\n            if (n < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = n;\n            } else if (n < secondSmallest)\
    \ {\n                secondSmallest = n;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) return null;\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i\
    \ < lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long min = lst[0];\n        long max = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min = lst[i];\n            }\n            if (lst[i] > max) {\n         \
    \       max = lst[i];\n            }\n        }\n        if (min == max) return\
    \ null;\n        return max;", "        if (lst.Count == 0)\n            return\
    \ null;\n        var min = lst[0];\n        var minIndex = 0;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min = lst[i];\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex == lst.Count - 1)\n            return null;\n        return\
    \ lst[minIndex + 1];", "        if (lst.Count == 0) return null;\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).First();\n        return secondSmallest < smallest\
    \ ? null : secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[0];\n        foreach\
    \ (long i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            }\n            if (i\
    \ > secondSmallest) {\n                secondSmallest = i;\n            }\n  \
    \      }\n        if (secondSmallest == smallest) return null;\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        var min\
    \ = lst[0];\n        var minIndex = 0;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n   \
    \             minIndex = i;\n            }\n        }\n        if (minIndex ==\
    \ lst.Count - 1) {\n            return null;\n        }\n        return lst[minIndex\
    \ + 1];", "        if (lst.Count == 0) {\n            return null;\n        }\n\
    \        long smallest = lst[0];\n        long secondSmallest = lst[0];\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        bool found = false;\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \             found = true;\n            } else if (lst[i] == smallest) {\n  \
    \              secondSmallest = lst[i];\n            }\n        }\n        return\
    \ found ? secondSmallest : null;", "        if (lst.Count == 0) return null;\n\
    \        var smallest = lst[0];\n        var secondSmallest = lst[1];\n      \
    \  for (var i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n\
    \                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).FirstOrDefault();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        bool foundSmallest = false;\n        bool foundSecondSmallest\
    \ = false;\n        foreach (long n in lst) {\n            if (n < smallest) {\n\
    \                secondSmallest = smallest;\n                foundSmallest = true;\n\
    \            }\n            if (foundSmallest) {\n                if (n < secondSmallest)\
    \ {\n                    secondSmallest = n;\n                    foundSecondSmallest\
    \ = true;\n                }\n            }\n        }\n        if (foundSmallest)\
    \ {\n            return secondSmallest;\n        }\n        return null;", " \
    \       if (lst.Count == 0) return null;\n        long smallest = lst[0];\n  \
    \      long second = smallest;\n        foreach (long i in lst) {\n          \
    \  if (i < smallest) {\n                second = smallest;\n                smallest\
    \ = i;\n            } else if (i > smallest) {\n                second = i;\n\
    \            }\n        }\n        if (second == smallest) return null;\n    \
    \    return second;", "        if (lst.Count == 0) return null;\n        long\
    \ min = lst[0];\n        long min2 = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n   \
    \             min2 = lst[i];\n            } else if (lst[i] < min2) {\n      \
    \          min2 = lst[i];\n            }\n        }\n        return min2;", " \
    \       if (lst.Count == 0)\n            return null;\n        var minValue =\
    \ lst[0];\n        var minIndex = 0;\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < minValue) {\n                minValue = lst[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == 0)\n            return null;\n        return lst[minIndex - 1];", "     \
    \   if (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long min = lst[0];\n        long\
    \ max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min = lst[i];\n            }\n           \
    \ if (lst[i] > max) {\n                max = lst[i];\n            }\n        }\n\
    \        if (min == max) {\n            return null;\n        }\n        return\
    \ max;", "        long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).FirstOrDefault();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    var smallest = lst[0];\n        var secondSmallest = lst[0];\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        long\
    \ thirdSmallest = lst[2];\n        long fourthSmallest = lst[3];\n        long\
    \ fifthSmallest = lst[4];\n        long sixthSmallest = lst[5];\n        long\
    \ seventhSmallest = lst[6];\n        long eighthSmallest = lst[7];\n        long\
    \ ninthSmallest = lst[8];\n        long tenthSmallest = lst[9];\n        long\
    \ eleventhSmallest = lst[10];\n        long twelfthSmallest = lst[11];\n     \
    \   long thirteenthSmallest = lst[12];\n        long fourteenthSmallest = lst[13];\n\
    \        long fifteenthSmallest = lst[14];\n        long sixteenthSmallest = lst[15];\n\
    \        long seventeenthSmallest = lst[16];\n        long eighteenthSmallest\
    \ = lst[17];\n        long nineteenthSmallest = lst[18];\n        long twentiethSmallest\
    \ = lst[19];\n        long twentyFirstSmallest = lst[20];\n        long thirtyFirstSmallest\
    \ = lst[21];\n        long fortyFirstSmallest = lst[22];\n        long fiftyFirstSmallest\
    \ = lst[23];\n        long sixtyFirstSmallest = lst[24];\n        long seventyFirstSmallest\
    \ = lst[25];\n        long eightyFirstSmallest = lst[26];\n        long ninetyFirstSmallest\
    \ = lst[27];\n        long hundredthSmallest = lst[28];\n        long thousandthSmallest\
    \ = lst[29];\n        long millionthSmallest = lst[30];\n        long billionthSmallest\
    \ = lst[31];\n        long trillionthSmallest = lst[32];\n        long quadrillionthSmallest\
    \ = lst[33];\n        long quintillionthSmallest = lst[34];\n        long sextillionthSmallest\
    \ = lst[35];\n        long septillionthSmallest = lst[36];\n        long octillionthSmallest\
    \ = lst[37];\n        long nonillionthSmallest = lst[38];\n        long decillionthSmallest\
    \ = lst[39];\n        long undecillionthSmalle", "        if (lst.Count == 0)\n\
    \            return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        var smallest = lst[0];\n      \
    \  var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n\
    \            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        var min2 = lst.Min();\n       \
    \ var min1 = lst.Min();\n        if (min2 < min1) return min2;\n        if (min2\
    \ > min1) return min1;\n        var min3 = lst.Min();\n        if (min3 < min2)\
    \ return min3;\n        if (min3 > min2) return min2;\n        return null;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        foreach (long\
    \ i in lst) {\n            if (i < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = i;\n            } else if (i > secondSmallest)\
    \ {\n                secondSmallest = i;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) return null;\n        long min\
    \ = lst[0];\n        long max = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n   \
    \         }\n            if (lst[i] > max) {\n                max = lst[i];\n\
    \            }\n        }\n        if (min == max) return null;\n        return\
    \ max;", "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n\
    \        long second = smallest;\n        foreach (long i in lst) {\n        \
    \    if (i < smallest) {\n                second = smallest;\n               \
    \ smallest = i;\n            } else if (i > smallest) {\n                second\
    \ = i;\n            }\n        }\n        return second == smallest ? null : second;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long second = smallest;\n        foreach (long x in lst) {\n            if\
    \ (x < smallest) {\n                second = smallest;\n                smallest\
    \ = x;\n            }\n            if (x > second) {\n                second =\
    \ x;\n            }\n        }\n        return second == smallest ? null : second;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long min2 = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                min = lst[i];\n            }\n            if (lst[i] < min2)\
    \ {\n                min2 = lst[i];\n            }\n        }\n        return\
    \ min2;", "        if (lst.Count == 0)\n            return null;\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        var min = lst[0];\n\
    \        var minIndex = 0;\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                min = lst[i];\n              \
    \  minIndex = i;\n            }\n        }\n        if (minIndex == 0)\n     \
    \       return null;\n        if (minIndex == lst.Count - 1)\n            return\
    \ lst[minIndex];\n        var nextMin = lst[minIndex + 1];\n        if (nextMin\
    \ < min)\n            return lst[minIndex + 1];\n        return min;", "     \
    \   if (lst.Count == 0) return null;\n        var smallest = lst[0];\n       \
    \ var smallestIndex = lst.IndexOf(smallest);\n        if (smallestIndex == 0)\
    \ return null;\n        var secondSmallest = lst[smallestIndex - 1];\n       \
    \ var secondSmallestIndex = lst.IndexOf(secondSmallest);\n        if (secondSmallestIndex\
    \ == 0) return null;\n        if (smallestIndex == secondSmallestIndex) return\
    \ smallest;\n        if (smallestIndex < secondSmallestIndex) {\n            var\
    \ temp = secondSmallest;\n            secondSmallest = smallest;\n           \
    \ smallest = temp;\n        }\n        var thirdSmallest = lst[secondSmallestIndex\
    \ - 1];\n        var thirdSmallestIndex = lst.IndexOf(thirdSmallest);\n      \
    \  if (thirdSmallestIndex == 0) return null;\n        if (secondSmallestIndex\
    \ < thirdSmallestIndex) {\n            var temp = thirdSmallest;\n           \
    \ thirdSmallest = secondSmallest;\n            secondSmallest = temp;\n      \
    \  }\n        var fourthSmallest = lst[thirdSmallestIndex - 1];\n        var fourthSmallestIndex\
    \ = lst.IndexOf(fourthSmallest);\n        if (fourthSmallestIndex == 0) return\
    \ null;\n        if (thirdSmallestIndex < fourthSmallestIndex) {\n           \
    \ var temp = fourthSmallest;\n            fourthSmallest = thirdSmallest;\n  \
    \          thirdSmallest = temp;\n        }\n        var fifthSmallest = lst[fourthSmallestIndex\
    \ - 1];\n        var fifthSmallestIndex = lst.IndexOf(fifthSmallest);\n      \
    \  if (fifthSmallestIndex == 0) return null;\n        if (fourthSmallestIndex\
    \ < fifthSmallestIndex) {\n            var temp = fifthSmallest;\n           \
    \ fifthSmallest = fourthSmallest;\n            fourthSmallest = temp;\n      \
    \  }\n        var sixthSmallest = lst[fifthSmallestIndex - 1];\n        var sixthSmallestIndex\
    \ = lst.IndexOf(sixthSmallest);\n        if (sixthSmallestIndex == 0) return null;\n\
    \        if (fifthSmallestIndex < sixthSmallestIndex) {\n            var temp\
    \ = sixthSmallest;\n            sixthSmallest = fifthSmallest;\n            fifthSmallest\
    \ = temp;\n        }\n        var seventhSmallest = lst[", "        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        bool found = false;\n\
    \        foreach (long i in lst) {\n            if (i < smallest) {\n        \
    \        secondSmallest = smallest;\n                smallest = i;\n         \
    \       found = true;\n            } else if (i == smallest) {\n             \
    \   secondSmallest = i;\n            }\n        }\n        if (found) {\n    \
    \        return secondSmallest;\n        } else {\n            return null;\n\
    \        }", "        if (lst.Count == 0) return null;\n        long min = lst[0];\n\
    \        long max = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           long cur = lst[i];\n            if (cur < min) {\n               \
    \ min = cur;\n            } else if (cur > max) {\n                max = cur;\n\
    \            }\n        }\n        if (min == max) return null;\n        return\
    \ max;", "        if (lst.Count == 0) return null;\n        long min = lst[0];\n\
    \        long min2 = lst[0];\n        foreach (long i in lst) {\n            if\
    \ (i < min) {\n                min2 = min;\n                min = i;\n       \
    \     } else if (i < min2) {\n                min2 = i;\n            }\n     \
    \   }\n        return min2;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[1];\n        for (int i = 2; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        var smallest = lst[0];\n       \
    \ var secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n\
    \            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long min = lst[0];\n        long max = lst[0];\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < min) {\n                min =\
    \ lst[i];\n            }\n            if (lst[i] > max) {\n                max\
    \ = lst[i];\n            }\n        }\n        if (min == max) return null;\n\
    \        return max;", "        if (lst.Count == 0) return null;\n        var\
    \ smallest = lst[0];\n        var secondSmallest = lst[0];\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n         \
    \       secondSmallest = smallest;\n                smallest = lst[i];\n     \
    \       } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        var smallest = lst[0];\n\
    \        var secondSmallest = lst[0];\n        for (var i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0)\n  \
    \          return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[0];\n        for (int i = 1; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ > secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long smallest = lst[0];\n        long secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        var smallest = lst[0];\n    \
    \    var secondSmallest = lst[1];\n        for (var i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long min = lst[0];\n        long max = lst[0];\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < min) {\n                min =\
    \ lst[i];\n            }\n            if (lst[i] > max) {\n                max\
    \ = lst[i];\n            }\n        }\n        if (min == max) return null;\n\
    \        return max;", "        if (lst.Count == 0) return null;\n        var\
    \ min = lst[0];\n        var minIndex = 0;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min = lst[i];\n   \
    \             minIndex = i;\n            }\n        }\n        if (minIndex ==\
    \ lst.Count - 1) return null;\n        return lst[minIndex + 1];", "        if\
    \ (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[0];\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0)\n  \
    \          return null;\n        var smallest = lst[0];\n        var smallestIndex\
    \ = lst.IndexOf(smallest);\n        if (smallestIndex == 0)\n            return\
    \ null;\n        var secondSmallest = lst[smallestIndex - 1];\n        var secondSmallestIndex\
    \ = lst.IndexOf(secondSmallest);\n        if (secondSmallestIndex == 0)\n    \
    \        return null;\n        if (secondSmallest < smallest)\n            return\
    \ secondSmallest;\n        return smallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] > secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long min = lst[0];\n        long min2 = lst[0];\n        foreach\
    \ (long i in lst) {\n            if (i < min)\n                min = i;\n    \
    \        if (i < min2)\n                min2 = i;\n        }\n        if (min2\
    \ < min)\n            return min2;\n        return min;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ > secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        bool found = false;\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n                found = true;\n\
    \            } else if (lst[i] == smallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        if (found) {\n            return\
    \ secondSmallest;\n        }\n        return null;", "        if (lst.Count ==\
    \ 0) {\n            return null;\n        }\n        var min = lst[0];\n     \
    \   var minIndex = 0;\n        for (int i = 1; i < lst.Count; i++) {\n       \
    \     if (lst[i] < min) {\n                min = lst[i];\n                minIndex\
    \ = i;\n            }\n        }\n        if (minIndex == lst.Count - 1) {\n \
    \           return null;\n        }\n        return lst[minIndex + 1];", "   \
    \     if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long second = smallest;\n  \
    \      bool found = false;\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < smallest) {\n                second = smallest;\n    \
    \            smallest = lst[i];\n                found = true;\n            }\
    \ else {\n                second = lst[i];\n            }\n        }\n       \
    \ return found ? second : null;", "        if (lst.Count == 0)\n            return\
    \ null;\n        var smallest = lst[0];\n        var secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        bool found = false;\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \             found = true;\n            } else if (lst[i] == smallest) {\n  \
    \              secondSmallest = lst[i];\n            }\n        }\n        return\
    \ found ? new Nullable<long>(secondSmallest) : null;", "        long smallest\
    \ = lst.Min();\n        long secondSmallest = lst.SkipWhile(x => x < smallest).Skip(1).FirstOrDefault();\n\
    \        if (secondSmallest == smallest)\n            return null;\n        else\n\
    \            return secondSmallest;", "        if (lst.Count == 0) {\n       \
    \     return null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] > secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        long smallest = lst[0];\n        long secondSmallest = lst[1];\n      \
    \  if (lst.Count > 2) {\n            foreach (var item in lst.Skip(2))\n     \
    \       {\n                if (item < smallest)\n                {\n         \
    \           secondSmallest = smallest;\n                    smallest = item;\n\
    \                }\n                else if (item > secondSmallest)\n        \
    \        {\n                    secondSmallest = item;\n                }\n  \
    \          }\n        }\n        return secondSmallest == lst[1] ? null : secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long second = smallest;\n        foreach (long i in lst) {\n\
    \            if (i < smallest)\n                second = smallest;\n         \
    \   else if (i > smallest)\n                second = i;\n            else\n  \
    \              return null;\n        }\n        return second;", "        if (lst.Count\
    \ == 0) return null;\n        var smallest = lst[0];\n        var secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = 0;\n        foreach (long\
    \ n in lst) {\n            if (n < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = n;\n            } else if (n < secondSmallest)\
    \ {\n                secondSmallest = n;\n            }\n        }\n        return\
    \ secondSmallest;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > smallest) {\n                secondSmallest =\
    \ lst[i];\n            }\n        }\n        return secondSmallest;", "      \
    \  if (lst.Count == 0) return null;\n        long smallest = lst[0];\n       \
    \ long secondSmallest = lst[1];\n        foreach (long i in lst) {\n         \
    \   if (i < smallest) {\n                secondSmallest = smallest;\n        \
    \        smallest = i;\n            } else if (i < secondSmallest) {\n       \
    \         secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    var smallest = lst[0];\n        var secondSmallest = lst[1];\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long min2 = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min2 = min;\n     \
    \           min = lst[i];\n            } else if (lst[i] < min2) {\n         \
    \       min2 = lst[i];\n            }\n        }\n        return min2;", "   \
    \     if (lst.Count == 0)\n            return null;\n        long smallest = lst[0];\n\
    \        long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0) {\n\
    \            return null;\n        }\n        long smallest = lst[0];\n      \
    \  long secondSmallest = lst[0];\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[1];\n\
    \        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) return null;\n    \
    \    long min = lst[0];\n        long max = lst[0];\n        foreach (long i in\
    \ lst) {\n            if (i < min) min = i;\n            if (i > max) max = i;\n\
    \        }\n        if (min == max) return null;\n        if (min > max) return\
    \ null;\n        return min;", "        if (lst.Count == 0) return null;\n   \
    \     long smallest = lst[0];\n        long secondSmallest = lst[1];\n       \
    \ for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n\
    \                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        long smallest = lst.Min();\n        long\
    \ secondSmallest = lst.SkipWhile(x => x < smallest).Skip(1).First();\n       \
    \ return secondSmallest < smallest ? null : secondSmallest;", "        if (lst.Count\
    \ == 0) return null;\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        foreach (long i in lst) {\n            if (i < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = i;\n\
    \            } else if (i < secondSmallest) {\n                secondSmallest\
    \ = i;\n            }\n        }\n        return secondSmallest;", "        if\
    \ (lst.Count == 0) return null;\n        long min = lst[0];\n        long max\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < min) {\n                min = lst[i];\n            }\n            if (lst[i]\
    \ > max) {\n                max = lst[i];\n            }\n        }\n        if\
    \ (min == max) return null;\n        return max;", "        long smallest = lst.Min();\n\
    \        long secondSmallest = lst.SkipWhile(x => x < smallest).Skip(1).First();\n\
    \        return secondSmallest < smallest ? null : secondSmallest;", "       \
    \ if (lst.Count == 0) {\n            return null;\n        }\n        long smallest\
    \ = lst[0];\n        long secondSmallest = lst[1];\n        bool foundSmallest\
    \ = false;\n        bool foundSecondSmallest = false;\n        for (int i = 2;\
    \ i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n              \
    \  secondSmallest = smallest;\n                smallest = lst[i];\n          \
    \      foundSmallest = true;\n            } else if (lst[i] == smallest) {\n \
    \               foundSmallest = true;\n            }\n            if (lst[i] <\
    \ secondSmallest) {\n                secondSmallest = lst[i];\n              \
    \  foundSecondSmallest = true;\n            } else if (lst[i] == secondSmallest)\
    \ {\n                foundSecondSmallest = true;\n            }\n        }\n \
    \       if (foundSmallest) {\n            return smallest;\n        } else if\
    \ (foundSecondSmallest) {\n            return secondSmallest;\n        } else\
    \ {\n            return null;\n        }", "        if (lst.Count == 0) return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        bool found = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n                found = true;\n         \
    \   } else if (lst[i] == smallest) {\n                secondSmallest = lst[i];\n\
    \            }\n        }\n        if (!found) return null;\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        var smallest = lst[0];\n    \
    \    var secondSmallest = lst[1];\n        for (var i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[0];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0)\n            return\
    \ null;\n        long smallest = lst[0];\n        long secondSmallest = lst[0];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] > secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;", "    \
    \    long smallest = lst.Min();\n        long secondSmallest = lst.SkipWhile(x\
    \ => x < smallest).Skip(1).First();\n        if (secondSmallest == smallest)\n\
    \            return null;\n        else\n            return secondSmallest;",
  "        if (lst.Count == 0)\n            return null;\n        long smallest =\
    \ lst[0];\n        long secondSmallest = lst[0];\n        for (int i = 1; i <\
    \ lst.Count; i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ > secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        return secondSmallest;", "        if (lst.Count == 0)\n  \
    \          return null;\n        long min = lst[0];\n        long max = lst[0];\n\
    \        foreach (long x in lst) {\n            if (x < min)\n               \
    \ min = x;\n            if (x > max)\n                max = x;\n        }\n  \
    \      if (min == max)\n            return null;\n        return max;", "    \
    \    if (lst.Count == 0) return null;\n        long smallest = lst[0];\n     \
    \   long secondSmallest = lst[1];\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < smallest) {\n                secondSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < secondSmallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    return secondSmallest;", "        if (lst.Count == 0) {\n            return\
    \ null;\n        }\n        long smallest = lst[0];\n        long secondSmallest\
    \ = lst[1];\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < secondSmallest) {\n             \
    \   secondSmallest = lst[i];\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[0];\n        bool found\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < smallest) {\n                secondSmallest = smallest;\n                smallest\
    \ = lst[i];\n                found = true;\n            } else if (lst[i] == smallest)\
    \ {\n                secondSmallest = lst[i];\n            }\n        }\n    \
    \    if (!found) {\n            return null;\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) return null;\n        long smallest = lst[0];\n   \
    \     long secondSmallest = lst[1];\n        foreach (long i in lst) {\n     \
    \       if (i < smallest) {\n                secondSmallest = smallest;\n    \
    \            smallest = i;\n            } else if (i > secondSmallest) {\n   \
    \             secondSmallest = i;\n            }\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long min2 = lst[0];\n        bool found = false;\n  \
    \      for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n\
    \                min = lst[i];\n                min2 = lst[i];\n             \
    \   found = true;\n            }\n            else if (lst[i] == min2) {\n   \
    \             found = true;\n            }\n        }\n        if (found) {\n\
    \            return min2;\n        }\n        return null;", "        if (lst.Count\
    \ == 0) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = 0;\n        foreach (long i in lst) {\n       \
    \     if (i < smallest) {\n                secondSmallest = smallest;\n      \
    \          smallest = i;\n            }\n            else if (i == smallest) {\n\
    \                secondSmallest = i;\n            }\n        }\n        if (secondSmallest\
    \ == 0) {\n            return null;\n        }\n        return secondSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long secondSmallest = lst[1];\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n       \
    \         secondSmallest = smallest;\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        return secondSmallest;"]
stop_tokens:
- "\n    }\n"
