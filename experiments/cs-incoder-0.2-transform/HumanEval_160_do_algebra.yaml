name: HumanEval_160_do_algebra
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given two lists operator, and operand. The first list has basic\
  \ algebra operations, and \n    // the second list is a list of integers. Use the\
  \ two given lists to build the algebric \n    // expression and return the evaluation\
  \ of this expression.\n    // The basic algebra operations:\n    // Addition ( +\
  \ ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division\
  \ ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
  \ '*', '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    //\
  \ => result = 9\n    // Note:\n    // The length of operator list is equal to the\
  \ length of operand list minus one.\n    // Operand is a list of of non-negative\
  \ integers.\n    // Operator list has at least one operator, and operand list has\
  \ at least two operands.\n    public static long DoAlgebra(List<string> op, List<long>\
  \ operand) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
  \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
  \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
  *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
  \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
  //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
  \ == (8L));\n    }\n\n}\n"
completions: ["        long result = 0;\n        foreach (string op1 in op) {\n  \
    \          foreach (long op2 in operand) {\n                switch (op1) {\n \
    \                   case \"+\":\n                        result += op2;\n    \
    \                    break;\n                    case \"-\":\n               \
    \         result -= op2;\n                        break;\n                   \
    \ case \"*\":\n                        result *= op2;\n                      \
    \  break;\n                    case \"//\":\n                        result /=\
    \ op2;\n                        break;\n                    case \"**\":\n   \
    \                     result *= op2;\n                        result *= op2;\n\
    \                        break;\n                }\n            }\n        }\n\
    \        return result;", "        long result = 0;\n        foreach (string op\
    \ in op) {\n            switch (op) {\n                case \"+\":\n         \
    \           result += operand[0];\n                    break;\n              \
    \  case \"-\":\n                    result -= operand[0];\n                  \
    \  break;\n                case \"*\":\n                    result *= operand[0];\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[0];\n                    break;\n                case \"\
    **\":\n                    result *= operand[0];\n                    result /=\
    \ operand[1];\n                    break;\n                default:\n        \
    \            throw new ArgumentException(\"Invalid operator\");\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op2 in op) {\n            foreach (long op3 in operand) {\n        \
    \        switch (op2) {\n                    case \"+\":\n                   \
    \     result += op3;\n                        break;\n                    case\
    \ \"-\":\n                        result -= op3;\n                        break;\n\
    \                    case \"*\":\n                        result *= op3;\n   \
    \                     break;\n                    case \"//\":\n             \
    \           result /= op3;\n                        break;\n                 \
    \   case \"**\":\n                        result *= op3;\n                   \
    \     result *= op3;\n                        break;\n                }\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string opr in op) {\n            switch (opr) {\n            \
    \    case \"+\":\n                    result += operand[0];\n                \
    \    break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result /= operand[1];\n                    break;\n           \
    \     default:\n                    throw new ArgumentException(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string op1 in op) {\n            foreach (long op2 in operand)\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result **= op2;\n     \
    \                   break;\n                    default:\n                   \
    \     throw new Exception(\"Invalid operator\");\n                }\n        \
    \    }\n        }\n        return result;", "        long result = 0;\n      \
    \  foreach (string opr in op) {\n            long operand1 = operand[0];\n   \
    \         long operand2 = operand[1];\n            long operand3 = operand[2];\n\
    \            long operand4 = operand[3];\n            long operand5 = operand[4];\n\
    \            long operand6 = operand[5];\n            long operand7 = operand[6];\n\
    \            long operand8 = operand[7];\n            long operand9 = operand[8];\n\
    \            long operand10 = operand[9];\n            long operand11 = operand[10];\n\
    \            long operand12 = operand[11];\n            long operand13 = operand[12];\n\
    \            long operand14 = operand[13];\n            long operand15 = operand[14];\n\
    \            long operand16 = operand[15];\n            switch (opr) {\n     \
    \           case \"+\":\n                    result += operand1;\n           \
    \         break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          result *= operand1;\n                    break;\n            }\n  \
    \      }\n        return result;", "        long result = 0;\n        foreach\
    \ (string opr in op) {\n            switch (opr) {\n                case \"+\"\
    :\n                    result += operand[0];\n                    break;\n   \
    \             case \"-\":\n                    result -= operand[0];\n       \
    \             break;\n                case \"*\":\n                    result\
    \ *= operand[0];\n                    break;\n                case \"//\":\n \
    \                   result /= operand[0];\n                    break;\n      \
    \          case \"**\":\n                    result *= operand[0];\n         \
    \           result /= operand[1];\n                    break;\n              \
    \  default:\n                    throw new ArgumentException(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string op1 in op) {\n            foreach (long op2 in operand)\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result *= op2;\n      \
    \                  result *= op2;\n                        break;\n          \
    \      }\n            }\n        }\n        return result;", "        long result\
    \ = 0;\n        foreach (string opr in op) {\n            switch (opr) {\n   \
    \             case \"+\":\n                    result += operand[0];\n       \
    \             operand.RemoveAt(0);\n                    break;\n             \
    \   case \"-\":\n                    result -= operand[0];\n                 \
    \   operand.RemoveAt(0);\n                    break;\n                case \"\
    *\":\n                    result *= operand[0];\n                    operand.RemoveAt(0);\n\
    \                    break;\n                case \"//\":\n                  \
    \  result /= operand[0];\n                    operand.RemoveAt(0);\n         \
    \           break;\n                case \"**\":\n                    result *=\
    \ operand[0];\n                    result /= operand[0];\n                   \
    \ operand.RemoveAt(0);\n                    break;\n                default:\n\
    \                    throw new ArgumentException(\"Invalid operator\");\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string op1 in op) {\n            foreach (long op2 in operand)\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result *= op2;\n      \
    \                  result *= op2;\n                        break;\n          \
    \          default:\n                        break;\n                }\n     \
    \       }\n        }\n        return result;", "        long result = 0;\n   \
    \     foreach (string op in op) {\n            switch (op) {\n               \
    \ case \"+\":\n                    result += operand[0];\n                   \
    \ break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result /= operand[0];\n                    break;\n           \
    \     default:\n                    throw new ArgumentException(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string opr in op) {\n            switch (opr) {\n     \
    \           case \"+\":\n                    result += operand[0];\n         \
    \           break;\n                case \"-\":\n                    result -=\
    \ operand[0];\n                    break;\n                case \"*\":\n     \
    \               result *= operand[0];\n                    break;\n          \
    \      case \"//\":\n                    result /= operand[0];\n             \
    \       break;\n                case \"**\":\n                    result *= operand[0];\n\
    \                    result /= operand[1];\n                    break;\n     \
    \           default:\n                    throw new ArgumentException(\"Invalid\
    \ operator\");\n            }\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string op1 in op) {\n            foreach (long\
    \ op2 in operand.Skip(1))\n                switch (op1) {\n                  \
    \  case \"+\": result += op2; break;\n                    case \"-\": result -=\
    \ op2; break;\n                    case \"*\": result *= op2; break;\n       \
    \             case \"//\": result /= op2; break;\n                    case \"\
    **\": result *= op2; result *= op2; break;\n                    default: throw\
    \ new Exception(\"Invalid operator\");\n                }\n        }\n       \
    \ return result;", "        long result = 0;\n        foreach (string opr in op)\
    \ {\n            long oprValue = operand.FirstOrDefault();\n            long oprValue2\
    \ = operand.Skip(1).FirstOrDefault();\n            switch (opr) {\n          \
    \      case \"+\":\n                    result += oprValue;\n                \
    \    break;\n                case \"-\":\n                    result -= oprValue;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= oprValue;\n                    break;\n                case \"//\"\
    :\n                    result /= oprValue;\n                    break;\n     \
    \           case \"**\":\n                    result *= oprValue;\n          \
    \          break;\n                default:\n                    break;\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string op in op) {\n            result += operand[op.Length -\
    \ 1];\n        }\n        return result;", "        long result = 0;\n       \
    \ foreach (string opr in op) {\n            switch (opr) {\n                case\
    \ \"+\":\n                    result += operand[0];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[0];\n    \
    \                break;\n                case \"*\":\n                    result\
    \ *= operand[0];\n                    break;\n                case \"//\":\n \
    \                   result /= operand[0];\n                    break;\n      \
    \          case \"**\":\n                    result *= operand[0];\n         \
    \           result /= operand[1];\n                    break;\n              \
    \  default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string op1 in op) {\n            foreach (long op2 in operand)\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result *= op2;\n      \
    \                  result *= op2;\n                        break;\n          \
    \      }\n            }\n        }\n        return result;", "        long result\
    \ = 0;\n        foreach (string opr in op) {\n            switch (opr) {\n   \
    \             case \"+\":\n                    result += operand[0];\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand[0];\n                    break;\n                case \"*\":\n  \
    \                  result *= operand[0];\n                    break;\n       \
    \         case \"//\":\n                    result /= operand[0];\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand[0];\n                    result /= operand[1];\n                   \
    \ break;\n            }\n        }\n        return result;", "        long result\
    \ = 0;\n        foreach (string opr in op) {\n            switch (opr) {\n   \
    \             case \"+\":\n                    result += operand[0];\n       \
    \             break;\n                case \"-\":\n                    result\
    \ -= operand[0];\n                    break;\n                case \"*\":\n  \
    \                  result *= operand[0];\n                    break;\n       \
    \         case \"//\":\n                    result /= operand[0];\n          \
    \          break;\n                case \"**\":\n                    result *=\
    \ operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n\
    \                        result *= operand[i];\n                    }\n      \
    \              break;\n            }\n        }\n        return result;", "  \
    \      long result = 0;\n        foreach (string s in op) {\n            switch\
    \ (s) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result *= operand[0];\n                \
    \    break;\n                default:\n                    throw new Exception(\"\
    Invalid operator\");\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
