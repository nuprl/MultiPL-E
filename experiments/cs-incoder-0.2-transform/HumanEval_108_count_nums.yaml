name: HumanEval_108_count_nums
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function count_nums which takes an array of integers\
  \ and returns\n    // the number of elements which has a sum of digits > 0.\n  \
  \  // If a number is negative, then its first signed digit will be negative:\n \
  \   // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> CountNums((new List<long>()))\n\
  \    // (0L)\n    // >>> CountNums((new List<long>(new long[]{(long)-1L, (long)11L,\
  \ (long)-11L})))\n    // (1L)\n    // >>> CountNums((new List<long>(new long[]{(long)1L,\
  \ (long)1L, (long)2L})))\n    // (3L)\n    public static long CountNums(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new\
  \ List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))\
  \ == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,\
  \ (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))\
  \ == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,\
  \ (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new\
  \ List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
completions: ["        long sum = 0;\n        foreach (long num in arr) {\n      \
    \      sum += num;\n        }\n        return sum;", "        long sum = 0;\n\
    \        foreach (long num in arr) {\n            sum += num;\n        }\n   \
    \     return sum;", "        long sum = 0;\n        foreach (long num in arr)\
    \ {\n            sum += num;\n        }\n        return sum;", "        long sum\
    \ = 0;\n        foreach (var num in arr) {\n            sum += num;\n        }\n\
    \        return sum;", "        long sum = 0;\n        foreach (long num in arr)\
    \ {\n            sum += num;\n        }\n        return sum;", "        long sum\
    \ = 0;\n        foreach (long num in arr) {\n            sum += num;\n       \
    \ }\n        return sum;", "        long sum = 0;\n        foreach (long num in\
    \ arr) {\n            sum += num;\n        }\n        if (sum < 0) {\n       \
    \     sum *= -1;\n        }\n        return sum;", "        long sum = 0;\n  \
    \      foreach (var num in arr) {\n            sum += num;\n        }\n      \
    \  return sum;", "        long sum = 0;\n        foreach (long num in arr) {\n\
    \            sum += num;\n        }\n        if (sum < 0) {\n            sum *=\
    \ -1;\n        }\n        return sum;", "        long sum = 0;\n        foreach\
    \ (long n in arr) {\n            sum += n;\n        }\n        return sum;", " \
    \       long sum = 0;\n        foreach (long num in arr) {\n            sum +=\
    \ num;\n        }\n        return sum;", "        long sum = 0;\n        foreach\
    \ (long num in arr) {\n            sum += num;\n        }\n        return sum;",
  "        long sum = 0;\n        long digit = 0;\n        long count = 0;\n     \
    \   foreach (long num in arr) {\n            sum += num;\n            digit =\
    \ num % 10;\n            if (digit > 0) {\n                count++;\n        \
    \    }\n        }\n        if (sum < 0) {\n            sum *= -1;\n          \
    \  digit = -digit % 10;\n            if (digit > 0) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long sum = 0;\n  \
    \      foreach (long num in arr) {\n            sum += num;\n        }\n     \
    \   return sum;", "        if (arr.Count == 0) return 0L;\n        var sum = 0L;\n\
    \        var sign = arr.First();\n        foreach (var num in arr.Skip(1))\n \
    \           sum += num % 10;\n        if (sum > 0) return sign;\n        var digits\
    \ = arr.TakeWhile(n => n < 0).Select(n => n < 0 ? -n : n);\n        var sumOfDigits\
    \ = digits.Sum();\n        if (sumOfDigits > 0) return sign;\n        var sumOfDigits\
    \ = digits.Sum(n => n < 0 ? -n : n);\n        return sumOfDigits;", "        long\
    \ count = 0;\n        long sum = 0;\n        foreach (long num in arr) {\n   \
    \         sum += num;\n            if (sum > 0) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long sum = 0;\n  \
    \      foreach (long num in arr) {\n            sum += num;\n        }\n     \
    \   return sum;", "        if (arr.Count == 0) return 0L;\n        long sum =\
    \ 0L;\n        long digitSum = 0L;\n        long firstDigit = 0L;\n        long\
    \ lastDigit = 0L;\n        long firstNegative = 0L;\n        long lastNegative\
    \ = 0L;\n        bool isNegative = false;\n        bool isFirstNegative = false;\n\
    \        bool isLastNegative = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        bool isFirstPositive = false;\n\
    \        bool isLastPositive = false;\n        ", "        long sum = 0;\n   \
    \     long sign = 1;\n        foreach (long num in arr) {\n            sum +=\
    \ sign * num;\n            sign *= -1;\n        }\n        return sum;", "   \
    \     long sum = 0;\n        long digit = 0;\n        long sumOfDigits = 0;\n\
    \        bool isNegative = false;\n        bool isNegativeFirstDigit = false;\n\
    \        bool isNegativeSecondDigit = false;\n        bool isNegativeThirdDigit\
    \ = false;\n        bool isNegativeFourthDigit = false;\n        bool isNegativeFifthDigit\
    \ = false;\n        bool isNegativeSixthDigit = false;\n        bool isNegativeSeventhDigit\
    \ = false;\n        bool isNegativeEighthDigit = false;\n        bool isNegativeNinthDigit\
    \ = false;\n        bool isNegativeTenthDigit = false;\n        bool isNegativeEleventhDigit\
    \ = false;\n        bool isNegativeTwelfthDigit = false;\n        bool isNegativeThirteenthDigit\
    \ = false;\n        bool isNegativeFourteenthDigit = false;\n        bool isNegativeFifteenthDigit\
    \ = false;\n        bool isNegativeSixteenthDigit = false;\n        bool isNegativeSeventeenthDigit\
    \ = false;\n        bool isNegativeEighteenthDigit = false;\n        bool isNegativeNineteenthDigit\
    \ = false;\n        bool isNegativeTwentiethDigit = false;\n        bool isNegativeThirtiethDigit\
    \ = false;\n        bool isNegativeFourtiethDigit = false;\n        bool isNegativeFiftiethDigit\
    \ = false;\n        bool isNegativeSixtiethDigit = false;\n        bool isNegativeSeventiethDigit\
    \ = false;\n        bool isNegativeEightiethDigit = false;\n        bool isNegativeNinetiethDigit\
    \ = false;\n        bool isNegativeTwentyFirstDigit = false;\n        bool isNegativeTwentySecondDigit\
    \ = false;\n        bool isNegativeTwentyThirdDigit = false;\n        bool isNegativeTwentyFourthDigit\
    \ = false;\n        bool isNegativeTwentyFifthDigit = false;\n        bool isNegativeTwentySixthDigit\
    \ = false;\n        bool isNegativeTwentySeventhDigit = false;\n        bool isNegativeTwentyEighthDigit\
    \ = false;\n        bool isNegativeTwentyNinthDigit = false;\n        bool isNegativeThirtyFirstDigit\
    \ = false;\n        bool isNegativeThirtySecondDigit = false;\n        bool isNegativeThirtyThirdDigit\
    \ = false;\n        bool isNegativeThirtyFourthDigit = false;\n        bool isNegativeThirtyFifthDigit\
    \ = false;\n        bool isNegativeThirtySixthDigit = false;\n        bool isNegativeThirtySeventhDigit\
    \ = false;\n        bool isNegativeThirtyEighthDigit = false;\n        bool isNegativeThirtyNinthDigit\
    \ = false;\n        bool "]
stop_tokens:
- "\n    }\n"
