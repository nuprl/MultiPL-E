name: HumanEval_48_is_palindrome
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
  \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>>\
  \ IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n\
  \    // (false)\n    public static bool IsPalindrome(string text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
  \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
  aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
  \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
  xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
  \    }\n\n}\n"
completions: ["        string reversed = new StringBuilder(text).Reverse().ToString();\n\
    \        return text == reversed;", "        if (text == null || text.Length <=\
    \ 1) {\n            return true;\n        }\n        var reversed = new StringBuilder(text).Reverse().ToString();\n\
    \        return text == reversed;", "        if (string.IsNullOrEmpty(text))\n\
    \            return true;\n        if (text.Length == 1)\n            return true;\n\
    \        if (text.Length == 2)\n            return text[0] == text[1];\n     \
    \   if (text.Length % 2 == 1)\n            return false;\n        string firstHalf\
    \ = text.Substring(0, text.Length / 2);\n        string secondHalf = text.Substring(text.Length\
    \ / 2, text.Length);\n        return firstHalf == secondHalf;", "        if (text\
    \ == null || text.Length <= 1) {\n            return true;\n        }\n      \
    \  var reversed = new StringBuilder(text).Reverse().ToString();\n        return\
    \ text == reversed;", "        if (string.IsNullOrEmpty(text))\n            return\
    \ true;\n        var reversed = new StringBuilder(text).Reverse().ToString();\n\
    \        return text == reversed;", "        string reverse = text.Reverse().ToString();\n\
    \        return text == reverse;", "        if (text == null || text.Length <=\
    \ 1)\n            return true;\n        var firstChar = text[0];\n        var\
    \ lastChar = text[text.Length - 1];\n        return firstChar == lastChar;", " \
    \       if (string.IsNullOrEmpty(text))\n            return true;\n        if\
    \ (text.Length == 1)\n            return true;\n        if (text.Length == 2)\n\
    \            return true;\n        if (text.Length % 2 == 0)\n            return\
    \ true;\n        var reversed = new StringBuilder(text).Reverse().ToString();\n\
    \        return text == reversed;", "        if (text == null || text.Length <=\
    \ 1)\n            return true;\n        var firstChar = text[0];\n        var\
    \ lastChar = text[text.Length - 1];\n        if (firstChar != lastChar)\n    \
    \        return false;\n        return IsPalindrome(text, 1, text.Length - 1);",
  "        if (text == null || text.Length <= 1) {\n            return true;\n   \
    \     }\n        char[] charArray = text.ToCharArray();\n        Array.Reverse(charArray);\n\
    \        return string.Equals(text, new string(charArray), StringComparison.Ordinal);",
  "        char[] charArray = text.ToCharArray();\n        int length = charArray.Length;\n\
    \        int half = length / 2;\n        for (int i = 0; i < half; i++) {\n  \
    \          if (charArray[i] != charArray[length - i - 1]) {\n                return\
    \ false;\n            }\n        }\n        return true;", "        char[] charArray\
    \ = text.ToCharArray();\n        int length = charArray.Length;\n        int half\
    \ = length / 2;\n        for (int i = 0; i < half; i++) {\n            if (charArray[i]\
    \ != charArray[length - i - 1]) {\n                return false;\n           \
    \ }\n        }\n        return true;", "        string reverse = text.Reverse().ToString();\n\
    \        return text == reverse;", "        char[] chars = text.ToCharArray();\n\
    \        Array.Reverse(chars);\n        return new string(chars) == text;", " \
    \       char[] charArray = text.ToCharArray();\n        Array.Reverse(charArray);\n\
    \        return new string(charArray) == text;", "        if (text == null ||\
    \ text.Length <= 1)\n            return true;\n        var reversed = new StringBuilder(text);\n\
    \        reversed.Reverse();\n        return text == reversed.ToString();", " \
    \       if (text == null || text.Length <= 1)\n            return true;\n    \
    \    var reversed = new StringBuilder(text).Reverse().ToString();\n        return\
    \ text == reversed;", "        if (text == null || text.Length <= 1) {\n     \
    \       return true;\n        }\n        char[] chars = text.ToCharArray();\n\
    \        Array.Sort(chars);\n        StringBuilder sb = new StringBuilder(text);\n\
    \        bool isPalindrome = true;\n        for (int i = 0; i < text.Length /\
    \ 2; i++) {\n            if (chars[i] != chars[text.Length - i - 1]) {\n     \
    \           isPalindrome = false;\n                break;\n            }\n   \
    \     }\n        return isPalindrome;", "        if (text == null || text.Length\
    \ <= 1)\n            return true;\n        char[] chars = text.ToCharArray();\n\
    \        Array.Reverse(chars);\n        return new string(chars) == text;", " \
    \       if (text == null || text.Length <= 1) {\n            return true;\n  \
    \      }\n        var firstChar = text[0];\n        var lastChar = text[text.Length\
    \ - 1];\n        if (firstChar != lastChar) {\n            return false;\n   \
    \     }\n        return IsPalindrome(text, 1, text.Length - 1);"]
stop_tokens:
- "\n    }\n"
