language: cs
name: HumanEval_111_histogram
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] = result[s] + 1;\n            }\n            else\n   \
    \         {\n                result.Add(s, 1L);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b61e241827994125ad164f214acbeab6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b61e241827994125ad164f214acbeab6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = test.Count(x => x == s);\n            if (result.ContainsKey(s))\n\
    \                result[s] = result[s] + count;\n            else\n          \
    \      result.Add(s, count);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpksagicw8.cs(26,42): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659799723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = histogram.ContainsKey(s) ? histogram[s] : 0;\n\
    \            histogram[s] = ++count;\n        }\n        return histogram;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2dbef283d86e4f9bbc91f7681bb55068>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2dbef283d86e4f9bbc91f7681bb55068>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            if (result.ContainsKey(letter)){\n                result[letter]++;\n\
    \            } else {\n                result.Add(letter, 1L);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50684498574043dfb835415bb7683b38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50684498574043dfb835415bb7683b38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            if (result.ContainsKey(letter)){\n                result[letter]++;\n\
    \            }\n            else{\n                result.Add(letter, 1L);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6930d82119ff48d6a50029359d7d270d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6930d82119ff48d6a50029359d7d270d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count;\n            if (result.TryGetValue(s, out count)){\n\
    \                result[s] = count + 1;\n            } else {\n              \
    \  result[s] = 1;\n            }\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a\
    \ b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42df3c018f6a4d7688db32780ee58987>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42df3c018f6a4d7688db32780ee58987>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ result = new Dictionary<string,long>();\n        foreach (var item in test.Split('\
    \ ')){\n            if (result.ContainsKey(item)){\n                result[item]++;\n\
    \            }\n            else{\n                result[item] = 1;\n       \
    \     }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc0a1c4db84245d686a5f8c14d5ab7b7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc0a1c4db84245d686a5f8c14d5ab7b7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799724
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = 1;\n            if (result.ContainsKey(s))\n\
    \            {\n                count = result[s];\n            }\n          \
    \  result[s] = count + 1;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73b1c8d0348f4026992f54ee7801377f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <73b1c8d0348f4026992f54ee7801377f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count))\n            {\n                result.Add(s, 1L);\n           \
    \ }\n            else\n            {\n                result[s] = count + 1;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2ced8157201484e809e1cc751b36204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2ced8157201484e809e1cc751b36204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count)) {\n                result.Add(s, 1L);\n            } else {\n  \
    \              result[s] = result[s] + 1L;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0bcfb6d1f19486caf35463ca93153a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0bcfb6d1f19486caf35463ca93153a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(word,\
    \ out count))\n            {\n                result[word] = count + 1;\n    \
    \        }\n            else\n            {\n                result[word] = 1;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45f90a8248c84df5b1b29abcd1fe8137>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45f90a8248c84df5b1b29abcd1fe8137>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ result = new Dictionary<string,long>();\n        foreach (var item in test.Split('\
    \ ')){\n            if (!result.ContainsKey(item)){\n                result.Add(item,\
    \ 1L);\n            }\n            else {\n                result[item]++;\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cea626b4d4a3479a9d0623883d25fcd5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cea626b4d4a3479a9d0623883d25fcd5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = 0;\n            foreach (char c in s.ToLower()){\n\
    \                if (result.ContainsKey(c)){\n                    count += result[c];\n\
    \                }\n                else{\n                    result.Add(c, 1);\n\
    \                }\n            }\n            result.Add(s, count);\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnrj0qmbp.cs(28,40): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnrj0qmbp.cs(29,37): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnrj0qmbp.cs(32,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659799723
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            } else {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ letters = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ '))\n            letters.Add(letter, 0);\n        foreach (var letter in letters)\n\
    \            letters[letter]++;\n        return letters;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk1e5hj_m.cs(28,21): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.KeyValuePair<string,
    long>'' to ''string''

    '
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            } else {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            if (result.ContainsKey(s)){\n                result[s] +=\
    \ 1;\n            } else {\n                result.Add(s, 1L);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3689a1ebea784d69b71c7b72cd01f653>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3689a1ebea784d69b71c7b72cd01f653>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = test.Count(c => c == s);\n        \
    \    if (result.ContainsKey(s))\n            {\n                result[s] = Math.Max(result[s],\
    \ count);\n            }\n            else\n            {\n                result.Add(s,\
    \ count);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc6y74s1m.cs(27,42): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = 1;\n            if (result.ContainsKey(s))\n\
    \            {\n                count = result[s];\n            }\n          \
    \  else\n            {\n                result.Add(s, count);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <255ee77a8b054452b9666ccaa8120f64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <255ee77a8b054452b9666ccaa8120f64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = result.ContainsKey(s) ? result[s] :\
    \ 1;\n            result[s] = count + 1;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26572399a50741d48056eefad2fcfce0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26572399a50741d48056eefad2fcfce0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            } else {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' '))\n        {\n            long count;\n            if (!histogram.TryGetValue(letter,\
    \ out count))\n            {\n                count = 0;\n            }\n    \
    \        histogram[letter] = count + 1;\n        }\n        return histogram;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f26d8122453a415ba283ee219d9cb1fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f26d8122453a415ba283ee219d9cb1fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result.Add(letter, 1L);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <671b7ef6dbb142b9b35cc97856b87425>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <671b7ef6dbb142b9b35cc97856b87425>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count;\n            if (result.TryGetValue(s, out count)){\n\
    \                result[s] = count + 1;\n            }\n            else{\n  \
    \              result[s] = 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87a42a2f11644759a867d848f49fdf9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87a42a2f11644759a867d848f49fdf9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            long count = 1;\n            if (result.ContainsKey(letter)){\n\
    \                count = result[letter];\n            }\n            result[letter]\
    \ = count + 1;\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27d47d16e9fb463e8707efbd20640613>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <27d47d16e9fb463e8707efbd20640613>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ letters = test.ToLowerInvariant().Split(' ');\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result.Add(letter, 1L);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07a22b100ef947aaacce9cdab4e03d1c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07a22b100ef947aaacce9cdab4e03d1c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ result = new Dictionary<string,long>();\n        foreach (var letter in test.ToLower())\
    \ {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result.Add(letter, 1L);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3w64nnrj.cs(26,36): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp3w64nnrj.cs(27,24): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp3w64nnrj.cs(29,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' ')){\n            long count;\n            if (histogram.TryGetValue(letter,\
    \ out count)){\n                histogram[letter] = count + 1;\n            }\n\
    \            else {\n                histogram[letter] = 1;\n            }\n \
    \       }\n        return histogram;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc985aff6b7548268f454db28656dcce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc985aff6b7548268f454db28656dcce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count;\n            if (result.TryGetValue(s, out count))\
    \ {\n                result[s] = count + 1;\n            } else {\n          \
    \      result[s] = 1;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b6006c5a4554a90a6ea27902eeacf70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b6006c5a4554a90a6ea27902eeacf70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            } else {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            long count = test.Count(x => x == letter);\n            if\
    \ (result.ContainsKey(letter)) {\n                result[letter] += count;\n \
    \           } else {\n                result.Add(letter, count);\n           \
    \ }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps8wl35si.cs(26,42): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = result.ContainsKey(s) ? result[s] : 0;\n    \
    \        result[s] = count + 1;\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b\
    \ b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3788c55ee7274da5a1639dbfebba0edf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3788c55ee7274da5a1639dbfebba0edf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            long count = 1;\n            foreach (char c in\
    \ word)\n            {\n                if (!result.ContainsKey(c))\n        \
    \        {\n                    result.Add(c, count);\n                }\n   \
    \             else\n                {\n                    result[c] += count;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpytlsldut.cs(30,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpytlsldut.cs(32,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpytlsldut.cs(36,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659824147
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1L);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fefc8a7ca6414ec49f8bb8b7be360dbe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fefc8a7ca6414ec49f8bb8b7be360dbe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = 1;\n            if (result.ContainsKey(s)){\n\
    \                count = result[s];\n            }\n            result[s] = count\
    \ + 1;\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c464e03636e484f9ebe9888e6c8b8b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c464e03636e484f9ebe9888e6c8b8b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = result.ContainsKey(s) ? result[s] : 0;\n    \
    \        result[s] = count + 1;\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b\
    \ b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3788c55ee7274da5a1639dbfebba0edf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3788c55ee7274da5a1639dbfebba0edf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = result.ContainsKey(s) ? result[s] :\
    \ 1;\n            result[s] = count;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <089a4bf04a2a42d197dac44d4c9ea2ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <089a4bf04a2a42d197dac44d4c9ea2ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ result = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ ')){\n            if (result.ContainsKey(letter)){\n                result[letter]++;\n\
    \            } else {\n                result.Add(letter, 1L);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <764f40a4797647f68c18c69e8205b4cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <764f40a4797647f68c18c69e8205b4cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            long count;\n            if (!result.TryGetValue(letter,\
    \ out count)) {\n                result.Add(letter, 1L);\n            } else {\n\
    \                result[letter] = count + 1;\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <61a2c25fbddf4c479b2d3e3a3454bae5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <61a2c25fbddf4c479b2d3e3a3454bae5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ letters = new List<string>();\n        foreach (var letter in test.Split(' '))\n\
    \            letters.Add(letter);\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var letter in letters)\n            if (result.ContainsKey(letter))\n\
    \                result[letter]++;\n            else\n                result.Add(letter,\
    \ 1L);\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25ddda05f08b4dbf91ad807405fa33a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25ddda05f08b4dbf91ad807405fa33a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = result.ContainsKey(s) ? result[s] :\
    \ 0L;\n            result[s] = count + 1L;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eff669ff8a6f40c89e38542a2ef9b2d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eff669ff8a6f40c89e38542a2ef9b2d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count;\n            if (result.TryGetValue(s, out count))\
    \ {\n                result[s] = count + 1;\n            } else {\n          \
    \      result[s] = 1;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b6006c5a4554a90a6ea27902eeacf70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4b6006c5a4554a90a6ea27902eeacf70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' '))\n        {\n            if (histogram.ContainsKey(letter))\n\
    \            {\n                histogram[letter]++;\n            }\n        \
    \    else\n            {\n                histogram[letter] = 1;\n           \
    \ }\n        }\n        return histogram;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d1c88cd4986648f0b6902c57f7d8e396>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d1c88cd4986648f0b6902c57f7d8e396>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = result.ContainsKey(s) ? result[s] :\
    \ 1;\n            result.Add(s, count + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same\
    \ key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x00031] in <0e9dbea7d75342a5a3cd804eac09e65a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0e9dbea7d75342a5a3cd804eac09e65a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with\
    \ the same key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x00031] in <0e9dbea7d75342a5a3cd804eac09e65a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0e9dbea7d75342a5a3cd804eac09e65a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(word,\
    \ out count))\n            {\n                result[word] = count + 1;\n    \
    \        }\n            else\n            {\n                result[word] = 1;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45f90a8248c84df5b1b29abcd1fe8137>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45f90a8248c84df5b1b29abcd1fe8137>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = result.ContainsKey(s) ? result[s] :\
    \ 1;\n            result.Add(s, count + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same\
    \ key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x00031] in <0e9dbea7d75342a5a3cd804eac09e65a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0e9dbea7d75342a5a3cd804eac09e65a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with\
    \ the same key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x00031] in <0e9dbea7d75342a5a3cd804eac09e65a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0e9dbea7d75342a5a3cd804eac09e65a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            if (result.ContainsKey(s)){\n                result[s] = result[s]\
    \ + 1;\n            }\n            else {\n                result.Add(s, 1L);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c168b4349ba4137a9da1c9c0e736697>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5c168b4349ba4137a9da1c9c0e736697>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count)) {\n                result.Add(s, 1L);\n            } else {\n  \
    \              result[s] = count + 1;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd151b430f2b421c9f6269c9cdfb5197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd151b430f2b421c9f6269c9cdfb5197>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ result = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(letter))\n            {\n\
    \                result[letter]++;\n            }\n            else\n        \
    \    {\n                result.Add(letter, 1L);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5097e485ff3c4ce89f0b7ed9d460272d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5097e485ff3c4ce89f0b7ed9d460272d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count;\n            if (!result.TryGetValue(s, out count))\
    \ {\n                result.Add(s, 1L);\n            } else {\n              \
    \  result[s] = result[s] + 1L;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a28706ac7b2b4c53b8fed16e7a466f70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a28706ac7b2b4c53b8fed16e7a466f70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] = result[s] + 1;\n            }\n            else\n   \
    \         {\n                result.Add(s, 1L);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b61e241827994125ad164f214acbeab6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b61e241827994125ad164f214acbeab6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            if (result.ContainsKey(s)){\n                result[s] +=\
    \ 1;\n            } else {\n                result.Add(s, 1);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70e67475753d440b923bd52ab7ae9b34>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70e67475753d440b923bd52ab7ae9b34>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count)) {\n                result.Add(s, 1L);\n            }\n         \
    \   else {\n                result[s] = result[s] + 1L;\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74f7e668341c4a5ba1d59fae9df4d3a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74f7e668341c4a5ba1d59fae9df4d3a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            } else {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count))\n            {\n                result.Add(s, 1L);\n           \
    \ }\n            else\n            {\n                result[s] = count + 1;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2ced8157201484e809e1cc751b36204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2ced8157201484e809e1cc751b36204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count)) {\n                result.Add(s, 1L);\n            } else {\n  \
    \              result[s] = result[s] + 1L;\n            }\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0bcfb6d1f19486caf35463ca93153a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a0bcfb6d1f19486caf35463ca93153a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(letter,\
    \ out count))\n            {\n                result[letter] = count + 1;\n  \
    \          }\n            else\n            {\n                result[letter]\
    \ = 1;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2cf2f8c6ee44d6ebd3ffd79e8c7ceef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2cf2f8c6ee44d6ebd3ffd79e8c7ceef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count)) {\n                result.Add(s, 1L);\n            } else {\n  \
    \              result[s]++;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a9b5fd90d1a45ff878e4d9f4d244958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a9b5fd90d1a45ff878e4d9f4d244958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = test.Count(c => c == s);\n        \
    \    if (count > result.Values.Max())\n            {\n                result =\
    \ new Dictionary<string,long>();\n            }\n            else\n          \
    \  {\n                result.Add(s, count);\n            }\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwrswvqp4.cs(27,42): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            if (result.ContainsKey(letter)){\n                result[letter]++;\n\
    \            }\n            else {\n                result.Add(letter, 1L);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b4a809ce4374f1ebc0d5503f8d989a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b4a809ce4374f1ebc0d5503f8d989a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ result = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ ')) {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result.Add(letter, 1L);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5cb8c3bfa8354d0cbc5c4a9efb0e0a03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5cb8c3bfa8354d0cbc5c4a9efb0e0a03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = result.ContainsKey(s) ? result[s] :\
    \ 0;\n            result[s] = count + 1;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47938a61c27a4c0192e12704027036a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47938a61c27a4c0192e12704027036a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count))\n            {\n                result.Add(s, 1L);\n           \
    \ }\n            else\n            {\n                result[s] = count + 1;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2ced8157201484e809e1cc751b36204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2ced8157201484e809e1cc751b36204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ '))\n        {\n            long count = test.Count(x => x == letter);\n   \
    \         if (result.ContainsKey(letter))\n            {\n                result[letter]\
    \ += count;\n            }\n            else\n            {\n                result.Add(letter,\
    \ count);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfzghot7p.cs(27,42): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''char'' and ''string''

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count;\n            if (histogram.TryGetValue(s, out\
    \ count)){\n                histogram[s] = count + 1;\n            }\n       \
    \     else{\n                histogram[s] = 1;\n            }\n        }\n   \
    \     return histogram;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b416e2965c44fb2bacf67a38b0c35eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b416e2965c44fb2bacf67a38b0c35eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (histogram.TryGetValue(s,\
    \ out count))\n            {\n                histogram[s] = count + 1;\n    \
    \        }\n            else\n            {\n                histogram[s] = 1;\n\
    \            }\n        }\n        return histogram;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd7307b3eec149bcaddbda5a4752efd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd7307b3eec149bcaddbda5a4752efd7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = result.ContainsKey(s) ? result[s] :\
    \ 1;\n            result.Add(s, count + 1);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same\
    \ key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x00031] in <0e9dbea7d75342a5a3cd804eac09e65a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0e9dbea7d75342a5a3cd804eac09e65a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with\
    \ the same key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x00031] in <0e9dbea7d75342a5a3cd804eac09e65a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0e9dbea7d75342a5a3cd804eac09e65a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' ')){\n            long count;\n            if (!histogram.TryGetValue(letter,\
    \ out count)){\n                histogram[letter] = 1;\n            }\n      \
    \      else{\n                histogram[letter]++;\n            }\n        }\n\
    \        return histogram;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90c23056cde747f3947cf0c28c402cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <90c23056cde747f3947cf0c28c402cbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            } else {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count;\n            if (result.TryGetValue(s, out count)){\n\
    \                result[s] = count + 1;\n            } else {\n              \
    \  result[s] = 1;\n            }\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a\
    \ b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42df3c018f6a4d7688db32780ee58987>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42df3c018f6a4d7688db32780ee58987>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            long count = 1;\n            foreach (char c in\
    \ word)\n            {\n                if (!result.ContainsKey(c))\n        \
    \        {\n                    result.Add(c, count);\n                }\n   \
    \             else\n                {\n                    result[c] += count;\n\
    \                }\n                count++;\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnxndm8bm.cs(30,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnxndm8bm.cs(32,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnxndm8bm.cs(36,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            if (result.ContainsKey(letter)){\n                result[letter]++;\n\
    \            } else {\n                result.Add(letter, 1L);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50684498574043dfb835415bb7683b38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50684498574043dfb835415bb7683b38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = result.ContainsKey(s) ? result[s] : 0;\n    \
    \        result[s] = count + 1;\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b\
    \ b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3788c55ee7274da5a1639dbfebba0edf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3788c55ee7274da5a1639dbfebba0edf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (histogram.TryGetValue(s,\
    \ out count))\n            {\n                histogram[s] = histogram.Values.Max()\
    \ + 1;\n            }\n            else\n            {\n                histogram[s]\
    \ = 1;\n            }\n        }\n        return histogram;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d55319faffb40d388278be7e02c0a1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d55319faffb40d388278be7e02c0a1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] = result[s] + 1;\n            }\n            else\n   \
    \         {\n                result.Add(s, 1L);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b61e241827994125ad164f214acbeab6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b61e241827994125ad164f214acbeab6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = result.ContainsKey(s) ? result[s] : 0;\n    \
    \        result[s] = count + 1;\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b\
    \ b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3788c55ee7274da5a1639dbfebba0edf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3788c55ee7274da5a1639dbfebba0edf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = 1;\n            if (result.ContainsKey(s))\n\
    \            {\n                count = result[s];\n            }\n          \
    \  else\n            {\n                result.Add(s, count);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <255ee77a8b054452b9666ccaa8120f64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <255ee77a8b054452b9666ccaa8120f64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            foreach (char letter in word)\n            {\n \
    \               if (!result.ContainsKey(letter))\n                {\n        \
    \            result.Add(letter, 1L);\n                }\n                else\n\
    \                {\n                    result[letter]++;\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6emtp3ws.cs(29,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp6emtp3ws.cs(31,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmp6emtp3ws.cs(35,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            long count;\n            if (!result.TryGetValue(letter, out\
    \ count)){\n                result.Add(letter, 1L);\n            }\n         \
    \   else {\n                result[letter]++;\n            }\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c82963ea70c948dbb6cb1244f2db73e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c82963ea70c948dbb6cb1244f2db73e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            }\n     \
    \       else {\n                result[s] = 1;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f73cc80f62b147ef8e0d5a965dd26303>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f73cc80f62b147ef8e0d5a965dd26303>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            long count;\n            if (!result.TryGetValue(letter, out\
    \ count)){\n                result.Add(letter, 1L);\n            }\n         \
    \   else {\n                result[letter]++;\n            }\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c82963ea70c948dbb6cb1244f2db73e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c82963ea70c948dbb6cb1244f2db73e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(word,\
    \ out count))\n            {\n                result.Add(word, 1L);\n        \
    \    }\n            else\n            {\n                result[word] += 1;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da7ec4c0cbee41bcbf8f7b0580928e0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <da7ec4c0cbee41bcbf8f7b0580928e0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            } else {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ result = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(letter))\n            {\n\
    \                result[letter]++;\n            }\n            else\n        \
    \    {\n                result[letter] = 1;\n            }\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebaeb43e780d47769259c5cfd0bb2583>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebaeb43e780d47769259c5cfd0bb2583>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = result.ContainsKey(s) ? result[s] : 0;\n    \
    \        result[s] = count + 1;\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b\
    \ b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3788c55ee7274da5a1639dbfebba0edf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3788c55ee7274da5a1639dbfebba0edf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            string key = s;\n            long count = 1;\n           \
    \ if (result.ContainsKey(key)){\n                count = result[key];\n      \
    \      }\n            result.Add(key,count);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same\
    \ key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x0003c] in <0460bc13ac3e4014a2d0870b72f509bc>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0460bc13ac3e4014a2d0870b72f509bc>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with\
    \ the same key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x0003c] in <0460bc13ac3e4014a2d0870b72f509bc>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0460bc13ac3e4014a2d0870b72f509bc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ result = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(letter))\n            {\n\
    \                result[letter]++;\n            }\n            else\n        \
    \    {\n                result[letter] = 1;\n            }\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebaeb43e780d47769259c5cfd0bb2583>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebaeb43e780d47769259c5cfd0bb2583>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = result.ContainsKey(s) ? result[s] :\
    \ 1;\n            result[s] = count;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <089a4bf04a2a42d197dac44d4c9ea2ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <089a4bf04a2a42d197dac44d4c9ea2ec>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ result = new Dictionary<string,long>();\n        foreach (var item in test.Split('\
    \ ')){\n            if (result.ContainsKey(item)){\n                result[item]\
    \ += 1;\n            }\n            else {\n                result.Add(item, 1);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ccdfdd46e144ce1b302a09b05b525fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ccdfdd46e144ce1b302a09b05b525fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            } else {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = 1;\n            if (result.ContainsKey(s))\n\
    \                count = result[s];\n            else\n                result.Add(s,\
    \ count);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <becfb6bd468d41d5810fdab0be9a8128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <becfb6bd468d41d5810fdab0be9a8128>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ letters = test.Split(' ');\n        var histogram = new Dictionary<string,long>();\n\
    \        foreach (var letter in letters) {\n            long count;\n        \
    \    if (histogram.TryGetValue(letter, out count)) {\n                histogram[letter]\
    \ = count + 1;\n            } else {\n                histogram[letter] = 1;\n\
    \            }\n        }\n        return histogram;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60362af13bb74ac98c27b44c4beb800d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <60362af13bb74ac98c27b44c4beb800d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(word,\
    \ out count))\n            {\n                result[word] = count + 1;\n    \
    \        }\n            else\n            {\n                result[word] = 1;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45f90a8248c84df5b1b29abcd1fe8137>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45f90a8248c84df5b1b29abcd1fe8137>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = test.Split(' ').Count(x => x == s);\n       \
    \     if (result.ContainsKey(s))\n                result[s] = result[s] + 1;\n\
    \            else\n                result.Add(s, count);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7990f196c549418199c1eeb0956b8230>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7990f196c549418199c1eeb0956b8230>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            } else {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc005e74e2d4f18818d6f11aacdf940>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string word in\
    \ test.Split(' ')){\n            long count = 1;\n            foreach (char letter\
    \ in word){\n                if (!histogram.ContainsKey(letter)){\n          \
    \          histogram.Add(letter, count);\n                }\n                else{\n\
    \                    histogram[letter] += count;\n                }\n        \
    \        count++;\n            }\n        }\n        return histogram;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprrbey8ta.cs(28,44): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmprrbey8ta.cs(29,35): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmprrbey8ta.cs(32,31): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] = result[s] + 1;\n            }\n            else\n   \
    \         {\n                result.Add(s, 1L);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b61e241827994125ad164f214acbeab6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b61e241827994125ad164f214acbeab6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            foreach (char c in word)\n            {\n      \
    \          if (!result.ContainsKey(c))\n                {\n                  \
    \  result.Add(c, 1L);\n                }\n                else\n             \
    \   {\n                    result[c]++;\n                }\n            }\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps3z6ohef.cs(29,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmps3z6ohef.cs(31,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmps3z6ohef.cs(35,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count)) {\n                result.Add(s, 1L);\n            } else {\n  \
    \              result[s]++;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a9b5fd90d1a45ff878e4d9f4d244958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a9b5fd90d1a45ff878e4d9f4d244958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            long count = 1;\n            foreach (char c in\
    \ word)\n            {\n                if (!result.ContainsKey(c))\n        \
    \        {\n                    result.Add(c, count);\n                }\n   \
    \             else\n                {\n                    result[c] += count;\n\
    \                }\n                count++;\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnxndm8bm.cs(30,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnxndm8bm.cs(32,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpnxndm8bm.cs(36,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count))\n            {\n                result.Add(s, 1L);\n           \
    \ }\n            else\n            {\n                result[s] = count + 1;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2ced8157201484e809e1cc751b36204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2ced8157201484e809e1cc751b36204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ letters = test.Split(' ');\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d053fdebc1f44fc591d8d5d7694d255e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d053fdebc1f44fc591d8d5d7694d255e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count;\n            if (!result.TryGetValue(s, out count)){\n\
    \                result.Add(s, 1L);\n            }\n            else {\n     \
    \           result[s]++;\n            }\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed9e097507d6480cbb1dd3b59ba9bc45>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed9e097507d6480cbb1dd3b59ba9bc45>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            string key = s;\n            long count = 1;\n           \
    \ if (result.ContainsKey(key)){\n                count = result[key];\n      \
    \      }\n            result.Add(key,count);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same\
    \ key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x0003c] in <0460bc13ac3e4014a2d0870b72f509bc>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0460bc13ac3e4014a2d0870b72f509bc>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with\
    \ the same key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x0003c] in <0460bc13ac3e4014a2d0870b72f509bc>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0460bc13ac3e4014a2d0870b72f509bc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ result = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ ')){\n            if (result.ContainsKey(letter)){\n                result[letter]++;\n\
    \            } else {\n                result.Add(letter, 1L);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <764f40a4797647f68c18c69e8205b4cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <764f40a4797647f68c18c69e8205b4cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = result.ContainsKey(s) ? result[s] : 0L;\n   \
    \         result[s] = count + 1L;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eb39154d8778455cad5b1d07ff70a0cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <eb39154d8778455cad5b1d07ff70a0cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = result.ContainsKey(s) ? result[s] :\
    \ 0;\n            result[s] = count + 1;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47938a61c27a4c0192e12704027036a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47938a61c27a4c0192e12704027036a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' ')){\n            long count;\n            if (!histogram.TryGetValue(letter,\
    \ out count)){\n                histogram[letter] = 1;\n            }\n      \
    \      else{\n                histogram[letter] += 1;\n            }\n       \
    \ }\n        return histogram;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ffc3ede528b4d3db2e9da11d11710e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ffc3ede528b4d3db2e9da11d11710e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' '))\n        {\n            long count;\n            if (histogram.TryGetValue(letter,\
    \ out count))\n            {\n                histogram[letter] = count + 1;\n\
    \            }\n            else\n            {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b545a72472ab4c35836c615b1f463457>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b545a72472ab4c35836c615b1f463457>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = result.ContainsKey(s) ? result[s] :\
    \ 0;\n            result[s] = count + 1;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47938a61c27a4c0192e12704027036a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47938a61c27a4c0192e12704027036a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            if (result.ContainsKey(s)){\n                result[s] = result[s]\
    \ + 1;\n            } else {\n                result.Add(s, 1L);\n           \
    \ }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c61254b76cfc49aabdb454e7d2be26fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c61254b76cfc49aabdb454e7d2be26fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ letters = test.Split(' ');\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var letter in letters) {\n            if (!result.ContainsKey(letter))\
    \ {\n                result.Add(letter, 1L);\n            } else {\n         \
    \       result[letter]++;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e7a29f2e64648798185447f6d685060>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9e7a29f2e64648798185447f6d685060>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            if (result.ContainsKey(s)){\n                result[s]++;\n\
    \            }\n            else{\n                result.Add(s, 1L);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f7d03abb893d40eb970644a13c1e2bad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f7d03abb893d40eb970644a13c1e2bad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ result = new Dictionary<string,long>();\n        foreach (var item in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(item))\n            {\n \
    \               result[item]++;\n            }\n            else\n           \
    \ {\n                result.Add(item, 1L);\n            }\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e513640382ac482f9c4a3c96b0ea7b07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e513640382ac482f9c4a3c96b0ea7b07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ result = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ ')){\n            if (!result.ContainsKey(letter)){\n                result.Add(letter,\
    \ 1L);\n            }\n            else {\n                result[letter]++;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3042e52a0ac4629ab58c75baf869ee6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3042e52a0ac4629ab58c75baf869ee6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count))\n            {\n                result.Add(s, 1L);\n           \
    \ }\n            else\n            {\n                result[s] = count + 1;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2ced8157201484e809e1cc751b36204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2ced8157201484e809e1cc751b36204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = 1;\n            if (result.ContainsKey(s))\n\
    \            {\n                count = result[s];\n            }\n          \
    \  else\n            {\n                result.Add(s, count);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <255ee77a8b054452b9666ccaa8120f64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <255ee77a8b054452b9666ccaa8120f64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            if (result.ContainsKey(s)){\n                result[s] = result[s]\
    \ + 1;\n            }\n            else{\n                result.Add(s, 1L);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07a904a326d84982982d77a9cc22457a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07a904a326d84982982d77a9cc22457a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            string key = s;\n            long count = 1;\n           \
    \ if (result.ContainsKey(key)){\n                count = result[key];\n      \
    \      }\n            result.Add(key, count);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same\
    \ key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x0003c] in <98e773e0e75e4f69ae2c9eb80c4ccd2f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <98e773e0e75e4f69ae2c9eb80c4ccd2f>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with\
    \ the same key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x0003c] in <98e773e0e75e4f69ae2c9eb80c4ccd2f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <98e773e0e75e4f69ae2c9eb80c4ccd2f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = 1;\n            if (result.ContainsKey(s)){\n\
    \                count = result[s];\n            }\n            result.Add(s,\
    \ count);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same\
    \ key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x00037] in <aba81ecbf25c402884e33d0d87090aee>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <aba81ecbf25c402884e33d0d87090aee>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with\
    \ the same key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x00037] in <aba81ecbf25c402884e33d0d87090aee>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <aba81ecbf25c402884e33d0d87090aee>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            if (result.ContainsKey(letter)){\n                result[letter]++;\n\
    \            }\n            else {\n                result.Add(letter, 1L);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b4a809ce4374f1ebc0d5503f8d989a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b4a809ce4374f1ebc0d5503f8d989a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(word,\
    \ out count))\n            {\n                result[word] = count + 1;\n    \
    \        }\n            else\n            {\n                result[word] = 1;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45f90a8248c84df5b1b29abcd1fe8137>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45f90a8248c84df5b1b29abcd1fe8137>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s]++;\n            }\n            else\n            {\n  \
    \              result.Add(s, 1L);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe3d137912404f09afce1d1b9c09b4ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe3d137912404f09afce1d1b9c09b4ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(letter,\
    \ out count))\n            {\n                count = 1;\n            }\n    \
    \        else\n            {\n                count++;\n            }\n      \
    \      result.Add(letter, count);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same\
    \ key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x0003e] in <78aaf8b56c244de390f8f66b9179f00c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <78aaf8b56c244de390f8f66b9179f00c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with\
    \ the same key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x0003e] in <78aaf8b56c244de390f8f66b9179f00c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <78aaf8b56c244de390f8f66b9179f00c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(word,\
    \ out count))\n            {\n                result[word] = count + 1;\n    \
    \        }\n            else\n            {\n                result[word] = 1;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45f90a8248c84df5b1b29abcd1fe8137>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45f90a8248c84df5b1b29abcd1fe8137>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            if (result.ContainsKey(letter)){\n                result[letter]++;\n\
    \            } else {\n                result.Add(letter, 1L);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50684498574043dfb835415bb7683b38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50684498574043dfb835415bb7683b38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = result.ContainsKey(s) ? result[s] :\
    \ 0;\n            result[s] = count + 1;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47938a61c27a4c0192e12704027036a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <47938a61c27a4c0192e12704027036a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786476796ed043ae834b524f14248da0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786476796ed043ae834b524f14248da0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            string key = s.ToLower();\n            long count;\n     \
    \       if (!result.TryGetValue(key, out count)){\n                result.Add(key,\
    \ 1L);\n            }\n            else {\n                result[key]++;\n  \
    \          }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <946c81744ed14ddfb5d20e830e5a7458>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <946c81744ed14ddfb5d20e830e5a7458>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = 1;\n            if (result.ContainsKey(s))\n\
    \            {\n                count = result[s];\n            }\n          \
    \  else\n            {\n                result.Add(s, count);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <255ee77a8b054452b9666ccaa8120f64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <255ee77a8b054452b9666ccaa8120f64>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824148
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            string key = s;\n            long count = 1;\n           \
    \ if (result.ContainsKey(key)){\n                count = result[key];\n      \
    \      }\n            result.Add(key,count);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentException: An item with the same\
    \ key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x0003c] in <0460bc13ac3e4014a2d0870b72f509bc>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0460bc13ac3e4014a2d0870b72f509bc>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentException: An item with\
    \ the same key has already been added. Key: b\n  at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert\
    \ (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)\
    \ [0x0015a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Collections.Generic.Dictionary`2[TKey,TValue].Add\
    \ (TKey key, TValue value) [0x00000] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n\
    \  at Problem.Histogram (System.String test) [0x0003c] in <0460bc13ac3e4014a2d0870b72f509bc>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <0460bc13ac3e4014a2d0870b72f509bc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659824149
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            string key = s.ToLower();\n            if (result.ContainsKey(key)){\n\
    \                result[key] += 1;\n            } else {\n                result[key]\
    \ = 1;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7889f0931636405ab4ab0d4c3975d5f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7889f0931636405ab4ab0d4c3975d5f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ letters = test.ToCharArray().Select(c => c.ToString()).ToList();\n        var\
    \ counts = letters.GroupBy(c => c).ToDictionary(g => g.Key, g => g.Count());\n\
    \        return counts.OrderByDescending(c => c.Value).FirstOrDefault();\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm7lgbez3.cs(26,16): error CS0029: Cannot implicitly convert type ''System.Collections.Generic.KeyValuePair<string,
    int>'' to ''System.Collections.Generic.Dictionary<string, long>''

    '
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            long count = 0;\n            foreach (char letter\
    \ in word)\n            {\n                if (result.ContainsKey(letter))\n \
    \               {\n                    result[letter] += 1;\n                }\n\
    \                else\n                {\n                    result.Add(letter,\
    \ 1);\n                }\n            }\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjd4tz7b6.cs(30,40): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpjd4tz7b6.cs(32,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpjd4tz7b6.cs(36,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpjd4tz7b6.cs(27,18): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    '
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' ')){\n            long count;\n            if (histogram.TryGetValue(letter,\
    \ out count)){\n                histogram[letter] = count + 1;\n            }\
    \ else {\n                histogram[letter] = 1;\n            }\n        }\n \
    \       return histogram;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d2e501af3b84997befa8d6143b60028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d2e501af3b84997befa8d6143b60028>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ letters = test.ToCharArray().ToList();\n        var letterCounts = new Dictionary<string,\
    \ long>();\n        foreach (var letter in letters) {\n            if (letterCounts.ContainsKey(letter))\
    \ {\n                letterCounts[letter]++;\n            } else {\n         \
    \       letterCounts[letter] = 1;\n            }\n        }\n        return letterCounts;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf3blxex8.cs(27,42): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpf3blxex8.cs(28,30): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpf3blxex8.cs(30,30): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659824150
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        var\
    \ result = new Dictionary<string,long>();\n        var words = test.Split(' ');\n\
    \        foreach (var word in words) {\n            foreach (var letter in word)\n\
    \                if (!result.ContainsKey(letter))\n                    result.Add(letter,\
    \ 1L);\n                else\n                    result[letter]++;\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Histogram((\"a b b a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c a b\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c d g\")).Equals((new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L},\
    \ {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r\
    \ t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpav9bft_q.cs(28,41): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpav9bft_q.cs(29,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpav9bft_q.cs(31,28): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659824150
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
    a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
    \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b\
    \ a\")).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
    \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67994ea83c3d415480e9f674b8655d7d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // >>> Histogram((\"\
    a b c\"))\n    // (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"\
    c\", 1L}})\n    // >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
    a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
    b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
    \    public static Dictionary<string,long> Histogram(string test) {\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Histogram((\"a b b a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"\
    a b c a b\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
    \    Debug.Assert(Histogram((\"a b c d g\")).Equals((new Dictionary<string,long>(){{\"\
    a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\
    r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"\
    g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\")).Equals((new Dictionary<string,long>(){{\"\
    b\", 4L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
    r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new\
    \ Dictionary<string,long>())));\n    Debug.Assert(Histogram((\"a\")).Equals((new\
    \ Dictionary<string,long>(){{\"a\", 1L}})));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a54792b32a7c4ab79658d99c75a328ea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799568
