language: cs
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0tx6j97m.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber > max) {\n                result.Add(currentMax);\n   \
    \             currentMax = currentNumber;\n                currentNumber = numbers.Skip(numbers.IndexOf(currentMax)\
    \ + 1).First();\n            }\n            max = currentMax;\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4e28266c7ae44ebad5b3ea7fd9cd275>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.First[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.RollingMax (System.Collections.Generic.List`1[T] numbers) [0x00047]\
    \ in <a4e28266c7ae44ebad5b3ea7fd9cd275>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00031] in <a4e28266c7ae44ebad5b3ea7fd9cd275>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.InvalidOperationException: Sequence contains no elements\n\
    \  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00047] in <a4e28266c7ae44ebad5b3ea7fd9cd275>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00031] in <a4e28266c7ae44ebad5b3ea7fd9cd275>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795404
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        bool isMax = true;\n\
    \        long currentMaxIndexValue = 0;\n        foreach (long number in numbers)\
    \ {\n            if (number == currentMax) {\n                currentMaxIndex++;\n\
    \                currentMaxIndexValue = currentMax;\n            }\n         \
    \   if (number > currentMax) {\n                currentMax = number;\n       \
    \         currentMaxIndex = currentMaxIndexValue;\n                isMax = true;\n\
    \            }\n            if (number == currentMax) {\n                currentMaxIndex++;\n\
    \                currentMaxIndexValue = currentMax;\n            }\n         \
    \   if (number < currentMax) {\n                currentMax = number;\n       \
    \         currentMaxIndex = currentMaxIndexValue;\n                isMax = false;\n\
    \            }\n            if (isMax) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <1c575b409dd34f4da23a9e328fe39c15>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <1c575b409dd34f4da23a9e328fe39c15>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <1c575b409dd34f4da23a9e328fe39c15>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <1c575b409dd34f4da23a9e328fe39c15>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795404
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers.First();\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   bool found = false;\n        bool foundIndex = false;\n        bool foundValue\
    \ = false;\n        long lastIndex = numbers.Count - 1;\n        long lastValue\
    \ = numbers.Last();\n        long lastValueIndex = numbers.IndexOf(lastValue);\n\
    \        bool foundLast = false;\n        bool foundLastIndex = false;\n     \
    \   bool foundLastValue = false;\n        long lastMax = 0;\n        long lastMaxIndex\
    \ = 0;\n        long lastMaxValue = numbers.First();\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMaxValue);\n        bool foundLastMax = false;\n     \
    \   bool foundLastMaxIndex = false;\n        bool foundLastMaxValue = false;\n\
    \        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n\
    \        bool foundLastMaxValue = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        bool foundLastMaxValueIndex = false;\n        long lastMaxValueIndex\
    \ = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n    \
    \    bool foundLastMaxValueIndex = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMaxValue);\n        bool foundLastMaxValueIndex = false;\n\
    \        bool foundLastMaxValueIndex = false;\n        long lastMaxValueIndex\
    \ = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n    \
    \    bool foundLastMaxValueIndex = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMaxValue);\n        bool foundLastMaxValueIndex = false;\n\
    \        bool foundLastMaxValueIndex = false;\n        long lastMaxValueIndex\
    \ = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n    \
    \    bool foundLastMaxValueIndex = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMaxValue);\n        bool foundLastMaxValueIndex = false;\n\
    \        bool foundLastMaxValueIndex = false;\n        long lastMaxValueIndex\
    \ = 0;\n        long lastMaxValueIndex = numbers.IndexOf(lastMaxValue);\n    \
    \    bool foundLastMaxValueIndex = false;\n        bool foundLastMaxValueIndex\
    \ = false;\n        long lastMaxValueIndex = 0;\n        long lastMaxValueIndex\
    \ = numbers.IndexOf(lastMax\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg76z773o.cs(70,57): error CS1026: ) expected

    /tmp/tmpg76z773o.cs(70,57): error CS1002: ; expected

    '
  timestamp: 1659795403
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMaxValue) {\n  \
    \              currentMaxValue = number;\n                currentMaxIndex = currentMaxValueIndex;\n\
    \            }\n            if (number == currentMaxValue) {\n               \
    \ currentMaxIndex++;\n            }\n            if (currentMaxIndex == currentMaxValueIndex)\
    \ {\n                currentMaxValue = numbers[currentMaxIndex];\n           \
    \     currentMaxIndex++;\n            }\n            if (currentMaxIndex == numbers.Count)\
    \ {\n                result.Add(currentMaxValue);\n                currentMaxIndex\
    \ = 0;\n                currentMaxValue = numbers[0];\n                currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy3mxpyrg.cs(29,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpy3mxpyrg.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpy3mxpyrg.cs(16,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    '
  timestamp: 1659795404
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8lyf0dvp.cs(39,104): error CS1002: ; expected

    '
  timestamp: 1659795251
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = numbers.First();\n        long currentNumberCount = 0;\n\
    \        foreach (long number in numbers) {\n            currentNumberCount++;\n\
    \            if (number > currentNumber) {\n                currentMax = currentNumber;\n\
    \                currentNumber = number;\n            } else if (number == currentNumber)\
    \ {\n                currentNumberCount++;\n            }\n            if (currentNumberCount\
    \ > max) {\n                max = currentNumberCount;\n            }\n       \
    \     result.Add(currentNumber);\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <4a5616b17d224d5db8a4cfb7bfbbfce8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4a5616b17d224d5db8a4cfb7bfbbfce8>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <4a5616b17d224d5db8a4cfb7bfbbfce8>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4a5616b17d224d5db8a4cfb7bfbbfce8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795404
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMax =\
    \ new List<long>();\n        long max = 0;\n        long currentMax = 0;\n   \
    \     long currentNumber = 0;\n        foreach (long number in numbers) {\n  \
    \          currentNumber = number;\n            currentMax = number;\n       \
    \     rollingMax.Add(number);\n            while (currentNumber > currentMax)\
    \ {\n                currentMax = currentNumber;\n                currentNumber\
    \ = currentNumber - currentMax;\n                rollingMax.Add(currentMax);\n\
    \            }\n        }\n        return rollingMax;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53b9543c2fcf451c9b141cee5fd42e2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <53b9543c2fcf451c9b141cee5fd42e2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795404
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        long sum = 0;\n        long lastSum = 0;\n   \
    \     long lastSum2 = 0;\n        long lastSum3 = 0;\n        long lastSum4 =\
    \ 0;\n        long lastSum5 = 0;\n        long lastSum6 = 0;\n        long lastSum7\
    \ = 0;\n        long lastSum8 = 0;\n        long lastSum9 = 0;\n        long lastSum10\
    \ = 0;\n        long lastSum11 = 0;\n        long lastSum12 = 0;\n        long\
    \ lastSum13 = 0;\n        long lastSum14 = 0;\n        long lastSum15 = 0;\n \
    \       long lastSum16 = 0;\n        long lastSum17 = 0;\n        long lastSum18\
    \ = 0;\n        long lastSum19 = 0;\n        long lastSum20 = 0;\n        long\
    \ lastSum21 = 0;\n        long lastSum22 = 0;\n        long lastSum23 = 0;\n \
    \       long lastSum24 = 0;\n        long lastSum25 = 0;\n        long lastSum26\
    \ = 0;\n        long lastSum27 = 0;\n        long lastSum28 = 0;\n        long\
    \ lastSum29 = 0;\n        long lastSum30 = 0;\n        long lastSum31 = 0;\n \
    \       long lastSum32 = 0;\n        long lastSum33 = 0;\n        long lastSum34\
    \ = 0;\n        long lastSum35 = 0;\n        long lastSum36 = 0;\n        long\
    \ lastSum37 = 0;\n        long lastSum38 = 0;\n        long lastSum39 = 0;\n \
    \       long lastSum40 = 0;\n        long lastSum41 = 0;\n        long lastSum42\
    \ = 0;\n        long lastSum43 = 0;\n        long lastSum44 = 0;\n        long\
    \ lastSum45 = 0;\n        long lastSum46 = 0;\n        long lastSum47 = 0;\n \
    \       long lastSum48 = 0;\n        long lastSum49 = 0;\n        long lastSum50\
    \ = 0;\n        long lastSum51 = 0;\n        long lastSum52 = 0;\n        long\
    \ lastSum53 = 0;\n        long lastSum54 = 0;\n        long lastSum55 = 0;\n \
    \       long lastSum56 = 0;\n        long lastSum57 = 0;\n        long lastSum58\
    \ = 0;\n        long lastSum59 = 0;\n        long lastSum60 = 0;\n        long\
    \ lastSum61 = 0;\n        long lastSum62 = 0;\n        long lastSum63 = 0;\n \
    \       long lastSum64 = 0;\n        long lastSum65 = 0;\n        long lastSum66\
    \ = 0;\n        long lastSum67 = 0;\n        long lastSum68 = 0;\n        long\
    \ lastSum69 = 0;\n        long \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9bha2d3n.cs(88,13): error CS1001: Identifier expected

    /tmp/tmp9bha2d3n.cs(88,13): error CS1002: ; expected

    '
  timestamp: 1659795403
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquares = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquares = 0;\n\
    \        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n\
    \        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquare\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpytjecpza.cs(39,104): error CS1002: ; expected

    '
  timestamp: 1659795403
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long maxIndex = 0;\n        long\
    \ currentMax = numbers[0];\n        long currentMaxIndex = 0;\n        bool isMax\
    \ = true;\n        for (int i = 1; i < numbers.Count; i++) {\n            if (numbers[i]\
    \ > currentMax) {\n                currentMax = numbers[i];\n                currentMaxIndex\
    \ = i;\n            }\n            if (numbers[i] == currentMax) {\n         \
    \       isMax = true;\n            }\n            if (numbers[i] > currentMax)\
    \ {\n                isMax = false;\n            }\n            if (isMax) {\n\
    \                max = numbers[i];\n                maxIndex = i;\n          \
    \  }\n        }\n        result.Add(max);\n        result.Add(maxIndex);\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <2ddfa59fdfea40019a8916c07f4ef080>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2ddfa59fdfea40019a8916c07f4ef080>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <2ddfa59fdfea40019a8916c07f4ef080>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2ddfa59fdfea40019a8916c07f4ef080>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795404
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = -1;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            if (number == currentMaxValue) {\n                max.Add(number);\n\
    \            }\n        }\n        if (currentMaxIndex > 0) {\n            max.Add(currentMaxValue);\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <23561fb26a254b0f94e759e60ced4f7a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <23561fb26a254b0f94e759e60ced4f7a>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <23561fb26a254b0f94e759e60ced4f7a>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <23561fb26a254b0f94e759e60ced4f7a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795404
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 2;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n    \
    \        if (number > max) {\n                max = number;\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else if (number == max) {\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else {\n                if (currentMaxIndex == numbers.IndexOf(number))\
    \ {\n                    currentMax = currentMax;\n                    currentMaxIndex\
    \ = numbers.IndexOf(number);\n                }\n                else {\n    \
    \                result.Add(currentMax);\n                    max = number;\n\
    \                    currentMax = number;\n                    currentMaxIndex\
    \ = numbers.IndexOf(number);\n                }\n            }\n        }\n  \
    \      result.Add(currentMax);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <61b37d89124245adb880ea8250104cef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <61b37d89124245adb880ea8250104cef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795404
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndex2\
    \ = -1;\n        long currentMaxIndex3 = -1;\n        long currentMaxIndex4 =\
    \ -1;\n        long currentMaxIndex5 = -1;\n        long currentMaxIndex6 = -1;\n\
    \        long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n  \
    \      long currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n   \
    \     long currentMaxIndex11 = -1;\n        long currentMaxIndex12 = -1;\n   \
    \     long currentMaxIndex13 = -1;\n        long currentMaxIndex14 = -1;\n   \
    \     long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n   \
    \     long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n   \
    \     long currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n   \
    \     long currentMaxIndex21 = -1;\n        long currentMaxIndex22 = -1;\n   \
    \     long currentMaxIndex23 = -1;\n        long currentMaxIndex24 = -1;\n   \
    \     long currentMaxIndex25 = -1;\n        long currentMaxIndex26 = -1;\n   \
    \     long currentMaxIndex27 = -1;\n        long currentMaxIndex28 = -1;\n   \
    \     long currentMaxIndex29 = -1;\n        long currentMaxIndex30 = -1;\n   \
    \     long currentMaxIndex31 = -1;\n        long currentMaxIndex32 = -1;\n   \
    \     long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n   \
    \     long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n   \
    \     long currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n   \
    \     long currentMaxIndex39 = -1;\n        long currentMaxIndex40 = -1;\n   \
    \     long currentMaxIndex41 = -1;\n        long currentMaxIndex42 = -1;\n   \
    \     long currentMaxIndex43 = -1;\n        long currentMaxIndex44 = -1;\n   \
    \     long currentMaxIndex45 = -1;\n        long currentMaxIndex46 = -1;\n   \
    \     long currentMaxIndex47 = -1;\n        long currentMaxIndex48 = -1;\n   \
    \     long currentMaxIndex49 = -1;\n        long currentMaxIndex50 = -1;\n   \
    \     long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n   \
    \     long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n   \
    \     long currentMaxIndex55 = -1;\n        long currentMax\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpar9oky_n.cs(72,24): error CS1002: ; expected

    '
  timestamp: 1659795251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        bool isMax = true;\n        foreach (long\
    \ number in numbers) {\n            if (number > max) {\n                max =\
    \ number;\n                currentMax = number;\n                currentMaxIndex\
    \ = numbers.IndexOf(number);\n            }\n            if (number == max) {\n\
    \                isMax = true;\n            }\n            else {\n          \
    \      isMax = false;\n            }\n            result.Add(number);\n      \
    \  }\n        if (isMax) {\n            result.Add(max);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2379f37b69144ef383ebe7e850fdaa26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2379f37b69144ef383ebe7e850fdaa26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795404
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long current = numbers.First();\n\
    \        long previous = current;\n        long currentMax = current;\n      \
    \  foreach (long number in numbers) {\n            if (number > currentMax) {\n\
    \                result.Add(currentMax);\n                currentMax = number;\n\
    \            }\n            max = Math.Max(max, currentMax);\n            previous\
    \ = current;\n            current = number;\n        }\n        result.Add(currentMax);\n\
    \        result.Add(max);\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <3f6ad8feecd44d72adc6e0434d66985d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <3f6ad8feecd44d72adc6e0434d66985d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <3f6ad8feecd44d72adc6e0434d66985d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <3f6ad8feecd44d72adc6e0434d66985d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795404
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber > currentMax) {\n                currentMax = currentNumber;\n\
    \                currentNumber -= 1;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84291b548cda4ff89468937abed54e93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84291b548cda4ff89468937abed54e93>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795404
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMax =\
    \ new List<long>();\n        long rollingMaxElement = numbers.First();\n     \
    \   rollingMax.Add(rollingMaxElement);\n        numbers.Remove(rollingMaxElement);\n\
    \        foreach (long number in numbers) {\n            if (number > rollingMaxElement)\
    \ {\n                rollingMaxElement = number;\n                rollingMax.Add(rollingMaxElement);\n\
    \            }\n        }\n        return rollingMax;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <abe7059f69794e868804c7ae29586164>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <abe7059f69794e868804c7ae29586164>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <abe7059f69794e868804c7ae29586164>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <abe7059f69794e868804c7ae29586164>:0\
    \ \n"
  stdout: ''
  timestamp: 1659795404
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n  \
    \      long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n\
    \        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSum\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmput9358za.cs(44,24): error CS1002: ; expected

    '
  timestamp: 1659795249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        long currentMaxIndex = -1;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentMaxIndex = result.Count;\n            }\n            if\
    \ (number == currentMax) {\n                result.Add(number);\n            }\n\
    \        }\n        if (currentMaxIndex > 0) {\n            result.Add(currentMax);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <a68c9b04ed04404885db93d3b81bd451>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <a68c9b04ed04404885db93d3b81bd451>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <a68c9b04ed04404885db93d3b81bd451>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <a68c9b04ed04404885db93d3b81bd451>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long maxIndex = 0;\n        long\
    \ currentMax = numbers[0];\n        long currentMaxIndex = 0;\n        long currentMaxValue\
    \ = numbers[0];\n        foreach (long number in numbers) {\n            if (number\
    \ > currentMax) {\n                currentMax = number;\n                currentMaxIndex\
    \ = maxIndex;\n            }\n            if (number > currentMaxValue) {\n  \
    \              currentMaxValue = number;\n            }\n            if (number\
    \ == currentMax) {\n                maxIndex = currentMaxIndex;\n            }\n\
    \        }\n        result.Add(currentMax);\n        result.Add(currentMaxValue);\n\
    \        result.Add(maxIndex);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <0bedd795595d459385c951dd9381b92e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0bedd795595d459385c951dd9381b92e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <0bedd795595d459385c951dd9381b92e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0bedd795595d459385c951dd9381b92e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber > 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber--;\n            }\n         \
    \   result.Add(currentMax);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3e7fd417229451a8bc75cb2fbe4f4d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3e7fd417229451a8bc75cb2fbe4f4d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9g9xislp.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long curMax = 0;\n        long\
    \ curMaxIndex = 0;\n        long curMaxValue = numbers[0];\n        long curMaxIndexValue\
    \ = numbers[0];\n        bool isMax = true;\n        for (int i = 0; i < numbers.Count;\
    \ i++) {\n            if (numbers[i] > curMaxValue) {\n                max = curMaxValue;\n\
    \                curMaxIndex = i;\n                curMaxValue = numbers[i];\n\
    \                curMaxIndexValue = numbers[i];\n                isMax = true;\n\
    \            } else if (numbers[i] == curMaxValue) {\n                isMax =\
    \ false;\n            }\n            if (isMax) {\n                result.Add(curMaxValue);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <7c3f3ce27e1e4ffe8db9017bdda98981>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <7c3f3ce27e1e4ffe8db9017bdda98981>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <7c3f3ce27e1e4ffe8db9017bdda98981>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <7c3f3ce27e1e4ffe8db9017bdda98981>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.First();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = max.Count;\n            }\n   \
    \         max.Add(number);\n        }\n        max.Add(currentMaxValue);\n   \
    \     max.Add(currentMaxIndex);\n        return max;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <840725dd14c24a779c43462b3ddebe24>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <840725dd14c24a779c43462b3ddebe24>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <840725dd14c24a779c43462b3ddebe24>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <840725dd14c24a779c43462b3ddebe24>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMaxValue - currentMax;\n            }\n            if (number > max)\
    \ {\n                max = number;\n                currentMax = number;\n   \
    \             currentMaxValue = number;\n                currentMaxIndex = currentMaxValue\
    \ - currentMax;\n            }\n            result.Add(number);\n        }\n \
    \       result.Add(max);\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <5df0ff32eeab413690de319f98ba79c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5df0ff32eeab413690de319f98ba79c9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <5df0ff32eeab413690de319f98ba79c9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5df0ff32eeab413690de319f98ba79c9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxElement = numbers.First();\n        long currentMax = maxElement;\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n            }\n            max.Add(currentMax);\n\
    \        }\n        return max;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <6377d1b16e90457b843a0c9d56cdecfd>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <6377d1b16e90457b843a0c9d56cdecfd>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <6377d1b16e90457b843a0c9d56cdecfd>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <6377d1b16e90457b843a0c9d56cdecfd>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMax =\
    \ new List<long>();\n        long rollingMaxValue = numbers.First();\n       \
    \ rollingMax.Add(rollingMaxValue);\n        foreach (long number in numbers) {\n\
    \            if (number > rollingMaxValue) {\n                rollingMaxValue\
    \ = number;\n                rollingMax.Add(rollingMaxValue);\n            }\n\
    \        }\n        return rollingMax;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <528a095e1ecc4fd2bbf3d760b8e38940>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <528a095e1ecc4fd2bbf3d760b8e38940>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <528a095e1ecc4fd2bbf3d760b8e38940>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <528a095e1ecc4fd2bbf3d760b8e38940>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.Index\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8n7jx01k.cs(55,50): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifference\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb787lu9l.cs(38,56): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.First();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = maxIndex;\n            }\n    \
    \        if (number == currentMaxValue) {\n                maxIndex++;\n     \
    \       }\n        }\n        max.Add(currentMaxValue);\n        max.Add(currentMaxIndex);\n\
    \        return max;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1mqdcqri.cs(21,35): error CS0103: The name ''maxIndex'' does not exist
    in the current context

    /tmp/tmp1mqdcqri.cs(24,17): error CS0103: The name ''maxIndex'' does not exist
    in the current context

    '
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5dge4tw.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9g9xislp.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var rollingMax = new List<long>();\n\
    \        var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n\
    \        var rollingMaxIndexes = new List<int>();\n        while (rollingMaxIndex\
    \ < numbers.Count) {\n            var rollingMaxIndex = rollingMaxIndex + 1;\n\
    \            var rollingMaxValue = numbers.ElementAt(rollingMaxIndex);\n     \
    \       if (rollingMaxValue > rollingMaxValue) {\n                rollingMaxValue\
    \ = rollingMaxValue;\n            }\n            rollingMaxIndexes.Add(rollingMaxIndex);\n\
    \            if (rollingMaxIndex < numbers.Count) {\n                rollingMaxValue\
    \ = numbers.ElementAt(rollingMaxIndex);\n                if (rollingMaxValue >\
    \ rollingMaxValue) {\n                    rollingMaxValue = rollingMaxValue;\n\
    \                }\n                rollingMaxIndexes.Add(rollingMaxIndex);\n\
    \            }\n            rollingMax.Add(rollingMaxValue);\n        }\n    \
    \    return rollingMax;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqwfsjkvb.cs(19,17): error CS0136: A local or parameter named ''rollingMaxIndex''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpqwfsjkvb.cs(19,35): error CS0841: Cannot use local variable ''rollingMaxIndex''
    before it is declared

    /tmp/tmpqwfsjkvb.cs(20,17): error CS0136: A local or parameter named ''rollingMaxValue''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9g9xislp.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n     \
    \   long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n        long\
    \ currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n        long currentMaxIndex7\
    \ = 0;\n        long currentMaxIndex8 = 0;\n        long currentMaxIndex9 = 0;\n\
    \        long currentMaxIndex10 = 0;\n        long currentMaxIndex11 = 0;\n  \
    \      long currentMaxIndex12 = 0;\n        long currentMaxIndex13 = 0;\n    \
    \    long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n      \
    \  long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n        long\
    \ currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n        long currentMaxIndex20\
    \ = 0;\n        long currentMaxIndex21 = 0;\n        long currentMaxIndex22 =\
    \ 0;\n        long currentMaxIndex23 = 0;\n        long currentMaxIndex24 = 0;\n\
    \        long currentMaxIndex25 = 0;\n        long currentMaxIndex26 = 0;\n  \
    \      long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n    \
    \    long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n      \
    \  long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n        long\
    \ currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n        long currentMaxIndex35\
    \ = 0;\n        long currentMaxIndex36 = 0;\n        long currentMaxIndex37 =\
    \ 0;\n        long currentMaxIndex38 = 0;\n        long currentMaxIndex39 = 0;\n\
    \        long currentMaxIndex40 = 0;\n        long currentMaxIndex41 = 0;\n  \
    \      long currentMaxIndex42 = 0;\n        long currentMaxIndex43 = 0;\n    \
    \    long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n      \
    \  long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n        long\
    \ currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n        long currentMaxIndex50\
    \ = 0;\n        long currentMaxIndex51 = 0;\n        long currentMaxIndex52 =\
    \ 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54 = 0;\n\
    \        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 = 0;\n  \
    \      long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n    \
    \    long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n      \
    \  long currentMaxIndex61 = 0;\n        long current\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr32at3ki.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9g9xislp.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var rollingMax = new List<long>();\n\
    \        var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n\
    \        var rollingMaxIndexes = new List<int>();\n        rollingMaxIndexes.Add(0);\n\
    \        while (rollingMaxIndex < numbers.Count) {\n            var rollingMaxValue\
    \ = numbers.ElementAt(rollingMaxIndex);\n            if (rollingMaxValue > rollingMaxValue)\
    \ {\n                rollingMaxValue = rollingMaxValue;\n            }\n     \
    \       rollingMax.Add(rollingMaxValue);\n            rollingMaxIndexes.Add(rollingMaxIndex);\n\
    \            rollingMaxIndex++;\n        }\n        var rollingMaxIndexes = new\
    \ List<int>();\n        rollingMaxIndexes.Add(0);\n        while (rollingMaxIndex\
    \ < numbers.Count) {\n            var rollingMaxValue = numbers.ElementAt(rollingMaxIndex);\n\
    \            if (rollingMaxValue > rollingMaxValue) {\n                rollingMaxValue\
    \ = rollingMaxValue;\n            }\n            rollingMax.Add(rollingMaxValue);\n\
    \            rollingMaxIndexes.Add(rollingMaxIndex);\n            rollingMaxIndex++;\n\
    \        }\n        return rollingMax;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq8ezief3.cs(20,17): error CS0136: A local or parameter named ''rollingMaxValue''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpq8ezief3.cs(28,13): error CS0128: A local variable or function named ''rollingMaxIndexes''
    is already defined in this scope

    /tmp/tmpq8ezief3.cs(31,17): error CS0136: A local or parameter named ''rollingMaxValue''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpq8ezief3.cs(21,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    /tmp/tmpq8ezief3.cs(22,17): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    /tmp/tmpq8ezief3.cs(32,17): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    /tmp/tmpq8ezief3.cs(33,17): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    '
  timestamp: 1659823664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      if (number > currentMax) {\n                currentMax = number;\n    \
    \            currentNumber = number;\n            }\n            else {\n    \
    \            currentNumber = number;\n            }\n            if (number >\
    \ max) {\n                max = number;\n            }\n            result.Add(number);\n\
    \        }\n        result.Add(max);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45fafc70d4ec458a90b45ad8ca95650d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45fafc70d4ec458a90b45ad8ca95650d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9g9xislp.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMax =\
    \ new List<long>();\n        long max = 0;\n        long currentMax = 0;\n   \
    \     long currentNumber = 0;\n        long currentNumber2 = 0;\n        long\
    \ currentNumber3 = 0;\n        long currentNumber4 = 0;\n        long currentNumber5\
    \ = 0;\n        long currentNumber6 = 0;\n        long currentNumber7 = 0;\n \
    \       long currentNumber8 = 0;\n        long currentNumber9 = 0;\n        long\
    \ currentNumber10 = 0;\n        long currentNumber11 = 0;\n        long currentNumber12\
    \ = 0;\n        long currentNumber13 = 0;\n        long currentNumber14 = 0;\n\
    \        long currentNumber15 = 0;\n        long currentNumber16 = 0;\n      \
    \  long currentNumber17 = 0;\n        long currentNumber18 = 0;\n        long\
    \ currentNumber19 = 0;\n        long currentNumber20 = 0;\n        long currentNumber21\
    \ = 0;\n        long currentNumber22 = 0;\n        long currentNumber23 = 0;\n\
    \        long currentNumber24 = 0;\n        long currentNumber25 = 0;\n      \
    \  long currentNumber26 = 0;\n        long currentNumber27 = 0;\n        long\
    \ currentNumber28 = 0;\n        long currentNumber29 = 0;\n        long currentNumber30\
    \ = 0;\n        long currentNumber31 = 0;\n        long currentNumber32 = 0;\n\
    \        long currentNumber33 = 0;\n        long currentNumber34 = 0;\n      \
    \  long currentNumber35 = 0;\n        long currentNumber36 = 0;\n        long\
    \ currentNumber37 = 0;\n        long currentNumber38 = 0;\n        long currentNumber39\
    \ = 0;\n        long currentNumber40 = 0;\n        long currentNumber41 = 0;\n\
    \        long currentNumber42 = 0;\n        long currentNumber43 = 0;\n      \
    \  long currentNumber44 = 0;\n        long currentNumber45 = 0;\n        long\
    \ currentNumber46 = 0;\n        long currentNumber47 = 0;\n        long currentNumber48\
    \ = 0;\n        long currentNumber49 = 0;\n        long currentNumber50 = 0;\n\
    \        long currentNumber51 = 0;\n        long currentNumber52 = 0;\n      \
    \  long currentNumber53 = 0;\n        long currentNumber54 = 0;\n        long\
    \ currentNumber55 = 0;\n        long currentNumber56 = 0;\n        long currentNumber57\
    \ = 0;\n        long currentNumber58 = 0;\n        long currentNumber59 = 0;\n\
    \        long currentNumber60 = 0;\n        long currentNumber61 = 0;\n      \
    \  long currentNumber62 = 0;\n        long currentNumber63 = 0;\n        long\
    \ currentNumber64 = 0;\n        long currentNumber65 = 0;\n        long currentNumber66\
    \ = 0;\n        long currentNumber67 = 0;\n        long currentNumber68 = 0;\n\
    \        long currentNumber69 = 0;\n        long currentNumber70 = 0;\n      \
    \  long currentNumber\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpukko1ct6.cs(87,27): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxElement = numbers.First();\n        long currentElement = numbers.First();\n\
    \        long currentMax = numbers.First();\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMax) {\n                currentMax = number;\n\
    \            }\n            if (number > maxElement) {\n                maxElement\
    \ = number;\n            }\n            if (number > currentElement) {\n     \
    \           currentElement = number;\n            }\n        }\n        max.Add(maxElement);\n\
    \        max.Add(currentMax);\n        max.Add(currentElement);\n        return\
    \ max;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e0e08b62968346979144ccdde0f6ed07>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <e0e08b62968346979144ccdde0f6ed07>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <e0e08b62968346979144ccdde0f6ed07>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <e0e08b62968346979144ccdde0f6ed07>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMax =\
    \ new List<long>();\n        long max = 0;\n        long currentMax = 0;\n   \
    \     long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowers = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowers = 0;\n\
    \        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares =\
    \ 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp72_osjyc.cs(35,117): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       bool found = false;\n        foreach (long number in numbers) {\n    \
    \        if (number == currentMax) {\n                found = true;\n        \
    \        currentMaxIndex++;\n                currentMaxIndexValue = number;\n\
    \            }\n            if (found) {\n                max.Add(currentMaxIndex);\n\
    \                max.Add(currentMaxIndexValue);\n                found = false;\n\
    \            }\n            currentMax = number;\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f25408496d4e4c5482b6edc12e66d434>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <f25408496d4e4c5482b6edc12e66d434>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <f25408496d4e4c5482b6edc12e66d434>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <f25408496d4e4c5482b6edc12e66d434>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5dge4tw.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5dge4tw.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = 0;\n        long currentMaxValueIndex\
    \ = 0;\n        long currentMaxValueValue = 0;\n        long currentMaxValueValueIndex\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number > max)\
    \ {\n                max = number;\n                currentMax = max;\n      \
    \          currentMaxIndex = numbers.IndexOf(number);\n                currentMaxValue\
    \ = number;\n                currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \                currentMaxValueValue = currentMaxValue;\n                currentMaxValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValue);\n            }\n            if (number\
    \ == currentMaxValue) {\n                currentMaxValueValue++;\n           \
    \     if (currentMaxValueValue > currentMaxValueIndex) {\n                   \
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n                 \
    \   currentMaxValueValue = currentMaxValue;\n                    currentMaxValueValueIndex\
    \ = numbers.IndexOf(currentMaxValueValue);\n                }\n            }\n\
    \            result.Add(currentMaxValue);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea87f0466aed43caab39f5b00fd731ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea87f0466aed43caab39f5b00fd731ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long maxIndex = 0;\n        foreach\
    \ (long number in numbers) {\n            if (number > max) {\n              \
    \  max = number;\n                maxIndex = result.Count;\n            }\n  \
    \          result.Add(number);\n        }\n        result.Add(max);\n        result.Add(maxIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <43d1248e679a458c9cb1b8132894f23f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <43d1248e679a458c9cb1b8132894f23f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5dge4tw.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long n in numbers) {\n            if (n > max) {\n                max = n;\n\
    \                cur = n;\n            }\n            else if (n == max) {\n \
    \               cur++;\n            }\n            result.Add(cur);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e9227dc9ced46158d27785276d47a86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e9227dc9ced46158d27785276d47a86>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long maxIndex = 0;\n        long\
    \ currentMax = 0;\n        long currentMaxIndex = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number > max) {\n                max = number;\n\
    \                maxIndex = currentMaxIndex;\n            }\n            currentMax\
    \ = number;\n            currentMaxIndex = result.Count;\n            result.Add(number);\n\
    \        }\n        if (maxIndex == currentMaxIndex) {\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d93be640091e4dc4af65a4bc946791c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d93be640091e4dc4af65a4bc946791c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5dge4tw.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            if (number > max) {\n          \
    \      max = number;\n            }\n            if (number == currentMaxValue)\
    \ {\n                currentMaxIndex++;\n            }\n            result.Add(number);\n\
    \        }\n        result.Add(max);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <7f51894ade684ba68f5e77651b27949c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <7f51894ade684ba68f5e77651b27949c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <7f51894ade684ba68f5e77651b27949c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <7f51894ade684ba68f5e77651b27949c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        long currentSum = 0;\n        foreach (long\
    \ number in numbers) {\n            currentNumber = number;\n            currentSum\
    \ = number;\n            while (currentSum > 0) {\n                currentSum\
    \ -= currentNumber;\n                currentMax = currentNumber;\n           \
    \     result.Add(currentMax);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <401d88499ef746d4b5840d6776415ed9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <401d88499ef746d4b5840d6776415ed9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMaxValue) {\n  \
    \              currentMaxValue = number;\n                currentMaxIndex = currentMaxValueIndex;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \            }\n        }\n        result.Add(max);\n        foreach (long number\
    \ in numbers) {\n            if (number > currentMaxValue) {\n               \
    \ currentMaxValue = number;\n                currentMaxIndex = currentMaxValueIndex;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \            }\n            if (number == currentMaxValue) {\n               \
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n                result.Add(currentMaxValue);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <0d1264a9b09a47b79aa420337629b4e3>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0d1264a9b09a47b79aa420337629b4e3>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <0d1264a9b09a47b79aa420337629b4e3>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <0d1264a9b09a47b79aa420337629b4e3>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var rollingMax = new List<long>();\n\
    \        var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n\
    \        var rollingMaxTimes = 1;\n        var rollingMaxTimesIndex = 0;\n   \
    \     var rollingMaxTimesValue = numbers.First();\n        var rollingMaxTimesTimes\
    \ = 1;\n        var rollingMaxTimesTimesIndex = 0;\n        var rollingMaxTimesTimesValue\
    \ = numbers.First();\n        var rollingMaxTimesTimesTimes = 1;\n        var\
    \ rollingMaxTimesTimesTimesIndex = 0;\n        var rollingMaxTimesTimesTimesValue\
    \ = numbers.First();\n        var rollingMaxTimesTimesTimesTimesIndex = 0;\n \
    \       var rollingMaxTimesTimesTimesTimesValue = numbers.First();\n        var\
    \ rollingMaxTimesTimesTimesTimesTimesIndex = 0;\n        var rollingMaxTimesTimesTimesTimesTimesValue\
    \ = numbers.First();\n        var rollingMaxTimesTimesTimesTimesTimesTimesIndex\
    \ = 0;\n        var rollingMaxTimesTimesTimesTimesTimesTimesValue = numbers.First();\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesIndex = 0;\n       \
    \ var rollingMaxTimesTimesTimesTimesTimesTimesTimesValue = numbers.First();\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesIndex = 0;\n  \
    \      var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesValue = numbers.First();\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesIndex = 0;\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesValue = numbers.First();\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesIndex = 0;\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesValue = numbers.First();\n\
    \        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesTimesIndex\
    \ = 0;\n        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesTimesValue\
    \ = numbers.First();\n        var rollingMaxTimesTimesTimesTimesTimesTimesTimesTimesTimesTimesTime\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa9q_wki0.cs(42,77): error CS1002: ; expected

    '
  timestamp: 1659823664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n    \
    \        if (number > max) {\n                max = number;\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else {\n                if (number == currentMax) {\n\
    \                    currentMaxIndex++;\n                }\n                else\
    \ {\n                    result.Add(currentMax);\n                    currentMax\
    \ = number;\n                    currentMaxIndex = numbers.IndexOf(number);\n\
    \                }\n            }\n        }\n        result.Add(currentMax);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45b01d548142459f8e4abc3ea22b6570>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45b01d548142459f8e4abc3ea22b6570>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMax;\n            }\n            if (number > max) {\n            \
    \    max = number;\n            }\n            if (number == currentMaxValue)\
    \ {\n                currentMaxIndex++;\n            }\n            result.Add(currentMaxValue);\n\
    \        }\n        result.Add(max);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <d04632ab351a41bea67c1e10f8c5a48f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <d04632ab351a41bea67c1e10f8c5a48f>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <d04632ab351a41bea67c1e10f8c5a48f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <d04632ab351a41bea67c1e10f8c5a48f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 2;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ foreach (long number in numbers) {\n            if (number > max) {\n      \
    \          max = number;\n                currentMax = number;\n            }\n\
    \            else if (number == max) {\n                currentMax++;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1c9639c2d60d4055bf2953c730b7927a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1c9639c2d60d4055bf2953c730b7927a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n    \
    \        if (number > max) {\n                max = number;\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else if (number == max) {\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else {\n                result.Add(max);\n           \
    \     max = currentMax;\n                currentMax = number;\n              \
    \  currentMaxIndex = numbers.IndexOf(number);\n            }\n        }\n    \
    \    result.Add(max);\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1e27e304a314f8bbfa4de5dc85e7edd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f1e27e304a314f8bbfa4de5dc85e7edd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentSum = 0;\n            currentSumOfSquares = 0;\n\
    \            while (currentNumber != 0) {\n                currentSum += currentNumber;\n\
    \                currentSumOfSquares += currentNumber * currentNumber;\n     \
    \           currentNumber--;\n            }\n            if (currentSum > currentMax)\
    \ {\n                max = currentSum;\n                currentMax = currentSum;\n\
    \            }\n            if (currentSumOfSquares > currentMax * currentMax)\
    \ {\n                max = currentSumOfSquares;\n                currentMax =\
    \ currentSumOfSquares;\n            }\n            result.Add(max);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21b02cf34fc1492aafde1df971b8ade4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <21b02cf34fc1492aafde1df971b8ade4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n    \
    \        if (number > max) {\n                max = number;\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else if (number == max) {\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else {\n                if (currentMaxIndex < numbers.IndexOf(number))\
    \ {\n                    currentMax = number;\n                    currentMaxIndex\
    \ = numbers.IndexOf(number);\n                }\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0b7e938bcb348da82852ec1b7632ce9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0b7e938bcb348da82852ec1b7632ce9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers = 0;\n       \
    \ long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n        long\
    \ currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp86w_6b9b.cs(17,14): warning CS0219: The variable ''currentSum'' is assigned
    but its value is never used

    /tmp/tmp86w_6b9b.cs(18,14): warning CS0219: The variable ''currentSumOfSquares''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(19,14): warning CS0219: The variable ''currentSumOfPowers''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(20,14): warning CS0219: The variable ''currentSumOfPowersOfSquares''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(21,14): warning CS0219: The variable ''currentSumOfPowersOfPowers''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(22,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfSquares''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(23,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowers''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(24,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfSquares''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(25,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfPowers''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(26,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfPowersOfSquares''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(27,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfPowersOfPowers''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(28,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(29,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(30,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares''
    is assigned but its va'
  timestamp: 1659823664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      if (number > currentMax) {\n                currentMax = number;\n    \
    \            currentNumber = number;\n            }\n            else if (number\
    \ == currentMax) {\n                currentNumber++;\n            }\n        \
    \    else {\n                result.Add(currentMax);\n                currentMax\
    \ = number;\n                currentNumber = number;\n            }\n        }\n\
    \        result.Add(currentMax);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8131e6edb124cbea92c40a53380d4b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8131e6edb124cbea92c40a53380d4b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers.Max();\n        long current = numbers.First();\n\
    \        long rollingMax = current;\n        bool found = false;\n        foreach\
    \ (long number in numbers) {\n            if (number > rollingMax) {\n       \
    \         rollingMax = number;\n                found = true;\n            }\n\
    \            if (found) {\n                result.Add(rollingMax);\n         \
    \       found = false;\n            }\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5350afb146534474bcf8c79df2ea1df1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5350afb146534474bcf8c79df2ea1df1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <5350afb146534474bcf8c79df2ea1df1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5350afb146534474bcf8c79df2ea1df1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMax =\
    \ new List<long>();\n        long max = 0;\n        long currentMax = 0;\n   \
    \     long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareRoots = 0;\n        long currentSumOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquares = 0;\n        long currentSumOfPowersOfSquareRoots\
    \ = 0;\n        long currentSumOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfSquareRoots = 0;\n        long\
    \ currentSumOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquareRoots = 0;\n  \
    \      long currentSumOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfSquareRoots =\
    \ 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n \
    \       long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquareRoots\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquareRoots\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquareRoots\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5jl88drz.cs(43,80): error CS1002: ; expected

    '
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi73jn7u8.cs(19,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(20,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(21,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(22,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(23,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(24,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(25,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(26,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(27,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(28,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(29,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(30,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(31,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(32,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpi73jn7u8.cs(33,14): error CS0128: A local variable '
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = numbers.First();\n        long currentMaxIndexValue2 = numbers.First();\n\
    \        long currentMaxIndexValue3 = numbers.First();\n        long currentMaxIndexValue4\
    \ = numbers.First();\n        long currentMaxIndexValue5 = numbers.First();\n\
    \        long currentMaxIndexValue6 = numbers.First();\n        long currentMaxIndexValue7\
    \ = numbers.First();\n        long currentMaxIndexValue8 = numbers.First();\n\
    \        long currentMaxIndexValue9 = numbers.First();\n        long currentMaxIndexValue10\
    \ = numbers.First();\n        long currentMaxIndexValue11 = numbers.First();\n\
    \        long currentMaxIndexValue12 = numbers.First();\n        long currentMaxIndexValue13\
    \ = numbers.First();\n        long currentMaxIndexValue14 = numbers.First();\n\
    \        long currentMaxIndexValue15 = numbers.First();\n        long currentMaxIndexValue16\
    \ = numbers.First();\n        long currentMaxIndexValue17 = numbers.First();\n\
    \        long currentMaxIndexValue18 = numbers.First();\n        long currentMaxIndexValue19\
    \ = numbers.First();\n        long currentMaxIndexValue20 = numbers.First();\n\
    \        long currentMaxIndexValue21 = numbers.First();\n        long currentMaxIndexValue22\
    \ = numbers.First();\n        long currentMaxIndexValue23 = numbers.First();\n\
    \        long currentMaxIndexValue24 = numbers.First();\n        long currentMaxIndexValue25\
    \ = numbers.First();\n        long currentMaxIndexValue26 = numbers.First();\n\
    \        long currentMaxIndexValue27 = numbers.First();\n        long currentMaxIndexValue28\
    \ = numbers.First();\n        long currentMaxIndexValue29 = numbers.First();\n\
    \        long currentMaxIndexValue30 = numbers.First();\n        long currentMaxIndexValue31\
    \ = numbers.First();\n        long currentMaxIndexValue32 = numbers.First();\n\
    \        long currentMaxIndexValue33 = numbers.First();\n        long currentMaxIndexValue34\
    \ = numbers.First();\n        long currentMaxIndexValue35 = numbers.First();\n\
    \        long currentMaxIndexValue36 = numbers.First();\n        long currentMaxIndexValue37\
    \ = numbers.First();\n        long currentMaxIndexValue38 = numbers.First();\n\
    \        long currentMaxIndexValue39 = numbers.First();\n        long currentMaxIndexValue40\
    \ = numbers.First();\n        long currentMaxIndexValue41 = numbers.First();\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_y92ur6m.cs(17,14): warning CS0219: The variable ''currentMaxIndex'' is
    assigned but its value is never used

    /tmp/tmp_y92ur6m.cs(13,30): error CS0161: ''Problem.RollingMax(List<long>)'':
    not all code paths return a value

    '
  timestamp: 1659823664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMax =\
    \ new List<long>();\n        long max = 0;\n        long currentMax = 0;\n   \
    \     long currentNumber = 0;\n        foreach (long number in numbers) {\n  \
    \          currentNumber = number;\n            currentMax = number;\n       \
    \     rollingMax.Add(number);\n            while (currentNumber != 0) {\n    \
    \            currentNumber = currentNumber / 2;\n                currentMax =\
    \ Math.Max(currentMax, currentNumber);\n                rollingMax.Add(currentMax);\n\
    \            }\n        }\n        return rollingMax;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e11886db0929498d862c5bcaf468ec23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e11886db0929498d862c5bcaf468ec23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMax;\n            }\n            if (number > max) {\n            \
    \    max = number;\n                currentMax = number;\n                currentMaxIndex\
    \ = currentMax;\n            }\n            if (number == currentMaxValue) {\n\
    \                currentMaxIndex++;\n            }\n            result.Add(currentMaxIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <edc336107d9f4525b786a0981df6bd00>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <edc336107d9f4525b786a0981df6bd00>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <edc336107d9f4525b786a0981df6bd00>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <edc336107d9f4525b786a0981df6bd00>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var rollingMax = new List<long>();\n\
    \        var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n\
    \        var rollingMaxIndexes = new List<int>();\n        rollingMaxIndexes.Add(0);\n\
    \        while (rollingMaxIndex < numbers.Count) {\n            var rollingMaxIndexes\
    \ = new List<int>();\n            rollingMaxIndexes.Add(0);\n            while\
    \ (rollingMaxIndex < numbers.Count && rollingMaxIndexes.Count < numbers.Count)\
    \ {\n                var rollingMaxValue = numbers.ElementAt(rollingMaxIndex);\n\
    \                var rollingMaxIndexes = new List<int>();\n                rollingMaxIndexes.Add(0);\n\
    \                while (rollingMaxIndex < numbers.Count && rollingMaxIndexes.Count\
    \ < numbers.Count) {\n                    var rollingMaxIndexesCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopy = rollingMaxIndexes.ToArray();\n\
    \                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = rollingMaxIndexes.ToArray();\n                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = rollingMaxIndexes.ToArray();\n                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = rollingMaxIndexes.ToArray();\n                    var rollingMaxIndexesCopyCopyCopyCopyCopyCopyCopyCopyCopyCopy\
    \ = rollingMaxIndexes.ToArray();\n                    var rollingMaxIndex\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpet77m3_m.cs(43,40): error CS1002: ; expected

    /tmp/tmpet77m3_m.cs(45,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpet77m3_m.cs(52,2): error CS1513: } expected

    '
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndex2\
    \ = -1;\n        long currentMaxIndex3 = -1;\n        long currentMaxIndex4 =\
    \ -1;\n        long currentMaxIndex5 = -1;\n        long currentMaxIndex6 = -1;\n\
    \        long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n  \
    \      long currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n   \
    \     long currentMaxIndex11 = -1;\n        long currentMaxIndex12 = -1;\n   \
    \     long currentMaxIndex13 = -1;\n        long currentMaxIndex14 = -1;\n   \
    \     long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n   \
    \     long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n   \
    \     long currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n   \
    \     long currentMaxIndex21 = -1;\n        long currentMaxIndex22 = -1;\n   \
    \     long currentMaxIndex23 = -1;\n        long currentMaxIndex24 = -1;\n   \
    \     long currentMaxIndex25 = -1;\n        long currentMaxIndex26 = -1;\n   \
    \     long currentMaxIndex27 = -1;\n        long currentMaxIndex28 = -1;\n   \
    \     long currentMaxIndex29 = -1;\n        long currentMaxIndex30 = -1;\n   \
    \     long currentMaxIndex31 = -1;\n        long currentMaxIndex32 = -1;\n   \
    \     long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n   \
    \     long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n   \
    \     long currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n   \
    \     long currentMaxIndex39 = -1;\n        long currentMaxIndex40 = -1;\n   \
    \     long currentMaxIndex41 = -1;\n        long currentMaxIndex42 = -1;\n   \
    \     long currentMaxIndex43 = -1;\n        long currentMaxIndex44 = -1;\n   \
    \     long currentMaxIndex45 = -1;\n        long currentMaxIndex46 = -1;\n   \
    \     long currentMaxIndex47 = -1;\n        long currentMaxIndex48 = -1;\n   \
    \     long currentMaxIndex49 = -1;\n        long currentMaxIndex50 = -1;\n   \
    \     long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n   \
    \     long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n   \
    \     long currentMaxIndex55 = -1;\n        long currentMax\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpar9oky_n.cs(72,24): error CS1002: ; expected

    '
  timestamp: 1659795251
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplwno9n97.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 2;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      if (number > currentMax) {\n                currentMax = number;\n    \
    \            currentNumber = number;\n            }\n            else if (number\
    \ == currentMax) {\n                currentNumber++;\n            }\n        \
    \    else {\n                result.Add(currentMax);\n                currentMax\
    \ = number;\n                currentNumber = number;\n            }\n        }\n\
    \        result.Add(currentMax);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8131e6edb124cbea92c40a53380d4b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8131e6edb124cbea92c40a53380d4b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    long currentMaxValueIndex = numbers[0];\n        bool isMax = true;\n   \
    \     for (int i = 1; i < numbers.Count; i++) {\n            long value = numbers[i];\n\
    \            if (value > currentMaxValue) {\n                currentMaxValue =\
    \ value;\n                currentMaxIndex = i;\n            }\n            if\
    \ (value == currentMaxValue) {\n                currentMaxIndex++;\n         \
    \   }\n            if (value > currentMaxValue) {\n                isMax = false;\n\
    \            }\n            if (isMax) {\n                result.Add(currentMaxValue);\n\
    \                currentMaxValue = currentMaxIndex;\n                currentMaxIndex\
    \ = currentMaxValue;\n                currentMaxValue = numbers[i];\n        \
    \        currentMaxValueIndex = i;\n                isMax = true;\n          \
    \  }\n        }\n        result.Add(currentMaxValue);\n        result.Add(currentMaxIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <fce6798df6f1415e8b6d15e96cf3c0a2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <fce6798df6f1415e8b6d15e96cf3c0a2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <fce6798df6f1415e8b6d15e96cf3c0a2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <fce6798df6f1415e8b6d15e96cf3c0a2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 10;\n     \
    \       }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f0976a468d644789075c43c9b284fd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f0976a468d644789075c43c9b284fd2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n    \
    \        if (number > max) {\n                max = number;\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else {\n                currentMax = currentMax;\n   \
    \             currentMaxIndex = currentMaxIndex;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d62bf954ed3147c18f403ac767eeb64b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d62bf954ed3147c18f403ac767eeb64b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers.First();\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndexInSequence = numbers.IndexOf(currentMaxValue, currentMaxValueIndex\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequence = numbers.IndexOf(currentMaxValue,\
    \ currentMaxValueIndexInSequence + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = numbers.IndexOf(currentMaxValue, currentMaxValueIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ + 1);\n        long currentMaxValueIndexInSequenceInSequenceIn\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm6v0xk4y.cs(32,56): error CS1002: ; expected

    '
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n    \
    \        currentMax = number;\n            currentMaxIndex = 0;\n            while\
    \ (currentMaxIndex < numbers.Count && currentMax < numbers[currentMaxIndex]) {\n\
    \                currentMax = numbers[currentMaxIndex];\n                currentMaxIndex++;\n\
    \            }\n            result.Add(currentMax);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt0l455vp.cs(21,76): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpt0l455vp.cs(22,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpt0l455vp.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            if (number == currentMaxValue) {\n\
    \                currentMaxIndex++;\n            }\n            if (number > max)\
    \ {\n                max = number;\n            }\n            result.Add(number);\n\
    \        }\n        result.Add(max);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <ca5409e52836474fbad65aabfd5572e2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <ca5409e52836474fbad65aabfd5572e2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <ca5409e52836474fbad65aabfd5572e2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <ca5409e52836474fbad65aabfd5572e2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        bool isMax = true;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptxpfopyb.cs(17,14): warning CS0219: The variable ''currentMaxIndex'' is
    assigned but its value is never used

    /tmp/tmptxpfopyb.cs(18,14): warning CS0219: The variable ''currentMaxIndexValue''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(19,14): warning CS0219: The variable ''isMax'' is assigned
    but its value is never used

    /tmp/tmptxpfopyb.cs(20,14): warning CS0219: The variable ''currentMaxIndexValue2''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(21,14): warning CS0219: The variable ''currentMaxIndexValue3''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(22,14): warning CS0219: The variable ''currentMaxIndexValue4''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(23,14): warning CS0219: The variable ''currentMaxIndexValue5''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(24,14): warning CS0219: The variable ''currentMaxIndexValue6''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(25,14): warning CS0219: The variable ''currentMaxIndexValue7''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(26,14): warning CS0219: The variable ''currentMaxIndexValue8''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(27,14): warning CS0219: The variable ''currentMaxIndexValue9''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(28,14): warning CS0219: The variable ''currentMaxIndexValue10''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(29,14): warning CS0219: The variable ''currentMaxIndexValue11''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(30,14): warning CS0219: The variable ''currentMaxIndexValue12''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(31,14): warning CS0219: The variable ''currentMaxIndexValue13''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(32,14): warning CS0219: The variable ''currentMaxIndexValue14''
    is assigned but its value is never used

    /tm'
  timestamp: 1659823665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long maxIndex = -1;\n        long\
    \ current = 0;\n        foreach (long number in numbers) {\n            if (number\
    \ > max) {\n                max = number;\n                maxIndex = current;\n\
    \            }\n            current = current + 1;\n        }\n        result.Add(max);\n\
    \        result.Add(maxIndex);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94fe08dee8ba49dc84e40dc884735ba1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94fe08dee8ba49dc84e40dc884735ba1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long current = numbers.First();\n\
    \        long sum = 0;\n        foreach (long n in numbers) {\n            sum\
    \ += n;\n            if (sum > max) {\n                max = sum;\n          \
    \  }\n            result.Add(max);\n            current = n;\n            sum\
    \ = 0;\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <9e0dd1a4afd34cdf8a09ec209e6f6323>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <9e0dd1a4afd34cdf8a09ec209e6f6323>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <9e0dd1a4afd34cdf8a09ec209e6f6323>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <9e0dd1a4afd34cdf8a09ec209e6f6323>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex\
    \ = numbers.IndexOf(currentMaxValue);\n        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n\
    \        long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n     \
    \   long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        long\
    \ currentMaxValueIndex = numbers.Index\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8n7jx01k.cs(55,50): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxElement = numbers.First();\n        long currentMaxElement =\
    \ maxElement;\n        foreach (long number in numbers) {\n            if (number\
    \ > maxElement) {\n                max.Add(currentMaxElement);\n             \
    \   currentMaxElement = number;\n            }\n            else if (number ==\
    \ maxElement) {\n                currentMaxElement = number;\n            }\n\
    \        }\n        max.Add(currentMaxElement);\n        return max;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <6e8b8221289b4c20a0834276cd4771df>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <6e8b8221289b4c20a0834276cd4771df>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <6e8b8221289b4c20a0834276cd4771df>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <6e8b8221289b4c20a0834276cd4771df>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = currentMaxIndexValue;\n\
    \            }\n            currentMaxIndex++;\n            currentMaxIndexValue\
    \ = currentMaxIndex;\n        }\n        max.Add(currentMax);\n        numbers.RemoveAt(currentMaxIndex);\n\
    \        RollingMax(numbers, max, currentMax);\n        return max;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnp9epb3.cs(28,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpjnp9epb3.cs(29,9): error CS1501: No overload for method ''RollingMax''
    takes 3 arguments

    '
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long current = numbers.First();\n\
    \        long previous = numbers.First();\n        foreach (long number in numbers)\
    \ {\n            if (number > current) {\n                max = number;\n    \
    \        }\n            else if (number == current) {\n                max = Math.Max(max,\
    \ number);\n            }\n            else {\n                if (max != 0) {\n\
    \                    result.Add(max);\n                    max = 0;\n        \
    \        }\n                result.Add(number);\n            }\n            current\
    \ = number;\n            previous = number;\n        }\n        if (max != 0)\
    \ {\n            result.Add(max);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <594b36920da847e8858e6d9f4c594e3d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <594b36920da847e8858e6d9f4c594e3d>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <594b36920da847e8858e6d9f4c594e3d>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <594b36920da847e8858e6d9f4c594e3d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long maxIndex = 0;\n        long\
    \ currentMax = numbers.First();\n        long currentMaxIndex = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = currentMaxIndex;\n\
    \            }\n            if (number > max) {\n                max = number;\n\
    \                maxIndex = currentMaxIndex;\n            }\n            currentMaxIndex++;\n\
    \        }\n        result.Add(max);\n        result.Add(maxIndex);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <a6a8ea547fec46acab7285368948e898>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <a6a8ea547fec46acab7285368948e898>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <a6a8ea547fec46acab7285368948e898>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <a6a8ea547fec46acab7285368948e898>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long cur = numbers.First();\n\
    \        long curMax = numbers.First();\n        foreach (long n in numbers) {\n\
    \            if (n > cur) {\n                result.Add(cur);\n              \
    \  curMax = cur;\n                cur = n;\n            }\n            else if\
    \ (n == cur) {\n                curMax = n;\n            }\n            else {\n\
    \                if (curMax < n) {\n                    result.Add(curMax);\n\
    \                    curMax = n;\n                }\n                else {\n\
    \                    result.Add(n);\n                }\n            }\n      \
    \  }\n        result.Add(curMax);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <78b0f550c1a345328a469b2de3e21fd0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <78b0f550c1a345328a469b2de3e21fd0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <78b0f550c1a345328a469b2de3e21fd0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <78b0f550c1a345328a469b2de3e21fd0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentSum = 0;\n        foreach (long number in numbers) {\n  \
    \          currentSum += number;\n            if (currentSum > currentMax) {\n\
    \                max.Add(currentMax);\n                currentMax = currentSum;\n\
    \            }\n        }\n        max.Add(currentMax);\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b14ca5e715714abeb85b409f4f1dd551>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b14ca5e715714abeb85b409f4f1dd551>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b14ca5e715714abeb85b409f4f1dd551>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b14ca5e715714abeb85b409f4f1dd551>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        long currentCount = 0;\n        foreach (long\
    \ number in numbers) {\n            currentCount += 1;\n            currentSum\
    \ += number;\n            if (currentSum > currentMax) {\n                currentMax\
    \ = currentSum;\n            }\n            if (currentCount == numbers.Count)\
    \ {\n                result.Add(currentMax);\n                currentMax = 0;\n\
    \                currentSum = 0;\n                currentCount = 0;\n        \
    \    }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <971f40f3b5004d30bf7ac50157c62ff9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <971f40f3b5004d30bf7ac50157c62ff9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMax =\
    \ new List<long>();\n        long rollingMaxElement = numbers.First();\n     \
    \   long rollingMaxCount = 1;\n        foreach (long number in numbers) {\n  \
    \          if (number > rollingMaxElement) {\n                rollingMax.Add(rollingMaxElement);\n\
    \                rollingMaxElement = number;\n                rollingMaxCount\
    \ = 1;\n            } else {\n                rollingMaxCount++;\n           \
    \ }\n        }\n        rollingMax.Add(rollingMaxElement);\n        return rollingMax;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <d842e4a5c4a0481f8f88c7a7d74dbe47>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <d842e4a5c4a0481f8f88c7a7d74dbe47>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <d842e4a5c4a0481f8f88c7a7d74dbe47>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <d842e4a5c4a0481f8f88c7a7d74dbe47>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplwno9n97.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers.Max();\n        long currentMax =\
    \ max;\n        long currentMaxIndex = -1;\n        long currentMaxValue = numbers.ElementAt(0);\n\
    \        long currentMaxValueIndex = -1;\n        bool isMax = true;\n       \
    \ for (int i = 1; i < numbers.Count; i++) {\n            long value = numbers.ElementAt(i);\n\
    \            if (value > currentMaxValue) {\n                currentMaxValue =\
    \ value;\n                currentMaxIndex = i;\n                currentMaxValueIndex\
    \ = i;\n                isMax = true;\n            } else if (value < currentMaxValue)\
    \ {\n                currentMaxValue = value;\n                currentMaxIndex\
    \ = i;\n                currentMaxValueIndex = i;\n                isMax = false;\n\
    \            }\n            if (isMax) {\n                result.Add(currentMaxValue);\n\
    \                currentMaxValue = currentMaxValue;\n                currentMaxIndex\
    \ = currentMaxIndex;\n                currentMaxValueIndex = currentMaxValueIndex;\n\
    \                isMax = true;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <aabe33a751aa4e7596a9f72fbbb6af3b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <aabe33a751aa4e7596a9f72fbbb6af3b>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <aabe33a751aa4e7596a9f72fbbb6af3b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <aabe33a751aa4e7596a9f72fbbb6af3b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquares = 0;\n        long currentSumOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquares = 0;\n     \
    \   long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowers = 0;\n        long\
    \ currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares = 0;\n       \
    \ long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers =\
    \ 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowers\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSquaresOfPowersOfSqu\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn7p7k0as.cs(34,139): error CS1002: ; expected

    '
  timestamp: 1659823665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber > 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber--;\n            }\n         \
    \   result.Add(currentMax);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3e7fd417229451a8bc75cb2fbe4f4d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3e7fd417229451a8bc75cb2fbe4f4d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n    \
    \        currentMax = number;\n            currentMaxIndex = 0;\n            while\
    \ (currentMaxIndex < numbers.Count - 1) {\n                currentMax += numbers[currentMaxIndex\
    \ + 1];\n                currentMaxIndex++;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9hg42k5l.cs(22,39): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp9hg42k5l.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var rollingMax = new List<long>();\n\
    \        var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n\
    \        var rollingMaxTimes = 0;\n        foreach (var number in numbers) {\n\
    \            if (number > rollingMaxValue) {\n                rollingMaxValue\
    \ = number;\n                rollingMaxTimes = 1;\n                rollingMax.Add(number);\n\
    \            }\n            else if (number == rollingMaxValue) {\n          \
    \      rollingMaxTimes++;\n            }\n            else {\n               \
    \ rollingMax.Add(rollingMaxValue);\n                rollingMaxValue = number;\n\
    \                rollingMaxTimes = 1;\n            }\n            if (rollingMaxTimes\
    \ == rollingMaxIndex) {\n                rollingMax.Add(rollingMaxValue);\n  \
    \              rollingMaxTimes = 1;\n            }\n            rollingMaxIndex++;\n\
    \        }\n        return rollingMax;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00009] in <c4742d517a3343ca80adeb7b578f37e5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c4742d517a3343ca80adeb7b578f37e5>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00009] in <c4742d517a3343ca80adeb7b578f37e5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <c4742d517a3343ca80adeb7b578f37e5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5dge4tw.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowers = 0;\n       \
    \ long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n        long\
    \ currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp86w_6b9b.cs(17,14): warning CS0219: The variable ''currentSum'' is assigned
    but its value is never used

    /tmp/tmp86w_6b9b.cs(18,14): warning CS0219: The variable ''currentSumOfSquares''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(19,14): warning CS0219: The variable ''currentSumOfPowers''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(20,14): warning CS0219: The variable ''currentSumOfPowersOfSquares''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(21,14): warning CS0219: The variable ''currentSumOfPowersOfPowers''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(22,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfSquares''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(23,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowers''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(24,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfSquares''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(25,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfPowers''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(26,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfPowersOfSquares''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(27,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfPowersOfPowers''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(28,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(29,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers''
    is assigned but its value is never used

    /tmp/tmp86w_6b9b.cs(30,14): warning CS0219: The variable ''currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares''
    is assigned but its va'
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        foreach (long number in numbers) {\n            currentSum +=\
    \ number;\n            currentSumOfSquares += number * number;\n            if\
    \ (currentSum > currentMax) {\n                currentMax = currentSum;\n    \
    \        }\n            if (currentSumOfSquares > currentMax * currentMax) {\n\
    \                currentMax = currentSum;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b3bf597b573749ffa5bbd29450f79bb9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b3bf597b573749ffa5bbd29450f79bb9>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <b3bf597b573749ffa5bbd29450f79bb9>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <b3bf597b573749ffa5bbd29450f79bb9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 2;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxNumber = 0;\n        long currentNumber = 0;\n        long currentMax\
    \ = 0;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n\
    \        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n    \
    \    long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n        long\
    \ currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long currentMaxIndex9\
    \ = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11 =\
    \ 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 = 0;\n\
    \        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n  \
    \      long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n    \
    \    long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n      \
    \  long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n        long\
    \ currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long currentMaxIndex24\
    \ = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26 =\
    \ 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n\
    \        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n  \
    \      long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n    \
    \    long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n      \
    \  long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n        long\
    \ currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long currentMaxIndex39\
    \ = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41 =\
    \ 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 = 0;\n\
    \        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n  \
    \      long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n    \
    \    long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n      \
    \  long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n        long\
    \ currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54\
    \ = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 =\
    \ 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n\
    \        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n  \
    \      long currentMaxIndex61 = 0;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsofed2na.cs(15,14): warning CS0219: The variable ''maxNumber'' is assigned
    but its value is never used

    /tmp/tmpsofed2na.cs(16,14): warning CS0219: The variable ''currentNumber'' is
    assigned but its value is never used

    /tmp/tmpsofed2na.cs(17,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    /tmp/tmpsofed2na.cs(18,14): warning CS0219: The variable ''currentMaxIndex'' is
    assigned but its value is never used

    /tmp/tmpsofed2na.cs(19,14): warning CS0219: The variable ''currentMaxIndex2''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(20,14): warning CS0219: The variable ''currentMaxIndex3''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(21,14): warning CS0219: The variable ''currentMaxIndex4''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(22,14): warning CS0219: The variable ''currentMaxIndex5''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(23,14): warning CS0219: The variable ''currentMaxIndex6''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(24,14): warning CS0219: The variable ''currentMaxIndex7''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(25,14): warning CS0219: The variable ''currentMaxIndex8''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(26,14): warning CS0219: The variable ''currentMaxIndex9''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(27,14): warning CS0219: The variable ''currentMaxIndex10''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(28,14): warning CS0219: The variable ''currentMaxIndex11''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(29,14): warning CS0219: The variable ''currentMaxIndex12''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(30,14): warning CS0219: The variable ''currentMaxIndex13''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(31,14): warning CS0219: The variable ''currentMaxIndex14''
    i'
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.ElementAt(numbers.Count\
    \ - 1);\n        bool isMax = true;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool\
    \ isMaxChanged = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged\
    \ = false;\n        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n\
    \        bool isMaxChanged = false;\n        bool isMaxChanged = false;\n    \
    \    bool isMaxChanged = false;\n        bool isMax\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9h76cl__.cs(85,19): error CS1002: ; expected

    '
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers.Max();\n        long current = numbers.First();\n\
    \        long rollingMax = current;\n        foreach (long number in numbers)\
    \ {\n            if (number > max) {\n                result.Add(rollingMax);\n\
    \                max = number;\n                rollingMax = number;\n       \
    \     } else if (number == max) {\n                rollingMax = number;\n    \
    \        }\n        }\n        result.Add(rollingMax);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <493a20afa4c44eb28b59c652de970aa2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <493a20afa4c44eb28b59c652de970aa2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <493a20afa4c44eb28b59c652de970aa2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <493a20afa4c44eb28b59c652de970aa2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMax =\
    \ new List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long\
    \ currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = -1;\n        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = -1;\n    \
    \    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7yodu5h6.cs(18,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(19,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(20,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(21,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(22,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(23,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(24,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(25,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(26,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(27,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(28,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(29,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(30,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(31,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmp7yodu5h6.cs(32,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /'
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5dge4tw.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers.First();\n\
    \        long currentMaxValueIndex = numbers.First();\n        bool isMax = true;\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMaxValueIndex;\n            }\n            if (number == currentMaxValue)\
    \ {\n                currentMaxIndex++;\n            }\n            if (number\
    \ > currentMaxValue && isMax) {\n                max = currentMaxValue;\n    \
    \            currentMaxValue = number;\n                currentMaxIndex = currentMaxValueIndex;\n\
    \                isMax = false;\n            }\n            if (number < currentMaxValue\
    \ && !isMax) {\n                max = currentMaxValue;\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = currentMaxValueIndex;\n       \
    \         isMax = true;\n            }\n        }\n        result.Add(max);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <9438d23003d245cea55c14bdf77f724f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <9438d23003d245cea55c14bdf77f724f>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <9438d23003d245cea55c14bdf77f724f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <9438d23003d245cea55c14bdf77f724f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n    \
    \        if (number > max) {\n                max = number;\n                currentMax\
    \ = max;\n                currentMaxIndex = result.Count;\n            }\n   \
    \         else if (number == max) {\n                currentMax = number;\n  \
    \              currentMaxIndex = result.Count;\n            }\n            result.Add(number);\n\
    \        }\n        result.RemoveAt(currentMaxIndex);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcnwo4w1n.cs(30,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5dge4tw.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxElement = numbers.First();\n        foreach (long number in numbers)\
    \ {\n            if (number > maxElement) {\n                maxElement = number;\n\
    \            }\n            max.Add(maxElement);\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <60fde016af6b4c188c9eae1c633b8930>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <60fde016af6b4c188c9eae1c633b8930>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <60fde016af6b4c188c9eae1c633b8930>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <60fde016af6b4c188c9eae1c633b8930>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5dge4tw.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long n in numbers) {\n            if (n > max) {\n                max = n;\n\
    \                cur = n;\n            }\n            else {\n               \
    \ result.Add(cur);\n                cur = n;\n            }\n        }\n     \
    \   result.Add(max);\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df0ca27669da45b38fcf733a08d194a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df0ca27669da45b38fcf733a08d194a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long maxIndex = 0;\n        foreach\
    \ (long n in numbers) {\n            if (n > max) {\n                max = n;\n\
    \                maxIndex = result.Count;\n            }\n            result.Add(n);\n\
    \        }\n        result.RemoveAt(maxIndex);\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7mlsd0q1.cs(24,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplwno9n97.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexValue\
    \ = numbers.Count;\n        long currentMaxIndexValueInCurrentMax = 0;\n     \
    \   long currentMaxIndexValueInCurrentMaxIndex = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndex =\
    \ 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndexInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMaxInCurrentMax\
    \ = 0;\n        long currentMaxIndexValueInCurrentMaxIndexInCurrentMaxIndex\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0t5axsc5.cs(37,68): error CS1002: ; expected

    '
  timestamp: 1659823665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 2;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 2;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfCubes\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long\
    \ currentSumOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPower\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp686jrjby.cs(40,39): error CS1002: ; expected

    '
  timestamp: 1659823665
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        long sum = 0;\n        foreach (long number in\
    \ numbers) {\n            sum += number;\n            if (sum > currentSum) {\n\
    \                currentSum = sum;\n                currentMax = max;\n      \
    \      }\n            if (sum == currentSum) {\n                max = Math.Max(max,\
    \ number);\n            }\n        }\n        result.Add(currentMax);\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f745cf53f6d448ca9d741dd13975d11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f745cf53f6d448ca9d741dd13975d11>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        long sum = 0;\n        long sumOfSquares = 0;\n\
    \        long sumOfSquareOfSquares = 0;\n        long sumOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquares = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n\
    \        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n\
    \        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long sum\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5m52ducu.cs(40,17): error CS1002: ; expected

    '
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfSquareOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferences =\
    \ 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferences\
    \ = 0;\n        long currentSumOfSquareOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifferenceOfDifference\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkp1nbry4.cs(38,104): error CS1002: ; expected

    '
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers.First();\n        long maxIndex =\
    \ -1;\n        foreach (long number in numbers) {\n            if (number > max)\
    \ {\n                max = number;\n                maxIndex = result.Count;\n\
    \            }\n            result.Add(number);\n        }\n        result.Add(max);\n\
    \        result.RemoveAt(maxIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp76qc37xl.cs(25,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > currentMax) {\n                currentMax = number;\n\
    \                currentMaxIndex = result.Count;\n            }\n            if\
    \ (number == currentMax) {\n                result.Add(number);\n            }\n\
    \        }\n        if (result.Count > currentMaxIndex) {\n            result.RemoveAt(currentMaxIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphxf7_1cx.cs(28,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmphxf7_1cx.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        long sum = 0;\n        long sumOfSquares = 0;\n\
    \        long currentSumOfSquares = 0;\n        long currentSumOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquares = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n\
    \        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares = 0;\n\
    \        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquares\
    \ = 0;\n        long currentSumOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOfSquareOf\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcnul7rwm.cs(40,106): error CS1002: ; expected

    '
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.Max();\n\
    \        long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpspvm0czm.cs(19,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(20,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(21,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(22,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(23,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(24,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(25,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(26,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(27,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(28,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(29,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(30,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(31,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(32,14): error CS0128: A local variable or function named ''currentMaxIndexValue''
    is already defined in this scope

    /tmp/tmpspvm0czm.cs(33,14): error CS0128: A local variable '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9g9xislp.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        bool first = true;\n        foreach (long\
    \ number in numbers) {\n            if (first) {\n                max = number;\n\
    \                currentMax = number;\n                currentMaxIndex = 0;\n\
    \                first = false;\n            } else {\n                if (number\
    \ > currentMax) {\n                    currentMax = number;\n                \
    \    currentMaxIndex = result.Count;\n                }\n            }\n     \
    \       result.Add(number);\n        }\n        result.Add(max);\n        result.Add(currentMax);\n\
    \        result.Add(currentMaxIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cdd65bb1882f4ce6a43d6d9302199d6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cdd65bb1882f4ce6a43d6d9302199d6a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var max = new List<long>();\n\
    \        var rollingMax = new List<long>();\n        var rollingMaxIndex = 0;\n\
    \        var rollingMaxValue = numbers.First();\n        foreach (var number in\
    \ numbers) {\n            if (number > rollingMaxValue) {\n                rollingMaxValue\
    \ = number;\n                rollingMax.Add(rollingMaxValue);\n              \
    \  rollingMaxIndex = 0;\n            }\n            rollingMax[rollingMaxIndex++]\
    \ = number;\n        }\n        rollingMax.Add(rollingMaxValue);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - 1);\n        rollingMax.Reverse();\n\
    \        rollingMax.RemoveAt(rollingMax.Count - \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppl2icv8r.cs(62,47): error CS1525: Invalid expression term ''}''

    /tmp/tmppl2icv8r.cs(62,47): error CS1026: ) expected

    /tmp/tmppl2icv8r.cs(62,47): error CS1002: ; expected

    '
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndex2\
    \ = -1;\n        long currentMaxIndex3 = -1;\n        long currentMaxIndex4 =\
    \ -1;\n        long currentMaxIndex5 = -1;\n        long currentMaxIndex6 = -1;\n\
    \        long currentMaxIndex7 = -1;\n        long currentMaxIndex8 = -1;\n  \
    \      long currentMaxIndex9 = -1;\n        long currentMaxIndex10 = -1;\n   \
    \     long currentMaxIndex11 = -1;\n        long currentMaxIndex12 = -1;\n   \
    \     long currentMaxIndex13 = -1;\n        long currentMaxIndex14 = -1;\n   \
    \     long currentMaxIndex15 = -1;\n        long currentMaxIndex16 = -1;\n   \
    \     long currentMaxIndex17 = -1;\n        long currentMaxIndex18 = -1;\n   \
    \     long currentMaxIndex19 = -1;\n        long currentMaxIndex20 = -1;\n   \
    \     long currentMaxIndex21 = -1;\n        long currentMaxIndex22 = -1;\n   \
    \     long currentMaxIndex23 = -1;\n        long currentMaxIndex24 = -1;\n   \
    \     long currentMaxIndex25 = -1;\n        long currentMaxIndex26 = -1;\n   \
    \     long currentMaxIndex27 = -1;\n        long currentMaxIndex28 = -1;\n   \
    \     long currentMaxIndex29 = -1;\n        long currentMaxIndex30 = -1;\n   \
    \     long currentMaxIndex31 = -1;\n        long currentMaxIndex32 = -1;\n   \
    \     long currentMaxIndex33 = -1;\n        long currentMaxIndex34 = -1;\n   \
    \     long currentMaxIndex35 = -1;\n        long currentMaxIndex36 = -1;\n   \
    \     long currentMaxIndex37 = -1;\n        long currentMaxIndex38 = -1;\n   \
    \     long currentMaxIndex39 = -1;\n        long currentMaxIndex40 = -1;\n   \
    \     long currentMaxIndex41 = -1;\n        long currentMaxIndex42 = -1;\n   \
    \     long currentMaxIndex43 = -1;\n        long currentMaxIndex44 = -1;\n   \
    \     long currentMaxIndex45 = -1;\n        long currentMaxIndex46 = -1;\n   \
    \     long currentMaxIndex47 = -1;\n        long currentMaxIndex48 = -1;\n   \
    \     long currentMaxIndex49 = -1;\n        long currentMaxIndex50 = -1;\n   \
    \     long currentMaxIndex51 = -1;\n        long currentMaxIndex52 = -1;\n   \
    \     long currentMaxIndex53 = -1;\n        long currentMaxIndex54 = -1;\n   \
    \     long currentMaxIndex55 = -1;\n        long currentMax\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpar9oky_n.cs(72,24): error CS1002: ; expected

    '
  timestamp: 1659795251
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        long sum = 0;\n        foreach (long number in\
    \ numbers) {\n            currentSum += number;\n            if (currentSum >\
    \ max) {\n                max = currentSum;\n                currentMax = number;\n\
    \            }\n            currentSum -= number;\n            sum += number;\n\
    \        }\n        if (sum > max) {\n            max = sum;\n            currentMax\
    \ = sum;\n        }\n        result.Add(currentMax);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa76911617c2452282e22e17126e5530>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa76911617c2452282e22e17126e5530>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5dge4tw.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        bool isMax = true;\n        foreach (long\
    \ number in numbers) {\n            if (number > max) {\n                max =\
    \ number;\n                currentMax = max;\n                currentMaxIndex\
    \ = numbers.IndexOf(number);\n            }\n            else if (number == max)\
    \ {\n                currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \            }\n            else if (number < max) {\n                isMax =\
    \ false;\n            }\n        }\n        if (isMax) {\n            result.Add(max);\n\
    \            result.Add(currentMax);\n            result.Add(currentMaxIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2bbb6f3a876f4787b9a9d0b17593cfa6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2bbb6f3a876f4787b9a9d0b17593cfa6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxNumber = 0;\n        long currentNumber = 0;\n        long currentMax\
    \ = 0;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2 = 0;\n\
    \        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n    \
    \    long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n        long\
    \ currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long currentMaxIndex9\
    \ = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11 =\
    \ 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 = 0;\n\
    \        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n  \
    \      long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n    \
    \    long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n      \
    \  long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n        long\
    \ currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long currentMaxIndex24\
    \ = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26 =\
    \ 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 = 0;\n\
    \        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n  \
    \      long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n    \
    \    long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n      \
    \  long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n        long\
    \ currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long currentMaxIndex39\
    \ = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41 =\
    \ 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 = 0;\n\
    \        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n  \
    \      long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n    \
    \    long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n      \
    \  long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n        long\
    \ currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long currentMaxIndex54\
    \ = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56 =\
    \ 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 = 0;\n\
    \        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n  \
    \      long currentMaxIndex61 = 0;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsofed2na.cs(15,14): warning CS0219: The variable ''maxNumber'' is assigned
    but its value is never used

    /tmp/tmpsofed2na.cs(16,14): warning CS0219: The variable ''currentNumber'' is
    assigned but its value is never used

    /tmp/tmpsofed2na.cs(17,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    /tmp/tmpsofed2na.cs(18,14): warning CS0219: The variable ''currentMaxIndex'' is
    assigned but its value is never used

    /tmp/tmpsofed2na.cs(19,14): warning CS0219: The variable ''currentMaxIndex2''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(20,14): warning CS0219: The variable ''currentMaxIndex3''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(21,14): warning CS0219: The variable ''currentMaxIndex4''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(22,14): warning CS0219: The variable ''currentMaxIndex5''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(23,14): warning CS0219: The variable ''currentMaxIndex6''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(24,14): warning CS0219: The variable ''currentMaxIndex7''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(25,14): warning CS0219: The variable ''currentMaxIndex8''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(26,14): warning CS0219: The variable ''currentMaxIndex9''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(27,14): warning CS0219: The variable ''currentMaxIndex10''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(28,14): warning CS0219: The variable ''currentMaxIndex11''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(29,14): warning CS0219: The variable ''currentMaxIndex12''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(30,14): warning CS0219: The variable ''currentMaxIndex13''
    is assigned but its value is never used

    /tmp/tmpsofed2na.cs(31,14): warning CS0219: The variable ''currentMaxIndex14''
    i'
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndex2\
    \ = 0;\n        long currentMaxIndex3 = 0;\n        long currentMaxIndex4 = 0;\n\
    \        long currentMaxIndex5 = 0;\n        long currentMaxIndex6 = 0;\n    \
    \    long currentMaxIndex7 = 0;\n        long currentMaxIndex8 = 0;\n        long\
    \ currentMaxIndex9 = 0;\n        long currentMaxIndex10 = 0;\n        long currentMaxIndex11\
    \ = 0;\n        long currentMaxIndex12 = 0;\n        long currentMaxIndex13 =\
    \ 0;\n        long currentMaxIndex14 = 0;\n        long currentMaxIndex15 = 0;\n\
    \        long currentMaxIndex16 = 0;\n        long currentMaxIndex17 = 0;\n  \
    \      long currentMaxIndex18 = 0;\n        long currentMaxIndex19 = 0;\n    \
    \    long currentMaxIndex20 = 0;\n        long currentMaxIndex21 = 0;\n      \
    \  long currentMaxIndex22 = 0;\n        long currentMaxIndex23 = 0;\n        long\
    \ currentMaxIndex24 = 0;\n        long currentMaxIndex25 = 0;\n        long currentMaxIndex26\
    \ = 0;\n        long currentMaxIndex27 = 0;\n        long currentMaxIndex28 =\
    \ 0;\n        long currentMaxIndex29 = 0;\n        long currentMaxIndex30 = 0;\n\
    \        long currentMaxIndex31 = 0;\n        long currentMaxIndex32 = 0;\n  \
    \      long currentMaxIndex33 = 0;\n        long currentMaxIndex34 = 0;\n    \
    \    long currentMaxIndex35 = 0;\n        long currentMaxIndex36 = 0;\n      \
    \  long currentMaxIndex37 = 0;\n        long currentMaxIndex38 = 0;\n        long\
    \ currentMaxIndex39 = 0;\n        long currentMaxIndex40 = 0;\n        long currentMaxIndex41\
    \ = 0;\n        long currentMaxIndex42 = 0;\n        long currentMaxIndex43 =\
    \ 0;\n        long currentMaxIndex44 = 0;\n        long currentMaxIndex45 = 0;\n\
    \        long currentMaxIndex46 = 0;\n        long currentMaxIndex47 = 0;\n  \
    \      long currentMaxIndex48 = 0;\n        long currentMaxIndex49 = 0;\n    \
    \    long currentMaxIndex50 = 0;\n        long currentMaxIndex51 = 0;\n      \
    \  long currentMaxIndex52 = 0;\n        long currentMaxIndex53 = 0;\n        long\
    \ currentMaxIndex54 = 0;\n        long currentMaxIndex55 = 0;\n        long currentMaxIndex56\
    \ = 0;\n        long currentMaxIndex57 = 0;\n        long currentMaxIndex58 =\
    \ 0;\n        long currentMaxIndex59 = 0;\n        long currentMaxIndex60 = 0;\n\
    \        long currentMaxIndex61 = 0;\n        long current\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9g9xislp.cs(78,21): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber > 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber - 1;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fbb56d933f1f48a4bd1e475b120ef72f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fbb56d933f1f48a4bd1e475b120ef72f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplwno9n97.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = 0;\n        long currentMaxIndexValue = 0;\n \
    \       long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3 =\
    \ 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0tx6j97m.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659795249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        var rollingMax = new List<long>();\n\
    \        var rollingMaxIndex = 0;\n        var rollingMaxValue = numbers.First();\n\
    \        var rollingMaxTimes = 0;\n        var rollingMaxTimesMax = numbers.Count;\n\
    \        while (rollingMaxIndex < rollingMaxTimesMax) {\n            var rollingMaxTimesIndex\
    \ = rollingMaxIndex + 1;\n            var rollingMaxTimesValue = numbers.Skip(rollingMaxTimesIndex).First();\n\
    \            if (rollingMaxTimesValue > rollingMaxValue) {\n                rollingMaxValue\
    \ = rollingMaxTimesValue;\n                rollingMaxIndex = rollingMaxTimesIndex;\n\
    \            }\n            rollingMaxTimes++;\n        }\n        rollingMax.Add(rollingMaxValue);\n\
    \        return rollingMax;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00009] in <566f7f1e95e74eebb5adc94a7cce9392>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <566f7f1e95e74eebb5adc94a7cce9392>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00009] in <566f7f1e95e74eebb5adc94a7cce9392>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <566f7f1e95e74eebb5adc94a7cce9392>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = numbers.Count - 1;\n        while (currentMaxIndex >= 0) {\n            currentMax\
    \ = numbers[currentMaxIndex];\n            if (currentMax == maxValue) {\n   \
    \             result.Add(currentMax);\n                currentMaxIndex--;\n  \
    \          } else {\n                currentMaxIndex--;\n                currentMax\
    \ = numbers[currentMaxIndex];\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxitvvu86.cs(18,14): error CS0128: A local variable or function named ''currentMaxIndex''
    is already defined in this scope

    /tmp/tmpxitvvu86.cs(20,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpxitvvu86.cs(26,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5dge4tw.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentSum = 0;\n            currentSumOfSquares = 0;\n\
    \            while (currentNumber != 0) {\n                currentSum += currentNumber;\n\
    \                currentSumOfSquares += currentNumber * currentNumber;\n     \
    \           currentNumber--;\n            }\n            if (currentSum > currentMax)\
    \ {\n                max = currentSum;\n                currentMax = currentSum;\n\
    \            }\n            currentSum = 0;\n            currentSumOfSquares =\
    \ 0;\n            currentNumber = number;\n            while (currentNumber !=\
    \ 0) {\n                currentSum += currentNumber;\n                currentSumOfSquares\
    \ += currentNumber * currentNumber;\n                currentNumber--;\n      \
    \      }\n            if (currentSum > currentMax) {\n                max = currentSum;\n\
    \                currentMax = currentSum;\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b98c30efd3194168a055e294a742ca36>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b98c30efd3194168a055e294a742ca36>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n    \
    \        if (number > max) {\n                max = number;\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else if (number == max) {\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n            else {\n                if (currentMaxIndex != numbers.IndexOf(number))\
    \ {\n                    result.Add(currentMax);\n                    max = currentMax;\n\
    \                    currentMax = number;\n                    currentMaxIndex\
    \ = numbers.IndexOf(number);\n                }\n            }\n        }\n  \
    \      result.Add(currentMax);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec95cb3824aa43f2bc9b76976d12484a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec95cb3824aa43f2bc9b76976d12484a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        long currentSumOfSquareOfDifferences = 0;\n        long currentSumOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquares = 0;\n        long currentSumOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquares = 0;\n  \
    \      long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferences = 0;\n\
    \        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquares\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSumOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferenceSquareOfDifferences\
    \ = 0;\n        long currentSum\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmput9358za.cs(44,24): error CS1002: ; expected

    '
  timestamp: 1659795249
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 2;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                max = currentMax;\n                currentMax = number;\n\
    \            }\n            else if (number == currentMax) {\n               \
    \ currentMax = number;\n            }\n            else {\n                max\
    \ = Math.Max(max, currentMax);\n                currentMax = number;\n       \
    \     }\n            result.Add(max);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <4b8f6bfec3a24cf4b0024551d0632f2f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4b8f6bfec3a24cf4b0024551d0632f2f>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <4b8f6bfec3a24cf4b0024551d0632f2f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <4b8f6bfec3a24cf4b0024551d0632f2f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      if (number > currentMax) {\n                currentMax = number;\n    \
    \            currentNumber = number;\n            }\n            else if (number\
    \ == currentMax) {\n                currentNumber++;\n            }\n        \
    \    else {\n                result.Add(currentMax);\n                currentMax\
    \ = number;\n                currentNumber = number;\n            }\n        }\n\
    \        result.Add(currentMax);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8131e6edb124cbea92c40a53380d4b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8131e6edb124cbea92c40a53380d4b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        bool found = false;\n        foreach (long\
    \ number in numbers) {\n            currentMax = number;\n            currentMaxIndex\
    \ = 0;\n            found = false;\n            while (!found && currentMaxIndex\
    \ < numbers.Count) {\n                currentMax = numbers[currentMaxIndex];\n\
    \                if (currentMax < currentMax) {\n                    currentMax\
    \ = currentMax;\n                    currentMaxIndex = currentMaxIndex;\n    \
    \                found = true;\n                }\n                else {\n  \
    \                  currentMaxIndex++;\n                }\n            }\n    \
    \        result.Add(currentMax);\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5d6p3rz_.cs(24,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5d6p3rz_.cs(25,21): warning CS1718: Comparison made to same variable;
    did you mean to compare something else?

    /tmp/tmp5d6p3rz_.cs(26,21): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    /tmp/tmp5d6p3rz_.cs(27,21): warning CS1717: Assignment made to same variable;
    did you mean to assign something else?

    /tmp/tmp5d6p3rz_.cs(15,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659823666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n    \
    \        if (number > currentMax) {\n                currentMax = number;\n  \
    \              currentMaxIndex = result.Count;\n            }\n            else\
    \ if (number == currentMax) {\n                currentMaxIndex++;\n          \
    \  }\n            result.Add(number);\n        }\n        result.Add(currentMax);\n\
    \        result.Add(currentMaxIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b57547cd5e404a2ab133def49df906d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b57547cd5e404a2ab133def49df906d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    long currentMaxValueIndex = -1;\n        bool found = false;\n        foreach\
    \ (long number in numbers) {\n            if (number > currentMaxValue) {\n  \
    \              currentMaxValue = number;\n                currentMaxIndex = currentMaxValue;\n\
    \                found = false;\n            }\n            if (number == currentMaxValue)\
    \ {\n                found = true;\n            }\n            if (found) {\n\
    \                currentMaxValueIndex++;\n                if (currentMaxValueIndex\
    \ == numbers.Count) {\n                    result.Add(currentMaxIndex);\n    \
    \                currentMaxIndex = 0;\n                    currentMaxValueIndex\
    \ = -1;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <539cf1964ef244259e77f21c86ce89d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <539cf1964ef244259e77f21c86ce89d0>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <539cf1964ef244259e77f21c86ce89d0>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <539cf1964ef244259e77f21c86ce89d0>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        bool isMax = true;\n        long currentMaxIndexValue2 = 0;\n\
    \        long currentMaxIndexValue3 = 0;\n        long currentMaxIndexValue4 =\
    \ 0;\n        long currentMaxIndexValue5 = 0;\n        long currentMaxIndexValue6\
    \ = 0;\n        long currentMaxIndexValue7 = 0;\n        long currentMaxIndexValue8\
    \ = 0;\n        long currentMaxIndexValue9 = 0;\n        long currentMaxIndexValue10\
    \ = 0;\n        long currentMaxIndexValue11 = 0;\n        long currentMaxIndexValue12\
    \ = 0;\n        long currentMaxIndexValue13 = 0;\n        long currentMaxIndexValue14\
    \ = 0;\n        long currentMaxIndexValue15 = 0;\n        long currentMaxIndexValue16\
    \ = 0;\n        long currentMaxIndexValue17 = 0;\n        long currentMaxIndexValue18\
    \ = 0;\n        long currentMaxIndexValue19 = 0;\n        long currentMaxIndexValue20\
    \ = 0;\n        long currentMaxIndexValue21 = 0;\n        long currentMaxIndexValue22\
    \ = 0;\n        long currentMaxIndexValue23 = 0;\n        long currentMaxIndexValue24\
    \ = 0;\n        long currentMaxIndexValue25 = 0;\n        long currentMaxIndexValue26\
    \ = 0;\n        long currentMaxIndexValue27 = 0;\n        long currentMaxIndexValue28\
    \ = 0;\n        long currentMaxIndexValue29 = 0;\n        long currentMaxIndexValue30\
    \ = 0;\n        long currentMaxIndexValue31 = 0;\n        long currentMaxIndexValue32\
    \ = 0;\n        long currentMaxIndexValue33 = 0;\n        long currentMaxIndexValue34\
    \ = 0;\n        long currentMaxIndexValue35 = 0;\n        long currentMaxIndexValue36\
    \ = 0;\n        long currentMaxIndexValue37 = 0;\n        long currentMaxIndexValue38\
    \ = 0;\n        long currentMaxIndexValue39 = 0;\n        long currentMaxIndexValue40\
    \ = 0;\n        long currentMaxIndexValue41 = 0;\n        long currentMaxIndexValue42\
    \ = 0;\n        long currentMaxIndexValue43 = 0;\n        long currentMaxIndexValue44\
    \ = 0;\n        long currentMaxIndexValue45 = 0;\n        long currentMaxIndexValue46\
    \ = 0;\n        long currentMaxIndexValue47 = 0;\n        long currentMaxIndexValue48\
    \ = 0;\n        long currentMaxIndexValue49 = 0;\n        long currentMaxIndexValue50\
    \ = 0;\n        long currentMaxIndexValue51 = 0;\n        long currentMaxIndexValue52\
    \ = 0;\n        long currentMaxIndexValue53 = 0;\n        \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptxpfopyb.cs(17,14): warning CS0219: The variable ''currentMaxIndex'' is
    assigned but its value is never used

    /tmp/tmptxpfopyb.cs(18,14): warning CS0219: The variable ''currentMaxIndexValue''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(19,14): warning CS0219: The variable ''isMax'' is assigned
    but its value is never used

    /tmp/tmptxpfopyb.cs(20,14): warning CS0219: The variable ''currentMaxIndexValue2''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(21,14): warning CS0219: The variable ''currentMaxIndexValue3''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(22,14): warning CS0219: The variable ''currentMaxIndexValue4''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(23,14): warning CS0219: The variable ''currentMaxIndexValue5''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(24,14): warning CS0219: The variable ''currentMaxIndexValue6''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(25,14): warning CS0219: The variable ''currentMaxIndexValue7''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(26,14): warning CS0219: The variable ''currentMaxIndexValue8''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(27,14): warning CS0219: The variable ''currentMaxIndexValue9''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(28,14): warning CS0219: The variable ''currentMaxIndexValue10''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(29,14): warning CS0219: The variable ''currentMaxIndexValue11''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(30,14): warning CS0219: The variable ''currentMaxIndexValue12''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(31,14): warning CS0219: The variable ''currentMaxIndexValue13''
    is assigned but its value is never used

    /tmp/tmptxpfopyb.cs(32,14): warning CS0219: The variable ''currentMaxIndexValue14''
    is assigned but its value is never used

    /tm'
  timestamp: 1659823665
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndexValue = numbers.IndexOf(currentMax);\n\
    \        long currentMaxIndexValue2 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 1);\n        long currentMaxIndexValue3 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 2);\n        long currentMaxIndexValue4 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 3);\n        long currentMaxIndexValue5 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 4);\n        long currentMaxIndexValue6 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 5);\n        long currentMaxIndexValue7 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 6);\n        long currentMaxIndexValue8 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 7);\n        long currentMaxIndexValue9 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 8);\n        long currentMaxIndexValue10 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 9);\n        long currentMaxIndexValue11 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 10);\n        long currentMaxIndexValue12 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 11);\n        long currentMaxIndexValue13 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 12);\n        long currentMaxIndexValue14 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 13);\n        long currentMaxIndexValue15 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 14);\n        long currentMaxIndexValue16 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 15);\n        long currentMaxIndexValue17 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 16);\n        long currentMaxIndexValue18 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 17);\n        long currentMaxIndexValue19 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 18);\n        long currentMaxIndexValue20 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 19);\n        long currentMaxIndexValue21 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 20);\n        long currentMaxIndexValue22 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 21);\n        long currentMaxIndexValue23 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 22);\n        long currentMaxIndexValue24 = numbers.IndexOf(currentMax, currentMaxIndex\
    \ + 23);\n        long currentMaxIndexValue25 = numbers.IndexOf(currentMax\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa9npg3n9.cs(42,65): error CS1026: ) expected

    /tmp/tmpa9npg3n9.cs(42,65): error CS1002: ; expected

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMax =\
    \ new List<long>();\n        long max = 0;\n        long currentMax = 0;\n   \
    \     long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        rollingMax.Add(currentMaxValue);\n        numbers.RemoveAt(0);\n    \
    \    foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = rollingMax.Count - 1;\n            }\n            if (number > max) {\n  \
    \              max = number;\n                currentMax = number;\n         \
    \       currentMaxIndex = rollingMax.Count - 1;\n            }\n            rollingMax[currentMaxIndex]\
    \ = number;\n        }\n        return rollingMax;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd9ck396i.cs(31,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long cur = 0;\n        foreach\
    \ (long n in numbers) {\n            if (n > max) {\n                max = n;\n\
    \                cur = n;\n            }\n            else {\n               \
    \ result.Add(cur);\n                cur = n;\n            }\n        }\n     \
    \   result.Add(max);\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df0ca27669da45b38fcf733a08d194a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df0ca27669da45b38fcf733a08d194a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplwno9n97.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMax =\
    \ new List<long>();\n        long max = 0;\n        long currentMax = 0;\n   \
    \     long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n\
    \        rollingMax.Add(currentMaxValue);\n        numbers.RemoveAt(0);\n    \
    \    numbers.Sort();\n        foreach (long number in numbers) {\n           \
    \ if (number > currentMaxValue) {\n                currentMaxValue = number;\n\
    \                currentMaxIndex = rollingMax.Count;\n            }\n        \
    \    if (number > max) {\n                max = number;\n            }\n     \
    \       rollingMax.Add(number);\n        }\n        rollingMax.RemoveAt(currentMaxIndex);\n\
    \        return rollingMax;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpltdwl1qy.cs(32,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpltdwl1qy.cs(16,14): warning CS0219: The variable ''currentMax'' is assigned
    but its value is never used

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5dge4tw.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823663
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        List<long> max2 = new List<long>();\n        long maxVal = numbers.Max();\n\
    \        long maxVal2 = numbers.Max();\n        long maxVal3 = numbers.Max();\n\
    \        long maxVal4 = numbers.Max();\n        long maxVal5 = numbers.Max();\n\
    \        long maxVal6 = numbers.Max();\n        long maxVal7 = numbers.Max();\n\
    \        long maxVal8 = numbers.Max();\n        long maxVal9 = numbers.Max();\n\
    \        long maxVal10 = numbers.Max();\n        long maxVal11 = numbers.Max();\n\
    \        long maxVal12 = numbers.Max();\n        long maxVal13 = numbers.Max();\n\
    \        long maxVal14 = numbers.Max();\n        long maxVal15 = numbers.Max();\n\
    \        long maxVal16 = numbers.Max();\n        long maxVal17 = numbers.Max();\n\
    \        long maxVal18 = numbers.Max();\n        long maxVal19 = numbers.Max();\n\
    \        long maxVal20 = numbers.Max();\n        long maxVal21 = numbers.Max();\n\
    \        long maxVal22 = numbers.Max();\n        long maxVal23 = numbers.Max();\n\
    \        long maxVal24 = numbers.Max();\n        long maxVal25 = numbers.Max();\n\
    \        long maxVal26 = numbers.Max();\n        long maxVal27 = numbers.Max();\n\
    \        long maxVal28 = numbers.Max();\n        long maxVal29 = numbers.Max();\n\
    \        long maxVal30 = numbers.Max();\n        long maxVal31 = numbers.Max();\n\
    \        long maxVal32 = numbers.Max();\n        long maxVal33 = numbers.Max();\n\
    \        long maxVal34 = numbers.Max();\n        long maxVal35 = numbers.Max();\n\
    \        long maxVal36 = numbers.Max();\n        long maxVal37 = numbers.Max();\n\
    \        long maxVal38 = numbers.Max();\n        long maxVal39 = numbers.Max();\n\
    \        long maxVal40 = numbers.Max();\n        long maxVal41 = numbers.Max();\n\
    \        long maxVal42 = numbers.Max();\n        long maxVal43 = numbers.Max();\n\
    \        long maxVal44 = numbers.Max();\n        long maxVal45 = numbers.Max();\n\
    \        long maxVal46 = numbers.Max();\n        long maxVal47 = numbers.Max();\n\
    \        long maxVal48 = numbers.Max();\n        long maxVal49 = numbers.Max();\n\
    \        long maxVal50 = numbers.Max();\n        long max\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm4i1wiuv.cs(66,17): error CS1002: ; expected

    '
  timestamp: 1659823666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        long currentSum = 0;\n        long currentSumOfSquares\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentSum = 0;\n            currentSumOfSquares = 0;\n\
    \            while (currentNumber > 0) {\n                currentSum += currentNumber;\n\
    \                currentSumOfSquares += currentNumber * currentNumber;\n     \
    \           currentNumber--;\n            }\n            if (currentSum > currentMax)\
    \ {\n                currentMax = currentSum;\n            }\n            if (currentSumOfSquares\
    \ > currentMax * currentMax) {\n                currentMax = currentSum;\n   \
    \         }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8cd588106bf0464495306a12f0ddee69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8cd588106bf0464495306a12f0ddee69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber != 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber = currentNumber / 2;\n      \
    \      }\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0dea131f6f4ae3a8f4c2f0acf2d505>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659795249
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        long currentMaxIndex = 0;\n        foreach (long number in numbers) {\n\
    \            if (number > currentMax) {\n                max = currentMax;\n \
    \               currentMax = number;\n                currentMaxIndex = result.Count;\n\
    \            }\n            else if (number == currentMax) {\n               \
    \ currentMax++;\n            }\n            else {\n                result.Add(currentMax);\n\
    \                currentMax = number;\n                currentMaxIndex = result.Count;\n\
    \            }\n        }\n        result.Add(currentMax);\n        result.Add(max);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <ba574b5f7db7432f977e18340c517f4e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <ba574b5f7db7432f977e18340c517f4e>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <ba574b5f7db7432f977e18340c517f4e>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <ba574b5f7db7432f977e18340c517f4e>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMax =\
    \ new List<long>();\n        long rollingMaxElement = numbers.Max();\n       \
    \ rollingMax.Add(rollingMaxElement);\n        long rollingMaxElementPrevious =\
    \ rollingMaxElement;\n        long rollingMaxElementPrevious2 = 0;\n        long\
    \ rollingMaxElementPrevious3 = 0;\n        long rollingMaxElementPrevious4 = 0;\n\
    \        long rollingMaxElementPrevious5 = 0;\n        long rollingMaxElementPrevious6\
    \ = 0;\n        long rollingMaxElementPrevious7 = 0;\n        long rollingMaxElementPrevious8\
    \ = 0;\n        long rollingMaxElementPrevious9 = 0;\n        long rollingMaxElementPrevious10\
    \ = 0;\n        long rollingMaxElementPrevious11 = 0;\n        long rollingMaxElementPrevious12\
    \ = 0;\n        long rollingMaxElementPrevious13 = 0;\n        long rollingMaxElementPrevious14\
    \ = 0;\n        long rollingMaxElementPrevious15 = 0;\n        long rollingMaxElementPrevious16\
    \ = 0;\n        long rollingMaxElementPrevious17 = 0;\n        long rollingMaxElementPrevious18\
    \ = 0;\n        long rollingMaxElementPrevious19 = 0;\n        long rollingMaxElementPrevious20\
    \ = 0;\n        long rollingMaxElementPrevious21 = 0;\n        long rollingMaxElementPrevious22\
    \ = 0;\n        long rollingMaxElementPrevious23 = 0;\n        long rollingMaxElementPrevious24\
    \ = 0;\n        long rollingMaxElementPrevious25 = 0;\n        long rollingMaxElementPrevious26\
    \ = 0;\n        long rollingMaxElementPrevious27 = 0;\n        long rollingMaxElementPrevious28\
    \ = 0;\n        long rollingMaxElementPrevious29 = 0;\n        long rollingMaxElementPrevious30\
    \ = 0;\n        long rollingMaxElementPrevious31 = 1;\n        long rollingMaxElementPrevious32\
    \ = 1;\n        long rollingMaxElementPrevious33 = 1;\n        long rollingMaxElementPrevious34\
    \ = 1;\n        long rollingMaxElementPrevious35 = 1;\n        long rollingMaxElementPrevious36\
    \ = 1;\n        long rollingMaxElementPrevious37 = 1;\n        long rollingMaxElementPrevious38\
    \ = 1;\n        long rollingMaxElementPrevious39 = 1;\n        long rollingMaxElementPrevious40\
    \ = 1;\n        long rollingMaxElementPrevious41 = 1;\n        long rollingMaxElementPrevious42\
    \ = 1;\n        long rollingMaxElementPrevious43 = 1;\n        long rollingMaxElementPreviou\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbt9hjkl4.cs(60,38): error CS1002: ; expected

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        long currentSumOfSquares = 0;\n        long currentSumOfCubes\
    \ = 0;\n        long currentSumOfPowers = 0;\n        long currentSumOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfCubes = 0;\n        long currentSumOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfSquares = 0;\n        long currentSumOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfCubes = 0;\n        long\
    \ currentSumOfPowersOfPowersOfPowersOfPowers = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n      \
    \  long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares = 0;\n   \
    \     long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes = 0;\n  \
    \      long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers = 0;\n\
    \        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfCubes\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowers\
    \ = 0;\n        long currentSumOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfPowersOfSquares\
    \ = 0;\n        long currentSumOfPowersOfPower\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpx2wcmrtv.cs(43,39): error CS1002: ; expected

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        bool isMax = true;\n\
    \        long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long currentMaxIndexValue = numbers.Max();\n     \
    \   long currentMaxIndexValue = numbers.Max();\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        long current\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1rd6i23o.cs(66,21): error CS1002: ; expected

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexInSequence\
    \ = -1;\n        bool isMax = true;\n        long currentMaxIndexInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequence = true;\n        long currentMaxIndexInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequence = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequence = true;\n        long\
    \ currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequence = -1;\n  \
    \      bool isMaxInSequenceInSequenceInSequenceInSequence = true;\n        long\
    \ currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        bool isMaxInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = true;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4669g5w1.cs(44,109): error CS1002: ; expected

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        bool found = false;\n\
    \        foreach (long number in numbers) {\n            if (number == currentMax)\
    \ {\n                found = true;\n                currentMaxIndex++;\n     \
    \       }\n            else if (found) {\n                result.Add(currentMax);\n\
    \                currentMax = number;\n                currentMaxIndex = result.Count;\n\
    \                found = false;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(currentMax);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <1cb560ec437643889066379730bfb8cf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <1cb560ec437643889066379730bfb8cf>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <1cb560ec437643889066379730bfb8cf>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <1cb560ec437643889066379730bfb8cf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexCount\
    \ = 0;\n        long currentMaxIndexCountMax = numbers.Count;\n        long currentMaxIndexCountMaxIndex\
    \ = 0;\n        long currentMaxIndexCountMaxIndexMax = numbers.Count;\n      \
    \  long currentMaxIndexCountMaxIndexMax = 0;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax\
    \ = numbers.Count;\n        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n\
    \        long currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long\
    \ currentMaxIndexCountMaxIndexMaxMax = numbers.Count;\n        long currentMax\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8t7zo5b8.cs(51,24): error CS1002: ; expected

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMax = maxValue;\n\
    \        long currentMaxIndex = -1;\n        long currentMaxIndex = numbers.Count;\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long currentMaxValue = numbers.Max();\n        long\
    \ currentMaxValue = numbers.Max();\n        long currentMaxValue = numbers.Max();\n\
    \        long currentMaxValue = numbers.Max();\n        long currentMaxValue =\
    \ numbers.Max();\n        long \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuqgvnq02.cs(71,13): error CS1001: Identifier expected

    /tmp/tmpuqgvnq02.cs(71,13): error CS1002: ; expected

    '
  timestamp: 1659823666
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        long currentCount = 0;\n        long currentSumOfSquares\
    \ = 0;\n        foreach (long number in numbers) {\n            currentCount +=\
    \ 1;\n            currentSum += number;\n            currentSumOfSquares += number\
    \ * number;\n            if (currentCount > 1) {\n                currentMax =\
    \ currentSum / currentCount;\n                currentSumOfSquares -= currentSum\
    \ * currentMax;\n                currentSum = 0;\n                currentCount\
    \ = 0;\n            }\n            if (currentCount > max) {\n               \
    \ max = currentCount;\n                currentMax = currentMax;\n            \
    \    currentSum = currentSum;\n                currentSumOfSquares = currentSumOfSquares;\n\
    \            }\n            result.Add(currentMax);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd7e3626318f465f8bb3d5f3558c8993>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bd7e3626318f465f8bb3d5f3558c8993>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.First();\n        long currentMax = maxValue;\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n            }\n        }\n        max.Add(currentMax);\n\
    \        long currentMaxValue = maxValue;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n            }\n            if (number == currentMaxValue) {\n   \
    \             max.Add(number);\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <07a8f29adf2b4f1c91eff98f8133f16c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <07a8f29adf2b4f1c91eff98f8133f16c>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <07a8f29adf2b4f1c91eff98f8133f16c>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <07a8f29adf2b4f1c91eff98f8133f16c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        foreach (long number in numbers) {\n         \
    \   currentSum += number;\n            if (currentSum > max) {\n             \
    \   max = currentSum;\n                currentMax = number;\n            }\n \
    \       }\n        result.Add(currentMax);\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6dd33512fa154bfeaf02863c9ac95958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6dd33512fa154bfeaf02863c9ac95958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long cur = 0;\n        long prev\
    \ = 0;\n        foreach (long n in numbers) {\n            cur = n;\n        \
    \    prev = max;\n            max = Math.Max(max, cur);\n            if (prev\
    \ != 0) {\n                result.Add(prev);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <269957a0a30f4c94a254f44dd8b6e556>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <269957a0a30f4c94a254f44dd8b6e556>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplwno9n97.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823664
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> rollingMax =\
    \ new List<long>();\n        long max = 0;\n        long currentMax = 0;\n   \
    \     long currentNumber = 0;\n        long currentSum = 0;\n        long sum\
    \ = 0;\n        foreach (long number in numbers) {\n            currentNumber\
    \ = number;\n            currentSum = currentNumber;\n            rollingMax.Add(currentNumber);\n\
    \            while (currentSum > 0) {\n                currentSum -= currentNumber;\n\
    \                currentMax = currentSum;\n                rollingMax.Add(currentMax);\n\
    \            }\n            sum += currentNumber;\n        }\n        rollingMax.Add(sum);\n\
    \        return rollingMax;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af610bc772e74f23bd011857ae7f87a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <af610bc772e74f23bd011857ae7f87a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = result.Count;\n            }\n            if (number > max) {\n          \
    \      max = number;\n            }\n            currentMaxValue = number;\n \
    \           currentMaxIndex = result.Count;\n            result.Add(number);\n\
    \        }\n        if (currentMaxIndex == result.Count) {\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <01293f9d6e024ad5beef09af67e38314>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <01293f9d6e024ad5beef09af67e38314>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <01293f9d6e024ad5beef09af67e38314>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <01293f9d6e024ad5beef09af67e38314>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        long lastNumber = 0;\n        foreach (long\
    \ number in numbers) {\n            currentNumber = number;\n            currentMax\
    \ = number;\n            while (currentNumber != 0) {\n                currentMax\
    \ = Math.Max(currentMax, currentNumber);\n                currentNumber = currentNumber\
    \ / 10;\n            }\n            result.Add(currentMax);\n            lastNumber\
    \ = currentMax;\n        }\n        result.Add(lastNumber);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3470dd535a1f44759f8907ce7d49fead>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3470dd535a1f44759f8907ce7d49fead>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers.First();\n\
    \        long currentMaxValueIndex = numbers.First();\n        bool first = true;\n\
    \        foreach (long number in numbers) {\n            if (first) {\n      \
    \          first = false;\n                max = number;\n                currentMax\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \            currentMaxValue = number;\n                currentMaxValueIndex =\
    \ numbers.IndexOf(number);\n            } else {\n                if (number >\
    \ currentMax) {\n                    max = number;\n                    currentMax\
    \ = number;\n                    currentMaxIndex = numbers.IndexOf(number);\n\
    \                    currentMaxValue = number;\n                    currentMaxValueIndex\
    \ = numbers.IndexOf(number);\n                }\n            }\n        }\n  \
    \      result.Add(max);\n        foreach (long number in numbers) {\n        \
    \    if (number > currentMax) {\n                result.Add(number);\n       \
    \         currentMax = number;\n                currentMaxIndex = numbers.IndexOf(number);\n\
    \                currentMaxValue = number;\n                currentMaxValueIndex\
    \ = numbers.IndexOf(number);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <995b4f44e239459e961d114772e731e1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <995b4f44e239459e961d114772e731e1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <995b4f44e239459e961d114772e731e1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <995b4f44e239459e961d114772e731e1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers.Max();\n        long current = numbers.First();\n\
    \        long rollingMax = current;\n        foreach (long number in numbers)\
    \ {\n            if (number > rollingMax) {\n                rollingMax = number;\n\
    \            }\n            if (number == max) {\n                result.Add(number);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <91259e14b80b4532bdf627bccc64f3b1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <91259e14b80b4532bdf627bccc64f3b1>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.Max (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <91259e14b80b4532bdf627bccc64f3b1>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <91259e14b80b4532bdf627bccc64f3b1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndex\
    \ = numbers.Count;\n        long currentMaxIndexInResult = -1;\n        bool isMax\
    \ = true;\n        bool isMaxInResult = true;\n        bool isMaxInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResult = true;\n        bool isMaxInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResult = true;\n\
    \        bool isMaxInResultInResultInResultInResultInResultInResult = true;\n\
    \        bool isMaxInResultInResultInResultInResultInResultInResultInResult =\
    \ true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool isMaxInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = true;\n        bool \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3a9yyw32.cs(40,13): error CS1001: Identifier expected

    /tmp/tmp3a9yyw32.cs(40,13): error CS1002: ; expected

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        bool isMax = true;\n        foreach (long\
    \ number in numbers) {\n            currentMax = number;\n            currentMaxIndex\
    \ = 0;\n            while (currentMaxIndex < numbers.Count && currentMax < numbers[currentMaxIndex])\
    \ {\n                currentMax = numbers[currentMaxIndex];\n                currentMaxIndex++;\n\
    \            }\n            if (isMax) {\n                result.Add(currentMax);\n\
    \            } else {\n                result.Add(max);\n            }\n     \
    \       max = currentMax;\n            isMax = !isMax;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcigfp5yz.cs(22,76): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpcigfp5yz.cs(23,38): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    long currentMaxValueIndex = numbers.IndexOf(currentMaxValue);\n        bool\
    \ found = false;\n        bool foundIndex = false;\n        bool foundValue =\
    \ false;\n        bool foundValueIndex = false;\n        bool foundValueIndex2\
    \ = false;\n        bool foundValueIndex3 = false;\n        bool foundValueIndex4\
    \ = false;\n        bool foundValueIndex5 = false;\n        bool foundValueIndex6\
    \ = false;\n        bool foundValueIndex7 = false;\n        bool foundValueIndex8\
    \ = false;\n        bool foundValueIndex9 = false;\n        bool foundValueIndex10\
    \ = false;\n        bool foundValueIndex11 = false;\n        bool foundValueIndex12\
    \ = false;\n        bool foundValueIndex13 = false;\n        bool foundValueIndex14\
    \ = false;\n        bool foundValueIndex15 = false;\n        bool foundValueIndex16\
    \ = false;\n        bool foundValueIndex17 = false;\n        bool foundValueIndex18\
    \ = false;\n        bool foundValueIndex19 = false;\n        bool foundValueIndex20\
    \ = false;\n        bool foundValueIndex21 = false;\n        bool foundValueIndex22\
    \ = false;\n        bool foundValueIndex23 = false;\n        bool foundValueIndex24\
    \ = false;\n        bool foundValueIndex25 = false;\n        bool foundValueIndex26\
    \ = false;\n        bool foundValueIndex27 = false;\n        bool foundValueIndex28\
    \ = false;\n        bool foundValueIndex29 = false;\n        bool foundValueIndex30\
    \ = false;\n        bool foundValueIndex31 = false;\n        bool foundValueIndex32\
    \ = false;\n        bool foundValueIndex33 = false;\n        bool foundValueIndex34\
    \ = false;\n        bool foundValueIndex35 = false;\n        bool foundValueIndex36\
    \ = false;\n        bool foundValueIndex37 = false;\n        bool foundValueIndex38\
    \ = false;\n        bool foundValueIndex39 = false;\n        bool foundValueIndex40\
    \ = false;\n        bool foundValueIndex41 = false;\n        bool foundValueIndex42\
    \ = false;\n        bool foundValueIndex43 = false;\n        bool foundValueIndex44\
    \ = false;\n        bool foundValueIndex45 = false;\n        bool foundValueIndex46\
    \ = false;\n        bool foundValueIndex47 = false;\n        bool foundValueIndex48\
    \ = false;\n        bool foundValueIndex49 = false;\n        bool foundValueIndex50\
    \ = false;\n        bool foundValueIndex51 = false;\n        bool foundValueIndex52\
    \ = false;\n        bool foundValueIndex53 = false;\n        bool foundValueIndex54\
    \ = false;\n        bool foundValueIndex55\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7ysaog1d.cs(77,31): error CS1002: ; expected

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequence = -1;\n        long\
    \ currentMaxIndexInSequenceInSequenceInSequence = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequenceInSequence\
    \ = -1;\n        long currentMaxIndexInSequenceInSequence\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8qtnq_gm.cs(39,49): error CS1002: ; expected

    '
  timestamp: 1659823666
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = numbers.First();\n        long currentNumberIndex = 0;\n\
    \        foreach (long number in numbers) {\n            if (number > currentNumber)\
    \ {\n                currentMax = currentNumber;\n                currentNumber\
    \ = number;\n                currentNumberIndex = currentNumberIndex + 1;\n  \
    \          }\n            else if (number == currentNumber) {\n              \
    \  currentNumber = number;\n                currentNumberIndex = currentNumberIndex\
    \ + 1;\n            }\n            else {\n                currentMax = currentMax;\n\
    \                currentNumber = number;\n                currentNumberIndex =\
    \ currentNumberIndex + 1;\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <7ea0cb0b8e5b499fa43654cc1f211c5b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <7ea0cb0b8e5b499fa43654cc1f211c5b>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000d] in <7ea0cb0b8e5b499fa43654cc1f211c5b>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <7ea0cb0b8e5b499fa43654cc1f211c5b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> max = new List<long>();\n\
    \        long maxValue = numbers.Max();\n        long currentMaxValue = maxValue;\n\
    \        long currentMaxIndex = -1;\n        foreach (long number in numbers)\
    \ {\n            if (number > currentMaxValue) {\n                currentMaxValue\
    \ = number;\n                currentMaxIndex = numbers.IndexOf(number);\n    \
    \        }\n        }\n        max.Add(currentMaxValue);\n        numbers.RemoveAt(currentMaxIndex);\n\
    \        RollingMax(numbers, max, currentMaxValue);\n        return max;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmvc30c4u.cs(25,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpmvc30c4u.cs(26,9): error CS1501: No overload for method ''RollingMax''
    takes 3 arguments

    '
  timestamp: 1659823667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ foreach (long number in numbers) {\n            currentMax = number;\n     \
    \       max = Math.Max(max, currentMax);\n            result.Add(currentMax);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3bd480378cdd4693b8f1fae8bb967c2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3bd480378cdd4693b8f1fae8bb967c2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                result.Add(currentMax);\n                max = currentMax;\n\
    \                currentMax = number;\n            }\n            else if (number\
    \ == currentMax) {\n                currentMax = number;\n            }\n    \
    \        else {\n                max = Math.Max(number, max);\n              \
    \  currentMax = number;\n            }\n        }\n        result.Add(max);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <5d7a5a1c5cdb48168f5573c9bc455261>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5d7a5a1c5cdb48168f5573c9bc455261>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <5d7a5a1c5cdb48168f5573c9bc455261>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <5d7a5a1c5cdb48168f5573c9bc455261>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentSum = 0;\n        long currentSumOfSquares = 0;\n        foreach\
    \ (long number in numbers) {\n            currentSum = currentSum + number;\n\
    \            currentSumOfSquares = currentSumOfSquares + number * number;\n  \
    \          if (currentSum > max) {\n                max = currentSum;\n      \
    \          currentMax = currentSum;\n            }\n            if (currentSumOfSquares\
    \ > currentMax * currentMax) {\n                currentMax = currentSum;\n   \
    \             currentSumOfSquares = currentSumOfSquares - currentMax * currentMax;\n\
    \            }\n            result.Add(currentMax);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e56f7f4f592427d86304ef227db0945>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7e56f7f4f592427d86304ef227db0945>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = -1;\n        long currentMaxIndexValue\
    \ = numbers.Max();\n        bool isMaxValueFound = false;\n        bool isMaxValueFoundInCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValue = false;\n    \
    \    bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndex = false;\n \
    \       bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValue = false;\n\
    \        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValue\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValue\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValue\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        bool isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex\
    \ = false;\n        \n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa_sz6io_.cs(17,14): warning CS0219: The variable ''currentMaxIndex'' is
    assigned but its value is never used

    /tmp/tmpa_sz6io_.cs(19,14): warning CS0219: The variable ''isMaxValueFound'' is
    assigned but its value is never used

    /tmp/tmpa_sz6io_.cs(20,14): warning CS0219: The variable ''isMaxValueFoundInCurrentMaxIndex''
    is assigned but its value is never used

    /tmp/tmpa_sz6io_.cs(21,14): warning CS0219: The variable ''isMaxValueFoundInCurrentMaxIndexValue''
    is assigned but its value is never used

    /tmp/tmpa_sz6io_.cs(22,14): warning CS0219: The variable ''isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndex''
    is assigned but its value is never used

    /tmp/tmpa_sz6io_.cs(23,14): warning CS0219: The variable ''isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValue''
    is assigned but its value is never used

    /tmp/tmpa_sz6io_.cs(24,14): warning CS0219: The variable ''isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex''
    is assigned but its value is never used

    /tmp/tmpa_sz6io_.cs(25,14): warning CS0219: The variable ''isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValue''
    is assigned but its value is never used

    /tmp/tmpa_sz6io_.cs(26,14): warning CS0219: The variable ''isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex''
    is assigned but its value is never used

    /tmp/tmpa_sz6io_.cs(27,14): warning CS0219: The variable ''isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValue''
    is assigned but its value is never used

    /tmp/tmpa_sz6io_.cs(28,14): warning CS0219: The variable ''isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndexValueAndCurrentMaxIndex''
    is assigned but its value is never used

    /tmp/tmpa_sz6io_.cs(29,14): warning CS0219: The variable ''isMaxValueFoundInCurrentMaxIndexValueAndCurrentMaxIndexVa'
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = numbers.First();\n\
    \        foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                result.Add(currentMax);\n                max = currentMax;\n\
    \                currentMax = number;\n            } else if (number == currentMax)\
    \ {\n                currentMax = number;\n            }\n        }\n        result.Add(currentMax);\n\
    \        result.Add(max);\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <2f8c6058ee86408e8a3b86a6a0053e3f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2f8c6058ee86408e8a3b86a6a0053e3f>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x0000a] in <2f8c6058ee86408e8a3b86a6a0053e3f>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2f8c6058ee86408e8a3b86a6a0053e3f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMaxValue\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplwno9n97.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823664
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        long currentSum = 0;\n        foreach (long\
    \ number in numbers) {\n            currentNumber = number;\n            currentSum\
    \ = currentNumber;\n            while (currentSum != 0) {\n                currentMax\
    \ = currentSum;\n                currentSum = 0;\n                foreach (long\
    \ n in numbers) {\n                    if (n == currentNumber) {\n           \
    \             currentSum += n;\n                    }\n                }\n   \
    \             if (currentSum > currentMax) {\n                    currentMax =\
    \ currentSum;\n                }\n            }\n            result.Add(currentMax);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: Timeout
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2402c161e663407ab4e38f0fa61feebe>:0 \n"
  stdout: None
  timestamp: 1659823672
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexInResult\
    \ = 0;\n        long currentMaxIndexInResultInResult = 0;\n        long currentMaxIndexInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResult = 0;\n  \
    \      long currentMaxIndexInResultInResultInResultInResultInResult = 0;\n   \
    \     long currentMaxIndexInResultInResultInResultInResultInResultInResult = 0;\n\
    \        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndexInResultInResultInResultInResultInResultInResultInResultInResultInResult\
    \ = 0;\n        long currentMaxIndex\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7cl5_jei.cs(40,29): error CS1002: ; expected

    '
  timestamp: 1659823667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        bool first = true;\n        foreach (long\
    \ number in numbers) {\n            if (first) {\n                max = number;\n\
    \                currentMax = number;\n                currentMaxIndex = 0;\n\
    \                first = false;\n            } else {\n                if (number\
    \ > currentMax) {\n                    currentMax = number;\n                \
    \    currentMaxIndex = result.Count;\n                }\n            }\n     \
    \       result.Add(number);\n        }\n        result.Add(currentMax);\n    \
    \    result.Add(currentMaxIndex);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98d2206e6eac44fa85b3c79d8f74ec09>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <98d2206e6eac44fa85b3c79d8f74ec09>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823667
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentNumber = 0;\n        foreach (long number in numbers) {\n      \
    \      currentNumber = number;\n            currentMax = number;\n           \
    \ while (currentNumber > 0) {\n                currentMax = Math.Max(currentMax,\
    \ currentNumber);\n                currentNumber--;\n            }\n         \
    \   result.Add(currentMax);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3e7fd417229451a8bc75cb2fbe4f4d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3e7fd417229451a8bc75cb2fbe4f4d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659823664
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = numbers.First();\n        long currentMax\
    \ = max;\n        long currentMaxIndex = -1;\n        bool found = false;\n  \
    \      foreach (long number in numbers) {\n            if (number > currentMax)\
    \ {\n                currentMax = number;\n                currentMaxIndex = result.Count;\n\
    \            }\n            if (number == currentMax) {\n                found\
    \ = true;\n            }\n            result.Add(number);\n        }\n       \
    \ if (!found) {\n            result.Add(currentMax);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RollingMax((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)4L, (long)3L, (long)2L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new\
    \ List<long>(new long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains\
    \ no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <21a0eff3f121471e83f3e503b47159d2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <21a0eff3f121471e83f3e503b47159d2>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.InvalidOperationException: Sequence\
    \ contains no elements\n  at System.Linq.Enumerable.First[TSource] (System.Collections.Generic.IEnumerable`1[T]\
    \ source) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00007] in <21a0eff3f121471e83f3e503b47159d2>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <21a0eff3f121471e83f3e503b47159d2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long max = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = numbers[0];\n    \
    \    foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMaxValue - currentMax;\n            }\n            if (number > max)\
    \ {\n                max = number;\n            }\n        }\n        result.Add(max);\n\
    \        foreach (long number in numbers) {\n            if (number > currentMaxValue)\
    \ {\n                currentMaxValue = number;\n                currentMaxIndex\
    \ = currentMaxValue - currentMax;\n            }\n            if (number > max)\
    \ {\n                max = number;\n            }\n        }\n        result.Add(max);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <2d480644e7c04907816167a894d24732>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2d480644e7c04907816167a894d24732>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index\
    \ was out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.RollingMax\
    \ (System.Collections.Generic.List`1[T] numbers) [0x00010] in <2d480644e7c04907816167a894d24732>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00006] in <2d480644e7c04907816167a894d24732>:0\
    \ \n"
  stdout: ''
  timestamp: 1659823667
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // From a given list of integers, generate a list of rolling\
    \ maximum element found until given moment\n    // in the sequence.\n    // >>>\
    \ RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L,\
    \ (long)3L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)3L, (long)3L, (long)4L, (long)4L}))\n    public static\
    \ List<long> RollingMax(List<long> numbers) {\n        List<long> result = new\
    \ List<long>();\n        long maxValue = numbers.Max();\n        long currentMax\
    \ = maxValue;\n        long currentMaxIndex = 0;\n        long currentMaxIndexValue\
    \ = 0;\n        long currentMaxIndexValue2 = 0;\n        long currentMaxIndexValue3\
    \ = 0;\n        long currentMaxIndexValue4 = 0;\n        long currentMaxIndexValue5\
    \ = 0;\n        long currentMaxIndexValue6 = 0;\n        long currentMaxIndexValue7\
    \ = 0;\n        long currentMaxIndexValue8 = 0;\n        long currentMaxIndexValue9\
    \ = 0;\n        long currentMaxIndexValue10 = 0;\n        long currentMaxIndexValue11\
    \ = 0;\n        long currentMaxIndexValue12 = 0;\n        long currentMaxIndexValue13\
    \ = 0;\n        long currentMaxIndexValue14 = 0;\n        long currentMaxIndexValue15\
    \ = 0;\n        long currentMaxIndexValue16 = 0;\n        long currentMaxIndexValue17\
    \ = 0;\n        long currentMaxIndexValue18 = 0;\n        long currentMaxIndexValue19\
    \ = 0;\n        long currentMaxIndexValue20 = 0;\n        long currentMaxIndexValue21\
    \ = 0;\n        long currentMaxIndexValue22 = 0;\n        long currentMaxIndexValue23\
    \ = 0;\n        long currentMaxIndexValue24 = 0;\n        long currentMaxIndexValue25\
    \ = 0;\n        long currentMaxIndexValue26 = 0;\n        long currentMaxIndexValue27\
    \ = 0;\n        long currentMaxIndexValue28 = 0;\n        long currentMaxIndexValue29\
    \ = 0;\n        long currentMaxIndexValue30 = 0;\n        long currentMaxIndexValue31\
    \ = 0;\n        long currentMaxIndexValue32 = 0;\n        long currentMaxIndexValue33\
    \ = 0;\n        long currentMaxIndexValue34 = 0;\n        long currentMaxIndexValue35\
    \ = 0;\n        long currentMaxIndexValue36 = 0;\n        long currentMaxIndexValue37\
    \ = 0;\n        long currentMaxIndexValue38 = 0;\n        long currentMaxIndexValue39\
    \ = 0;\n        long currentMaxIndexValue40 = 0;\n        long currentMaxIndexValue41\
    \ = 0;\n        long currentMaxIndexValue42 = 0;\n        long currentMaxIndexValue43\
    \ = 0;\n        long currentMaxIndexValue44 = 0;\n        long currentMaxIndexValue45\
    \ = 0;\n        long currentMaxIndexValue46 = 0;\n        long currentMaxIndexValue47\
    \ = 0;\n        long currentMaxIndexValue48 = 0;\n        long currentMaxIndexValue49\
    \ = 0;\n        long currentMaxIndexValue50 = 0;\n        long currentMaxIndexValue51\
    \ = 0;\n        long currentMaxIndexValue52 = 0;\n        long currentMaxIndexValue53\
    \ = 0;\n        long currentMaxIndexValue54\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RollingMax((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(RollingMax((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new long[]{(long)4L,\
    \ (long)3L, (long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L, (long)4L, (long)4L}))));\n    Debug.Assert(RollingMax((new List<long>(new\
    \ long[]{(long)3L, (long)2L, (long)3L, (long)100L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)3L, (long)3L, (long)100L, (long)100L}))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn5dge4tw.cs(71,36): error CS1002: ; expected

    '
  timestamp: 1659823663
