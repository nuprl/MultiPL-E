name: HumanEval_145_order_by_points
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function which sorts the given list of integers\n  \
  \  // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
  \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
  \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
  \    public static List<long> OrderByPoints(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
  \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
  \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
  \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
  \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
  \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
  \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
  \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
  \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
  \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
  \ (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,\
  \ (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,\
  \ (long)6L}))));\n    }\n\n}\n"
completions: ["        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => { return\
    \ SumOfDigits(x) - SumOfDigits(y); }));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => sum - x - y));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(num);\n        }\n        Array.Sort(result, (a,\
    \ b) => sum - a - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n     \
    \   long maxSumIndex = 0;\n        long maxSumDigit = 0;\n        long maxSumDigitIndex\
    \ = 0;\n        long maxSumDigitDigit = 0;\n        long maxSumDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigit = 0;\n        long maxSumDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigit",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => sum - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, new Comparison<long>((x,\
    \ y) => SumOfDigits(x) - SumOfDigits(y)));\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, delegate(long x,\
    \ long y) {\n            return sum - x - y;\n        });\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        if (nums.Count == 0) {\n            return nums;\n        }\n        List<long>\
    \ numsCopy = new List<long>(nums);\n        long sum = 0;\n        long maxSum\
    \ = numsCopy.Max();\n        long minSum = numsCopy.Min();\n        long maxSumIndex\
    \ = 0;\n        long minSumIndex = 0;\n        long maxSumPoint = 0;\n       \
    \ long minSumPoint = 0;\n        long maxSumPointIndex = 0;\n        long minSumPointIndex\
    \ = 0;\n        foreach (long num in numsCopy) {\n            sum += num;\n  \
    \          if (sum > maxSum) {\n                maxSum = sum;\n              \
    \  maxSumIndex = numsCopy.IndexOf(num);\n                maxSumPoint = num;\n\
    \                maxSumPointIndex = numsCopy.IndexOf(num);\n            }\n  \
    \          if (sum < minSum) {\n                minSum = sum;\n              \
    \  minSumIndex = numsCopy.IndexOf(num);\n                minSumPoint = num;\n\
    \                minSumPointIndex = numsCopy.IndexOf(num);\n            }\n  \
    \      }\n        List<long> result = new List<long>();\n        foreach (long\
    \ num in numsCopy) {\n            if (num == maxSumPoint) {\n                result.Add(maxSumPointIndex);\n\
    \            } else if (num == minSumPoint) {\n                result.Add(minSumPointIndex);\n\
    \            } else {\n                result.Add(numsCopy.IndexOf(num));\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n\
    \            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ new Comparison<long>((x, y) => { return SumDigits(x) - SumDigits(y); }));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, new Comparison<long>((x,\
    \ y) => SumDigits(x) - SumDigits(y)));\n        return result;", "        if (nums.Count\
    \ == 0) return nums;\n        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ delegate(long a, long b) {\n            return sum - a - b;\n        });\n \
    \       return result;", "        long sum = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long n in nums) {\n            sum += n;\n \
    \           result.Add(n);\n        }\n        Array.Sort(result, (x, y) => {\
    \ return SumDigits(x) - SumDigits(y); });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => sum - x - y);\n        return result;", "  \
    \      long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, delegate(long x,\
    \ long y) {\n            return sum - x - y;\n        });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => SumDigits(a) - SumDigits(b));\n\
    \        return result;", "        if (nums.Count == 0) return nums;\n       \
    \ List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, delegate(long x,\
    \ long y) { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ maxSum = 0;\n        long maxSumIndex = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n                maxSumIndex = nums.IndexOf(n);\n            }\n    \
    \    }\n        foreach (long n in nums) {\n            if (sum == maxSum) {\n\
    \                result.Add(n);\n            }\n            sum -= n;\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        long max = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            if (sum > max) {\n\
    \                max = sum;\n            }\n        }\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            if (sum > max) {\n        \
    \        max = sum;\n            }\n        }\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > max) {\n                max\
    \ = sum;\n            }\n        }\n        foreach (long num in nums) {\n   \
    \         sum += num;\n            if (sum > max) {\n                max = sum;\n\
    \            }\n        }\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            if (sum > max) {\n                max = sum;\n        \
    \    }\n        }\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \     }\n        foreach (long num in nums) {\n            sum += num;\n     \
    \       if (sum > max) {\n                max = sum;\n            }\n        }\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum > max) {\n                max = sum;\n            }\n        }\n      \
    \  foreach (long num in nums) {\n            sum += num;\n            if (sum\
    \ > max) {\n                max = sum;\n            }\n        }\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            if (sum > max) {\n\
    \                max = sum;\n            }\n        }\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            if (sum > max) {\n        \
    \        max = sum;\n            }\n        }\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > max) {\n                max\
    \ = sum;\n            }\n        }\n        foreach (long num in nums) {\n   \
    \         sum += num;\n            if (sum > max) {\n                max = sum;\n\
    \            }\n        }\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            if (sum > max) {\n                max = sum;\n        \
    \    }\n        }\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \     }\n        foreach (long num in nums) {\n            sum += num;\n     \
    \       if (sum > max) {\n                max = sum;\n            }\n        }\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum > max) {\n                max = sum;\n            }\n        }\n      \
    \  foreach (long num in nums) {\n            sum += num;\n            if (sum\
    \ > ", "        List<long> result = new List<long>();\n        long sum = 0;\n\
    \        foreach (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, new Comparison<long>((x,\
    \ y) => sum - x - y));\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (x, y) => sum - x - y);\n        return result;", "    \
    \    long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        long\
    \ max = 0;\n        foreach (long n in nums) {\n            sum += n;\n      \
    \      if (sum > max) {\n                max = sum;\n            }\n         \
    \   result.Add(n);\n        }\n        List<long> sortedResult = new List<long>();\n\
    \        foreach (long n in result) {\n            sortedResult.Add(n);\n    \
    \    }\n        sortedResult.Sort((x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return sortedResult;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => SumOfDigits(x) - SumOfDigits(y));\n        return result;", "        long\
    \ sum = 0;\n        List<long> result = new List<long>();\n        foreach (long\
    \ num in nums) {\n            sum += num;\n            result.Add(num);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        long sum = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(num);\n        }\n        Array.Sort(result, (a,\
    \ b) => sum - a - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long sum = 0;\n        foreach (long num in nums) {\n            sum += num;\n\
    \            result.Add(num);\n        }\n        Array.Sort(result, (x, y) =>\
    \ { return SumDigits(x) - SumDigits(y); });\n        return result;", "      \
    \  List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x);\n        return result;",
  "        if (nums.Count == 0) return nums;\n        long sum = 0;\n        long\
    \ maxSum = nums.Max();\n        long minSum = nums.Min();\n        foreach (long\
    \ num in nums) {\n            sum += num;\n            if (sum > maxSum) {\n \
    \               maxSum = sum;\n            }\n            if (sum < minSum) {\n\
    \                minSum = sum;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        long currentSum = sum;\n        long currentMaxSum\
    \ = maxSum;\n        long currentMinSum = minSum;\n        foreach (long num in\
    \ nums) {\n            currentSum += num;\n            if (currentSum > currentMaxSum)\
    \ {\n                currentMaxSum = currentSum;\n            }\n            if\
    \ (currentSum < currentMinSum) {\n                currentMinSum = currentSum;\n\
    \            }\n            result.Add(num);\n        }\n        result.Sort();\n\
    \        return result;", "        long sum = 0;\n        List<long> result =\
    \ new List<long>();\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (x, y) => SumDigits(x)\
    \ - SumDigits(y));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        long sum = 0;\n \
    \       List<long> result = new List<long>();\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ new Comparison<long>((x, y) => { return SumDigits(x) - SumDigits(y); }));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (x, y) => SumDigits(x)\
    \ - SumDigits(y));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        long sum = 0;\n \
    \       foreach (long n in nums) {\n            sum += n;\n        }\n       \
    \ List<long> result = new List<long>();\n        foreach (long n in nums) {\n\
    \            int digit = n % 10;\n            int index = sum - digit;\n     \
    \       if (index >= 0) {\n                result.Add(nums[index]);\n        \
    \    }\n            sum -= digit;\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, (x, y) => SumDigits(x)\
    \ - SumDigits(y));\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        long sum = 0;\n \
    \       List<long> result = new List<long>();\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => SumOfDigits(x) - SumOfDigits(y));\n        return result;", "    \
    \    long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => sum - a - b);\n        return result;", "        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long num in nums) {\n         \
    \   sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => { return SumDigits(a) - SumDigits(b); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, (a, b) => sum - b);\n\
    \        return result;", "        long sum = 0;\n        List<long> result =\
    \ new List<long>();\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, (a, b) => {\
    \ return SumDigits(a) - SumDigits(b); });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - b);\n        return result;", "  \
    \      long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return\
    \ result;", "        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - b);\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => SumDigits(x) - SumDigits(y));\n        return result;", "        if (nums.Count\
    \ == 0) return nums;\n        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (x, y) => sum - x - y);\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        if (nums.Count == 0) return nums;\n        long sum = 0;\n        long\
    \ maxSum = nums.Max();\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n  \
    \          }\n        }\n        List<long> result = new List<long>();\n     \
    \   foreach (long num in nums) {\n            sum += num;\n            if (sum\
    \ > maxSum) {\n                result.Add(num);\n                sum -= num;\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (x, y) => sum - x);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;", "        long sum = 0;\n        List<long> result =\
    \ new List<long>();\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(num);\n        }\n        Array.Sort(result, (a,\
    \ b) => sum - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x - y);\n        return result;", "        long sum = 0;\n \
    \       List<long> result = new List<long>();\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => { return SumDigits(a) - SumDigits(b); });\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        long sum = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, delegate(long\
    \ x, long y) {\n            return sum - x - y;\n        });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        if (nums.Count == 0) {\n            return\
    \ nums;\n        }\n        List<long> numsCopy = new List<long>(nums);\n    \
    \    long sum = 0;\n        foreach (long num in numsCopy) {\n            sum\
    \ += num;\n        }\n        long maxSum = sum;\n        List<long> result =\
    \ new List<long>();\n        foreach (long num in numsCopy) {\n            long\
    \ newSum = sum - num;\n            if (newSum > maxSum) {\n                maxSum\
    \ = newSum;\n            }\n            result.Add(num);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        long maxSum = 0;\n        long maxSumIndex = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            if (sum > maxSum)\
    \ {\n                maxSum = sum;\n                maxSumIndex = num;\n     \
    \       }\n        }\n        foreach (long num in nums) {\n            if (num\
    \ == maxSumIndex) {\n                result.Add(num);\n            }\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - b);\n        return result;", "        if (nums.Count == 0)\
    \ return nums;\n        List<long> result = new List<long>();\n        long sum\
    \ = 0;\n        long maxSum = 0;\n        long maxSumIndex = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            if (sum > maxSum) {\n\
    \                maxSum = sum;\n                maxSumIndex = nums.IndexOf(n);\n\
    \            }\n        }\n        foreach (long n in nums) {\n            sum\
    \ += n;\n            if (sum == maxSum) {\n                result.Add(n);\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long sum = 0;\n        foreach (long num in nums) {\n            sum += num;\n\
    \            result.Add(num);\n        }\n        Array.Sort(result, delegate(long\
    \ a, long b) {\n            return sum - a - b;\n        });\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        long maxSum = 0;\n        long maxIndex = 0;\n        foreach (long\
    \ num in nums) {\n            sum += num;\n            if (sum > maxSum) {\n \
    \               maxSum = sum;\n                maxIndex = num;\n            }\n\
    \        }\n        result.Add(maxIndex);\n        foreach (long num in nums)\
    \ {\n            sum -= num;\n            if (sum > maxSum) {\n              \
    \  maxSum = sum;\n                maxIndex = num;\n            }\n        }\n\
    \        result.Add(maxIndex);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long sum = 0;\n        long maxSum = 0;\n        long maxIndex = -1;\n   \
    \     foreach (long num in nums) {\n            sum += num;\n            if (sum\
    \ > maxSum) {\n                maxSum = sum;\n                maxIndex = num;\n\
    \            }\n        }\n        foreach (long num in nums) {\n            if\
    \ (num == maxIndex) {\n                result.Add(num);\n            }\n     \
    \   }\n        return result;", "        long sum = 0;\n        List<long> result\
    \ = new List<long>();\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, new Comparison<long>((x,\
    \ y) => { return SumDigits(x) - SumDigits(y); }));\n        return result;", " \
    \       List<long> result = new List<long>();\n        long sum = 0;\n       \
    \ foreach (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(num);\n        }\n        Array.Sort(result, (a,\
    \ b) => sum - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => sum - x - y);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, (a, b) => sum - a\
    \ - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => sum - a - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n        return\
    \ result;", "        if (nums.Count == 0) {\n            return nums;\n      \
    \  }\n        List<long> result = new List<long>();\n        long sum = 0;\n \
    \       foreach (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        List<long> sorted = new List<long>();\n        long curSum\
    \ = 0;\n        long curSum2 = 0;\n        foreach (long num in nums) {\n    \
    \        curSum += num;\n            curSum2 += num * num;\n            if (curSum2\
    \ > sum) {\n                sorted.Add(num);\n                curSum2 = sum;\n\
    \            }\n        }\n        return sorted;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x - y);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n     \
    \   foreach (long num in nums) {\n            sum += num;\n            if (sum\
    \ > maxSum) {\n                maxSum = sum;\n            }\n            result.Add(num);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => { return a - b; });\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => sum - x - y);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n     \
    \   long maxSumIndex = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n  \
    \              maxSumIndex = num;\n            }\n        }\n        foreach (long\
    \ num in nums) {\n            if (num == maxSumIndex) {\n                result.Add(num);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (a, b) => SumOfDigits(a) - SumOfDigits(b));\n        return\
    \ result;", "        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => { return\
    \ SumDigits(x) - SumDigits(y); }));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n \
    \       return result;", "        long sum = 0;\n        foreach (long num in\
    \ nums) {\n            sum += num;\n        }\n        List<long> result = new\
    \ List<long>();\n        foreach (long num in nums) {\n            int digit =\
    \ num % 10;\n            int index = sum - digit;\n            if (index >= 0)\
    \ {\n                result.Insert(index, num);\n            }\n        }\n  \
    \      return result;", "        long sum = 0;\n        List<long> result = new\
    \ List<long>();\n        foreach (long num in nums) {\n            sum += num;\n\
    \            result.Add(num);\n        }\n        Array.Sort(result, (x, y) =>\
    \ { return SumDigits(x) - SumDigits(y); });\n        return result;", "      \
    \  if (nums.Count == 0)\n            return nums;\n        List<long> result =\
    \ new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (a, b) => SumDigits(a) - SumDigits(b));\n        return\
    \ result;", "        if (nums.Count == 0) return nums;\n        long sum = 0;\n\
    \        long maxSum = nums.Max();\n        foreach (long n in nums) {\n     \
    \       sum += n;\n            if (sum > maxSum) maxSum = sum;\n        }\n  \
    \      List<long> result = new List<long>();\n        long curSum = 0;\n     \
    \   long curMaxSum = maxSum;\n        foreach (long n in nums) {\n           \
    \ curSum += n;\n            if (curSum > curMaxSum) {\n                result.Add(n);\n\
    \                curSum = n;\n                curMaxSum = maxSum;\n          \
    \  }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        long maxSum = 0;\n        long maxSumIndex = 0;\n\
    \        foreach (long num in nums) {\n            sum += num;\n            if\
    \ (sum > maxSum) {\n                maxSum = sum;\n                maxSumIndex\
    \ = nums.IndexOf(num);\n            }\n        }\n        foreach (long num in\
    \ nums) {\n            if (num == maxSumIndex) {\n                result.Add(num);\n\
    \            }\n        }\n        return result;", "        long sum = 0;\n \
    \       List<long> result = new List<long>();\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, delegate(long x, long y) { return (sum - x\
    \ + y); });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long num in nums) {\n\
    \            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        long maxSum = 0;\n        long\
    \ maxSumIndex = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            \
    \    maxSumIndex = nums.IndexOf(n);\n            }\n        }\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            if (sum == maxSum) {\n\
    \                result.Add(n);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => sum - x);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => SumDigits(x) - SumDigits(y));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(num);\n        }\n        Array.Sort(result, (a,\
    \ b) => sum - a - b);\n        return result;", "        if (nums.Count == 0)\
    \ {\n            return nums;\n        }\n        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        long maxSum = nums.Max();\n        long minSum\
    \ = nums.Min();\n        foreach (long num in nums) {\n            sum += num;\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        long maxSumIndex = nums.FindIndex(n => n == maxSum);\n   \
    \     long minSumIndex = nums.FindIndex(n => n == minSum);\n        long maxSumSum\
    \ = maxSumIndex == nums.Count ? 0 : nums[maxSumIndex];\n        long minSumSum\
    \ = minSumIndex == nums.Count ? 0 : nums[minSumIndex];\n        long maxSumSumIndex\
    \ = 0;\n        long minSumSumIndex = 0;\n        long maxSumSumIndex2 = 0;\n\
    \        long minSumSumIndex2 = 0;\n        long maxSumSumIndex3 = 0;\n      \
    \  long minSumSumIndex3 = 0;\n        foreach (long num in nums) {\n         \
    \   sum += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxSumIndex = num;\n                maxSumSum = num;\n      \
    \          maxSumSumIndex = num;\n                maxSumSumIndex2 = num;\n   \
    \             maxSumSumIndex3 = num;\n            }\n            if (sum < minSum)\
    \ {\n                minSum = sum;\n                minSumIndex = num;\n     \
    \           minSumSum = num;\n                minSumSumIndex = num;\n        \
    \        minSumSumIndex2 = num;\n                minSumSumIndex3 = num;\n    \
    \        }\n            if (sum == maxSum) {\n                maxSumSumIndex2\
    \ = num;\n                maxSumSumIndex3 = num;\n            }\n            if\
    \ (sum == minSum) {\n                minSumSumIndex2 = num;\n                minSumSumIndex3\
    \ = num;\n            }\n        }\n        long maxSumSumIndex4 = nums.FindIndex(n\
    \ => n == maxSumSum);\n        long minSumSumIndex4 = nums.FindIndex(n => n ==\
    \ minSumSum);\n        long maxSumSumIndex5 = nums.FindIndex(n => n == maxSumSumIndex4);\n\
    \        long minSumSumIndex5 = nums.FindIndex(n => n == minSumSumIndex4);\n \
    \       long maxSumSumIndex6 = nums.FindIndex(n => n == maxSumSumIndex5);\n  \
    \      long minSumSumIndex6 = nums.FindIndex(n => n == ", "        long sum =\
    \ 0;\n        List<long> result = new List<long>();\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n\
    \        return result;", "        long sum = 0;\n        List<long> result =\
    \ new List<long>();\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(num);\n        }\n        Array.Sort(result, delegate(long\
    \ a, long b) {\n            return sum - a - b;\n        });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => { return SumDigits(a) - SumDigits(b); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n \
    \       return result;", "        if (nums.Count == 0) {\n            return nums;\n\
    \        }\n        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        long maxSum = nums.Max();\n        long minSum = nums.Min();\n \
    \       foreach (long n in nums) {\n            sum += n;\n            if (sum\
    \ > maxSum) {\n                maxSum = sum;\n            }\n            if (sum\
    \ < minSum) {\n                minSum = sum;\n            }\n        }\n     \
    \   long maxSumIndex = 0;\n        long minSumIndex = 0;\n        long maxSumSum\
    \ = maxSum;\n        long minSumSum = minSum;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n                maxSumIndex = n;\n            }\n            if (sum\
    \ < minSum) {\n                minSum = sum;\n                minSumIndex = n;\n\
    \            }\n        }\n        bool swap = false;\n        long maxSumSumIndex\
    \ = 0;\n        long minSumSumIndex = 0;\n        foreach (long n in nums) {\n\
    \            sum += n;\n            if (sum > maxSum) {\n                maxSum\
    \ = sum;\n                maxSumSumIndex = n;\n            }\n            if (sum\
    \ < minSum) {\n                minSum = sum;\n                minSumSumIndex =\
    \ n;\n            }\n        }\n        if (maxSumSumIndex == minSumSumIndex)\
    \ {\n            swap = true;\n        }\n        if (swap) {\n            long\
    \ temp = maxSumSumIndex;\n            maxSumSumIndex = minSumSumIndex;\n     \
    \       minSumSumIndex = temp;\n        }\n        long maxSumSum = maxSum;\n\
    \        long minSumSum = minSum;\n        long maxSumIndex = maxSumIndex;\n \
    \       long minSumIndex = minSumIndex;\n        long maxSum = maxSum;\n     \
    \   long minSum = minSum;\n        long maxSumSumIndex = 0;\n        long minSumSumIndex\
    \ = 0;\n        foreach (long n in nums) {\n            sum += n;\n          \
    \  if (sum > maxSum) {\n                maxSum = sum;\n                maxSumSumIndex\
    \ = n;\n            }\n            if (sum < minSum) {\n                minSum\
    \ = sum;\n                minSumSumIndex = n;\n            }\n        }\n    \
    \    if (maxSumSumIndex == minSumSumIndex) {\n            swap = true;\n     \
    \   }\n        if (swap) {\n            long temp = maxSumSumIndex;\n        \
    \    maxSumSumIndex = minSumSumIndex;\n            minSumSumIndex = temp;\n  \
    \      }\n        long maxSumSum = maxSum;\n        long minSumSum = minSum;\n\
    \        ", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return\
    \ result;", "        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => sum - x\
    \ - y));\n        return result;", "        long sum = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long n in nums) {\n           \
    \ sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n     \
    \   long maxIndex = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n  \
    \              maxIndex = num;\n            }\n        }\n        foreach (long\
    \ num in nums) {\n            if (num == maxIndex) {\n                result.Add(num);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x - y);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (x, y) => sum - x - y);\n        return result;", "    \
    \    long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, new Comparison<long>((x, y) => SumDigits(x) - SumDigits(y)));\n\
    \        return result;", "        long sum = 0;\n        List<long> result =\
    \ new List<long>();\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(num);\n        }\n        Array.Sort(result, delegate\
    \ (long x, long y) {\n            return sum - x - y;\n        });\n        return\
    \ result;", "        long sum = 0;\n        foreach (long n in nums) {\n     \
    \       sum += n;\n        }\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            int index = Convert.ToInt32(Math.Floor(Math.Log10(n)));\n\
    \            long temp = sum - n;\n            if (temp > 0) {\n             \
    \   result.Add(n);\n                result.Add(temp);\n            }\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x - y);\n        return result;", "        long sum = 0;\n \
    \       List<long> result = new List<long>();\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (x, y) => SumDigits(x) - SumDigits(y));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => { return\
    \ SumDigits(x) - SumDigits(y); }));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long num\
    \ in nums) {\n            sum += num;\n            result.Add(num);\n        }\n\
    \        Array.Sort(result, delegate (long a, long b) {\n            return sum\
    \ - a - b;\n        });\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n\
    \            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        long maxSum = sum;\n        List<long> maxSumIndexes = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            if (sum\
    \ > maxSum) {\n                maxSum = sum;\n                maxSumIndexes.Clear();\n\
    \                maxSumIndexes.Add(n);\n            } else if (sum == maxSum)\
    \ {\n                maxSumIndexes.Add(n);\n            }\n        }\n       \
    \ List<long> sortedNums = new List<long>();\n        foreach (long n in nums)\
    \ {\n            if (maxSumIndexes.Contains(n)) {\n                sortedNums.Add(n);\n\
    \            }\n        }\n        return sortedNums;", "        long sum = 0;\n\
    \        List<long> result = new List<long>();\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ new Comparison<long>((x, y) => SumDigits(x) - SumDigits(y)));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, (a, b) => sum - a\
    \ - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => sum - x - y);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (x, y) => sum - x - y);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            result.Add(num);\n        }\n      \
    \  Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (x, y) => SumOfDigits(x) - SumOfDigits(y));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(num);\n        }\n        Array.Sort(result, new\
    \ Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n        return\
    \ result;", "        if (nums.Count == 0)\n            return nums;\n        long\
    \ sum = 0;\n        long maxSum = nums.Max();\n        foreach (long num in nums)\
    \ {\n            sum += num;\n            if (sum > maxSum) {\n              \
    \  maxSum = sum;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        long currentSum = sum;\n        foreach (long num in nums) {\n      \
    \      currentSum -= num;\n            if (currentSum > 0) {\n               \
    \ result.Add(num);\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long num in nums) {\n            sum\
    \ += num;\n            result.Add(num);\n        }\n        Array.Sort(result,\
    \ (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => { return SumDigits(x)\
    \ - SumDigits(y); }));\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n\
    \            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, (x, y) => { return\
    \ SumDigits(x) - SumDigits(y); });\n        return result;", "        if (nums.Count\
    \ == 0) return nums;\n        List<long> result = new List<long>();\n        long\
    \ sum = 0;\n        foreach (long num in nums) {\n            sum += num;\n  \
    \          result.Add(num);\n        }\n        long maxSum = sum;\n        long\
    \ maxIndex = -1;\n        for (int i = 0; i < nums.Count; i++) {\n           \
    \ sum += nums[i];\n            if (sum > maxSum) {\n                maxSum = sum;\n\
    \                maxIndex = i;\n            }\n        }\n        List<long> sortedResult\
    \ = new List<long>();\n        for (int i = 0; i < nums.Count; i++) {\n      \
    \      if (i == maxIndex) sortedResult.Add(nums[i]);\n            else sortedResult.Add(nums[maxIndex]);\n\
    \        }\n        return sortedResult;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => sum - a - b);\n        return result;"]
stop_tokens:
- "\n    }\n"
