name: HumanEval_145_order_by_points
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function which sorts the given list of integers\n  \
  \  // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    // >>> OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n\
  \    // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,\
  \ (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n\
  \    public static List<long> OrderByPoints(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
  \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
  \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
  \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
  \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
  \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
  \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
  \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
  \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
  \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
  \ (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,\
  \ (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,\
  \ (long)6L}))));\n    }\n\n}\n"
completions: ["        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, new Comparison<long>((x, y) => { return\
    \ SumOfDigits(x) - SumOfDigits(y); }));\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long sum = 0;\n        foreach (long n in\
    \ nums) {\n            sum += n;\n            result.Add(n);\n        }\n    \
    \    Array.Sort(result, (a, b) => sum - a - b);\n        return result;", "  \
    \      List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, new Comparison<long>((x, y) => sum - x - y));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long num in nums) {\n            sum +=\
    \ num;\n            result.Add(num);\n        }\n        Array.Sort(result, (a,\
    \ b) => sum - a - b);\n        return result;", "        List<long> result = new\
    \ List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n \
    \           sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ (a, b) => sum - a - b);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n     \
    \   long maxSumIndex = 0;\n        long maxSumDigit = 0;\n        long maxSumDigitIndex\
    \ = 0;\n        long maxSumDigitDigit = 0;\n        long maxSumDigitDigitIndex\
    \ = 0;\n        long maxSumDigitDigitDigit = 0;\n        long maxSumDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigitDigitDigit\
    \ = 0;\n        long maxSumDigitDigitDigitDigitDigit = 0;\n        long maxSumDigitDigitDigit",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (a, b)\
    \ => sum - b);\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, new Comparison<long>((x,\
    \ y) => SumOfDigits(x) - SumOfDigits(y)));\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => sum - x - y);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long sum =\
    \ 0;\n        foreach (long num in nums) {\n            sum += num;\n        \
    \    result.Add(num);\n        }\n        Array.Sort(result, delegate(long x,\
    \ long y) {\n            return sum - x - y;\n        });\n        return result;",
  "        long sum = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long num in nums) {\n            sum += num;\n            result.Add(num);\n\
    \        }\n        Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y);\
    \ });\n        return result;", "        List<long> result = new List<long>();\n\
    \        long sum = 0;\n        foreach (long n in nums) {\n            sum +=\
    \ n;\n            result.Add(n);\n        }\n        Array.Sort(result, (x, y)\
    \ => { return SumDigits(x) - SumDigits(y); });\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long sum = 0;\n        foreach\
    \ (long n in nums) {\n            sum += n;\n            result.Add(n);\n    \
    \    }\n        Array.Sort(result, (a, b) => sum - a - b);\n        return result;",
  "        if (nums.Count == 0) {\n            return nums;\n        }\n        List<long>\
    \ numsCopy = new List<long>(nums);\n        long sum = 0;\n        long maxSum\
    \ = numsCopy.Max();\n        long minSum = numsCopy.Min();\n        long maxSumIndex\
    \ = 0;\n        long minSumIndex = 0;\n        long maxSumPoint = 0;\n       \
    \ long minSumPoint = 0;\n        long maxSumPointIndex = 0;\n        long minSumPointIndex\
    \ = 0;\n        foreach (long num in numsCopy) {\n            sum += num;\n  \
    \          if (sum > maxSum) {\n                maxSum = sum;\n              \
    \  maxSumIndex = numsCopy.IndexOf(num);\n                maxSumPoint = num;\n\
    \                maxSumPointIndex = numsCopy.IndexOf(num);\n            }\n  \
    \          if (sum < minSum) {\n                minSum = sum;\n              \
    \  minSumIndex = numsCopy.IndexOf(num);\n                minSumPoint = num;\n\
    \                minSumPointIndex = numsCopy.IndexOf(num);\n            }\n  \
    \      }\n        List<long> result = new List<long>();\n        foreach (long\
    \ num in numsCopy) {\n            if (num == maxSumPoint) {\n                result.Add(maxSumPointIndex);\n\
    \            } else if (num == minSumPoint) {\n                result.Add(minSumPointIndex);\n\
    \            } else {\n                result.Add(numsCopy.IndexOf(num));\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long sum = 0;\n        foreach (long n in nums) {\n\
    \            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,\
    \ new Comparison<long>((x, y) => { return SumDigits(x) - SumDigits(y); }));\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n\
    \            result.Add(n);\n        }\n        Array.Sort(result, new Comparison<long>((x,\
    \ y) => SumDigits(x) - SumDigits(y)));\n        return result;", "        if (nums.Count\
    \ == 0) return nums;\n        long sum = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n\
    \        }\n        Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b);\
    \ });\n        return result;"]
stop_tokens:
- "\n    }\n"
