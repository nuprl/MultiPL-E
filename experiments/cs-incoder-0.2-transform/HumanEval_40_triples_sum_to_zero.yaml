name: HumanEval_40_triples_sum_to_zero
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // triples_sum_to_zero takes a list of integers as an input.\n\
  \    // it returns True if there are three distinct elements in the list that\n\
  \    // sum to zero, and False otherwise.\n    // >>> TriplesSumToZero((new List<long>(new\
  \ long[]{(long)1L, (long)3L, (long)5L, (long)0L})))\n    // (false)\n    // >>>\
  \ TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L, (long)-2L, (long)1L})))\n\
  \    // (true)\n    // >>> TriplesSumToZero((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)7L})))\n    // (false)\n    // >>> TriplesSumToZero((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)9L, (long)7L})))\n\
  \    // (true)\n    // >>> TriplesSumToZero((new List<long>(new long[]{(long)1L})))\n\
  \    // (false)\n    public static bool TriplesSumToZero(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TriplesSumToZero((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)5L, (long)0L}))) == (false));\n\
  \    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)5L, (long)-1L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new\
  \ long[]{(long)1L, (long)3L, (long)-2L, (long)1L}))) == (true));\n    Debug.Assert(TriplesSumToZero((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)7L}))) == (false));\n\
  \    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)5L, (long)7L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)-5L, (long)3L, (long)9L, (long)7L}))) == (true));\n\
  \    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L}))) == (false));\n\
  \    Debug.Assert(TriplesSumToZero((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)5L, (long)-100L}))) == (false));\n    Debug.Assert(TriplesSumToZero((new\
  \ List<long>(new long[]{(long)100L, (long)3L, (long)5L, (long)-100L}))) == (false));\n\
  \    }\n\n}\n"
completions: ["        long sum = 0;\n        foreach (long i in l) {\n          \
    \  sum += i;\n        }\n        if (sum == 0) {\n            return false;\n\
    \        }\n        long a = 0, b = 0, c = 0;\n        foreach (long i in l) {\n\
    \            if (i == 0) {\n                a += i;\n            }\n         \
    \   if (i == 1) {\n                b += i;\n            }\n            if (i ==\
    \ 2) {\n                c += i;\n            }\n        }\n        if (a == 0\
    \ && b == 0 && c == 0)\n            return true;\n        return false;", "  \
    \      long sum = 0;\n        foreach (long i in l) {\n            sum += i;\n\
    \        }\n        if (sum == 0) {\n            return true;\n        }\n   \
    \     long sum2 = 0;\n        foreach (long i in l) {\n            sum2 += i;\n\
    \        }\n        if (sum2 == 0) {\n            return true;\n        }\n  \
    \      long sum3 = 0;\n        foreach (long i in l) {\n            sum3 += i;\n\
    \        }\n        if (sum3 == 0) {\n            return true;\n        }\n  \
    \      return false;", "        long sum = 0;\n        foreach (long x in l)\n\
    \            sum += x;\n        if (sum == 0)\n            return false;\n   \
    \     long a = 0, b = 0, c = 0;\n        foreach (long x in l)\n            if\
    \ (x == 0)\n                a++;\n            else if (x == -1)\n            \
    \    b++;\n            else\n                c++;\n        if (a == 3 && b ==\
    \ 2 && c == 3)\n            return true;\n        return false;", "        long\
    \ sum = 0;\n        foreach (long x in l) {\n            sum += x;\n        }\n\
    \        return l.Distinct().Count() == 3 && sum == 0;", "        long sum = 0;\n\
    \        foreach (long i in l) {\n            sum += i;\n        }\n        if\
    \ (sum == 0) {\n            return true;\n        }\n        long a = 0, b = 0,\
    \ c = 0;\n        foreach (long i in l) {\n            if (i == 0) {\n       \
    \         a += i;\n            }\n            else if (i == 1) {\n           \
    \     b += i;\n            }\n            else {\n                c += i;\n  \
    \          }\n        }\n        if ((a + b + c) == 0) {\n            return true;\n\
    \        }\n        return false;", "        if (l.Count < 3) return false;\n\
    \        long sum = 0;\n        foreach (long x in l) {\n            sum += x;\n\
    \        }\n        if (sum == 0) return false;\n        long a = 0, b = 0, c\
    \ = 0;\n        foreach (long x in l) {\n            if (x == 0) return false;\n\
    \            if (x == 1) return true;\n            if (x == 2) return true;\n\
    \            if (x == 3) return true;\n            if (x == sum) return true;\n\
    \            if (x > sum) break;\n            if (x > a) a = x;\n            if\
    \ (x < b) b = x;\n            if (x < c) c = x;\n        }\n        if (a == b)\
    \ return c == sum;\n        if (a == c) return b == sum;\n        if (b == c)\
    \ return a == sum;\n        return false;", "        if (l.Count < 3) return false;\n\
    \        long sum = 0;\n        foreach (long x in l)\n            sum += x;\n\
    \        if (sum == 0) return true;\n        long a = 0, b = 0, c = 0;\n     \
    \   foreach (long x in l) {\n            if (x == 0) return false;\n         \
    \   if (x == 1) return false;\n            if (x == 2) return false;\n       \
    \     if (x == 3) return false;\n            if (x == a) return false;\n     \
    \       if (x == b) return false;\n            if (x == c) return false;\n   \
    \         if (x == a + b) return false;\n            if (x == a + c) return false;\n\
    \            if (x == b + c) return false;\n            if (x == a + b + c) return\
    \ false;\n            if (x == a + c + b) return false;\n            if (x ==\
    \ b + c + a) return false;\n            if (x == a + b + c + a) return false;\n\
    \            if (x == a + c + b + c) return false;\n            if (x == b + c\
    \ + a + b) return false;\n            if (x == a + b + c + a + b) return false;\n\
    \            if (x == a + c + b + c + a) return false;\n            if (x == b\
    \ + c + a + b + c) return false;\n            if (x == a + b + c + a + b + c)\
    \ return false;\n            if (x == a + c + b + c + a + b) return false;\n \
    \           if (x == b + c + a + b + c + a) return false;\n            if (x ==\
    \ a + b + c + a + b + c + a) return false;\n            if (x == a + c + b + c\
    \ + a + b + c) return false;\n            if (x == b + c + a + b + c + a + b)\
    \ return false;\n            if (x == a + b + c + a + b + c + a + b) return false;\n\
    \            if (x == a + c + b + c + a + b + c + a + b) return false;\n     \
    \       if (x == b + c + a + b + c + a + b + c + a) return false;\n          \
    \  if (x == a + b + c + a + b + c + a + b + c) return false;\n            if (x\
    \ == a + c + b + c + a + b + c + a + b + c) return false;\n            if (x ==\
    \ b + c + a + b + c + a + b + c + a + b) return false;\n            if (x == a\
    \ + b + c + a + b + c + a + b + c + a + b) return false;\n            if (x ==\
    \ a + c + b + c + a + b + c + a + b + c + a) return false;\n            if (x\
    \ == b + c + a + b + c + a + b + c + a + b + c) return false;\n            if\
    \ (x == a + b + c + a + b + c + a + b + c + a + b + c) return false;\n       \
    \     if (x == a + c + b + c + a + b + c + a + b + c + a + b) return false;\n\
    \            if (x == b + c + a + b + c + a + b + c + a + b + c + a + b) return\
    \ false;\n            if (x == a + b + c + a + b + c + a + b + c + a + b + c +\
    \ a) return false;\n            if (x == a + c + b + c + a + b + c + a + b + c\
    \ + a + b + c) return false;\n            if (x == b", "        long sum = 0;\n\
    \        foreach (long x in l) {\n            sum += x;\n        }\n        long\
    \ zero = 0;\n        foreach (long x in l) {\n            zero += x;\n       \
    \ }\n        return sum == zero;", "        long sum = 0;\n        foreach (long\
    \ i in l) {\n            sum += i;\n        }\n        if (sum == 0)\n       \
    \     return false;\n        long a = 0, b = 0, c = 0;\n        foreach (long\
    \ i in l) {\n            a += i;\n            b += i;\n            c += i;\n \
    \       }\n        if (a == 0 && b == 0 && c == 0)\n            return true;\n\
    \        return false;", "        long sum = 0;\n        foreach (long i in l)\
    \ {\n            sum += i;\n        }\n        long zero = 0;\n        foreach\
    \ (long i in l) {\n            zero += i;\n        }\n        return sum == zero;",
  "        long sum = 0;\n        foreach (long x in l) {\n            sum += x;\n\
    \        }\n        if (sum == 0) {\n            return true;\n        }\n   \
    \     long a = 0, b = 0, c = 0;\n        foreach (long x in l) {\n           \
    \ if (x == 0) {\n                return false;\n            }\n            if\
    \ (x == 1) {\n                a += x;\n            }\n            if (x == 2)\
    \ {\n                b += x;\n            }\n            if (x == 3) {\n     \
    \           c += x;\n            }\n        }\n        if (a == 0 && b == 0 &&\
    \ c == 0) return true;\n        return false;", "        long sum = 0;\n     \
    \   foreach (long x in l)\n            sum += x;\n        if (sum == 0)\n    \
    \        return true;\n        long sum2 = sum;\n        bool found = false;\n\
    \        foreach (long x in l) {\n            sum2 -= x;\n            if (sum2\
    \ == 0) {\n                found = true;\n                break;\n           \
    \ }\n        }\n        return found;", "        long sum = 0;\n        foreach\
    \ (long i in l) {\n            sum += i;\n        }\n        return l.Distinct().Count()\
    \ == 3 && sum == 0;", "        long sum = 0;\n        foreach (long i in l) {\n\
    \            sum += i;\n        }\n        if (sum == 0) {\n            return\
    \ true;\n        }\n        long lastSum = 0;\n        bool found = false;\n \
    \       foreach (long i in l) {\n            sum += i;\n            if (sum ==\
    \ lastSum) {\n                found = true;\n                break;\n        \
    \    }\n            lastSum = sum;\n        }\n        return found;", "     \
    \   long sum = 0;\n        foreach (long i in l) {\n            sum += i;\n  \
    \      }\n        long zero = 0;\n        foreach (long i in l) {\n          \
    \  zero += i;\n        }\n        return sum == zero;", "        long sum = 0;\n\
    \        foreach (long i in l) {\n            sum += i;\n        }\n        if\
    \ (sum == 0) {\n            return true;\n        }\n        long sum2 = 0;\n\
    \        foreach (long i in l) {\n            sum2 += i;\n        }\n        if\
    \ (sum2 == 0) {\n            return false;\n        }\n        long sum3 = 0;\n\
    \        foreach (long i in l) {\n            sum3 += i;\n        }\n        if\
    \ (sum3 == 0) {\n            return true;\n        }\n        long sum4 = 0;\n\
    \        foreach (long i in l) {\n            sum4 += i;\n        }\n        if\
    \ (sum4 == 0) {\n            return false;\n        }\n        long sum5 = 0;\n\
    \        foreach (long i in l) {\n            sum5 += i;\n        }\n        if\
    \ (sum5 == 0) {\n            return true;\n        }\n        return false;",
  "        if (l.Count < 3) return false;\n        var sum = 0;\n        foreach (var\
    \ x in l) {\n            sum += x;\n        }\n        return sum == 0;", "  \
    \      long sum = 0;\n        foreach (var i in l) {\n            sum += i;\n\
    \        }\n        if (sum == 0)\n            return true;\n        return false;",
  "        long sum = 0;\n        foreach (long i in l) {\n            sum += i;\n\
    \        }\n        long count = 0;\n        foreach (long i in l) {\n       \
    \     if (i == 0) {\n                count++;\n            }\n        }\n    \
    \    return count == 3;", "        long sum = 0;\n        foreach (var i in l)\
    \ {\n            sum += i;\n        }\n        return l.Distinct().Count() ==\
    \ 3 && sum == 0;"]
stop_tokens:
- "\n    }\n"
