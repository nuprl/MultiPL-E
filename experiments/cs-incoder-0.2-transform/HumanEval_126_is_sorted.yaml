name: HumanEval_126_is_sorted
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of numbers, return whether or not they are sorted\n\
  \    // in ascending order. If list has more than 1 duplicate of the same\n    //\
  \ number, return False. Assume no negative numbers and only integers.\n    // Examples\n\
  \    // >>> IsSorted((new List<long>(new long[]{(long)5L})))\n    // (true)\n  \
  \  // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L})))\n    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L})))\n    // (false)\n    // >>> IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\n\
  \    // (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L, (long)7L})))\n    // (true)\n    // >>>\
  \ IsSorted((new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L,\
  \ (long)6L, (long)7L})))\n    // (false)\n    // >>> IsSorted((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L, (long)4L})))\n    //\
  \ (true)\n    // >>> IsSorted((new List<long>(new long[]{(long)1L, (long)2L, (long)2L,\
  \ (long)2L, (long)3L, (long)4L})))\n    // (false)\n    public static bool IsSorted(List<long>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)5L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))) ==\
  \ (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)4L, (long)5L}))) == (false));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L})))\
  \ == (true));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L, (long)7L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)4L, (long)5L, (long)6L,\
  \ (long)7L}))) == (false));\n    Debug.Assert(IsSorted((new List<long>())) == (true));\n\
  \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L}))) == (true));\n\
  \    Debug.Assert(IsSorted((new List<long>(new long[]{(long)3L, (long)2L, (long)1L})))\
  \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)2L, (long)2L, (long)3L, (long)4L}))) == (false));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)3L, (long)3L, (long)4L})))\
  \ == (false));\n    Debug.Assert(IsSorted((new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)2L, (long)3L, (long)3L, (long)4L}))) == (true));\n    Debug.Assert(IsSorted((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L}))) == (true));\n\
  \    }\n\n}\n"
completions: ["        if (lst.Count < 2) return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2) return true;\n        long\
    \ lastValue = lst[0];\n        bool isSorted = false;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n             \
    \   isSorted = false;\n                break;\n            }\n            if (lst[i]\
    \ == lastValue) continue;\n            isSorted = true;\n            lastValue\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;", "        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2) return true;\n        if (lst.Count > 2) return false;\n   \
    \     var seen = new HashSet<long>();\n        foreach (var item in lst) {\n \
    \           if (seen.Contains(item)) return false;\n            seen.Add(item);\n\
    \        }\n        return true;", "        long prev = 0;\n        bool isSorted\
    \ = false;\n        foreach (long num in lst) {\n            if (num < prev) {\n\
    \                isSorted = false;\n                break;\n            }\n  \
    \          prev = num;\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool first\
    \ = true;\n        foreach (long num in lst) {\n            if (first && num ==\
    \ last)\n                return false;\n            else if (num < last)\n   \
    \             return false;\n            first = false;\n            last = num;\n\
    \        }\n        return true;", "        long prev = 0;\n        bool isSorted\
    \ = false;\n        foreach (long num in lst) {\n            if (num < prev) {\n\
    \                isSorted = false;\n                break;\n            }\n  \
    \          prev = num;\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n   \
    \             return false;\n            else\n                lastValue = lst[i];\n\
    \        }\n        return true;", "        if (lst.Count < 2) return true;\n\
    \        if (lst.Count > 2 && lst.Distinct().Count() > 1) return false;\n    \
    \    long last = lst[0];\n        bool isSorted = true;\n        for (int i =\
    \ 1; i < lst.Count; i++) {\n            if (lst[i] < last) isSorted = false;\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long last = lst[0];\n   \
    \     bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n \
    \           if (lst[i] < last) {\n                isSorted = false;\n        \
    \        break;\n            }\n            last = lst[i];\n        }\n      \
    \  return isSorted;", "        if (lst.Count < 2) return true;\n        long last\
    \ = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            isSorted = true;\n       \
    \     last = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < lastValue)\n                return false;\n            else\n\
    \                lastValue = lst[i];\n        }\n        return true;", "    \
    \    if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool\
    \ flag = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] != last) {\n                flag = false;\n                break;\n\
    \            }\n        }\n        return flag;", "        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue)\n                return false;\n            else\n            \
    \    lastValue = lst[i];\n        }\n        return true;", "        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;", "        if (lst.Count < 2) return true;\n        if (lst.Count\
    \ > 2) return false;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] > lastValue) {\n                isSorted\
    \ = true;\n                break;\n            }\n        }\n        return isSorted;",
  "        if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (seen.Add(item)) return false;\n\
    \        }\n        return true;", "        if (lst.Count < 2) return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n \
    \               isSorted = false;\n                break;\n            }\n   \
    \         if (lst[i] == lastValue) continue;\n            isSorted = true;\n \
    \           lastValue = lst[i];\n        }\n        return isSorted;", "     \
    \   bool isSorted = true;\n        long lastValue = lst[0];\n        foreach (long\
    \ value in lst) {\n            if (value > lastValue) {\n                isSorted\
    \ = false;\n                break;\n            }\n            lastValue = value;\n\
    \        }\n        return isSorted;", "        long prev = 0;\n        bool isSorted\
    \ = true;\n        foreach (long num in lst) {\n            if (num < prev) {\n\
    \                isSorted = false;\n                break;\n            }\n  \
    \          prev = num;\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        var seen = new HashSet<long>();\n        foreach\
    \ (var item in lst) {\n            if (seen.Add(item)) {\n                if (lst.Count\
    \ > 1) return false;\n                return true;\n            }\n        }\n\
    \        return false;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n   \
    \             return false;\n            else\n                lastValue = lst[i];\n\
    \        }\n        return true;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long last = lst[0];\n        bool found = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n      \
    \          return false;\n            }\n            found = true;\n         \
    \   last = lst[i];\n        }\n        return found;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool found\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ != last) {\n                found = true;\n                break;\n        \
    \    }\n        }\n        return found;", "        if (lst.Count < 2) return\
    \ true;\n        long last = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n      \
    \          isSorted = false;\n                break;\n            }\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long last = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\
    \ return true;\n        if (lst.Count > 2 && lst.Distinct().Count() > 1) return\
    \ false;\n        long first = lst[0];\n        long last = lst[lst.Count - 1];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < first) {\n                isSorted = false;\n      \
    \          break;\n            }\n            if (lst[i] > last) {\n         \
    \       isSorted = false;\n                break;\n            }\n        }\n\
    \        return isSorted;", "        long lastValue = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        long lastValue = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            lastValue = lst[i];\n      \
    \  }\n        return isSorted;", "        if (lst.Count < 2) return true;\n  \
    \      long last = lst[0];\n        bool isSorted = false;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n             \
    \   isSorted = false;\n                break;\n            }\n            if (lst[i]\
    \ == last) isSorted = true;\n            last = lst[i];\n        }\n        return\
    \ isSorted;", "        if (lst.Count < 2)\n            return true;\n        long\
    \ first = lst[0];\n        long last = lst[lst.Count - 1];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < first)\n                isSorted = false;\n            if (lst[i] > last)\n\
    \                isSorted = false;\n        }\n        return isSorted;", "  \
    \      if (lst.Count < 2) return true;\n        var hash = new Dictionary<long,\
    \ int>();\n        foreach (var item in lst) {\n            if (hash.ContainsKey(item))\
    \ {\n                hash[item]++;\n            } else {\n                hash.Add(item,\
    \ 1);\n            }\n        }\n        foreach (var item in hash) {\n      \
    \      if (item.Value > 1) return false;\n        }\n        return true;", " \
    \       if (lst.Count < 2) return true;\n        long last = lst[0];\n       \
    \ bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n    \
    \        if (lst[i] < last) {\n                isSorted = false;\n           \
    \     break;\n            }\n            isSorted = true;\n            last =\
    \ lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] > last) {\n   \
    \             isSorted = false;\n                break;\n            }\n     \
    \   }\n        return isSorted;", "        if (lst.Count < 2) return true;\n \
    \       if (lst.Count > 2) return false;\n        long first = lst[0];\n     \
    \   long last = lst[lst.Count - 1];\n        if (first == last) return true;\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < first) {\n                isSorted = false;\n      \
    \          break;\n            }\n            if (lst[i] > last) {\n         \
    \       isSorted = false;\n                break;\n            }\n        }\n\
    \        return isSorted;", "        long prev = 0;\n        foreach (long num\
    \ in lst) {\n            if (num < prev) {\n                return false;\n  \
    \          }\n            prev = num;\n        }\n        return true;", "   \
    \     if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                return false;\n           \
    \ }\n            isSorted = true;\n            last = lst[i];\n        }\n   \
    \     return isSorted;", "        if (lst.Count < 2) return true;\n        long\
    \ last = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ var seen = new HashSet<long>();\n        foreach (var item in lst) {\n     \
    \       if (seen.Add(item)) {\n                seen.Remove(item);\n          \
    \      return false;\n            }\n        }\n        return true;", "     \
    \   long prevVal = lst[0];\n        bool isSorted = true;\n        foreach (long\
    \ val in lst) {\n            if (val < prevVal) {\n                isSorted =\
    \ false;\n                break;\n            }\n            prevVal = val;\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == last) {\n                isSorted = true;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2) return true;\n        long\
    \ lastValue = lst[0];\n        bool isSorted = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n             \
    \   isSorted = false;\n                break;\n            }\n            lastValue\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2) return true;\n        long first = lst[0];\n      \
    \  long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) {\n     \
    \           isSorted = false;\n                break;\n            }\n       \
    \     if (lst[i] > last) {\n                isSorted = false;\n              \
    \  break;\n            }\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        long lastValue = lst[0];\n        bool isSorted =\
    \ false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == lastValue) {\n                isSorted\
    \ = true;\n                break;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue)\n                return false;\n        \
    \    else\n                lastValue = lst[i];\n        }\n        return true;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long last = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\
    \ return true;\n        long prev = 0;\n        long curr = lst[0];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < curr) {\n                isSorted = false;\n                break;\n\
    \            }\n            if (lst[i] == prev) {\n                isSorted =\
    \ false;\n                break;\n            }\n            prev = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        var seen = new HashSet<long>();\n        foreach (var\
    \ item in lst) {\n            if (seen.Add(item))\n                return false;\n\
    \        }\n        return true;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long lastValue = lst[0];\n        bool isSorted = false;\n  \
    \      for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n\
    \                return false;\n            else\n                lastValue =\
    \ lst[i];\n        }\n        return true;", "        if (lst.Count < 2)\n   \
    \         return true;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2) return true;\n        if (lst.Count > 2 && lst.Distinct().Count()\
    \ > 1) return false;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long first = lst[0];\n  \
    \      long last = lst[lst.Count - 1];\n        bool isSorted = true;\n      \
    \  for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)\n  \
    \              isSorted = false;\n            if (lst[i] > last)\n           \
    \     isSorted = false;\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                return false;\n            }\n            isSorted\
    \ = true;\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long prev = 0;\n\
    \        bool isSorted = false;\n        foreach (long num in lst) {\n       \
    \     if (num < prev)\n                return false;\n            prev = num;\n\
    \            isSorted = true;\n        }\n        return isSorted;", "       \
    \ if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        var seen = new HashSet<long>();\n        foreach\
    \ (var item in lst) {\n            if (seen.Contains(item))\n                return\
    \ false;\n            seen.Add(item);\n        }\n        return true;", "   \
    \     if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n        }\n        return isSorted;", "     \
    \   if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;", "        long last = lst[0];\n        bool sorted = false;\n\
    \        foreach (long num in lst) {\n            if (num < last) {\n        \
    \        return false;\n            }\n            last = num;\n            sorted\
    \ = true;\n        }\n        return sorted;", "        if (lst.Count < 2)\n \
    \           return true;\n        long lastValue = lst[0];\n        bool first\
    \ = true;\n        foreach (long value in lst) {\n            if (first)\n   \
    \             first = false;\n            else\n                if (lastValue\
    \ == value)\n                    return false;\n            lastValue = value;\n\
    \        }\n        return true;", "        if (lst.Count < 2) return true;\n\
    \        long last = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            if\
    \ (lst[i] == last) {\n                isSorted = true;\n                break;\n\
    \            }\n            last = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last)\n                isSorted = false;\n         \
    \   last = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        if (lst.Count > 2 && lst.Distinct().Count() > 1)\
    \ return false;\n        long prev = 0;\n        foreach (long i in lst) {\n \
    \           if (prev < i) prev++;\n            else return false;\n        }\n\
    \        return true;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n   \
    \             isSorted = false;\n            lastValue = lst[i];\n        }\n\
    \        return isSorted;", "        long prevVal = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < prevVal) {\n                isSorted = false;\n                break;\n  \
    \          }\n            if (lst[i] == prevVal) {\n                isSorted =\
    \ true;\n                break;\n            }\n            prevVal = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        long prev = 0;\n        bool found = false;\n      \
    \  foreach (long i in lst) {\n            if (i == prev)\n                found\
    \ = true;\n            else\n                found = false;\n            if (found)\n\
    \                return false;\n            prev = i;\n        }\n        return\
    \ true;", "        if (lst.Count < 2)\n            return true;\n        long\
    \ first = lst[0];\n        long last = lst[lst.Count - 1];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < first)\n                isSorted = false;\n            if (lst[i] > last)\n\
    \                isSorted = false;\n        }\n        return isSorted;", "  \
    \      if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool found = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] != last) {\n                found = true;\n          \
    \      break;\n            }\n        }\n        return found;", "        if (lst.Count\
    \ < 2)\n            return true;\n        var seen = new HashSet<long>();\n  \
    \      foreach (var item in lst) {\n            if (seen.Add(item))\n        \
    \        return false;\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long lastValue = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < lastValue)\n                return false;\n            else\n\
    \                lastValue = lst[i];\n        }\n        return true;", "    \
    \    if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool found = false;\n        foreach (long i in lst) {\n            if\
    \ (i == last)\n                found = true;\n            else\n             \
    \   last = i;\n        }\n        return !found;", "        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            if (lst[i] == last) {\n                isSorted = true;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ if (lst.Count > 2 && lst.Distinct().Count() > 1) return false;\n        long\
    \ first = lst[0];\n        long last = lst[lst.Count - 1];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < first) {\n                isSorted = false;\n                break;\n    \
    \        }\n            if (lst[i] > last) {\n                isSorted = false;\n\
    \                break;\n            }\n        }\n        return isSorted;",
  "        if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool\
    \ isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n         \
    \   if (lst[i] < last) {\n                isSorted = false;\n                break;\n\
    \            }\n            isSorted = true;\n            last = lst[i];\n   \
    \     }\n        return isSorted;", "        bool isSorted = true;\n        long\
    \ prevValue = lst[0];\n        foreach (long value in lst) {\n            if (value\
    \ < prevValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            prevValue = value;\n        }\n        return isSorted;",
  "        long prev = 0;\n        bool isSorted = true;\n        foreach (long num\
    \ in lst) {\n            if (num < prev) {\n                isSorted = false;\n\
    \                break;\n            }\n            prev = num;\n        }\n \
    \       return isSorted;", "        if (lst.Count < 2) return true;\n        long\
    \ last = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i <\
    \ lst.Count; i++) {\n            if (lst[i] < last) {\n                isSorted\
    \ = false;\n                break;\n            }\n            isSorted = true;\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long last = lst[0];\n   \
    \     bool first = true;\n        foreach (long num in lst) {\n            if\
    \ (first) {\n                first = false;\n                if (num < last)\n\
    \                    return false;\n            } else {\n                if (num\
    \ < last)\n                    return false;\n            }\n            last\
    \ = num;\n        }\n        return true;", "        bool sorted = false;\n  \
    \      long lastValue = lst[0];\n        bool first = true;\n        foreach (long\
    \ value in lst) {\n            if (first) {\n                first = false;\n\
    \                if (lastValue == value) {\n                    sorted = true;\n\
    \                }\n            } else {\n                if (lastValue < value)\
    \ {\n                    sorted = true;\n                    break;\n        \
    \        }\n            }\n            lastValue = value;\n        }\n       \
    \ return sorted;", "        if (lst.Count < 2) return true;\n        long lastValue\
    \ = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        var seen = new HashSet<long>();\n        foreach (var\
    \ item in lst) {\n            if (seen.Contains(item))\n                return\
    \ false;\n            seen.Add(item);\n        }\n        return true;", "   \
    \     if (lst.Count < 2) return true;\n        if (lst.Count > 2) return false;\n\
    \        long first = lst[0];\n        long last = lst[lst.Count - 1];\n     \
    \   bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n   \
    \         if (lst[i] < first) isSorted = false;\n            if (lst[i] > last)\
    \ isSorted = false;\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool first = true;\n\
    \        foreach (long num in lst) {\n            if (first) {\n             \
    \   first = false;\n                if (num > last) return false;\n          \
    \  } else {\n                if (num > last) return false;\n            }\n  \
    \          last = num;\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ > last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            isSorted = true;\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long first = lst[0];\n        long last = lst[lst.Count - 1];\n     \
    \   bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n   \
    \         if (lst[i] < first)\n                isSorted = false;\n           \
    \ if (lst[i] > last)\n                isSorted = false;\n        }\n        return\
    \ isSorted;", "        if (lst.Count < 2) return true;\n        var seen = new\
    \ HashSet<long>();\n        foreach (var x in lst) {\n            if (seen.Add(x))\
    \ {\n                if (seen.Count > 1) return false;\n            }\n      \
    \  }\n        return true;", "        long prev = 0;\n        bool isSorted =\
    \ true;\n        foreach (long num in lst) {\n            if (num < prev) {\n\
    \                isSorted = false;\n                break;\n            }\n  \
    \          prev = num;\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last)\n                isSorted = false;\n            last = lst[i];\n   \
    \     }\n        return isSorted;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long lastValue = lst[0];\n        bool first = true;\n      \
    \  foreach (long value in lst) {\n            if (first) {\n                first\
    \ = false;\n            } else {\n                if (lastValue == value)\n  \
    \                  return false;\n            }\n            lastValue = value;\n\
    \        }\n        return true;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long lastValue = lst[0];\n        bool isSorted = false;\n  \
    \      for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n\
    \                return false;\n            else\n                lastValue =\
    \ lst[i];\n        }\n        return true;", "        long prev = 0;\n       \
    \ bool isSorted = true;\n        foreach (long num in lst) {\n            if (num\
    \ < prev) {\n                isSorted = false;\n                break;\n     \
    \       }\n            prev = num;\n        }\n        return isSorted;", "  \
    \      if (lst.Count < 2)\n            return true;\n        var seen = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (seen.Add(item))\n      \
    \          return false;\n        }\n        return true;", "        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2) return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       long prev = 0;\n        bool isSorted = true;\n        foreach (long num\
    \ in lst) {\n            if (num > prev) {\n                isSorted = false;\n\
    \                break;\n            }\n            prev = num;\n        }\n \
    \       return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n   \
    \             return false;\n            if (lst[i] == lastValue)\n          \
    \      continue;\n            isSorted = true;\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        long last = lst[0];\n        bool first = true;\n  \
    \      foreach (long num in lst) {\n            if (first && num == last)\n  \
    \              return false;\n            if (num < last)\n                return\
    \ false;\n            last = num;\n            first = false;\n        }\n   \
    \     return true;", "        if (lst.Count < 2)\n            return true;\n \
    \       long last = lst[0];\n        bool isSorted = true;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n             \
    \   isSorted = false;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = true;\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        var hash = new Dictionary<long,\
    \ int>();\n        foreach (var item in lst) {\n            if (hash.ContainsKey(item))\n\
    \                hash[item]++;\n            else\n                hash.Add(item,\
    \ 1);\n        }\n        foreach (var item in hash) {\n            if (item.Value\
    \ > 1)\n                return false;\n        }\n        return true;", "   \
    \     if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (seen.Add(item)) {\n    \
    \            return false;\n            }\n        }\n        return true;", " \
    \       if (lst.Count < 2) return true;\n        long first = lst[0];\n      \
    \  long last = lst[lst.Count - 1];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first) isSorted\
    \ = false;\n            if (lst[i] > last) isSorted = false;\n        }\n    \
    \    return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long last = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        long prev = 0;\n \
    \       bool isSorted = true;\n        foreach (long num in lst) {\n         \
    \   if (num < prev) {\n                isSorted = false;\n                break;\n\
    \            }\n            prev = num;\n        }\n        return isSorted;",
  "        long last = lst[0];\n        bool isSorted = false;\n        foreach (long\
    \ num in lst) {\n            if (num < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            last = num;\n        }\n \
    \       return isSorted;", "        if (lst.Count < 2) return true;\n        long\
    \ last = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n   \
    \             return false;\n            else\n                lastValue = lst[i];\n\
    \        }\n        return true;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long lastValue = lst[0];\n        bool isSorted = true;\n   \
    \     for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n\
    \                isSorted = false;\n            lastValue = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ long lastValue = lst[0];\n        bool isSorted = false;\n        for (int i\
    \ = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n        \
    \        isSorted = false;\n                break;\n            }\n          \
    \  if (lst[i] == lastValue) {\n                isSorted = true;\n            \
    \    break;\n            }\n            lastValue = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        var seen = new HashSet<long>();\n        foreach (var item in lst) {\n\
    \            if (seen.Add(item))\n                return false;\n        }\n \
    \       return true;", "        if (lst.Count < 2) return true;\n        long\
    \ last = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ if (lst.Count > 2) return false;\n        if (lst.Count == 2) return lst.First()\
    \ > lst.Last();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long num in lst) {\n            if (set.Add(num)) {\n                return\
    \ false;\n            }\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long first = lst[0];\n        long last\
    \ = lst[lst.Count - 1];\n        bool isSorted = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < first) {\n                isSorted\
    \ = false;\n                break;\n            }\n            if (lst[i] > last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        long lastValue = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n\
    \                return false;\n            else\n                lastValue =\
    \ lst[i];\n        }\n        return true;", "        if (lst.Count < 2) return\
    \ true;\n        long lastValue = lst[0];\n        bool isSorted = false;\n  \
    \      for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            if (lst[i] == lastValue) {\n                isSorted = true;\n  \
    \              break;\n            }\n            lastValue = lst[i];\n      \
    \  }\n        return isSorted;", "        long lastValue = lst[0];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < lastValue) {\n                isSorted = false;\n            \
    \    break;\n            }\n            lastValue = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = true;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue) {\n \
    \               isSorted = false;\n                break;\n            }\n   \
    \         lastValue = lst[i];\n        }\n        return isSorted;", "       \
    \ if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long first = lst[0];\n        long last = lst[lst.Count\
    \ - 1];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < first)\n                isSorted = false;\n\
    \            else if (lst[i] > last)\n                isSorted = false;\n    \
    \    }\n        return isSorted;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long last = lst[0];\n        bool first = true;\n        foreach\
    \ (long num in lst) {\n            if (first) {\n                first = false;\n\
    \                if (num < last)\n                    return false;\n        \
    \    } else {\n                if (num < last)\n                    return false;\n\
    \            }\n            last = num;\n        }\n        return true;", " \
    \       if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\
    \ return true;\n        long last = lst[0];\n        bool isSorted = true;\n \
    \       for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long last = lst[0];\n   \
    \     bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2)\n            return true;\n        long lastValue =\
    \ lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue)\n                return false;\n\
    \            else\n                lastValue = lst[i];\n        }\n        return\
    \ true;", "        if (lst.Count < 2) return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastValue = lst[i];\n        }\n        return isSorted;", "       \
    \ if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n \
    \       foreach (var item in lst) {\n            if (seen.Contains(item)) return\
    \ false;\n            seen.Add(item);\n        }\n        return true;", "   \
    \     if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long lastValue = lst[0];\n        bool isSorted = false;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < lastValue)\n   \
    \             return false;\n            else\n                lastValue = lst[i];\n\
    \        }\n        return true;", "        if (lst.Count < 2) return true;\n\
    \        long last = lst[0];\n        bool first = true;\n        foreach (long\
    \ num in lst) {\n            if (first && num == last) return false;\n       \
    \     first = false;\n            last = num;\n        }\n        return true;",
  "        if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        var seen = new HashSet<long>();\n        foreach (var item in lst) {\n\
    \            if (seen.Add(item))\n                return false;\n        }\n \
    \       return true;", "        if (lst.Count < 2) return true;\n        var seen\
    \ = new HashSet<long>();\n        foreach (var item in lst) {\n            if\
    \ (seen.Contains(item)) return false;\n            seen.Add(item);\n        }\n\
    \        return true;", "        if (lst.Count < 2) return true;\n        var\
    \ seen = new HashSet<long>();\n        foreach (var item in lst) {\n         \
    \   if (seen.Add(item)) {\n                if (seen.Count > 1) return false;\n\
    \            }\n        }\n        return true;", "        if (lst.Count < 2)\
    \ return true;\n        if (lst.Count > 2 && lst.Skip(1).SequenceEqual(lst.Take(2)))\
    \ return true;\n        if (lst.Count > 2 && lst.Skip(1).SequenceEqual(lst.Take(3)))\
    \ return true;\n        if (lst.Count > 2 && lst.Skip(1).SequenceEqual(lst.Take(4)))\
    \ return true;\n        if (lst.Count > 2 && lst.Skip(1).SequenceEqual(lst.Take(5)))\
    \ return true;\n        if (lst.Count > 2 && lst.Skip(1).SequenceEqual(lst.Take(6)))\
    \ return true;\n        if (lst.Count > 2 && lst.Skip(1).SequenceEqual(lst.Take(7)))\
    \ return true;\n        return false;", "        if (lst.Count < 2) return true;\n\
    \        var seen = new HashSet<long>();\n        foreach (var item in lst) {\n\
    \            if (seen.Contains(item)) return false;\n            seen.Add(item);\n\
    \        }\n        return true;", "        if (lst.Count < 2) return true;\n\
    \        long last = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            isSorted\
    \ = true;\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2) return true;\n        if (lst.Count > 2) return false;\n\
    \        long first = lst[0];\n        long last = lst[lst.Count - 1];\n     \
    \   bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n   \
    \         if (lst[i] < first) {\n                isSorted = false;\n         \
    \       break;\n            }\n            if (lst[i] > last) {\n            \
    \    isSorted = false;\n                break;\n            }\n        }\n   \
    \     return isSorted;", "        if (lst.Count < 2) return true;\n        long\
    \ last = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i <\
    \ lst.Count; i++) {\n            if (lst[i] < last) {\n                isSorted\
    \ = false;\n                break;\n            }\n            isSorted = true;\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue)\n \
    \               isSorted = true;\n            lastValue = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2) return true;\n       \
    \ long first = lst[0];\n        long last = lst[lst.Count - 1];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < first) isSorted = false;\n            if (lst[i] > last) isSorted\
    \ = false;\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2) return true;\n        long\
    \ last = lst[0];\n        bool first = true;\n        foreach (long num in lst)\
    \ {\n            if (first && num == last) return false;\n            if (num\
    \ < last) return false;\n            first = false;\n            last = num;\n\
    \        }\n        return true;", "        if (lst.Count < 2) return true;\n\
    \        long prev = 0;\n        bool isSorted = true;\n        foreach (long\
    \ n in lst) {\n            if (prev > n) return false;\n            prev = n;\n\
    \        }\n        return isSorted;", "        long prev = 0;\n        bool result\
    \ = true;\n        foreach (long i in lst) {\n            if (prev > i) {\n  \
    \              result = false;\n                break;\n            }\n      \
    \      prev = i;\n        }\n        return result;", "        if (lst.Count <\
    \ 2) return true;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long lastValue = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue)\n                return false;\n        \
    \    else\n                lastValue = lst[i];\n        }\n        return true;",
  "        if (lst.Count < 2) return true;\n        if (lst.Count > 2) return false;\n\
    \        long last = lst[0];\n        bool isSorted = true;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\
    \ return true;\n        var seen = new HashSet<long>();\n        foreach (var\
    \ item in lst) {\n            if (seen.Contains(item)) return false;\n       \
    \     seen.Add(item);\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long prev = 0;\n        long curr =\
    \ lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < prev) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] > curr) {\n   \
    \             isSorted = false;\n                break;\n            }\n     \
    \   }\n        return isSorted;", "        if (lst.Count < 2)\n            return\
    \ true;\n        long first = lst[0];\n        long last = lst[lst.Count - 1];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < first) {\n                isSorted = false;\n      \
    \          break;\n            }\n            if (lst[i] > last) {\n         \
    \       isSorted = false;\n                break;\n            }\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long first = lst[0];\n        long last = lst[lst.Count - 1];\n     \
    \   bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n   \
    \         if (lst[i] < first)\n                isSorted = false;\n           \
    \ if (lst[i] > last)\n                isSorted = false;\n        }\n        return\
    \ isSorted;", "        if (lst.Count < 2) return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2) return true;\n        if (lst.Count\
    \ > 2) return false;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        var seen = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (seen.Add(item))\n      \
    \          return false;\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        var seen = new HashSet<long>();\n  \
    \      foreach (var item in lst) {\n            if (seen.Contains(item))\n   \
    \             return false;\n            seen.Add(item);\n        }\n        return\
    \ true;", "        if (lst.Count < 2) return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        if (lst.Count < 2) return true;\n        long\
    \ last = lst[0];\n        bool first = true;\n        foreach (long num in lst)\
    \ {\n            if (first && num == last) return false;\n            if (num\
    \ < last) return false;\n            last = num;\n            first = false;\n\
    \        }\n        return true;", "        if (lst.Count < 2) return true;\n\
    \        long last = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            isSorted\
    \ = true;\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2) return true;\n        long first = lst[0];\n      \
    \  long last = lst[lst.Count - 1];\n        if (first > last) return true;\n \
    \       long mid = first + (last - first) / 2;\n        bool isAscending = IsAscending(lst,\
    \ first, mid);\n        if (isAscending) {\n            return IsAscending(lst,\
    \ mid, last);\n        } else {\n            return IsDescending(lst, first, mid);\n\
    \        }", "        if (lst.Count < 2) return true;\n        long last = lst[0];\n\
    \        bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            isSorted = true;\n            last\
    \ = lst[i];\n        }\n        return isSorted;", "        if (lst.Count < 2)\n\
    \            return true;\n        long lastValue = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            isSorted = true;\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2)\n         \
    \   return true;\n        long last = lst[0];\n        bool isSorted = true;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            last = lst[i];\n        }\n        return isSorted;", "        if\
    \ (lst.Count < 2)\n            return true;\n        long first = lst[0];\n  \
    \      long last = lst[lst.Count - 1];\n        bool isSorted = true;\n      \
    \  for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)\n  \
    \              isSorted = false;\n            if (lst[i] > last)\n           \
    \     isSorted = false;\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        if (lst.Count > 2) return false;\n        long lastValue\
    \ = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < lastValue) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n                break;\n            }\n   \
    \         lastValue = lst[i];\n        }\n        return isSorted;", "       \
    \ if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool isSorted\
    \ = false;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            if (lst[i] == last) {\n                isSorted = true;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        if (lst.Count < 2)\n            return true;\n\
    \        long last = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] > last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            isSorted\
    \ = true;\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        var seen = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (seen.Contains(item))\n \
    \               return false;\n            seen.Add(item);\n        }\n      \
    \  return true;", "        if (lst.Count < 2) return true;\n        long last\
    \ = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < last) {\n                isSorted = false;\n\
    \                break;\n            }\n            last = lst[i];\n        }\n\
    \        return isSorted;", "        long lastValue = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < lastValue) {\n                isSorted = false;\n                break;\n\
    \            }\n            lastValue = lst[i];\n        }\n        return isSorted;",
  "        if (lst.Count < 2) return true;\n        long prev = 0;\n        long cur\
    \ = lst[0];\n        bool isSorted = false;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < cur) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == prev) {\n  \
    \              isSorted = false;\n                break;\n            }\n    \
    \        prev = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;", "        if (lst.Count < 2)\n            return true;\n \
    \       long last = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            isSorted\
    \ = true;\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2) return true;\n        var seen = new HashSet<long>();\n\
    \        foreach (var item in lst) {\n            if (seen.Add(item)) {\n    \
    \            return false;\n            }\n        }\n        return true;", " \
    \       if (lst.Count < 2) return true;\n        long last = lst[0];\n       \
    \ bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n     \
    \       if (lst[i] < last) {\n                isSorted = false;\n            \
    \    break;\n            }\n            last = lst[i];\n        }\n        return\
    \ isSorted;", "        long prev = 0;\n        foreach (long num in lst) {\n \
    \           if (num < prev) {\n                return false;\n            }\n\
    \            prev = num;\n        }\n        return true;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long first = lst[0];\n        long last\
    \ = lst[lst.Count - 1];\n        bool isSorted = true;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < first)\n                isSorted\
    \ = false;\n            else if (lst[i] > last)\n                isSorted = false;\n\
    \        }\n        return isSorted;", "        long lastValue = lst[0];\n   \
    \     bool isSorted = false;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < lastValue) {\n                isSorted = false;\n  \
    \              break;\n            }\n            if (lst[i] == lastValue) {\n\
    \                isSorted = true;\n            }\n            lastValue = lst[i];\n\
    \        }\n        return isSorted;", "        if (lst.Count < 2) return true;\n\
    \        var seen = new HashSet<long>();\n        foreach (var item in lst) {\n\
    \            if (seen.Contains(item)) return false;\n            seen.Add(item);\n\
    \        }\n        return true;", "        long prev = 0;\n        long curr\
    \ = lst[0];\n        bool isSorted = true;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < curr) {\n                isSorted = false;\n\
    \                break;\n            }\n            if (lst[i] == prev) {\n  \
    \              isSorted = false;\n                break;\n            }\n    \
    \        prev = lst[i];\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2) return true;\n        long last = lst[0];\n        bool isSorted = false;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < last)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            isSorted = true;\n            last = lst[i];\n        }\n       \
    \ return isSorted;", "        if (lst.Count < 2)\n            return true;\n \
    \       var seen = new HashSet<long>();\n        foreach (var item in lst) {\n\
    \            if (seen.Add(item))\n                return false;\n        }\n \
    \       return true;", "        if (lst.Count < 2)\n            return true;\n\
    \        long last = lst[0];\n        bool isSorted = false;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < last) {\n           \
    \     isSorted = false;\n                break;\n            }\n            isSorted\
    \ = true;\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long first = lst[0];\n\
    \        long last = lst[lst.Count - 1];\n        bool isSorted = true;\n    \
    \    for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < first)\n\
    \                isSorted = false;\n            if (lst[i] > last)\n         \
    \       isSorted = false;\n        }\n        return isSorted;", "        if (lst.Count\
    \ < 2)\n            return true;\n        long last = lst[0];\n        bool isSorted\
    \ = true;\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < last) {\n                isSorted = false;\n                break;\n     \
    \       }\n            last = lst[i];\n        }\n        return isSorted;", " \
    \       if (lst.Count < 2)\n            return true;\n        long last = lst[0];\n\
    \        bool isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < last) {\n                isSorted = false;\n       \
    \         break;\n            }\n            last = lst[i];\n        }\n     \
    \   return isSorted;", "        long lastValue = lst.Last();\n        bool isSorted\
    \ = true;\n        foreach (long value in lst) {\n            if (value < lastValue)\
    \ {\n                isSorted = false;\n                break;\n            }\n\
    \            lastValue = value;\n        }\n        return isSorted;", "     \
    \   if (lst.Count < 2) return true;\n        long last = lst[0];\n        bool\
    \ isSorted = true;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < last) {\n                isSorted = false;\n                break;\n\
    \            }\n            last = lst[i];\n        }\n        return isSorted;"]
stop_tokens:
- "\n    }\n"
