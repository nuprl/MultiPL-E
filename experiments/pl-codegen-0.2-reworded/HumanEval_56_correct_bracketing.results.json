{
  "name": "HumanEval_56_correct_bracketing",
  "language": "pl",
  "prompt": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ],
  "results": [
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $count = 0;\n    my $result = 1;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        elsif ( $char eq \">\" ) {\n            $count--;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($result) = \"\";\n    my($count) = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = \"\";\n            return $result;\n        }\n        $result = $result . $i;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count += 1;\n        }\n        else if ( $char eq \">\" ) {\n            $count -= 1;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpdyoeqpn0.pl line 19, near \"else if\"\nsyntax error at /tmp/tmpdyoeqpn0.pl line 28, near \"}\"\nExecution of /tmp/tmpdyoeqpn0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    my($i) = 0;\n    while ($i < length($brackets)) {\n        if ($brackets[$i] == \"<\") {\n            $i++;\n            if ($i >= length($brackets)) {\n                $correct = 0;\n            } else if ($brackets[$i] != \">\") {\n                $correct = 0;\n            }\n        } else {\n            $i++;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpvmmrmdih.pl line 20, near \"else if\"\nsyntax error at /tmp/tmpvmmrmdih.pl line 23, near \"} else\"\nsyntax error at /tmp/tmpvmmrmdih.pl line 26, near \"}\"\nExecution of /tmp/tmpvmmrmdih.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for $bracket in $brackets {\n        if ($bracket != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmpyg6tpjxg.pl line 14, near \"$bracket in\"\n\t(Missing operator before in?)\nsyntax error at /tmp/tmpyg6tpjxg.pl line 14, near \"$bracket in \"\nsyntax error at /tmp/tmpyg6tpjxg.pl line 19, near \"}\"\nExecution of /tmp/tmpyg6tpjxg.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (0..$#brackets) {\n        if ($brackets[$i] ne '<') {\n            $result = 0;\n            break;\n        }\n        if ($i+1 < $#brackets and $brackets[$i+1] ne '>') {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    my($open) = \"\";\n    my($close) = \"\";\n    my($i) = 0;\n    foreach my $c (@$brackets) {\n        $i += 1;\n        if ($c == \"<\") {\n            $open = \"<\";\n            $close = \">\";\n        } else {\n            $open = \">\";\n            $close = \"<\";\n        }\n        if ($open != \"\") {\n            if ($i == 1) {\n                $correct = 0;\n            } else if ($i > 1 && $close != $open) {\n                $correct = 0;\n            }\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpisfmehyp.pl line 29, near \"else if\"\nsyntax error at /tmp/tmpisfmehyp.pl line 35, near \"}\"\nExecution of /tmp/tmpisfmehyp.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $open_brackets += 1;\n        }\n        else if ( $char eq \">\" ) {\n            $open_brackets -= 1;\n        }\n        if ( $open_brackets < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmptu5hlvqj.pl line 19, near \"else if\"\nsyntax error at /tmp/tmptu5hlvqj.pl line 28, near \"}\"\nExecution of /tmp/tmptu5hlvqj.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count += 1;\n        }\n        elsif ( $char eq \">\" ) {\n            $count -= 1;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($open) = \"\";\n    my($close) = \"\";\n    my($i) = 0;\n    foreach my $c (@$brackets) {\n        $i += 1;\n        if ($c == \"<\") {\n            $open = \"<\";\n            $close = \">\";\n        } else {\n            $open = \">\";\n            $close = \"<\";\n        }\n        if ($i == 1) {\n            $correct = $open;\n        } else if ($i == $len($brackets) && $open != \"\") {\n            $correct = $open;\n        } else if ($i == $len($brackets) && $close != \"\") {\n            $correct = $close;\n        } else if ($i == $len($brackets) && $open == \"\") {\n            $correct = \"\";\n        } else if ($i == $len($brackets) && $close == \"\") {\n            $correct = \"\";\n        } else if ($i == $len($brackets) && $open == $close) {\n            $correct = $open;\n        } else if ($i == $len($brackets) && $open != $close) {\n            $correct = \"\";\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpcqxljsh0.pl line 28, near \"else if\"\nsyntax error at /tmp/tmpcqxljsh0.pl line 30, near \"} else\"\nsyntax error at /tmp/tmpcqxljsh0.pl line 32, near \"} else\"\nExecution of /tmp/tmpcqxljsh0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    my $open = 0;\n    for (my $i = 0; $i < length($brackets); $i++) {\n        $count++;\n        if ($brackets[$i] == '<') {\n            $open++;\n        } else if ($brackets[$i] == '>') {\n            $open--;\n        }\n        if ($open < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpd00042x_.pl line 20, near \"else if\"\nsyntax error at /tmp/tmpd00042x_.pl line 29, near \"}\"\nExecution of /tmp/tmpd00042x_.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($open) = \"\";\n    my($close) = \"\";\n    my($i) = 0;\n    while($i < length($brackets)) {\n        $open = $brackets[$i];\n        $close = $brackets[$i+1];\n        $i += 2;\n        if($open == \"<\" && $close == \">\") {\n            $correct = $correct . \"1\";\n        } else {\n            $correct = $correct . \"0\";\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        else if ( $char eq \">\" ) {\n            $count--;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmphzl41xl0.pl line 19, near \"else if\"\nsyntax error at /tmp/tmphzl41xl0.pl line 28, near \"}\"\nExecution of /tmp/tmphzl41xl0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($correct) = 1;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($result) = \"\";\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = \"\";\n            return $result;\n        }\n        $result = $result . $i;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        else if ( $char eq \">\" ) {\n            $count--;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmphzl41xl0.pl line 19, near \"else if\"\nsyntax error at /tmp/tmphzl41xl0.pl line 28, near \"}\"\nExecution of /tmp/tmphzl41xl0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        elsif ( $char eq \">\" ) {\n            $count--;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($i) = 0;\n    foreach my $c (@$brackets) {\n        $i++;\n        if ($c != \"<\") {\n            $correct .= $c;\n            continue;\n        }\n        if ($i == 1) {\n            $correct .= \"\";\n        } else {\n            $correct .= \">\";\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $result = 0;\n        }\n        if ( $char eq \">\" ) {\n            $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        elsif ($i eq \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (0..$#brackets) {\n        if ($brackets[$i] == \"<\") {\n            $count++;\n        }\n        if ($brackets[$i] == \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    my $i = 0;\n    foreach my $c (@$brackets) {\n        if ($c != \">\") {\n            $i++;\n        } else {\n            $i--;\n        }\n        if ($i < 0) {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        else if ( $char eq \">\" ) {\n            $count--;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmphzl41xl0.pl line 19, near \"else if\"\nsyntax error at /tmp/tmphzl41xl0.pl line 28, near \"}\"\nExecution of /tmp/tmphzl41xl0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    my $i = 0;\n    while ($i < length($brackets)) {\n        if ($brackets[$i] == \"<\") {\n            $i++;\n            if ($i >= length($brackets)) {\n                $correct = 0;\n                break;\n            }\n            if ($brackets[$i] != \">\") {\n                $correct = 0;\n                break;\n            }\n        }\n        $i++;\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    my($open) = \"\";\n    my($close) = \"\";\n    my($i) = 0;\n    foreach my $c (@$brackets) {\n        $i += 1;\n        if ($c == \"<\") {\n            $open = \"\";\n            $close = \"\";\n        } else {\n            $open = $close;\n            $close = $c;\n        }\n        if ($open ne \"\") {\n            if ($open ne $close) {\n                $correct = 0;\n                break;\n            }\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    for my $i (0..$#brackets) {\n        if ($brackets[$i] == '<') {\n            $open_brackets += 1;\n        }\n        else if ($brackets[$i] == '>') {\n            $open_brackets -= 1;\n        }\n        if ($open_brackets < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp_k6c_mwc.pl line 19, near \"else if\"\nsyntax error at /tmp/tmp_k6c_mwc.pl line 28, near \"}\"\nExecution of /tmp/tmp_k6c_mwc.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count += 1;\n        }\n        elsif ( $char eq \">\" ) {\n            $count -= 1;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    for my $char (@$brackets) {\n        if ($char eq \"<\") {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    my $i = 0;\n    foreach my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $i++;\n        } else {\n            $i--;\n        }\n        if ( $i < 0 ) {\n            $correct = 0;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $open_brackets += 1;\n        }\n        else if ($i eq \">\") {\n            $open_brackets -= 1;\n        }\n        if ($open_brackets < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpxyra9x2v.pl line 19, near \"else if\"\nsyntax error at /tmp/tmpxyra9x2v.pl line 28, near \"}\"\nExecution of /tmp/tmpxyra9x2v.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($open) = \"\";\n    my($count) = 0;\n    foreach my $c (@$brackets) {\n        if ($c eq \"<\") {\n            $open = \"<\";\n        } else if ($c eq \">\") {\n            $open = \">\";\n        } else {\n            $open = \"\";\n        }\n        if ($open eq \"\") {\n            $count = $count + 1;\n        } else {\n            $count = $count - 1;\n        }\n        if ($count < 0) {\n            return \"\";\n        }\n        $correct = $correct . $open;\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpf0b149s2.pl line 19, near \"else if\"\nsyntax error at /tmp/tmpf0b149s2.pl line 21, near \"} else\"\nsyntax error at /tmp/tmpf0b149s2.pl line 33, near \"}\"\nExecution of /tmp/tmpf0b149s2.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        else if ( $char eq \">\" ) {\n            $count--;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmphzl41xl0.pl line 19, near \"else if\"\nsyntax error at /tmp/tmphzl41xl0.pl line 28, near \"}\"\nExecution of /tmp/tmphzl41xl0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $stack = [];\n    for my $char (@$brackets) {\n        if ($char eq \"<\") {\n            $stack .= \"<\";\n        } else if ($char eq \">\") {\n            if (length $stack) {\n                $stack = $stack .= \">\";\n            } else {\n                $result = 0;\n                break;\n            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpaaj8a27g.pl line 18, near \"else if\"\nsyntax error at /tmp/tmpaaj8a27g.pl line 21, near \"} else\"\nsyntax error at /tmp/tmpaaj8a27g.pl line 25, near \"}\"\nExecution of /tmp/tmpaaj8a27g.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($open) = \"\";\n    my($close) = \"\";\n    my($i) = 0;\n    while ($i < length($brackets)) {\n        $open = $brackets[$i];\n        $close = $brackets[$i + 1];\n        $i += 2;\n        if ($open == \"<\") {\n            $correct = $correct . $open;\n        }\n        if ($close == \">\") {\n            $correct = $correct . $close;\n        }\n        if ($open != $close) {\n            return \"\";\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count += 1;\n        }\n        elsif ( $char eq \">\" ) {\n            $count -= 1;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($result) = \"\";\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = \"\";\n            return $result;\n        }\n        $result = $result . $i;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    my $open_bracket = 0;\n    my $close_bracket = 0;\n    my $close_bracket_count = 0;\n    my $open_bracket_count = 0;\n    my $open_bracket_stack = [];\n    my $close_bracket_stack = [];\n    my $open_bracket_stack_count = 0;\n    my $close_bracket_stack_count = 0;\n    my $open_bracket_stack_top = 0;\n    my $close_bracket_stack_top = 0;\n    my $open_bracket_stack_top_count = 0;\n    my $close_bracket_stack_top_count = 0;\n    my $open_bracket_stack_top_count = 0;\n    my $close_bracket_stack_top_count = 0;\n    my $open_bracket_stack_top_count = 0;\n    my $close_bracket_stack_top_count = 0;\n    my $open_bracket_stack_top_count = 0;\n    my $close_bracket_stack_top_count = 0;\n    my $open_bracket_stack_top_count = 0;\n    my $close_bracket_stack_top_count = 0;\n    my $open_bracket_stack_top_count = 0;\n    my $close_bracket_stack_top_count = 0;\n    my $open_bracket_stack_top_count = 0;\n    my $close_bracket_stack_top_count = 0;\n    my $open_bracket_stack_top_count = 0;\n    my $close_bracket_stack_top_count = 0;\n    my $open_bracket_stack_top_count = 0;\n    my $close_bracket_stack_top_count = 0;\n    my $open_bracket_stack_top_count = 0;\n    my $close_bracket_stack_top_count = 0;\n    my $open_bracket_stack_top_count = 0;\n    my $close\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmpuy3_4yex.pl line 47, at end of line\nsyntax error at /tmp/tmpuy3_4yex.pl line 47, near \"$close\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmpuy3_4yex.pl line 102, at end of line\nsyntax error at /tmp/tmpuy3_4yex.pl line 102, at EOF\nExecution of /tmp/tmpuy3_4yex.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        elsif ($i eq \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $stack = [];\n    for my $char (@$brackets) {\n        if ($char == '<') {\n            $stack.push('<');\n        } else if ($char == '>') {\n            if ($stack.pop() != '<') {\n                $result = 0;\n            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "Type of arg 1 to push must be array (not constant item) at /tmp/tmp1updli1c.pl line 17, near \"'<')\"\nsyntax error at /tmp/tmp1updli1c.pl line 18, near \"else if\"\nsyntax error at /tmp/tmp1updli1c.pl line 23, near \"}\"\nExecution of /tmp/tmp1updli1c.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    my($i) = 0;\n    while ($i < length($brackets)) {\n        if ($brackets[$i] == \"<\") {\n            if ($i + 1 < length($brackets) && $brackets[$i + 1] == \">\") {\n                $i += 2;\n            } else {\n                $correct = 0;\n                break;\n            }\n        } else {\n            $i += 1;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293505,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    my($i) = 0;\n    foreach my $c (@$brackets) {\n        if ($c eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n        $i++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $correct = \"\";\n            return $correct;\n        }\n        $correct .= $i;\n    }\n    $correct = \"\";\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for my $i (0..$#brackets) {\n        if ($brackets[$i] != \"<\") {\n            $correct = 0;\n        }\n        if ($brackets[$i] == \">\") {\n            if ($i == 0 || $brackets[$i-1] != \"<\") {\n                $correct = 0;\n            }\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        elsif ( $char eq \">\" ) {\n            $count--;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $stack = [];\n    for my $char (@$brackets) {\n        if ($char eq \"<\") {\n            $stack .= \"<\";\n        } else if ($char eq \">\") {\n            if ($stack eq \"<\") {\n                $result = 0;\n            }\n            $stack .= \">\";\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp5rcicbxd.pl line 18, near \"else if\"\nsyntax error at /tmp/tmp5rcicbxd.pl line 24, near \"}\"\nExecution of /tmp/tmp5rcicbxd.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        elsif ( $char eq \">\" ) {\n            $count--;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        if ($i eq \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            return \"\";\n        }\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($i) = 0;\n    while($i < length($brackets)) {\n        if($brackets[$i] eq \"<\") {\n            if($correct eq \"\") {\n                $correct = \"1\";\n            } else {\n                $correct = \"\";\n            }\n        } else {\n            $correct .= \"\";\n        }\n        $i++;\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    my($i) = 0;\n    while ($i < length($brackets)) {\n        if ($brackets[$i] eq \"<\") {\n            $i += 1;\n            if ($i >= length($brackets)) {\n                $correct = 0;\n            } else if ($brackets[$i] ne \">\") {\n                $correct = 0;\n            }\n        } else {\n            $i += 1;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpkzrgj3p9.pl line 20, near \"else if\"\nsyntax error at /tmp/tmpkzrgj3p9.pl line 23, near \"} else\"\nsyntax error at /tmp/tmpkzrgj3p9.pl line 26, near \"}\"\nExecution of /tmp/tmpkzrgj3p9.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    my($open) = \"\";\n    my($close) = \"\";\n    my($i) = 0;\n    while($i < length($brackets)) {\n        $open = $brackets[$i];\n        $i += 1;\n        if($open eq \"<\") {\n            $close = \">\";\n        } else {\n            $close = \"<\";\n        }\n        if($close eq \"\") {\n            $correct = 0;\n            break;\n        }\n        if($open eq $close) {\n            $i += 1;\n        } else {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open = 0;\n    for (my $i = 0; $i < length($brackets); $i++) {\n        if ($brackets[$i] == '<') {\n            $open++;\n        } else if ($brackets[$i] == '>') {\n            $open--;\n        } else {\n            $result = 0;\n        }\n        if ($open < 0) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpoq_v02a3.pl line 18, near \"else if\"\nsyntax error at /tmp/tmpoq_v02a3.pl line 20, near \"} else\"\nsyntax error at /tmp/tmpoq_v02a3.pl line 26, near \"}\"\nExecution of /tmp/tmpoq_v02a3.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count += 1;\n        }\n        elsif ( $char eq \">\" ) {\n            $count -= 1;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for (my $i = 0; $i < length($brackets); $i++) {\n        if ($brackets[$i] != \"<\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count += 1;\n        }\n        else if ( $char eq \">\" ) {\n            $count -= 1;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpdyoeqpn0.pl line 19, near \"else if\"\nsyntax error at /tmp/tmpdyoeqpn0.pl line 28, near \"}\"\nExecution of /tmp/tmpdyoeqpn0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        elsif ($i eq \">\") {\n            $count--;\n        }\n        elsif ($i eq \"<<\" && $count < 0) {\n            $result = 0;\n        }\n        elsif ($i eq \">>\" && $count > 0) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        elsif ($i eq \">\") {\n            $count--;\n        }\n        elsif ($i eq \"<<\") {\n            $count--;\n        }\n        elsif ($i eq \">>\") {\n            $count++;\n        }\n        elsif ($i eq \"><\") {\n            $count--;\n        }\n        elsif ($i eq \"><>\") {\n            $count--;\n        }\n        elsif ($i eq \">><\") {\n            $count++;\n        }\n        elsif ($i eq \"<<><\") {\n            $count++;\n        }\n        elsif ($i eq \"><<<\") {\n            $count++;\n        }\n        elsif ($i eq \">>><\") {\n            $count--;\n        }\n        elsif ($i eq \"><>>\") {\n            $count--;\n        }\n        elsif ($i eq \"><<<><\") {\n            $count--;\n        }\n        elsif ($i eq \"><<<><>\") {\n            $count--;\n        }\n        elsif ($i eq \"><<<><><\") {\n            $count--;\n        }\n        elsif ($i eq \"><<<><><>\") {\n            $count--;\n        }\n        elsif ($i eq \"><<<><><><\") {\n            $count--;\n        }\n        elsif ($i eq \"><<<><><><>\") {\n            $count--;\n        }\n        elsif ($i eq \"><<<><><><><\") {\n            $count--;\n        }\n        elsif ($i eq \"><<<><><><><>\") {\n            $count--;\n        }\n        elsif ($i eq \"><<<><><><><><\") {\n            $count--;\n        }\n        elsif ($i eq \"><<<><><><><><>\") {\n            $count--;\n        }\n        elsif ($i eq \"><<<><><><><><><\") {\n            $\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmp9bxskx17.pl line 81, near \"$\nuse Test::Deep\"\n\t(Missing operator before Test::Deep?)\nsyntax error at /tmp/tmp9bxskx17.pl line 81, near \"$\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp9bxskx17.pl line 136, at end of line\nsyntax error at /tmp/tmp9bxskx17.pl line 136, at EOF\nExecution of /tmp/tmp9bxskx17.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count += 1;\n        }\n        else if ( $char eq \">\" ) {\n            $count -= 1;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpdyoeqpn0.pl line 19, near \"else if\"\nsyntax error at /tmp/tmpdyoeqpn0.pl line 28, near \"}\"\nExecution of /tmp/tmpdyoeqpn0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            if ( length( $result ) == 0 ) {\n                $result = \"\";\n            } else {\n                $result = \"\";\n            }\n        } else {\n            $result = \"\";\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($open) = \"\";\n    my($close) = \"\";\n    my($result) = \"\";\n    foreach my $char (@$brackets) {\n        if ($char eq \"<\") {\n            $open = \"<\";\n        } else if ($char eq \">\") {\n            $close = \">\";\n        } else {\n            $count += 1;\n        }\n    }\n    if ($count eq 0) {\n        $result = \"\";\n    } else if ($count eq 1) {\n        $result = $open eq $close ? 1 : 0;\n    } else {\n        $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpr7zxn_yh.pl line 20, near \"else if\"\nsyntax error at /tmp/tmpr7zxn_yh.pl line 22, near \"} else\"\nsyntax error at /tmp/tmpr7zxn_yh.pl line 25, near \"}\"\nExecution of /tmp/tmpr7zxn_yh.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($count) = 0;\n    foreach my $bracket (@$brackets) {\n        if ($bracket eq \"<\") {\n            $count++;\n        }\n        else {\n            $count--;\n        }\n        if ($count < 0) {\n            $correct = \"\";\n            return;\n        }\n        $correct .= $bracket;\n    }\n    $correct =~ s/<\\s*>\\s*/<>/g;\n    return $correct eq $brackets;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char == \"<\" ) {\n            $count++;\n        }\n        else if ( $char == \">\" ) {\n            $count--;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp8eq20511.pl line 19, near \"else if\"\nsyntax error at /tmp/tmp8eq20511.pl line 28, near \"}\"\nExecution of /tmp/tmp8eq20511.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($result) = \"\";\n    my $count = 0;\n    foreach my $char (@$brackets) {\n        if ($char == \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = \"\";\n            return $result;\n        }\n        $result .= $char;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    my($i) = 0;\n    while ($i < length($brackets)) {\n        $count += 1;\n        if ($brackets[$i] == '<') {\n            $i += 1;\n            while ($i < length($brackets) && $brackets[$i] != '>') {\n                $i += 1;\n            }\n            if ($i == length($brackets)) {\n                $result = 0;\n            }\n        }\n        $i += 1;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($result) = \"\";\n    my $count = 0;\n    for my $char (@$brackets) {\n        if ($char eq \"<\") {\n            $count += 1;\n        }\n        elsif ($char eq \">\") {\n            $count -= 1;\n        }\n        if ($count < 0) {\n            $result = \"\";\n            return $result;\n        }\n        $result = $result . $char;\n    }\n    if ($count != 0) {\n        $result = \"\";\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($i) = 0;\n    while ($i < length($brackets)) {\n        if ($brackets[$i] eq \"<\") {\n            $correct .= \">\";\n        } else {\n            $correct .= \"<\";\n        }\n        $i++;\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($result) = \"\";\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n        if ( $count < 0 ) {\n            $result = \"\";\n            return $result;\n        }\n        $result .= $char;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            if ( $brackets eq \"\" ) {\n                $result = 0;\n            }\n            else {\n                $result = $result and 1;\n            }\n        }\n        else {\n            $result = $result and 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    my $open_bracket_positions = [];\n    my $close_bracket_positions = [];\n    my $open_bracket_positions_count = 0;\n    my $close_bracket_positions_count = 0;\n    my $open_bracket_positions_count_max = 0;\n    my $close_bracket_positions_count_max = 0;\n    my $open_bracket_positions_count_min = 0;\n    my $close_bracket_positions_count_min = 0;\n    my $open_bracket_positions_count_min_max = 0;\n    my $close_bracket_positions_count_min_max = 0;\n    my $open_bracket_positions_count_min_min = 0;\n    my $close_bracket_positions_count_min_min = 0;\n    my $open_bracket_positions_count_min_max_min = 0;\n    my $close_bracket_positions_count_min_max_min = 0;\n    my $open_bracket_positions_count_min_max_max = 0;\n    my $close_bracket_positions_count_min_max_max = 0;\n    my $open_bracket_positions_count_min_min_min = 0;\n    my $close_bracket_positions_count_min_min_min = 0;\n    my $open_bracket_positions_count_min_min_max_min = 0;\n    my $close_bracket_positions_count_min_min_max_min = 0;\n    my $open_bracket_positions_count_min_min_max_max = 0;\n    my $close_bracket_positions_count_min_min_max_max = 0;\n    my $open_bracket_positions_count_min_min_min_min = 0;\n    my $close_bracket_positions_count_min_min_min_min = 0;\n    my $open_bracket\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "\"use\" not allowed in expression at /tmp/tmp0_fvlrys.pl line 40, at end of line\nsyntax error at /tmp/tmp0_fvlrys.pl line 40, near \"$open_bracket\nuse Test::Deep\"\nMissing right curly or square bracket at /tmp/tmp0_fvlrys.pl line 95, at end of line\nsyntax error at /tmp/tmp0_fvlrys.pl line 95, at EOF\nExecution of /tmp/tmp0_fvlrys.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($count) = 0;\n    foreach my $char (@$brackets) {\n        if ($char == \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $correct = \"\";\n            return;\n        }\n        $correct .= $char;\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my $i = 0;\n    foreach my $c (@$brackets) {\n        if ($c eq \"<\") {\n            $i++;\n        } else {\n            $i--;\n        }\n        if ($i < 0) {\n            $correct = \"\";\n            break;\n        }\n        if ($i > 0) {\n            $correct .= \">\";\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($correct) = 1;\n    foreach my $c (@$brackets) {\n        if ($c eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $correct = 0;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        elsif ($i eq \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    for my $char (@$brackets) {\n        if ($char eq \"<\") {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    my $open = 0;\n    my $close = 0;\n    my $i = 0;\n    while ($i < length($brackets)) {\n        if ($brackets[$i] == '<') {\n            $open++;\n        }\n        if ($brackets[$i] == '>') {\n            $close++;\n        }\n        $i++;\n    }\n    if ($open != $close) {\n        $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($result) = \"\";\n    my $count = 0;\n    for my $char (@$brackets) {\n        if ($char eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = \"\";\n            return $result;\n        }\n        $result .= $char;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($result) = \"\";\n    my($count) = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n        if ($count < 0) {\n            $result = \"\";\n            return $result;\n        }\n        $result = $result . $i;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (0..$#brackets) {\n        if ($brackets[$i] ne '<') {\n            $result = 0;\n        }\n        if ($brackets[$i] ne '>') {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    for ($i = 0; $i < length($brackets); $i++) {\n        if ($brackets[$i] != '<') {\n            $correct = 0;\n            break;\n        }\n        if ($i == length($brackets) - 1 || $brackets[$i+1] != '>') {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        else if ($i eq \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp99qtzcr5.pl line 19, near \"else if\"\nsyntax error at /tmp/tmp99qtzcr5.pl line 28, near \"}\"\nExecution of /tmp/tmp99qtzcr5.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($result) = \"\";\n    my $count = 0;\n    foreach my $char (@$brackets) {\n        if ($char == \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = \"\";\n            return $result;\n        }\n        $result = $result . $char;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        elsif ( $char eq \">\" ) {\n            $count--;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    foreach my $char (@$brackets) {\n        if ($char eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        else if ( $char eq \">\" ) {\n            $count--;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmphzl41xl0.pl line 19, near \"else if\"\nsyntax error at /tmp/tmphzl41xl0.pl line 28, near \"}\"\nExecution of /tmp/tmphzl41xl0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        elsif ($i eq \">\") {\n            $count--;\n        }\n        elsif ($i eq \"<<\" && $count < 0) {\n            $result = 0;\n        }\n        elsif ($i eq \">>\" && $count > 0) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    my $i = 0;\n    while ($i < length($brackets)) {\n        if ($brackets[$i] == \"<\") {\n            $i++;\n            if ($i >= length($brackets)) {\n                $correct = 0;\n                break;\n            }\n            if ($brackets[$i] != \">\") {\n                $correct = 0;\n                break;\n            }\n            $i++;\n        } else {\n            $i++;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for $i (0..$#brackets) {\n        if ($brackets[$i] != \"<\") {\n            $correct = 0;\n            break;\n        }\n        if ($i == $#brackets - 1 || $brackets[$i+1] != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            if ( length $result ) {\n                $result = 0;\n            }\n        }\n        else {\n            if ( $char eq \">\" ) {\n                if ( ! length $result ) {\n                    $result = 0;\n                }\n            }\n            else {\n                $result = 0;\n            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    for (my $i = 0; $i < length($brackets); $i++) {\n        if ($brackets[$i] != \"<\") {\n            $correct = 0;\n            break;\n        }\n    }\n    for (my $i = length($brackets) - 1; $i >= 0; $i--) {\n        if ($brackets[$i] != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    foreach my $char (@$brackets) {\n        if ($char eq \"<\") {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count += 1;\n        }\n        elsif ( $char eq \">\" ) {\n            $count -= 1;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($result) = \"\";\n    my($count) = 0;\n    foreach my $char (@$brackets) {\n        if ($char == \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = \"\";\n            return $result;\n        }\n        $result .= $char;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        else if ( $char eq \">\" ) {\n            $count--;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmphzl41xl0.pl line 19, near \"else if\"\nsyntax error at /tmp/tmphzl41xl0.pl line 28, near \"}\"\nExecution of /tmp/tmphzl41xl0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $open_bracket (@$brackets) {\n        my $close_bracket = $open_bracket + 1;\n        if ($close_bracket > length($brackets)) {\n            $result = 0;\n            break;\n        }\n        if ($brackets[$close_bracket] ne '<') {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (0..$#brackets) {\n        if ($brackets[$i] == \"<\") {\n            $count++;\n        }\n        if ($brackets[$i] == \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        elsif ($i eq \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        else if ( $char eq \">\" ) {\n            $count--;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmphzl41xl0.pl line 19, near \"else if\"\nsyntax error at /tmp/tmphzl41xl0.pl line 28, near \"}\"\nExecution of /tmp/tmphzl41xl0.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    my $open = 0;\n    for ($i = 0; $i < length($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n        } else {\n            $open--;\n        }\n        if ($open < 0) {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        elsif ($i eq \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (0..$#brackets) {\n        if ($brackets[$i] ne '<') {\n            $result = 0;\n        }\n        if ($brackets[$i] ne '>') {\n            $result = 0;\n        }\n        if ($brackets[$i] eq '<') {\n            $result = 0;\n        }\n        if ($brackets[$i] eq '>') {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        elsif ($i eq \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    my $open_bracket = 0;\n    my $close_bracket = 0;\n    my $close_bracket_count = 0;\n    my $open_bracket_count = 0;\n    my $open_bracket_stack = [];\n    my $close_bracket_stack = [];\n    my $open_bracket_stack_count = 0;\n    my $close_bracket_stack_count = 0;\n    my $open_bracket_stack_index = 0;\n    my $close_bracket_stack_index = 0;\n    my $open_bracket_stack_index = 0;\n    my $close_bracket_stack_index = 0;\n    my $open_bracket_stack_index = 0;\n    my $close_bracket_stack_index = 0;\n    my $open_bracket_stack_index = 0;\n    my $close_bracket_stack_index = 0;\n    my $open_bracket_stack_index = 0;\n    my $close_bracket_stack_index = 0;\n    my $open_bracket_stack_index = 0;\n    my $close_bracket_stack_index = 0;\n    my $open_bracket_stack_index = 0;\n    my $close_bracket_stack_index = 0;\n    my $open_bracket_stack_index = 0;\n    my $close_bracket_stack_index = 0;\n    my $open_bracket_stack_index = 0;\n    my $close_bracket_stack_index = 0;\n    my $open_bracket_stack_index = 0;\n    my $close_bracket_stack_index = 0;\n    my $open_bracket_stack_index = 0;\n    my $close_bracket_stack_index = 0;\n    my $open_bracket_stack_index = 0;\n    my $close_bracket_stack_index = 0;\n    my $open_bracket_stack_index = 0;\n    my $close_bracket_stack_index = 0;\n    \nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpps7583le.pl line 105, at end of line\nsyntax error at /tmp/tmpps7583le.pl line 105, at EOF\nExecution of /tmp/tmpps7583le.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    foreach my $char (@$brackets) {\n        if ($char eq \"<\") {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    my($i) = 0;\n    while($i < length($brackets)) {\n        if($brackets[$i] eq \"<\") {\n            if(length(substr($brackets, $i + 1)) == 0) {\n                $correct = 0;\n            }\n        }\n        $i++;\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($result) = \"\";\n    my $count = 0;\n    foreach my $char ( @$brackets ) {\n        if ( $char == \"<\" ) {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ( $count < 0 ) {\n            $result = \"\";\n            return $result;\n        }\n        $result .= $char;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for (my $i = 0; $i < length($brackets); $i++) {\n        if ($brackets[$i] != '<') {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    my $i = 0;\n    while ($i < length($brackets)) {\n        if ($brackets[$i] == '<') {\n            if ($i + 1 < length($brackets) && $brackets[$i+1] == '<') {\n                $i += 2;\n            } else {\n                $correct = 0;\n                break;\n            }\n        } else {\n            $i += 1;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293506,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (0..$#brackets) {\n        if ($brackets[$i] ne \">\") {\n            $result = 0;\n            break;\n        }\n        if ($i+1 < $#brackets and $brackets[$i+1] ne \"<\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($count) = 0;\n    for my $char ( @$brackets ) {\n        if ( $char == \"<\" ) {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n        if ( $count < 0 ) {\n            return \"\";\n        }\n        $correct .= $char;\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my $i = 0;\n    foreach my $c (@$brackets) {\n        if ($i % 2) {\n            $correct .= \">\";\n        } else {\n            $correct .= \"<\";\n        }\n        $i++;\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            if ( length $result ) {\n                $result = 0;\n            }\n        } else {\n            if ( $char eq \">\" ) {\n                if ( ! $result ) {\n                    $result = 0;\n                }\n            }\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $result = 0;\n        }\n        if ( $char eq \">\" ) {\n            $result = 1;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $open_brackets += 1;\n        }\n        elsif ( $char eq \">\" ) {\n            $open_brackets -= 1;\n        }\n        elsif ( $open_brackets < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($open) = \"\";\n    my($close) = \"\";\n    my($i) = 0;\n    while ($i < length($brackets)) {\n        $open = $brackets[$i];\n        $i++;\n        if ($i >= length($brackets)) {\n            return \"\";\n        }\n        $close = $brackets[$i];\n        $i++;\n        if ($open == \"<\" && $close == \">\") {\n            $correct = $correct . \"1\";\n        } else {\n            $correct = $correct . \"0\";\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 1;\n    my($result) = 1;\n    my($i) = 0;\n    while($i < length($brackets)) {\n        if ($brackets[$i] == '<') {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count == 0) {\n            $result = 0;\n            break;\n        }\n        $i++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $open_bracket (@$brackets) {\n        my $close_bracket = $open_bracket[1];\n        if ($close_bracket ne $open_bracket) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($i) = 0;\n    while ($i < length($brackets)) {\n        $i += 1;\n        if ($brackets[$i] == \"<\") {\n            $correct .= \"\";\n        } else {\n            $correct .= \">\";\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($result) = '';\n    my($count) = 0;\n    foreach my $char (@$brackets) {\n        if ($char eq '<') {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n        if ($count < 0) {\n            $result = '';\n            return $result;\n        }\n        $result .= $char;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    my($i) = 0;\n    while ($i < length($brackets)) {\n        $count += 1;\n        if ($brackets[$i] == '<') {\n            $result = 0;\n            $i += 1;\n            while ($i < length($brackets) && $brackets[$i] != '>') {\n                $i += 1;\n            }\n            if ($i == length($brackets)) {\n                $result = 0;\n            }\n        }\n        $i += 1;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (0..$#brackets) {\n        if ($brackets[$i] != \"<\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        elsif ( $char eq \">\" ) {\n            $count--;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    foreach my $char (@$brackets) {\n        if ($char eq \"<\") {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    my $open_bracket = 0;\n    my $close_bracket = 0;\n    my $close_bracket_index = 0;\n    my $open_bracket_index = 0;\n    my $open_brackets_list = \"\";\n    my $open_bracket_list = \"\";\n    my $close_bracket_list = \"\";\n    my $close_bracket_index_list = \"\";\n    my $open_bracket_index_list = \"\";\n    my $open_brackets_list_str = \"\";\n    my $open_bracket_list_str = \"\";\n    my $close_bracket_list_str = \"\";\n    my $close_bracket_index_list_str = \"\";\n    my $open_bracket_index_list_str = \"\";\n    my $open_brackets_list_str_str = \"\";\n    my $open_bracket_list_str_str = \"\";\n    my $close_bracket_list_str_str = \"\";\n    my $close_bracket_index_list_str_str = \"\";\n    my $open_bracket_index_list_str_str = \"\";\n    my $open_brackets_list_str_str_str = \"\";\n    my $open_bracket_list_str_str_str = \"\";\n    my $close_bracket_list_str_str_str = \"\";\n    my $close_bracket_index_list_str_str_str = \"\";\n    my $open_bracket_index_list_str_str_str = \"\";\n    my $open_brackets_list_str_str_str_str = \"\";\n    my $open_bracket_list_str_str_str_str = \"\";\n    my $close_bracket_list_str_str_str_str = \"\";\n    my $close_bracket_index_list_str_str_str_str = \"\";\n    my $open_bracket_index_list_str_str_str_str = \"\";\n\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "Missing right curly or square bracket at /tmp/tmpzwkgeqej.pl line 100, at end of line\nsyntax error at /tmp/tmpzwkgeqej.pl line 100, at EOF\nExecution of /tmp/tmpzwkgeqej.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (0..$#brackets) {\n        if ($brackets[$i] ne '<') {\n            $result = 0;\n        }\n        if ($brackets[$i] ne '>') {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 1;\n    my($result) = 1;\n    my($i) = 0;\n    while($i < length($brackets)) {\n        if($brackets[$i] eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if($count < 0) {\n            $result = 0;\n            break;\n        }\n        $i++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    my $close_brackets = 0;\n    my $i = 0;\n    while ($i < length($brackets)) {\n        if ($brackets[$i] == '<') {\n            $open_brackets += 1;\n        } else if ($brackets[$i] == '>') {\n            $close_brackets += 1;\n        }\n        $i += 1;\n    }\n    if ($open_brackets != $close_brackets) {\n        $result = 0;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpfqfuepjz.pl line 20, near \"else if\"\nsyntax error at /tmp/tmpfqfuepjz.pl line 29, near \"}\"\nExecution of /tmp/tmpfqfuepjz.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($result) = \"\";\n    my($count) = 0;\n    foreach my $char (@$brackets) {\n        if ($char == \"<\") {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n        if ($count < 0) {\n            $result = \"\";\n            return $result;\n        }\n    }\n    $result = 1;\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my $i = 0;\n    foreach my $c (@$brackets) {\n        $i += 1;\n        if ($c == \"<\") {\n            if ($i % 2 == 0) {\n                $correct .= \">\";\n            }\n        } else {\n            if ($i % 2 == 1) {\n                $correct .= \"<\";\n            }\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open = 0;\n    my $close = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $open += 1;\n        }\n        elsif ( $char eq \">\" ) {\n            $close += 1;\n        }\n        elsif ( $open > 0 && $close > 0 ) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    my $close_brackets = 0;\n    for my $i (0..$#brackets) {\n        if ($brackets[$i] == '<') {\n            $open_brackets += 1;\n        } else if ($brackets[$i] == '>') {\n            $close_brackets += 1;\n        }\n        if ($open_brackets != $close_brackets) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpsy6_ov0d.pl line 19, near \"else if\"\nsyntax error at /tmp/tmpsy6_ov0d.pl line 28, near \"}\"\nExecution of /tmp/tmpsy6_ov0d.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($correct) = 1;\n    for ($i = 0; $i < length($brackets); $i++) {\n        if ($brackets[$i] == \"<\") {\n            $count++;\n            if ($count > 0 && $count % 2 == 0) {\n                $correct = 0;\n            }\n        } else {\n            $count--;\n            if ($count < 0) {\n                $correct = 0;\n            }\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open = 0;\n    for (my $i = 0; $i < length($brackets); $i++) {\n        if ($brackets[$i] == '<') {\n            $open++;\n        }\n        if ($brackets[$i] == '>') {\n            $open--;\n        }\n        if ($open < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $open_brackets += 1;\n        }\n        elsif ( $char eq \">\" ) {\n            $open_brackets -= 1;\n        }\n        elsif ( $open_brackets < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    my($i) = 0;\n    while ($i < length($brackets)) {\n        if ($brackets[$i] eq \"<\") {\n            $count++;\n        }\n        else if ($brackets[$i] eq \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n        $i++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp2ennhmlv.pl line 20, near \"else if\"\nsyntax error at /tmp/tmp2ennhmlv.pl line 30, near \"}\"\nExecution of /tmp/tmp2ennhmlv.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open = 0;\n    my $close = 0;\n    for my $char (my $i = 0) {\n        if ($brackets eq \"\") {\n            $result = 0;\n            break;\n        }\n        if ($brackets eq \"<<>\") {\n            $result = 0;\n            break;\n        }\n        if ($brackets eq \"<<\") {\n            $open++;\n        }\n        if ($brackets eq \">\") {\n            $close++;\n        }\n        if ($brackets eq \"<\") {\n            $open--;\n        }\n        if ($brackets eq \">\") {\n            $close--;\n        }\n        if ($open < 0 || $close < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($count) = 0;\n    my($i) = 0;\n    while ($i < length($brackets)) {\n        if ($brackets[$i] eq \"<\") {\n            $count++;\n        }\n        if ($brackets[$i] eq \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            return \"\";\n        }\n        $correct .= $brackets[$i];\n        $i++;\n    }\n    return $correct eq \"\";\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (0..$#brackets) {\n        if ($brackets[$i] != \"<\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        elsif ( $char eq \">\" ) {\n            $count--;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        else if ($i eq \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp99qtzcr5.pl line 19, near \"else if\"\nsyntax error at /tmp/tmp99qtzcr5.pl line 28, near \"}\"\nExecution of /tmp/tmp99qtzcr5.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    my $open = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $open++;\n        } else if ( $char eq \">\" ) {\n            $open--;\n        } else {\n            $count++;\n        }\n        if ( $open < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpwm485bc_.pl line 19, near \"else if\"\nsyntax error at /tmp/tmpwm485bc_.pl line 21, near \"} else\"\nsyntax error at /tmp/tmpwm485bc_.pl line 28, near \"}\"\nExecution of /tmp/tmpwm485bc_.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my $i = 0;\n    foreach my $c (@$brackets) {\n        if ($i % 2 == 0) {\n            $correct .= \">\";\n        }\n        $correct .= $c;\n        $i++;\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my($i) = 0;\n    while($i < length($brackets)) {\n        if($brackets[$i] eq \"<\") {\n            if($correct eq \"\") {\n                $correct = \"1\";\n            } else {\n                $correct = \"\";\n            }\n        } else {\n            $correct .= \"\";\n        }\n        $i += 1;\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count += 1;\n        }\n        elsif ( $char eq \">\" ) {\n            $count -= 1;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($correct) = \"\";\n    my $i = 0;\n    foreach my $c (@$brackets) {\n        $i += 1;\n        if ($i % 2) {\n            $correct .= \">\";\n        } else {\n            $correct .= \"<\";\n        }\n        if ($c ne \">\") {\n            $correct .= \">\";\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        } else {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        elsif ( $char eq \">\" ) {\n            $count--;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $i (@$brackets) {\n        if ($i eq \"<\") {\n            $count++;\n        }\n        else if ($i eq \">\") {\n            $count--;\n        }\n        if ($count < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp99qtzcr5.pl line 19, near \"else if\"\nsyntax error at /tmp/tmp99qtzcr5.pl line 28, near \"}\"\nExecution of /tmp/tmp99qtzcr5.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 1;\n    my($result) = 1;\n    my($open) = \"\";\n    my($close) = \"\";\n    my($i) = 0;\n    while ($i < length($brackets)) {\n        $open = $brackets[$i];\n        $close = $brackets[$i + 1];\n        if ($open eq $close) {\n            $count++;\n        } else if ($open eq \"<\") {\n            $result = 0;\n        } else {\n            $result = 0;\n            $count = 0;\n        }\n        $i++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmptgf_wtj9.pl line 23, near \"else if\"\nsyntax error at /tmp/tmptgf_wtj9.pl line 25, near \"} else\"\nsyntax error at /tmp/tmptgf_wtj9.pl line 30, near \"}\"\nExecution of /tmp/tmptgf_wtj9.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char == \"<\" ) {\n            $count++;\n        }\n        else if ( $char == \">\" ) {\n            $count--;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp8eq20511.pl line 19, near \"else if\"\nsyntax error at /tmp/tmp8eq20511.pl line 28, near \"}\"\nExecution of /tmp/tmp8eq20511.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    my $open_bracket = 0;\n    my $close_bracket = 0;\n    my $close_bracket_index = 0;\n    my $i = 0;\n    while ($i < length($brackets)) {\n        $open_bracket = $brackets[$i];\n        $i++;\n        if ($open_bracket == \"<\") {\n            $open_brackets++;\n        }\n        if ($open_bracket == \">\") {\n            $close_bracket = $brackets[$i];\n            $i++;\n            $close_bracket_index = $i;\n            $close_brackets++;\n        }\n        $i++;\n    }\n    if ($open_brackets != $close_brackets) {\n        $result = 0;\n    }\n    if ($open_brackets == 0) {\n        $result = 1;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $count = 0;\n    my $result = 1;\n    my $open = 0;\n    my $close = 0;\n    my $i = 0;\n    while ($i < length($brackets)) {\n        $close = $brackets[$i];\n        $i++;\n        if ($open == 0) {\n            $open = $close;\n        } else if ($open == $close) {\n            $open = 0;\n        } else {\n            $result = 0;\n            break;\n        }\n        $count++;\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmpgmksk7nx.pl line 23, near \"else if\"\nsyntax error at /tmp/tmpgmksk7nx.pl line 25, near \"} else\"\nsyntax error at /tmp/tmpgmksk7nx.pl line 30, near \"}\"\nExecution of /tmp/tmpgmksk7nx.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    foreach my $char ( @$brackets ) {\n        if ( $char == '<' ) {\n            $count++;\n        }\n        else if ( $char == '>' ) {\n            $count--;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp9o1a98ly.pl line 19, near \"else if\"\nsyntax error at /tmp/tmp9o1a98ly.pl line 28, near \"}\"\nExecution of /tmp/tmp9o1a98ly.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $correct = 1;\n    for $b in $brackets {\n        if ($b ne '<') {\n            $correct = 0;\n            break;\n        }\n    }\n    return $correct;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "Bareword found where operator expected at /tmp/tmpepv03i51.pl line 14, near \"$b in\"\n\t(Missing operator before in?)\nsyntax error at /tmp/tmpepv03i51.pl line 14, near \"$b in \"\nsyntax error at /tmp/tmpepv03i51.pl line 19, near \"}\"\nExecution of /tmp/tmpepv03i51.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count += 1;\n        } else {\n            $count -= 1;\n        }\n        if ( $count < 0 ) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    for my $i (@$brackets) {\n        if ($i != \">\") {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    my $close_brackets = 0;\n    for my $i (0..$#brackets) {\n        if ($brackets[$i] == '<') {\n            $open_brackets += 1;\n        }\n        if ($brackets[$i] == '>') {\n            $close_brackets += 1;\n        }\n        if ($open_brackets > $close_brackets) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        elsif ( $char eq \">\" ) {\n            $count--;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293490,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my($count) = 0;\n    my($result) = 1;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count += 1;\n        }\n        elsif ( $char eq \">\" ) {\n            $count -= 1;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $count = 0;\n    for my $char ( @$brackets ) {\n        if ( $char eq \"<\" ) {\n            $count++;\n        }\n        elsif ( $char eq \">\" ) {\n            $count--;\n        }\n        elsif ( $count < 0 ) {\n            $result = 0;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "ok!ok!ok!ok!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# brackets is a string of \"<\" and \">\".\n# return 1 if every opening bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"<\")\n# \"\"\n# >>> correct_bracketing(\"<>\")\n# 1\n# >>> correct_bracketing(\"<<><>>\")\n# 1\n# >>> correct_bracketing(\"><<>\")\n# \"\"\nsub correct_bracketing {\n    my($brackets) = @_;\n    my $result = 1;\n    my $open_brackets = 0;\n    for (my $i = 0; $i < length($brackets); $i++) {\n        if ($brackets[$i] == '<') {\n            $open_brackets++;\n        } else if ($brackets[$i] == '>') {\n            $open_brackets--;\n        }\n        if ($open_brackets < 0) {\n            $result = 0;\n            break;\n        }\n    }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n        if(eq_deeply($candidate->(\"<>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<><>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<<><><>><>><<><><<>>>\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<><>>>>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<<<\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\">\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>><<>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"<><><<><>><>>><>\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
      "timestamp": 1664293491,
      "stdout": "",
      "stderr": "syntax error at /tmp/tmp7frywkd2.pl line 18, near \"else if\"\nsyntax error at /tmp/tmp7frywkd2.pl line 27, near \"}\"\nExecution of /tmp/tmp7frywkd2.pl aborted due to compilation errors.\n",
      "exit_code": 255,
      "status": "Exception"
    }
  ]
}