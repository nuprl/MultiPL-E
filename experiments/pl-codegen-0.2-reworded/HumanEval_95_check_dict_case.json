{
  "name": "HumanEval_95_check_dict_case",
  "language": "pl",
  "prompt": "# Given a hash, return 1 if all keys are strings in lower \n# case or all keys are strings in upper case, else return ''.\n# The function should return '' is the given hash is empty.\n# Examples:\n# >>> check_dict_case({\"a\" => \"apple\", \"b\" => \"banana\"})\n# 1\n# >>> check_dict_case({\"a\" => \"apple\", \"A\" => \"banana\", \"B\" => \"banana\"})\n# \"\"\n# >>> check_dict_case({\"a\" => \"apple\", 8 => \"banana\", \"a\" => \"apple\"})\n# \"\"\n# >>> check_dict_case({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"})\n# \"\"\n# >>> check_dict_case({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"})\n# 1\nsub check_dict_case {\n    my($dict) = @_;\n",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_dict_case;\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"b\" => \"banana\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\"}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\"}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"STATE\" => \"NC\", \"ZIP\" => \"12345\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"}),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->({}),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "completions": [
    "    my $result = '';\n    foreach my $key (keys %{$dict}) {\n        if (lc($key) eq $key) {\n            $result = 1;\n        } elsif (uc($key) eq $key) {\n            $result = '';\n        } else {\n            $result = '';\n        }\n    }\n    return $result;\n}",
    "    my $result = '';\n    foreach my $key (keys %{$dict}) {\n        if (lc($key) eq $key) {\n            $result = 1;\n        } elsif (uc($key) eq $key) {\n            $result = \"\";\n        } else {\n            $result = \"\";\n        }\n    }\n    return $result;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        my $key = $dict{$key};\n        if (is_a($key, 'String')) {\n            if (lc($key) ne lc($key)) {\n                return '';\n            }\n        }\n        else {\n            if (uc($key) ne uc($key)) {\n                return '';\n            }\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (is_a($key, 'String')) {\n            if (lc($key) ne lc($key)) {\n                return '';\n            }\n        } elsif (is_a($key, 'String')) {\n            if (uc($key) ne uc($key)) {\n                return '';\n            }\n        } else {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar(keys %{$dict}) eq '') {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = @keys;\n    for (@keys_lower) {\n        if (lc($_) ne $_) {\n            return '';\n        }\n    }\n    my @keys_upper = @keys;\n    for (@keys_upper) {\n        if (uc($_) ne $_) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    foreach my $key (keys %{$dict}) {\n        if (not $key) {\n            return '';\n        }\n        if (not isa(%{$dict}[$key], \"String\")) {\n            return '';\n        }\n        if (lc(%{$dict}[$key]) ne lc(%{$dict}[$key])) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    foreach my $key (keys %{$dict}) {\n        if (!is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my $result = '';\n    foreach my $key (keys %{$dict}) {\n        if (!is_string($key)) {\n            $result = '';\n            break;\n        }\n        if (lc($key) eq $key) {\n            $result = 1;\n        } else if (uc($key) eq $key) {\n            $result = '';\n        } else {\n            $result = '';\n            break;\n        }\n    }\n    return $result;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    return ((sort @keys_lower) eq sort @keys_upper) ? 1 : '';\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        foreach my $key (keys %{$dict}) {\n            if (not is_string($key)) {\n                return '';\n            }\n            if (lc($key) ne lc($key)) {\n                return '';\n            }\n        }\n        return 1;\n    }\n    return '';\n}",
    "    my $result = '';\n    foreach my $key (keys %{$dict}) {\n        my $key_lc = $key;\n        $key_lc =~ s/[^a-zA-Z0-9]//g;\n        my $key_uc = $key;\n        $key_uc =~ s/[^a-zA-Z0-9]//g;\n        if ($key_lc ne $key_uc) {\n            $result = '';\n            return $result;\n        }\n    }\n    $result = 1;\n    return $result;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my $result = 1;\n    foreach my $key (keys %{$dict}) {\n        if (not is_a_string($key)) {\n            $result = '';\n            break;\n        }\n        if (lc($key) ne $key) {\n            $result = '';\n            break;\n        }\n    }\n    return $result;\n}",
    "    if (scalar($dict) == 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    my @keys_lower_and_upper = union @keys_lower, @keys_upper;\n    foreach my $key (@keys_lower_and_upper) {\n        if ($key ne $key->uc) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if ($key ne $key->lc) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        my @keys = keys %{$dict};\n        foreach my $key (@keys) {\n            if (is_string($key) && !is_string_capital($key)) {\n                return \"\";\n            }\n        }\n        return 1;\n    }\n    return \"\";\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    foreach my $key (keys %{$dict}) {\n        if (not defined $key) {\n            return '';\n        }\n        if (not defined $key->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}->{",
    "    if (scalar($dict) == 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    my $result = 0;\n    foreach my $key (@keys_lower) {\n        if ($key ne $keys_upper[$keys_lower.index($key)]) {\n            $result = '';\n            break;\n        }\n    }\n    return $result;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar(keys %{$dict}) eq '') {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    return ((scalar(@keys_lower) eq scalar(@keys_upper)) ? 1 : '');\n}",
    "    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my $result = 1;\n    foreach my $key (keys %{$dict}) {\n        if (not defined $key) {\n            continue;\n        }\n        if (not defined $key) {\n            $result = \"\";\n            continue;\n        }\n        if ($key =~ /^[a-z]/i) {\n            $result = \"\";\n        } else if ($key =~ /^[A-Z]/i) {\n            $result = \"\";\n        } else {\n            $result = \"\";\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    foreach my $key (keys %{$dict}) {\n        if (not $key) {\n            $result = '';\n            continue;\n        }\n        if (not $key =~ /^[a-z]/i) {\n            $result = '';\n            continue;\n        }\n        if (not $key =~ /^[A-Z]/i) {\n            $result = '';\n            continue;\n        }\n    }\n    return $result;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        foreach my $key (keys %{$dict}) {\n            if (is_string($key)) {\n                if (lc($key) ne $key) {\n                    return \"\";\n                }\n            } else {\n                if (uc($key) ne $key) {\n                    return \"\";\n                }\n            }\n        }\n        return 1;\n    }\n    return \"\";\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my @keys = keys %{$dict};\n    my $result = 1;\n    foreach my $key (@keys) {\n        if (lc($key) ne uc($key)) {\n            $result = '';\n            break;\n        }\n    }\n    return $result;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && length($dict) > 0) {\n        foreach my $key (keys %{$dict}) {\n            if (is_string($key)) {\n                if (lc($key) ne $key) {\n                    return \"\";\n                }\n            } else {\n                if (uc($key) ne $key) {\n                    return \"\";\n                }\n            }\n        }\n        return 1;\n    }\n    return \"\";\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar(@$dict) == 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    my @keys_mixed = map { $_->uc if $_->lc == $_->uc } @keys;\n    my $result = '';\n    foreach my $key (@keys_lower) {\n        if ($result eq '') {\n            $result = 1;\n        } else {\n            $result = '';\n        }\n    }\n    foreach my $key (@keys_upper) {\n        if ($result eq '') {\n            $result = 1;\n        } else {\n            $result = '';\n        }\n    }\n    foreach my $key (@keys_mixed) {\n        if ($result eq '') {\n            $result = 1;\n        } else {\n            $result = '';\n        }\n    }\n    return $result;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if ($key eq $key->lc) {\n            continue;\n        }\n        return '';\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar(keys %{$dict}) eq '') {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my $all_lower = 1;\n    my $all_upper = 1;\n    foreach my $key (keys %{$dict}) {\n        if (lc($key) ne $key) {\n            $all_lower = 0;\n        }\n        if (uc($key) ne $key) {\n            $all_upper = 0;\n        }\n    }\n    if ($all_lower && $all_upper) {\n        return 1;\n    }\n    return '';\n}",
    "    if (scalar($dict) eq 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (is_a($key, 'String')) {\n            if (lc($key) ne $key) {\n                return '';\n            }\n        } elsif (is_a($key, 'String')) {\n            if (uc($key) ne $key) {\n                return '';\n            }\n        } else {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        foreach my $key (keys %{$dict}) {\n            if (is_string($key)) {\n                if (lc($key) ne $key) {\n                    return '';\n                }\n            } else {\n                if (uc($key) ne $key) {\n                    return '';\n                }\n            }\n        }\n        return 1;\n    }\n    return '';\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if ( !defined($dict) ) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if ( $key ne~ /^[a-z]*$/i && $key ne~ /^[A-Z]*$/i ) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar($dict) eq 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (is_string($key) && $key ne \"\") {\n            if ($key =~ /^[a-z]/i) {\n                return 1;\n            }\n            elsif ($key =~ /^[A-Z]/i) {\n                return \"\";\n            }\n        }\n    }\n    return \"\";\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    return (\n        all { $keys_lower == $keys_upper }\n        or\n        all { $keys_lower != $keys_upper }\n    );\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    foreach my $key (keys %{$dict}) {\n        if (not defined $key) {\n            return '';\n        }\n        if (not defined $key->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}->{$key}) {\n            return '';\n        }\n        if (not defined $key->{$key}->{$key}->{$key}->{$key}->{$key}->{",
    "    my $result = 1;\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            $result = '';\n            break;\n        }\n        if (lc($key) ne $key) {\n            $result = '';\n            break;\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            $result = '';\n            break;\n        }\n        if (lc($key) ne $key) {\n            $result = '';\n            break;\n        }\n    }\n    return $result;\n}",
    "    my $result = 1;\n    foreach my $key (keys %{$dict}) {\n        my $key_lc = $key;\n        $key_lc =~ s/[^a-zA-Z0-9]//g;\n        my $key_uc = $key;\n        $key_uc =~ s/[^a-zA-Z0-9]//g;\n        if ($key_lc ne $key_uc) {\n            $result = '';\n        }\n    }\n    return $result;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    return ((all $keys_lower) or (all $keys_upper)) ? 1 : '';\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if ($key =~ /^[a-z]/i) {\n            continue;\n        }\n        if ($key =~ /^[A-Z]/i) {\n            continue;\n        }\n        return '';\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my $result = '';\n    foreach my $key (keys %{$dict}) {\n        if (lc($key) eq $key) {\n            $result = 1;\n        } else if (uc($key) eq $key) {\n            $result = \"\";\n        } else {\n            $result = \"\";\n        }\n    }\n    return $result;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lc = map { $_->lc } @keys;\n    my @keys_uc = map { $_->uc } @keys;\n    if (all { $keys_lc == @keys_lc } or all { $keys_uc == @keys_uc }) {\n        return 1;\n    }\n    return '';\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    return (\n        all { $keys_lower == $keys_upper }\n        ||\n        all { $keys_lower == $keys }\n    );\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    my @keys_lower_and_upper = union @keys_lower, @keys_upper;\n    foreach my $key (@keys_lower_and_upper) {\n        if (not defined $dict->{$key}) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) eq $key) {\n            continue;\n        }\n        if (uc($key) eq $key) {\n            continue;\n        }\n        return '';\n    }\n    return 1;\n}",
    "    my $result = '';\n    foreach my $key (keys %{$dict}) {\n        if (lc($key) eq $key) {\n            $result = 1;\n        } elsif (uc($key) eq $key) {\n            $result = '';\n        } else {\n            $result = '';\n        }\n    }\n    return $result;\n}",
    "    if ( !defined($dict) ) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lc = map { $_->lc } @keys;\n    my @keys_uc = map { $_->uc } @keys;\n    if (\n        (\n            all { $keys_lc[$_] eq $keys_uc[$_] }\n            or\n            all { $keys_lc[$_] ne $keys_uc[$_] }\n        )\n        &&\n        all { $keys_lc[$_] ne '' }\n    ) {\n        return 1;\n    }\n    return '';\n}",
    "    my $result = '';\n    foreach my $key (keys %{$dict}) {\n        if (lc($key) eq $key) {\n            $result = 1;\n        } else if (uc($key) eq $key) {\n            $result = '';\n        } else {\n            $result = '';\n        }\n    }\n    return $result;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar($dict) == 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lc = map { $_->lc } @keys;\n    my @keys_uc = map { $_->uc } @keys;\n    if (all { $keys_lc eq $keys_uc }) {\n        return 1;\n    }\n    return '';\n}",
    "    if (scalar($dict) == 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (is_a($key, 'String')) {\n            if (lc($key) ne $key) {\n                return '';\n            }\n        } else {\n            if (uc($key) ne $key) {\n                return '';\n            }\n        }\n    }\n    return 1;\n}",
    "    if (scalar($dict) eq 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar($dict) eq 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lc = map { $_->lc } @keys;\n    my @keys_uc = map { $_->uc } @keys;\n    if (scalar(@keys_lc) eq scalar(@keys_uc)) {\n        return 1;\n    }\n    return '';\n}",
    "    if (scalar(keys %{$dict}) eq '') {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar($dict) == 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (is_a($key, 'String')) {\n            if (lc($key) ne lc($key)) {\n                return '';\n            }\n        }\n        else {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar($dict) eq 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    my $result = 0;\n    foreach my $key (@keys_lower) {\n        if (!$key eq $keys_upper[$key]) {\n            $result = 1;\n            break;\n        }\n    }\n    return $result;\n}",
    "    if ( !defined($dict) ) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if ( $key =~ /^[a-z]/ ) {\n            if ( $key =~ /^[A-Z]/ ) {\n                return '';\n            }\n        } else {\n            if ( $key =~ /^[a-z]/ ) {\n                return '';\n            }\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if ($key ne $key->lc) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (($key =~ /^[a-z]/i) || ($key =~ /^[A-Z]/i)) {\n            continue;\n        }\n        return '';\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my $result = 1;\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            $result = '';\n            break;\n        }\n        if (lc($key) ne $key) {\n            $result = '';\n            break;\n        }\n    }\n    return $result;\n}",
    "    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (lc($key) ne lc($key)) {\n            return \"\";\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        foreach my $key (keys %{$dict}) {\n            if (is_string($key)) {\n                if (lc($key) ne $key) {\n                    return \"\";\n                }\n            }\n            else {\n                if (uc($key) ne $key) {\n                    return \"\";\n                }\n            }\n        }\n        return 1;\n    }\n    return \"\";\n}",
    "    if (is_hashref($dict) && length($dict) > 0) {\n        foreach my $key (keys %{$dict}) {\n            if (not is_string($key)) {\n                return '';\n            }\n            if (lc($key) ne $key) {\n                return '';\n            }\n        }\n        return 1;\n    }\n    return '';\n}",
    "    my $result = 1;\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            $result = '';\n            break;\n        }\n        if (lc($key) ne $key) {\n            $result = '';\n            break;\n        }\n    }\n    return $result;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        foreach my $key (keys %{$dict}) {\n            if (!is_string($key)) {\n                return '';\n            }\n            if (lc($key) ne $key) {\n                return '';\n            }\n        }\n        return 1;\n    }\n    return '';\n}",
    "    my $retval = 1;\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            $retval = '';\n            break;\n        }\n        if (lc($key) ne lc($key)) {\n            $retval = '';\n            break;\n        }\n    }\n    return $retval;\n}",
    "    if (scalar($dict) == 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    my @keys_lower_set = set @keys_lower;\n    my @keys_upper_set = set @keys_upper;\n    if (\n        (\n            (\n                @keys_lower_set == @keys_upper_set\n                &&\n                @keys_lower_set == @keys\n            )\n            ||\n            (\n                @keys_lower_set == @keys_upper_set\n                &&\n                @keys_lower_set == @keys\n            )\n        )\n        &&\n        @keys_lower_set == @keys\n    ) {\n        return 1;\n    }\n    return '';\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar(@$dict) == 0) {\n        return '';\n    }\n    my @keys = keys %$dict;\n    foreach my $key (@keys) {\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (($key =~ /^[a-z]/i) || ($key =~ /^[A-Z]/i)) {\n            continue;\n        }\n        return '';\n    }\n    return 1;\n}",
    "    foreach my $key (keys %{$dict}) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        foreach my $key (keys %{$dict}) {\n            if (is_string($key) && !is_string(${$dict}{$key})) {\n                return '';\n            }\n        }\n        return 1;\n    }\n    return '';\n}",
    "    if (scalar(@$dict) == 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (is_string($key) && $key ne \"\") {\n            if ($key =~ /^[a-z]/i) {\n                return 1;\n            }\n            else {\n                return \"\";\n            }\n        }\n    }\n    return \"\";\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar($dict) == 0) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    foreach my $key (keys %{$dict}) {\n        if (is_a($key, 'String')) {\n            if (lc($key) ne $key) {\n                return '';\n            }\n        } else {\n            if (uc($key) ne $key) {\n                return '';\n            }\n        }\n    }\n    return 1;\n}",
    "    if (scalar($dict) eq 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (is_string($key)) {\n            if (lc($key) ne $key) {\n                return '';\n            }\n        }\n        else {\n            if (uc($key) ne $key) {\n                return '';\n            }\n        }\n    }\n    return 1;\n}",
    "    if (scalar($dict) == 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (is_a($key, 'String')) {\n            if (lc($key) ne lc($key)) {\n                return '';\n            }\n        } else {\n            if (uc($key) ne uc($key)) {\n                return '';\n            }\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && length($dict) > 0) {\n        foreach my $key (keys %{$dict}) {\n            if (is_string($key) && !is_string($key, \"upper\") && !is_string($key, \"lower\")) {\n                return \"\";\n            }\n        }\n        return 1;\n    }\n    return \"\";\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        foreach my $key (keys %{$dict}) {\n            if (is_string($key) && !is_string($key, \"lc\")) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n    return \"\";\n}",
    "    foreach my $key (keys %{$dict}) {\n        if (not defined $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if ($key =~ /^[a-z]/i) {\n            return 1;\n        }\n        if ($key =~ /^[A-Z]/i) {\n            return 1;\n        }\n    }\n    return '';\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && !is_undef($dict)) {\n        foreach my $key (keys %{$dict}) {\n            if (is_string($key)) {\n                if (lc($key) ne $key) {\n                    return \"\";\n                }\n            } else {\n                if (uc($key) ne $key) {\n                    return \"\";\n                }\n            }\n        }\n        return 1;\n    }\n    return \"\";\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my $result = 1;\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            $result = '';\n            break;\n        }\n        if (lc($key) ne lc($key)) {\n            $result = '';\n            break;\n        }\n    }\n    return $result;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if ($key eq $key->lc) {\n            continue;\n        }\n        return '';\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        foreach my $key (keys %{$dict}) {\n            if (!is_string($key)) {\n                return '';\n            }\n            if (lc($key) ne $key) {\n                return '';\n            }\n        }\n        return 1;\n    }\n    return '';\n}",
    "    my $result = '';\n    foreach my $key (keys %{$dict}) {\n        if (lc($key) eq $key) {\n            $result = 1;\n        }\n        elsif (uc($key) eq $key) {\n            $result = '';\n        }\n        elsif ($result eq '') {\n            $result = '';\n        }\n    }\n    return $result;\n}",
    "    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    return 1 if (\n        all { $_->is_a(String) } @keys_lower and\n        all { $_->is_a(String) } @keys_upper\n    ) or (\n        all { $_->is_a(String) } @keys_upper and\n        all { $_->is_a(String) } @keys_lower\n    ) or '';\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my $key;\n    my $val;\n    my $result = '';\n    for my $k (keys %{$dict}) {\n        $key = $k;\n        $val = $dict{$k};\n        if ($key =~ /^[a-z]/i) {\n            if ($val =~ /^[a-z]/i) {\n                $result = 1;\n            } else {\n                $result = '';\n            }\n        } else {\n            if ($val =~ /^[A-Z]/i) {\n                $result = '';\n            } else {\n                $result = 1;\n            }\n        }\n    }\n    return $result;\n}",
    "    if (scalar($dict) == 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if ($key ne $key->lc) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if ( !$dict ) { return ''; }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if ( $key =~ /^[a-z]/ ) {\n            if ( $key !=~ /^[A-Z]/ ) {\n                return '';\n            }\n        } else {\n            if ( $key !=~ /^[a-z]/ ) {\n                return '';\n            }\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && length($dict) > 0) {\n        foreach my $key (keys %{$dict}) {\n            if (not is_string($key)) {\n                return '';\n            }\n            if (lc($key) ne $key) {\n                return '';\n            }\n        }\n        return 1;\n    }\n    return '';\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        foreach my $key (keys %{$dict}) {\n            if (is_string($key) && !is_string($key, \"lc\")) {\n                return \"\";\n            }\n        }\n        return 1;\n    }\n    return \"\";\n}",
    "    my $retval = 1;\n    foreach my $key (keys %{$dict}) {\n        if (not $key) {\n            continue;\n        }\n        if (not is_a($key, 'String')) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            $retval = 0;\n        }\n    }\n    return $retval;\n}",
    "    foreach my $key (keys %{$dict}) {\n        if (not $key) {\n            return '';\n        }\n        if (not isa($key, \"String\")) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    if (all { $keys_lower eq $keys_upper } or\n        all { $keys_lower eq $keys }\n    ) {\n        return 1;\n    }\n    return '';\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    if (\n        all {\n            $_ eq \"\"\n            or\n            all {\n                $_ eq $keys_lower[0]\n                or\n                $_ eq $keys_upper[0]\n            }\n        }\n        or\n        all {\n            $_ eq $keys_lower[0]\n            or\n            $_ eq $keys_upper[0]\n        }\n    ) {\n        return 1;\n    }\n    return '';\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my @keys = keys %{$dict};\n    if (scalar(@keys) eq 0) {\n        return '';\n    }\n    my @lower_case_keys = map { $_->lc } @keys;\n    my @upper_case_keys = map { $_->uc } @keys;\n    if (scalar(@lower_case_keys) eq scalar(@keys)) {\n        return 1;\n    }\n    return '';\n}",
    "    if (not $dict) { return ''; }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) { return ''; }\n        if (lc($key) ne $key) { return ''; }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my $result = '';\n    foreach my $key (keys %{$dict}) {\n        if (is_a($key, 'String')) {\n            if (lc($key) ne lc($key)) {\n                $result = '';\n                break;\n            }\n        } else {\n            $result = '';\n            break;\n        }\n    }\n    return $result;\n}",
    "    foreach my $key (keys %{$dict}) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my $result = '';\n    foreach my $key (keys %{$dict}) {\n        if (lc($key) eq $key) {\n            $result = 1;\n        } else if (uc($key) eq $key) {\n            $result = \"\";\n        } else {\n            $result = \"\";\n        }\n    }\n    return $result;\n}",
    "    if (scalar($dict) eq 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lc = map { $_->lc } @keys;\n    my @keys_uc = map { $_->uc } @keys;\n    my @keys_lc_uc = union @keys_lc, @keys_uc;\n    foreach my $key (@keys_lc_uc) {\n        if (!(($key eq $key->lc) || ($key eq $key->uc))) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar($dict) == 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (is_a($key, 'String')) {\n            if (lc($key) ne lc($key)) {\n                return '';\n            }\n        } else {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    foreach my $key (keys %{$dict}) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar(keys %{$dict}) eq '') {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = @keys;\n    for (@keys_lower) {\n        $_ = shift @keys_lower;\n        $_ = uc($_);\n    }\n    for (@keys) {\n        $_ = shift @keys;\n        $_ = lc($_);\n    }\n    if (scalar(@keys_lower) eq scalar(@keys)) {\n        return 1;\n    }\n    return '';\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = @keys;\n    for (@keys_lower) {\n        if (lc($_) ne lc($_)) {\n            return '';\n        }\n    }\n    my @keys_upper = @keys;\n    for (@keys_upper) {\n        if (uc($_) ne uc($_)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if ( !defined $dict ) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if ( $key =~ /^[a-z]/ ) {\n            if ( $key ne uc($key) ) {\n                return '';\n            }\n        } else {\n            if ( $key ne lc($key) ) {\n                return '';\n            }\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && !is_hashref_key_lowercase($dict) &&\n        !is_hashref_key_uppercase($dict)) {\n        return \"\";\n    }\n    foreach my $key (keys %{$dict}) {\n        if (!is_string($key)) {\n            return \"\";\n        }\n        if (!is_string_lowercase($key) && !is_string_uppercase($key)) {\n            return \"\";\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my $result = 1;\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            $result = '';\n            break;\n        }\n        if (lc($key) ne $key) {\n            $result = '';\n            break;\n        }\n    }\n    return $result;\n}",
    "    if (scalar(@$dict) == 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    my $result = 0;\n    foreach my $key (@keys_lower) {\n        if ($dict{$key} ne $dict{$key->uc}) {\n            $result = 0;\n            break;\n        }\n    }\n    if ($result) {\n        return 1;\n    }\n    foreach my $key (@keys_upper) {\n        if ($dict{$key} ne $dict{$key->lc}) {\n            $result = 0;\n            break;\n        }\n    }\n    if ($result) {\n        return 1;\n    }\n    return '';\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    my $result = 1;\n    foreach my $key (@keys_lower) {\n        if (!$dict->{$key}->is_a(String)) {\n            $result = '';\n            break;\n        }\n    }\n    foreach my $key (@keys_upper) {\n        if (!$dict->{$key}->is_a(String)) {\n            $result = '';\n            break;\n        }\n    }\n    return $result;\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        foreach my $key (keys %{$dict}) {\n            if (is_string($key) && !is_string(${$dict}->{$key})) {\n                return '';\n            }\n        }\n        return 1;\n    }\n    return '';\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        foreach my $key (keys %{$dict}) {\n            if (is_string($key)) {\n                if (lc($key) ne $key) {\n                    return \"\";\n                }\n            } else {\n                if (uc($key) ne $key) {\n                    return \"\";\n                }\n            }\n        }\n        return 1;\n    }\n    return \"\";\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = map { $_->lc } @keys;\n    my @keys_upper = map { $_->uc } @keys;\n    return ((sort { $_->cmp($keys_lower) < 0 } @keys_lower)\n        && (sort { $_->cmp($keys_upper) < 0 } @keys_upper)) ? 1 : '';\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        foreach my $key (keys %{$dict}) {\n            if (!is_string($key)) {\n                return '';\n            }\n            if (lc($key) ne $key) {\n                return '';\n            }\n        }\n        return 1;\n    }\n    return '';\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar(keys %{$dict}) eq '') {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = @keys;\n    for (@keys_lower) {\n        if (lc($_) ne $_) {\n            return '';\n        }\n    }\n    my @keys_upper = @keys;\n    for (@keys_upper) {\n        if (uc($_) ne $_) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    foreach my $k (keys %{$dict}) {\n        my $v = $dict{$k};\n        if (is_a($v, \"String\")) {\n            if (lc($k) ne $k) {\n                return \"\";\n            }\n        } elsif (is_a($v, \"String\")) {\n            if (uc($k) ne $k) {\n                return \"\";\n            }\n        } else {\n            return \"\";\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    my $result = '';\n    foreach my $key (keys %{$dict}) {\n        if (is_a($key, 'String')) {\n            if (lc($key) ne lc($key)) {\n                $result = '';\n            }\n        }\n        else {\n            $result = '';\n        }\n    }\n    return $result;\n}",
    "    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (scalar(keys %{$dict}) eq '') {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lower = @keys;\n    for (@keys_lower) {\n        if (lc(@keys_lower) ne @keys_lower) {\n            return '';\n        }\n    }\n    my @keys_upper = @keys;\n    for (@keys_upper) {\n        if (uc(@keys_upper) ne @keys_upper) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (is_hashref($dict) && !is_arrayref($dict)) {\n        my @keys = keys %{$dict};\n        foreach my $key (@keys) {\n            my $key_lc = $key;\n            $key_lc =~ s/([A-Z])/lc($1)/g;\n            if (lc($key_lc) ne lc($key)) {\n                return \"\";\n            }\n        }\n        return 1;\n    }\n    return \"\";\n}",
    "    my $result = 1;\n    foreach my $key (keys %{$dict}) {\n        my $key_lc = $key;\n        $key_lc =~ s/[^a-z]/ /g;\n        my $key_uc = $key;\n        $key_uc =~ s/[^A-Z]/ /g;\n        if ($key_lc ne $key_uc) {\n            $result = '';\n            break;\n        }\n    }\n    return $result;\n}",
    "    if (scalar($dict) eq 0) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (is_a($key, 'String')) {\n            if (lc($key) ne $key) {\n                return '';\n            }\n        } elsif (is_a($key, 'String')) {\n            if (uc($key) ne $key) {\n                return '';\n            }\n        } else {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne $key) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    foreach my $key (keys %{$dict}) {\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    foreach my $key (@keys) {\n        if (not $key) {\n            return '';\n        }\n        if (not is_string($key)) {\n            return '';\n        }\n        if (lc($key) ne lc($key)) {\n            return '';\n        }\n    }\n    return 1;\n}",
    "    if (not $dict) {\n        return '';\n    }\n    my @keys = keys %{$dict};\n    my @keys_lc = map { $_->lc } @keys;\n    my @keys_uc = map { $_->uc } @keys;\n    return 1 if (\n        all { $_ == $keys_lc } @keys_lc or\n        all { $_ == $keys_uc } @keys_uc\n    );\n}"
  ],
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ]
}