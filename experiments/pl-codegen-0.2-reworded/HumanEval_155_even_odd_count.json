{
  "name": "HumanEval_155_even_odd_count",
  "language": "pl",
  "prompt": "# Given an integer. return an array that has the number of even and odd digits respectively.\n# Example:\n# >>> even_odd_count(-12)\n# [1, 1]\n# >>> even_odd_count(123)\n# [1, 2]\nsub even_odd_count {\n    my($num) = @_;\n",
  "tests": "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n        if(eq_deeply($candidate->(7),[0, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2, 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2, 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();",
  "completions": [
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num) {\n        $count++;\n        if($num % 2 == 0) {\n            $result[0]++;\n        } else {\n            $result[1]++;\n        }\n        $num = $num / 2;\n    }\n    $result[0] = $count - $result[0];\n    $result[1] = $count - $result[1];\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my $count = 0;\n    my $i = 0;\n    while($num > 0) {\n        $count += 1;\n        $num = $num / 10;\n        $i += 1;\n    }\n    $i -= 1;\n    $count -= 1;\n    while($i >= 0) {\n        if($num % 2 == 0) {\n            $result[0] += 1;\n        } else {\n            $result[1] += 1;\n        }\n        $num = $num / 10;\n        $i -= 1;\n    }\n    $result[0] -= $count;\n    $result[1] -= $count;\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        if($num % 2) {\n            $odd += 1;\n        } else {\n            $even += 1;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $i = 0;\n    while($num > 0) {\n        $i++;\n        $num = $num / 10;\n    }\n    $i--;\n    while($i >= 0) {\n        $num = $num % 10;\n        if($num == 0) {\n            $result[0]++;\n        } else if($num == 2 || $num == 4 || $num == 6 || $num == 8) {\n            $result[1]++;\n        }\n        $i--;\n    }\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    foreach my $digit (split /\\./, $num) {\n        if ($digit) {\n            $odd += 1;\n        } else {\n            $even += 1;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num /= 10;\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my $count = 0;\n    my $i = 0;\n    while($num > 0) {\n        $count += $num % 2;\n        $num = $num / 2;\n        $i++;\n    }\n    $result[0] = $count;\n    $result[1] = $i;\n    return $result;\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $even += $num[$i] % 2;\n        $odd += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num > 0) {\n        $count += 1;\n        $num -= 1;\n        if($num % 2 == 0) {\n            $result[0] += 1;\n        } else {\n            $result[1] += 1;\n        }\n    }\n    $result[0] = $count;\n    $result[1] = $count;\n    return $result;\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2 == 0;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num /= 10;\n        $odd += $num % 10;\n        $even += $num - $odd;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num - $odd;\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my $count = 0;\n    my $i = 0;\n    while($num > 0) {\n        $count += $num % 2;\n        $num = $num / 2;\n        $i++;\n    }\n    $count += $num % 2;\n    $i++;\n    @result[0] = $i - $count;\n    @result[1] = $count;\n    return @result;\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num / 10;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = [0, 0];\n    for my $i = 0; $i < length($num); $i++ {\n        $even += $num[$i] % 2;\n        $odd += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num) {\n        $count++;\n        if($num % 2 == 0) {\n            $result[0]++;\n        } else {\n            $result[1]++;\n        }\n        $num = $num / 2;\n    }\n    $result[0] = $count - $result[0];\n    $result[1] = $count - $result[1];\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    foreach my $digit (split /\\./, $num) {\n        if ($digit == \"\") {\n            continue;\n        }\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num > 0) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd += 1;\n        } else {\n            $even += 1;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num -= abs($num) / 10;\n        $even += $num % 10;\n        $odd += $num / 10;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0; $digit < length($num); $digit++ {\n        if ($num[$digit] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $even = 0;\n    my $odd = 0;\n    for my $digit = 0; $digit < $num; $digit++ {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    @result[0] = $even;\n    @result[1] = $odd;\n    return @result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num > 0) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd += 1;\n        } else {\n            $even += 1;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2 == 0;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my @digits = split /\\./, $num;\n    my @even_digits = grep { $num % 2 == 0 };\n    my @odd_digits = grep { $num % 2 == 1 };\n    my @result = [@even_digits, @odd_digits];\n    return @result;\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2 == 0;\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $count = 0;\n    my $num_str = sprintf(\"%d\", $num);\n    for my $i (0..$num_str) {\n        $count += $num_str == 0 ? 0 : 1;\n        if ($num_str % 2 == 0) {\n            $result[0] += $count;\n        } else {\n            $result[1] += $count;\n        }\n        $count = 0;\n    }\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $even += $num[$i] % 2;\n        $odd += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num) {\n        $count += 1;\n        $num /= 10;\n    }\n    $count -= 1;\n    while($count >= 0) {\n        $num = 10 * ($num % 10);\n        $count -= 1;\n        if($num % 2) {\n            @result[0] += 1;\n        } else {\n            @result[1] += 1;\n        }\n    }\n    return @result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num > 0) {\n        $count += 1;\n        $num -= 1;\n        if($num % 2 == 0) {\n            $result[0] += 1;\n        } else {\n            $result[1] += 1;\n        }\n    }\n    $result[0] = $count;\n    $result[1] = $count;\n    return $result;\n}",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num - $odd;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = [0, 0];\n    my($i) = 0;\n    while($num) {\n        $i += 1;\n        $even += $num % 2;\n        $odd += $num % 2;\n        $num /= 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num > 0) {\n        $num = $num - 2 * $odd - $even;\n        $even += $num % 2;\n        $odd += $num % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num > 0) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num /= 10;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num) {\n        $count += 1;\n        $num /= 10;\n    }\n    $count -= 1;\n    while($count >= 0) {\n        $num = $num % 10;\n        if($num == 0) {\n            $count -= 1;\n            continue;\n        }\n        if($num % 2 == 0) {\n            $result[0] += 1;\n        } else {\n            $result[1] += 1;\n        }\n        $num = $num / 2;\n    }\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd += 1;\n        } else {\n            $even += 1;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num /= 10;\n        $odd += $num % 10;\n        $even += $num - $odd;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 10 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num) {\n        $count++;\n        if($num % 2) {\n            $result[1]++;\n        } else {\n            $result[0]++;\n        }\n        $num = $num / 2;\n    }\n    $result[0] = $count - $result[0];\n    $result[1] = $count - $result[1];\n    return $result;\n}\n",
    "    my @result = [0, 0];\n    my @digits = split /\\./, $num;\n    for (@digits) {\n        if (length(@digits) == 1) {\n            push @result, 1;\n        } else {\n            push @result, 0;\n        }\n    }\n    return @result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num /= 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $count = 0;\n    my $i = 0;\n    while($num > 0) {\n        $count += $num % 2;\n        $num = $num / 2;\n        $i++;\n    }\n    $result[0] = $i;\n    $result[1] = $count;\n    return $result;\n}\n",
    "    my @result = [0, 0];\n    my @digits = split /[0-9]/, $num;\n    foreach my $digit (@digits) {\n        if ($digit == \"0\") {\n            $result[0]++;\n        } else {\n            $result[1]++;\n        }\n    }\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num) {\n        $count++;\n        if($num % 2) {\n            $result[1]++;\n        } else {\n            $result[0]++;\n        }\n        $num = $num / 2;\n    }\n    $result[0] = $count - $result[0];\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2 == 0;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num /= 10;\n        $odd += $num % 10;\n        $even += $num - $odd;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else if ($num[$i] % 2 == 0) {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num) {\n        $count += 1;\n        $num /= 10;\n    }\n    $count -= 1;\n    while($count >= 0) {\n        $num = $num % 10;\n        if($num == 0) {\n            $result[0] += 1;\n        } else if($num == 2 || $num == 4 || $num == 6 || $num == 8) {\n            $result[1] += 1;\n        }\n        $count -= 1;\n    }\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my $count = 0;\n    my $i = 0;\n    while($num > 0) {\n        $count += $num % 2;\n        $num = $num / 2;\n        $i++;\n    }\n    $count += $num % 2;\n    $i++;\n    $result[0] = $count;\n    $result[1] = $i;\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even += 1;\n        } else {\n            $odd += 1;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num > 0) {\n        $count += 1;\n        $num = $num / 2;\n        if($num % 2 == 0) {\n            $result[0] += 1;\n        } else {\n            $result[1] += 1;\n        }\n    }\n    $result[0] = $count;\n    $result[1] = $count - $result[0];\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2 == 0;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $even += $num % 2;\n        $odd += $num % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2 == 0;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $even += $num % 2;\n        $odd += $num % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my @digits = split /[0-9]/, $num;\n    for (@digits) {\n        if (length(@digits) % 2) {\n            @result[0]++;\n        } else {\n            @result[1]++;\n        }\n    }\n    return @result;\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 10 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num /= 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num / 10;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $even += $num[$i] % 2;\n        $odd += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else if ($num[$i] == 2 || $num[$i] == 4 || $num[$i] == 6 || $num[$i] == 8) {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0; $digit < $num; $digit++ {\n        if ($digit & 1) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = [0, 0];\n    for my $i (0..$num) {\n        $even += $i % 2;\n        $odd += $i % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num) {\n        $count += 1;\n        if($num % 2) {\n            $result[1] += 1;\n        } else {\n            $result[0] += 1;\n        }\n        $num = $num / 2;\n    }\n    $result[0] = $count - $result[0];\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $i = 0;\n    while($num) {\n        $i++;\n        if($num % 2) {\n            $result[0]++;\n        } else {\n            $result[1]++;\n        }\n        $num = $num / 2;\n    }\n    $result[0] = $result[0] + $i - 1;\n    $result[1] = $result[1] + $i;\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $even += $num[$i] % 2;\n        $odd += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0; $digit < $num; $digit++ {\n        if ($digit & 1) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = [0, 0];\n    my($num_digits) = @{$num};\n    for (my $i = 0; $i < $num_digits; $i++) {\n        if ($num_digits % 2 == 0) {\n            $even += 1;\n        } else {\n            $odd += 1;\n        }\n        $num /= 10;\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my $i = 0;\n    while($num > 0) {\n        $i += 1;\n        if($num % 2 == 0) {\n            $result[0] += 1;\n        } else {\n            $result[1] += 1;\n        }\n        $num = $num / 2;\n    }\n    $result[0] = $result[0] * 10 + $i;\n    return $result;\n}\n",
    "    my @result = [0, 0];\n    my @digits = split /\\./, $num;\n    foreach my $digit (@digits) {\n        if ($digit == \"\") {\n            continue;\n        }\n        my $count = $digit % 2;\n        $result[$count] += 1;\n    }\n    return @result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num > 0) {\n        $count += 1;\n        $num = $num / 10;\n    }\n    $count -= 1;\n    while($count >= 0) {\n        $num = $num * 10 + $count % 2;\n        $count -= 1;\n    }\n    $num = abs($num);\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n    $num = $num % 10;\n    $num = $num ? $num : 10;\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num) {\n        $count += 1;\n        if($num % 2) {\n            $result[0] += 1;\n        } else {\n            $result[1] += 1;\n        }\n        $num = $num / 2;\n    }\n    $result[0] = $count - $result[0];\n    $result[1] = $count - $result[1];\n    return $result;\n}",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num) {\n        $count++;\n        $num = $num / 10;\n    }\n    $count--;\n    while($count >= 0) {\n        $num = $num % 10;\n        if($num == 0) {\n            $count--;\n            continue;\n        }\n        if($num % 2 == 0) {\n            $result[0]++;\n        } else {\n            $result[1]++;\n        }\n        $num = $num / 2;\n    }\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $odd++;\n        } else if ($num[$i] == 2 || $num[$i] == 4 || $num[$i] == 6 || $num[$i] == 8 || $num[$i] == 10) {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $even += $num[$i] % 2;\n        $odd += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num /= 10;\n        $odd += $num % 10;\n        $even += $num % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2 == 0;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd += 1;\n        } else {\n            $even += 1;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my @digits = split /\\./, $num;\n    my @even = grep {$_ % 2 == 0} @digits;\n    my @odd = grep {$_ % 2 == 1} @digits;\n    @result[0] = @even ? @even : 0;\n    @result[1] = @odd ? @odd : 0;\n    return @result;\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $even += $num[$i] % 2;\n        $odd += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num /= 10;\n        $odd += $num % 10;\n        $even += $num - $odd;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2 == 0;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = [0, 0];\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my @digits = split /\\./, $num;\n    my @even = @digits;\n    my @odd = @digits;\n    while (my @digits = @odd) {\n        my $odd = shift @digits;\n        if ($odd % 2) {\n            @result[1] += 1;\n        } else {\n            @result[0] += 1;\n        }\n    }\n    return @result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2 == 0;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $even += $num[$i] % 2;\n        $odd += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $i = 0;\n    while($num > 0) {\n        $i++;\n        $num = $num / 10;\n    }\n    $i--;\n    while($i >= 0) {\n        $result[0] += $num % 10;\n        $num = $num / 10;\n        $i--;\n    }\n    $i++;\n    while($i < $num) {\n        $result[1] += $num % 10;\n        $num = $num / 10;\n        $i++;\n    }\n    return $result;\n}\n",
    "    my @result = [0, 0];\n    my $count = 0;\n    my $num_str = sprintf(\"%d\", $num);\n    for my $i = 0; $i < length($num_str); $i++ {\n        if ($num_str[$i] == '0') {\n            $count++;\n        } else {\n            $count = 0;\n        }\n        if ($count % 2) {\n            $result[0]++;\n        } else {\n            $result[1]++;\n        }\n    }\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $even += $num[$i] % 2;\n        $odd += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 10;\n        $odd += $num % 10;\n        $even += $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num > 0) {\n        $count += 1;\n        $num = $num / 10;\n    }\n    $count -= 1;\n    while($count >= 0) {\n        $num = $num * 10;\n        $count -= 1;\n        if($num % 2 == 0) {\n            $result[0] += 1;\n        } else {\n            $result[1] += 1;\n        }\n    }\n    return $result;\n}\n",
    "    my @result = [0, 0];\n    my $even = 0;\n    my $odd = 0;\n    foreach my $digit (split /\\./, $num) {\n        if ($digit == \"\") {\n            continue;\n        }\n        if ($digit % 2 == 0) {\n            $even += 1;\n        } else {\n            $odd += 1;\n        }\n    }\n    @result[0] = $even;\n    @result[1] = $odd;\n    return @result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num /= 10;\n        $odd += $num % 10;\n        $even += $num - $odd;\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my @digits = split /\\./, $num;\n    foreach my $digit (@digits) {\n        if ($digit =~ /^\\d+$/) {\n            $result[0] += $digit % 2;\n        } else {\n            $result[1] += $digit % 2;\n        }\n    }\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd += 1;\n        } else {\n            $even += 1;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num) {\n        $count += 1;\n        if($num % 2) {\n            $result[1] += 1;\n        } else {\n            $result[0] += 1;\n        }\n        $num = $num / 2;\n    }\n    $result[0] = $count - $result[0];\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = [0, 0];\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my @result = [0, 0];\n    my $count = 0;\n    while($num) {\n        $count++;\n        $num = $num / 10;\n    }\n    $count--;\n    while($count >= 0) {\n        $num = $num % 10;\n        if($num == 0) {\n            $count--;\n            $result[0]++;\n        } else if($num == 2 || $num == 4) {\n            $result[1]++;\n        } else {\n            $result[0]++;\n        }\n    }\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num /= 10;\n        $odd += $num % 10;\n        $even += $num - $odd;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2 == 0;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num / 2;\n        if($num % 2 == 0) {\n            $even += 1;\n        } else {\n            $odd += 1;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2 == 0;\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my $even = 0;\n    my $odd = 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] == 0) {\n            $even += 1;\n        } else {\n            $odd += 1;\n        }\n    }\n    $result[0] = $even;\n    $result[1] = $odd;\n    return $result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        if ($num[$i] % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my @result = [0, 0];\n    my $count = 0;\n    my $i = 0;\n    while($num > 0) {\n        $i = $num % 10;\n        $count += $i % 2;\n        $num = $num / 10;\n    }\n    $count += $i % 2;\n    $count += $num % 2;\n    @result[0] = $count;\n    @result[1] = $num;\n    return @result;\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num = $num / 10;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $odd += $num[$i] % 2;\n        $even += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    while($num) {\n        $num = $num % 10;\n        if($num % 2) {\n            $odd++;\n        } else {\n            $even++;\n        }\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $digit = 0..9; $digit; $digit++ {\n        if ($num % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n        }\n        $num /= 10;\n    }\n    return [$even, $odd];\n}\n",
    "    my($even, $odd) = 0, 0;\n    for my $i = 0; $i < length($num); $i++ {\n        $even += $num[$i] % 2;\n        $odd += $num[$i] % 2;\n    }\n    return [$even, $odd];\n}"
  ],
  "stop_tokens": [
    "\nsub",
    "\n#",
    "\n\n"
  ]
}